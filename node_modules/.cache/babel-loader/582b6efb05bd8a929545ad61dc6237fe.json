{"ast":null,"code":"/*!\nCopyright (c) The Cytoscape Consortium\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the “Software”), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n;\n\n(function ($, $$) {\n  'use strict';\n\n  var isObject = function (o) {\n    return o != null && typeof o === 'object';\n  };\n\n  var isFunction = function (o) {\n    return o != null && typeof o === 'function';\n  };\n\n  var isNumber = function (o) {\n    return o != null && typeof o === 'number';\n  };\n\n  var isString = function (o) {\n    return o != null && typeof o === 'string';\n  };\n\n  var isUndef = function (o) {\n    return o === undefined;\n  };\n\n  var wrap = function (obj, target) {\n    if (isFunction(obj)) {\n      return function (event, api) {\n        return obj.apply(target, [event, api]);\n      };\n    } else {\n      return obj;\n    }\n  };\n\n  var fixDomContainer = function (ele) {\n    return ele && ele[0] === window ? undefined : ele;\n  };\n\n  var throttle = function (func, wait, options) {\n    var leading = true,\n        trailing = true;\n\n    if (options === false) {\n      leading = false;\n    } else if (isObject(options)) {\n      leading = 'leading' in options ? options.leading : leading;\n      trailing = 'trailing' in options ? options.trailing : trailing;\n    }\n\n    options = options || {};\n    options.leading = leading;\n    options.maxWait = wait;\n    options.trailing = trailing;\n    return debounce(func, wait, options);\n  };\n\n  var debounce = function (func, wait, options) {\n    // ported lodash debounce function\n    var args,\n        maxTimeoutId,\n        result,\n        stamp,\n        thisArg,\n        timeoutId,\n        trailingCall,\n        lastCalled = 0,\n        maxWait = false,\n        trailing = true;\n\n    if (!isFunction(func)) {\n      return;\n    }\n\n    wait = Math.max(0, wait) || 0;\n\n    if (options === true) {\n      var leading = true;\n      trailing = false;\n    } else if (isObject(options)) {\n      leading = options.leading;\n      maxWait = 'maxWait' in options && (Math.max(wait, options.maxWait) || 0);\n      trailing = 'trailing' in options ? options.trailing : trailing;\n    }\n\n    var delayed = function () {\n      var remaining = wait - (Date.now() - stamp);\n\n      if (remaining <= 0) {\n        if (maxTimeoutId) {\n          clearTimeout(maxTimeoutId);\n        }\n\n        var isCalled = trailingCall;\n        maxTimeoutId = timeoutId = trailingCall = undefined;\n\n        if (isCalled) {\n          lastCalled = Date.now();\n          result = func.apply(thisArg, args);\n\n          if (!timeoutId && !maxTimeoutId) {\n            args = thisArg = null;\n          }\n        }\n      } else {\n        timeoutId = setTimeout(delayed, remaining);\n      }\n    };\n\n    var maxDelayed = function () {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n\n      maxTimeoutId = timeoutId = trailingCall = undefined;\n\n      if (trailing || maxWait !== wait) {\n        lastCalled = Date.now();\n        result = func.apply(thisArg, args);\n\n        if (!timeoutId && !maxTimeoutId) {\n          args = thisArg = null;\n        }\n      }\n    };\n\n    return function () {\n      args = arguments;\n      stamp = Date.now();\n      thisArg = this;\n      trailingCall = trailing && (timeoutId || !leading);\n\n      if (maxWait === false) {\n        var leadingCall = leading && !timeoutId;\n      } else {\n        if (!maxTimeoutId && !leading) {\n          lastCalled = stamp;\n        }\n\n        var remaining = maxWait - (stamp - lastCalled),\n            isCalled = remaining <= 0;\n\n        if (isCalled) {\n          if (maxTimeoutId) {\n            maxTimeoutId = clearTimeout(maxTimeoutId);\n          }\n\n          lastCalled = stamp;\n          result = func.apply(thisArg, args);\n        } else if (!maxTimeoutId) {\n          maxTimeoutId = setTimeout(maxDelayed, remaining);\n        }\n      }\n\n      if (isCalled && timeoutId) {\n        timeoutId = clearTimeout(timeoutId);\n      } else if (!timeoutId && wait !== maxWait) {\n        timeoutId = setTimeout(delayed, wait);\n      }\n\n      if (leadingCall) {\n        isCalled = true;\n        result = func.apply(thisArg, args);\n      }\n\n      if (isCalled && !timeoutId && !maxTimeoutId) {\n        args = thisArg = null;\n      }\n\n      return result;\n    };\n  };\n\n  function register($$, $) {\n    // use a single dummy dom ele as target for every qtip\n    var $qtipContainer = $('<div></div>');\n    var viewportDebounceRate = 250;\n    $qtipContainer.css({\n      'z-index': -1,\n      'position': 'absolute'\n    });\n\n    function generateOpts(target, passedOpts) {\n      var qtip = target.scratch().qtip;\n      var opts = $.extend({}, passedOpts);\n\n      if (!opts.id) {\n        opts.id = 'cy-qtip-target-' + (Date.now() + Math.round(Math.random() * 10000));\n      }\n\n      if (!qtip.$domEle) {\n        qtip.$domEle = $qtipContainer;\n      } // qtip should be positioned relative to cy dom container\n\n\n      opts.position = opts.position || {};\n      opts.position.container = fixDomContainer(opts.position.container) || $(document.body);\n      opts.position.viewport = fixDomContainer(opts.position.viewport) || $(document.body);\n      opts.position.target = [0, 0];\n      opts.position.my = opts.position.my || 'top center';\n      opts.position.at = opts.position.at || 'bottom center'; // adjust\n\n      var adjust = opts.position.adjust = opts.position.adjust || {};\n      adjust.method = adjust.method || 'flip';\n      adjust.mouse = false; // default show event\n\n      opts.show = opts.show || {};\n\n      if (isUndef(opts.show.event)) {\n        opts.show.event = 'tap';\n      } // default hide event\n\n\n      opts.hide = opts.hide || {};\n      opts.hide.cyViewport = opts.hide.cyViewport === undefined ? true : opts.hide.cyViewport;\n\n      if (isUndef(opts.hide.event)) {\n        opts.hide.event = 'unfocus';\n      } // so multiple qtips can exist at once (only works on recent qtip2 versions)\n\n\n      opts.overwrite = false;\n\n      if (opts.content) {\n        if (isFunction(opts.content) || isString(opts.content)) {\n          opts.content = wrap(opts.content, target);\n        } else {\n          opts.content = {\n            text: wrap(opts.content.text, target),\n            title: wrap(opts.content.title, target)\n          };\n        }\n      }\n\n      return opts;\n    }\n\n    function updatePosition(ele, qtip, evt) {\n      var e = evt;\n      var isCy = isFunction(ele.pan);\n      var isEle = !isCy;\n      var isNode = isEle && ele.isNode();\n      var cy = isCy ? ele : ele.cy();\n      var cOff = cy.container().getBoundingClientRect();\n      var pos = isNode ? ele.renderedPosition() : e ? e.renderedPosition || e.cyRenderedPosition : undefined;\n\n      if (!pos || pos.x == null || isNaN(pos.x)) {\n        return;\n      }\n\n      var bb = isNode ? ele.renderedBoundingBox({\n        includeNodes: true,\n        includeEdges: false,\n        includeLabels: false,\n        includeShadows: false\n      }) : {\n        x1: pos.x - 1,\n        x2: pos.x + 1,\n        w: 3,\n        y1: pos.y - 1,\n        y2: pos.y + 1,\n        h: 3\n      };\n\n      if (qtip.$domEle.parent().length === 0) {\n        qtip.$domEle.appendTo(document.body);\n      }\n\n      qtip.$domEle.css({\n        'width': bb.w,\n        'height': bb.h,\n        'top': bb.y1 + cOff.top + window.pageYOffset,\n        'left': bb.x1 + cOff.left + window.pageXOffset,\n        'position': 'absolute',\n        'pointer-events': 'none',\n        'background': 'red',\n        'z-index': 99999999,\n        'opacity': 0.5,\n        'visibility': 'hidden'\n      });\n      qtip.api.set('position.target', qtip.$domEle);\n    }\n\n    $$('collection', 'qtip', function (passedOpts) {\n      var eles = this;\n      var cy = this.cy();\n      var container = cy.container();\n\n      if (passedOpts === 'api') {\n        var qtip = this.scratch().qtip;\n        return qtip ? qtip.api : null;\n      }\n\n      eles.each(function (ele, i) {\n        // Perform 2.x and 1.x backwards compatibility check\n        if (isNumber(ele)) {\n          ele = i;\n        }\n\n        var scratch = ele.scratch();\n        var qtip = scratch.qtip = scratch.qtip || {};\n        var opts = generateOpts(ele, passedOpts);\n        var adjNums = opts.position.adjust;\n        qtip.$domEle.qtip(opts);\n        var qtipApi = qtip.api = qtip.$domEle.qtip('api'); // save api ref\n\n        qtip.$domEle.removeData('qtip'); // remove qtip dom/api ref to be safe\n\n        updatePosition(ele, qtip);\n        ele.on(opts.show.event, function (e) {\n          updatePosition(ele, qtip, e);\n          qtipApi.show();\n        });\n        ele.on(opts.hide.event, function (e) {\n          qtipApi.hide();\n        });\n\n        if (opts.hide.cyViewport) {\n          cy.on('viewport', debounce(function () {\n            qtipApi.hide();\n          }, viewportDebounceRate, {\n            leading: true\n          }));\n        }\n\n        if (opts.position.adjust.cyViewport) {\n          cy.on('pan zoom', debounce(function (e) {\n            updatePosition(ele, qtip, e);\n            qtipApi.reposition();\n          }, viewportDebounceRate, {\n            trailing: true\n          }));\n        }\n      });\n      return this; // chainability\n    });\n    $$('core', 'qtip', function (passedOpts) {\n      var cy = this;\n      var container = cy.container();\n\n      if (passedOpts === 'api') {\n        var qtip = this.scratch().qtip;\n        return qtip ? qtip.api : null;\n      }\n\n      var scratch = cy.scratch();\n      var qtip = scratch.qtip = scratch.qtip || {};\n      var opts = generateOpts(cy, passedOpts);\n      qtip.$domEle.qtip(opts);\n      var qtipApi = qtip.api = qtip.$domEle.qtip('api'); // save api ref\n\n      qtip.$domEle.removeData('qtip'); // remove qtip dom/api ref to be safe\n\n      cy.on(opts.show.event, function (e) {\n        if (!opts.show.cyBgOnly || opts.show.cyBgOnly && (e.target === cy || e.cyTarget === cy)) {\n          updatePosition(cy, qtip, e);\n          qtipApi.show();\n        }\n      });\n      cy.on(opts.hide.event, function (e) {\n        if (!opts.hide.cyBgOnly || opts.hide.cyBgOnly && (e.target === cy || e.cyTarget === cy)) {\n          qtipApi.hide();\n        }\n      });\n\n      if (opts.hide.cyViewport) {\n        cy.on('viewport', debounce(function () {\n          qtipApi.hide();\n        }, viewportDebounceRate, {\n          leading: true\n        }));\n      }\n\n      return this; // chainability\n    });\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    // expose as a commonjs module\n    module.exports = function (cytoscape) {\n      var oldJq = window.jQuery;\n      var old$ = window.$;\n\n      var jQuery = window.jQuery = window.$ = require('jquery'); // qtip requires global jquery\n\n\n      var qtip = require('qtip2');\n\n      register(cytoscape, jQuery);\n      window.jQuery = oldJq;\n      window.$ = old$;\n    };\n  } else if (typeof define !== 'undefined' && define.amd) {\n    // expose as an amd/requirejs module\n    define('cytoscape-qtip', function () {\n      return register;\n    });\n  }\n\n  if ($ && $$) {\n    register($$, $);\n  }\n})(typeof jQuery !== 'undefined' ? jQuery : null, typeof cytoscape !== 'undefined' ? cytoscape : null);","map":null,"metadata":{},"sourceType":"script"}