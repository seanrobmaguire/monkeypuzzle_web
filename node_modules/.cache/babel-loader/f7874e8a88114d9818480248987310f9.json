{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport Tooltip from 'react-qtip';\ncytoscape.use(cola);\n\nclass CytoContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cy_data: {}\n    };\n    this.renderCytoscape = this.renderCytoscape.bind(this);\n  }\n\n  renderCytoscape() {\n    console.log('* Cytoscape.js is rendering the graph..'); //        this.cy_data = {};\n\n    this.cy = cytoscape({\n      container: document.getElementById('cy'),\n      ready: function () {\n        window.cy = this;\n      },\n      elements: cy_data,\n      style: [{\n        selector: \"node\",\n        style: {\n          \"content\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          \"width\": \"auto\",\n          \"height\": \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    }); //this.layout = this.build_cola_layout();\n    // this.layout.run();\n    // this.cy.elements(<Tooltip text=\"simple text\">Hello</Tooltip>)\n  } //close rendercytoscape\n\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return this.cy.makeLayout(cola_params);\n  }\n\n  componentDidMount() {\n    this.setState({\n      cy_data: this.props.cy_data\n    });\n    this.renderCytoscape(); // \n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"cy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default CytoContainer;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js"],"names":["React","Component","cytoscape","cola","Tooltip","use","CytoContainer","constructor","props","state","cy_data","renderCytoscape","bind","console","log","cy","container","document","getElementById","ready","window","elements","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","build_cola_layout","opts","cola_params","name","animate","randomize","padding","fit","maxSimulationTime","i","undefined","forEach","opt","makeLayout","componentDidMount","setState","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport Tooltip from 'react-qtip';\n\n\n\ncytoscape.use( cola );\n\n\nclass CytoContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state= {\n            cy_data: {\n                \n            },\n        };\n        this.renderCytoscape = this.renderCytoscape.bind(this);\n        \n    }\n\n    renderCytoscape(){\n        console.log('* Cytoscape.js is rendering the graph..');\n\n//        this.cy_data = {};\n        this.cy = cytoscape(\n        {\n\n            container: document.getElementById('cy'),\n            ready: function(){ window.cy = this; },\n            elements: cy_data,\n\n                style:[\n                {   selector: \"node\", \n                    style: {\n                        \"content\": \"data(content)\",\n                        \"text-opacity\": 0.7,\n                        \"width\" : \"auto\",\n                        \"height\" : \"auto\",\n                        \"text-valign\": \"bottom\",\n                        \"text-halign\": \"right\",\n                        \"text-outline-color\": \"#eee\",\n                        \"text-outline-width\": 1\n                    }\n                },\n                {   selector: \"[typeshape]\", \n                    style: {\n                        \"shape\":\"data(typeshape)\"\n                    }   \n                },\n                {   selector: \"node[typeshape='diamond']\", \n                    style: {\n                        'background-color': '#CC9900'\n                }\n                },\n                {\n                selector: \"node[typeshape='diamond'][content='Conflict']\",\n                style: {\n                    'background-color': 'red'\n                }\n                },\n                {\n                selector: \"node[typeshape='diamond'][content='Support']\",\n                style: {\n                    'background-color': 'green'\n                }\n                },\n                {   \n                selector: \"edge\", \n                style: {\n                    \"line-color\": \"#9dbaea\",\n                    \"target-arrow-shape\": \"triangle\",\n                    \"target-arrow-color\": \"#9dbaea\",\n                    \"curve-style\": \"bezier\"\n                }\n                },\n                {   \n                selector: \":selected\", \n                style: {\n                    \"border-width\":\"1\",\n                    \"border-color\":\"black\",\n                    \"background-color\": \"#3399CC\"\n                }\n                },\n                {   \n                selector: \".atom-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n                },\n                {   \n                selector: \".scheme-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n            }\n            ],\n\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n\n        });\n\n        //this.layout = this.build_cola_layout();\n       // this.layout.run();\n\n       // this.cy.elements(<Tooltip text=\"simple text\">Hello</Tooltip>)\n        \n    \n    }//close rendercytoscape\n    \n    build_cola_layout( opts ) {\n    var cola_params = {\n        name: \"cola\",\n        animate: true,\n        randomize: true,\n        padding: 100,\n        fit: false,\n        maxSimulationTime: 1500\n    };\n    var i = 0;\n    if (opts !== undefined) {\n        opts.forEach(function(opt) {\n           cola_params[i] = opts[i];\n           ++i;\n        });\n    }\n    return this.cy.makeLayout( cola_params );\n}\n\n    componentDidMount(){\n        this.setState({cy_data: this.props.cy_data});\n        this.renderCytoscape();\n       // \n    }\n\n\n    render(){\n        return(\n            <div id=\"cy\"></div>\n            );\n    }\n}\n\nexport default CytoContainer;"]},"metadata":{},"sourceType":"module"}