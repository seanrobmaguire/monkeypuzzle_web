{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles'; //import functions\n//import {import_json} from '../lib/Sadface';\n//import {export_cytoscape} from '../lib/Sadface';\n\nimport { add_edge } from '../lib/Sadface'; //import {update} from '../lib/Sadface';\n\ncytoscape.use(edgehandles);\ncytoscape.use(cola);\n\nclass GraphContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n  }\n\n  initialise_monkeypuzzle() {\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\")) {\n      this.loadJSON(localStorage.getItem(\"state\"));\n      this.initCytoscape(); //else use default\n    } else {\n      this.setState({\n        current_sadface_doc: this.setDefault()\n      });\n      localStorage.setItem(\"state\", this.state.current_sadface_doc); //   cy_data = export_cytoscape({import_json(current_sadface_doc)});\n\n      this.initCytoscape();\n    }\n  }\n\n  setDefault() {\n    this.setState({\n      analyst_email: \"Default Analyst Email\",\n      analyst_name: \"Default Analsyst Name\",\n      created: this.props.now(),\n      edges: [],\n      edited: this.props.now(),\n      id: this.props.new_uuid(),\n      metadata: {},\n      nodes: [],\n      resources: []\n    });\n  }\n\n  componentDidMount() {\n    this.initialise_monkeypuzzle();\n    this.setState({\n      cy: this.cy,\n      layout: this.layout,\n      position: this.position\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"cy\",\n      ondrop: \"drop_handler(event);\",\n      ondragover: \"dragover_handler(event);\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default GraphContainer;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js"],"names":["React","Component","cytoscape","cola","edgehandles","add_edge","use","GraphContainer","constructor","props","state","initialise_monkeypuzzle","bind","localStorage","getItem","loadJSON","initCytoscape","setState","current_sadface_doc","setDefault","setItem","analyst_email","analyst_name","created","now","edges","edited","id","new_uuid","metadata","nodes","resources","componentDidMount","cy","layout","position","render"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,WAAP,MAAwB,uBAAxB,C,CAEA;AACA;AACA;;AACA,SAAQC,QAAR,QAAuB,gBAAvB,C,CACA;;AAQAH,SAAS,CAACI,GAAV,CAAeF,WAAf;AACAF,SAAS,CAACI,GAAV,CAAeH,IAAf;;AAMA,MAAMI,cAAN,SAA6BP,KAAK,CAACC,SAAnC,CAA4C;AACxCO,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AAGA,SAAKC,KAAL,GAAa,EAAb;AAGA,SAAKC,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAA/B;AACC;;AAMLD,EAAAA,uBAAuB,GAAE;AACnB;AACF,QAAIE,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EACA;AACI,WAAKC,QAAL,CAAcF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,WAAKE,aAAL,GAFJ,CAGA;AACC,KALD,MAMA;AACI,WAAKC,QAAL,CAAc;AAACC,QAAAA,mBAAmB,EAAE,KAAKC,UAAL;AAAtB,OAAd;AACAN,MAAAA,YAAY,CAACO,OAAb,CAAqB,OAArB,EAA8B,KAAKV,KAAL,CAAWQ,mBAAzC,EAFJ,CAGC;;AACG,WAAKF,aAAL;AACH;AACJ;;AAOHG,EAAAA,UAAU,GAAE;AACV,SAAKF,QAAL,CAAc;AACVI,MAAAA,aAAa,EAAE,uBADL;AAEVC,MAAAA,YAAY,EAAE,uBAFJ;AAGVC,MAAAA,OAAO,EAAE,KAAKd,KAAL,CAAWe,GAAX,EAHC;AAIVC,MAAAA,KAAK,EAAC,EAJI;AAKVC,MAAAA,MAAM,EAAE,KAAKjB,KAAL,CAAWe,GAAX,EALE;AAMVG,MAAAA,EAAE,EAAE,KAAKlB,KAAL,CAAWmB,QAAX,EANM;AAOVC,MAAAA,QAAQ,EAAC,EAPC;AAQVC,MAAAA,KAAK,EAAC,EARI;AASVC,MAAAA,SAAS,EAAE;AATD,KAAd;AAcH;;AAGGC,EAAAA,iBAAiB,GAAE;AACf,SAAKrB,uBAAL;AACA,SAAKM,QAAL,CAAc;AACVgB,MAAAA,EAAE,EAAE,KAAKA,EADC;AAEVC,MAAAA,MAAM,EAAE,KAAKA,MAFH;AAGVC,MAAAA,QAAQ,EAAE,KAAKA;AAHL,KAAd;AAMH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,WACI;AAAK,MAAA,EAAE,EAAC,IAAR;AAAa,MAAA,MAAM,EAAC,sBAApB;AAA2C,MAAA,UAAU,EAAC,0BAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AApEuC;;AA0E5C,eAAe7B,cAAf","sourcesContent":["import React,{Component} from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\n\n//import functions\n//import {import_json} from '../lib/Sadface';\n//import {export_cytoscape} from '../lib/Sadface';\nimport {add_edge} from '../lib/Sadface';\n//import {update} from '../lib/Sadface';\n\n\n\n\n\n\n\ncytoscape.use( edgehandles );\ncytoscape.use( cola );\n\n\n\n\n\nclass GraphContainer extends React.Component{\n    constructor(props){\n        super(props);\n        \n\n        this.state = {\n        \t\n        }\n        this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n        }\n    \n\n\n    \n\n    initialise_monkeypuzzle(){\n          //load diagram if there is one in localStorage\n        if (localStorage.getItem(\"state\"))\n        {\n            this.loadJSON(localStorage.getItem(\"state\"));\n            this.initCytoscape();\n        //else use default\n        } else\n        {\n            this.setState({current_sadface_doc: this.setDefault()})\n            localStorage.setItem(\"state\", this.state.current_sadface_doc);\n         //   cy_data = export_cytoscape({import_json(current_sadface_doc)});\n            this.initCytoscape();\n        }\n    }\n\n\n\n\n   \n\n  setDefault(){\n    this.setState({\n        analyst_email: \"Default Analyst Email\",\n        analyst_name: \"Default Analsyst Name\",\n        created: this.props.now(),\n        edges:[],\n        edited: this.props.now(),\n        id: this.props.new_uuid(),\n        metadata:{},\n        nodes:[],\n        resources: [],\n\n\n\n    });\n}\n\n\n    componentDidMount(){\n        this.initialise_monkeypuzzle();\n        this.setState({\n            cy: this.cy,\n            layout: this.layout,\n            position: this.position,\n        })\n   \n    }\n\n    render(){\n        return(\n            <div id=\"cy\" ondrop=\"drop_handler(event);\" ondragover=\"dragover_handler(event);\"></div>\n        )\n    }\n}\n\n\n\n\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}