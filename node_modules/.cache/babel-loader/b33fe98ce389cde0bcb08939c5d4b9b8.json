{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(require(\"lodash.debounce\"), require(\"heap\"));else if (typeof define === 'function' && define.amd) define([\"lodash.debounce\", \"heap\"], factory);else if (typeof exports === 'object') exports[\"cytoscape\"] = factory(require(\"lodash.debounce\"), require(\"heap\"));else root[\"cytoscape\"] = factory(root[\"lodash.debounce\"], root[\"heap\"]);\n})(typeof self !== 'undefined' ? self : this, function (__WEBPACK_EXTERNAL_MODULE_26__, __WEBPACK_EXTERNAL_MODULE_32__) {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 20);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n      /*global HTMLElement DocumentTouch */\n\n\n      var window = __webpack_require__(3);\n\n      var navigator = window ? window.navigator : null;\n      var document = window ? window.document : null;\n\n      var typeofstr = _typeof('');\n\n      var typeofobj = _typeof({});\n\n      var typeoffn = _typeof(function () {});\n\n      var typeofhtmlele = typeof HTMLElement === 'undefined' ? 'undefined' : _typeof(HTMLElement);\n\n      var instanceStr = function instanceStr(obj) {\n        return obj && obj.instanceString && is.fn(obj.instanceString) ? obj.instanceString() : null;\n      };\n\n      var is = {\n        defined: function defined(obj) {\n          return obj != null; // not undefined or null\n        },\n        string: function string(obj) {\n          return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == typeofstr;\n        },\n        fn: function fn(obj) {\n          return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === typeoffn;\n        },\n        array: function array(obj) {\n          return Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array;\n        },\n        plainObject: function plainObject(obj) {\n          return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === typeofobj && !is.array(obj) && obj.constructor === Object;\n        },\n        object: function object(obj) {\n          return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === typeofobj;\n        },\n        number: function number(obj) {\n          return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === _typeof(1) && !isNaN(obj);\n        },\n        integer: function integer(obj) {\n          return is.number(obj) && Math.floor(obj) === obj;\n        },\n        bool: function bool(obj) {\n          return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === _typeof(true);\n        },\n        htmlElement: function htmlElement(obj) {\n          if ('undefined' === typeofhtmlele) {\n            return undefined;\n          } else {\n            return null != obj && obj instanceof HTMLElement;\n          }\n        },\n        elementOrCollection: function elementOrCollection(obj) {\n          return is.element(obj) || is.collection(obj);\n        },\n        element: function element(obj) {\n          return instanceStr(obj) === 'collection' && obj._private.single;\n        },\n        collection: function collection(obj) {\n          return instanceStr(obj) === 'collection' && !obj._private.single;\n        },\n        core: function core(obj) {\n          return instanceStr(obj) === 'core';\n        },\n        style: function style(obj) {\n          return instanceStr(obj) === 'style';\n        },\n        stylesheet: function stylesheet(obj) {\n          return instanceStr(obj) === 'stylesheet';\n        },\n        event: function event(obj) {\n          return instanceStr(obj) === 'event';\n        },\n        thread: function thread(obj) {\n          return instanceStr(obj) === 'thread';\n        },\n        fabric: function fabric(obj) {\n          return instanceStr(obj) === 'fabric';\n        },\n        emptyString: function emptyString(obj) {\n          if (obj === undefined || obj === null) {\n            // null is empty\n            return true;\n          } else if (obj === '' || obj.match(/^\\s+$/)) {\n            return true; // empty string is empty\n          }\n\n          return false; // otherwise, we don't know what we've got\n        },\n        nonemptyString: function nonemptyString(obj) {\n          if (obj && is.string(obj) && obj !== '' && !obj.match(/^\\s+$/)) {\n            return true;\n          }\n\n          return false;\n        },\n        domElement: function domElement(obj) {\n          if (typeof HTMLElement === 'undefined') {\n            return false; // we're not in a browser so it doesn't matter\n          } else {\n            return obj instanceof HTMLElement;\n          }\n        },\n        boundingBox: function boundingBox(obj) {\n          return is.plainObject(obj) && is.number(obj.x1) && is.number(obj.x2) && is.number(obj.y1) && is.number(obj.y2);\n        },\n        promise: function promise(obj) {\n          return is.object(obj) && is.fn(obj.then);\n        },\n        touch: function touch() {\n          return window && ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch);\n        },\n        gecko: function gecko() {\n          return window && (typeof InstallTrigger !== 'undefined' || 'MozAppearance' in document.documentElement.style);\n        },\n        webkit: function webkit() {\n          return window && (typeof webkitURL !== 'undefined' || 'WebkitAppearance' in document.documentElement.style);\n        },\n        chromium: function chromium() {\n          return window && typeof chrome !== 'undefined';\n        },\n        khtml: function khtml() {\n          return navigator && navigator.vendor.match(/kde/i); // probably a better way to detect this...\n        },\n        khtmlEtc: function khtmlEtc() {\n          return is.khtml() || is.webkit() || is.chromium();\n        },\n        ms: function ms() {\n          return navigator && navigator.userAgent.match(/msie|trident|edge/i); // probably a better way to detect this...\n        },\n        windows: function windows() {\n          return navigator && navigator.appVersion.match(/Win/i);\n        },\n        mac: function mac() {\n          return navigator && navigator.appVersion.match(/Mac/i);\n        },\n        linux: function linux() {\n          return navigator && navigator.appVersion.match(/Linux/i);\n        },\n        unix: function unix() {\n          return navigator && navigator.appVersion.match(/X11/i);\n        }\n      };\n      module.exports = is;\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /*global console */\n\n      var is = __webpack_require__(0);\n\n      var math = __webpack_require__(2);\n\n      var util = {\n        MAX_INT: Number.MAX_SAFE_INTEGER || 9007199254740991,\n        trueify: function trueify() {\n          return true;\n        },\n        falsify: function falsify() {\n          return false;\n        },\n        zeroify: function zeroify() {\n          return 0;\n        },\n        noop: function noop() {},\n        error: function error(msg) {\n          /* eslint-disable */\n          if (console.error) {\n            console.error.apply(console, arguments);\n\n            if (console.trace) {\n              console.trace();\n            }\n          } else {\n            console.log.apply(console, arguments);\n\n            if (console.trace) {\n              console.trace();\n            }\n          }\n          /* eslint-enable */\n\n        },\n        clone: function clone(obj) {\n          return this.extend({}, obj);\n        },\n        // gets a shallow copy of the argument\n        copy: function copy(obj) {\n          if (obj == null) {\n            return obj;\n          }\n\n          if (is.array(obj)) {\n            return obj.slice();\n          } else if (is.plainObject(obj)) {\n            return this.clone(obj);\n          } else {\n            return obj;\n          }\n        },\n        copyArray: function copyArray(arr) {\n          return arr.slice();\n        },\n        clonePosition: function clonePosition(pos) {\n          return {\n            x: pos.x,\n            y: pos.y\n          };\n        },\n        uuid: function uuid(a, b // placeholders\n        ) {\n          for ( // loop :)\n          b = a = ''; // b - result , a - numeric letiable\n          a++ < 36; //\n          b += a * 51 & 52 // if \"a\" is not 9 or 14 or 19 or 24\n          ? //  return a random number or 4\n          (a ^ 15 // if \"a\" is not 15\n          ? // genetate a random number from 0 to 15\n          8 ^ Math.random() * (a ^ 20 ? 16 : 4) // unless \"a\" is 20, in which case a random number from 8 to 11\n          : 4 //  otherwise 4\n          ).toString(16) : '-' //  in other cases (if \"a\" is 9,14,19,24) insert \"-\"\n          ) {}\n\n          return b;\n        }\n      };\n      util.makeBoundingBox = math.makeBoundingBox.bind(math);\n      util._staticEmptyObject = {};\n\n      util.staticEmptyObject = function () {\n        return util._staticEmptyObject;\n      };\n\n      util.extend = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {\n        var args = arguments;\n\n        for (var i = 1; i < args.length; i++) {\n          var obj = args[i];\n\n          if (obj == null) {\n            continue;\n          }\n\n          var keys = Object.keys(obj);\n\n          for (var j = 0; j < keys.length; j++) {\n            var k = keys[j];\n            tgt[k] = obj[k];\n          }\n        }\n\n        return tgt;\n      };\n      util.assign = util.extend;\n\n      util.default = function (val, def) {\n        if (val === undefined) {\n          return def;\n        } else {\n          return val;\n        }\n      };\n\n      util.removeFromArray = function (arr, ele, manyCopies) {\n        for (var i = arr.length; i >= 0; i--) {\n          if (arr[i] === ele) {\n            arr.splice(i, 1);\n\n            if (!manyCopies) {\n              break;\n            }\n          }\n        }\n      };\n\n      util.clearArray = function (arr) {\n        arr.splice(0, arr.length);\n      };\n\n      util.push = function (arr, otherArr) {\n        for (var i = 0; i < otherArr.length; i++) {\n          var el = otherArr[i];\n          arr.push(el);\n        }\n      };\n\n      util.getPrefixedProperty = function (obj, propName, prefix) {\n        if (prefix) {\n          propName = this.prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth\n        }\n\n        return obj[propName];\n      };\n\n      util.setPrefixedProperty = function (obj, propName, prefix, value) {\n        if (prefix) {\n          propName = this.prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth\n        }\n\n        obj[propName] = value;\n      };\n\n      [__webpack_require__(21), __webpack_require__(22), {\n        memoize: __webpack_require__(13)\n      }, __webpack_require__(23), __webpack_require__(24), __webpack_require__(25), __webpack_require__(27)].forEach(function (req) {\n        util.extend(util, req);\n      });\n      module.exports = util;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var math = {};\n\n      math.arePositionsSame = function (p1, p2) {\n        return p1.x === p2.x && p1.y === p2.y;\n      };\n\n      math.copyPosition = function (p) {\n        return {\n          x: p.x,\n          y: p.y\n        };\n      };\n\n      math.modelToRenderedPosition = function (p, zoom, pan) {\n        return {\n          x: p.x * zoom + pan.x,\n          y: p.y * zoom + pan.y\n        };\n      };\n\n      math.renderedToModelPosition = function (p, zoom, pan) {\n        return {\n          x: (p.x - pan.x) / zoom,\n          y: (p.y - pan.y) / zoom\n        };\n      };\n\n      math.array2point = function (arr) {\n        return {\n          x: arr[0],\n          y: arr[1]\n        };\n      };\n\n      math.deg2rad = function (deg) {\n        return Math.PI * deg / 180;\n      };\n\n      math.getAngleFromDisp = function (dispX, dispY) {\n        return Math.atan2(dispY, dispX) - Math.PI / 2;\n      };\n\n      math.log2 = Math.log2 || function (n) {\n        return Math.log(n) / Math.log(2);\n      };\n\n      math.signum = function (x) {\n        if (x > 0) {\n          return 1;\n        } else if (x < 0) {\n          return -1;\n        } else {\n          return 0;\n        }\n      };\n\n      math.dist = function (p1, p2) {\n        return Math.sqrt(math.sqdist(p1, p2));\n      };\n\n      math.sqdist = function (p1, p2) {\n        var dx = p2.x - p1.x;\n        var dy = p2.y - p1.y;\n        return dx * dx + dy * dy;\n      }; // from http://en.wikipedia.org/wiki/Bézier_curve#Quadratic_curves\n\n\n      math.qbezierAt = function (p0, p1, p2, t) {\n        return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;\n      };\n\n      math.qbezierPtAt = function (p0, p1, p2, t) {\n        return {\n          x: math.qbezierAt(p0.x, p1.x, p2.x, t),\n          y: math.qbezierAt(p0.y, p1.y, p2.y, t)\n        };\n      };\n\n      math.lineAt = function (p0, p1, t, d) {\n        var vec = {\n          x: p1.x - p0.x,\n          y: p1.y - p0.y\n        };\n        var vecDist = math.dist(p0, p1);\n        var normVec = {\n          x: vec.x / vecDist,\n          y: vec.y / vecDist\n        };\n        t = t == null ? 0 : t;\n        d = d != null ? d : t * vecDist;\n        return {\n          x: p0.x + normVec.x * d,\n          y: p0.y + normVec.y * d\n        };\n      };\n\n      math.lineAtDist = function (p0, p1, d) {\n        return math.lineAt(p0, p1, undefined, d);\n      }; // get angle at A via cosine law\n\n\n      math.triangleAngle = function (A, B, C) {\n        var a = math.dist(B, C);\n        var b = math.dist(A, C);\n        var c = math.dist(A, B);\n        return Math.acos((a * a + b * b - c * c) / (2 * a * b));\n      };\n\n      math.bound = function (min, val, max) {\n        return Math.max(min, Math.min(max, val));\n      }; // makes a full bb (x1, y1, x2, y2, w, h) from implicit params\n\n\n      math.makeBoundingBox = function (bb) {\n        if (bb == null) {\n          return {\n            x1: Infinity,\n            y1: Infinity,\n            x2: -Infinity,\n            y2: -Infinity,\n            w: 0,\n            h: 0\n          };\n        } else if (bb.x1 != null && bb.y1 != null) {\n          if (bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1) {\n            return {\n              x1: bb.x1,\n              y1: bb.y1,\n              x2: bb.x2,\n              y2: bb.y2,\n              w: bb.x2 - bb.x1,\n              h: bb.y2 - bb.y1\n            };\n          } else if (bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0) {\n            return {\n              x1: bb.x1,\n              y1: bb.y1,\n              x2: bb.x1 + bb.w,\n              y2: bb.y1 + bb.h,\n              w: bb.w,\n              h: bb.h\n            };\n          }\n        }\n      };\n\n      math.updateBoundingBox = function (bb1, bb2) {\n        // update bb1 with bb2 bounds\n        bb1.x1 = Math.min(bb1.x1, bb2.x1);\n        bb1.x2 = Math.max(bb1.x2, bb2.x2);\n        bb1.w = bb1.x2 - bb1.x1;\n        bb1.y1 = Math.min(bb1.y1, bb2.y1);\n        bb1.y2 = Math.max(bb1.y2, bb2.y2);\n        bb1.h = bb1.y2 - bb1.y1;\n      };\n\n      math.expandBoundingBoxByPoint = function (bb, x, y) {\n        bb.x1 = Math.min(bb.x1, x);\n        bb.x2 = Math.max(bb.x2, x);\n        bb.w = bb.x2 - bb.x1;\n        bb.y1 = Math.min(bb.y1, y);\n        bb.y2 = Math.max(bb.y2, y);\n        bb.h = bb.y2 - bb.y1;\n      };\n\n      math.expandBoundingBox = function (bb, padding) {\n        bb.x1 -= padding;\n        bb.x2 += padding;\n        bb.y1 -= padding;\n        bb.y2 += padding;\n        bb.w = bb.x2 - bb.x1;\n        bb.h = bb.y2 - bb.y1;\n        return bb;\n      };\n\n      math.boundingBoxesIntersect = function (bb1, bb2) {\n        // case: one bb to right of other\n        if (bb1.x1 > bb2.x2) {\n          return false;\n        }\n\n        if (bb2.x1 > bb1.x2) {\n          return false;\n        } // case: one bb to left of other\n\n\n        if (bb1.x2 < bb2.x1) {\n          return false;\n        }\n\n        if (bb2.x2 < bb1.x1) {\n          return false;\n        } // case: one bb above other\n\n\n        if (bb1.y2 < bb2.y1) {\n          return false;\n        }\n\n        if (bb2.y2 < bb1.y1) {\n          return false;\n        } // case: one bb below other\n\n\n        if (bb1.y1 > bb2.y2) {\n          return false;\n        }\n\n        if (bb2.y1 > bb1.y2) {\n          return false;\n        } // otherwise, must have some overlap\n\n\n        return true;\n      };\n\n      math.inBoundingBox = function (bb, x, y) {\n        return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;\n      };\n\n      math.pointInBoundingBox = function (bb, pt) {\n        return this.inBoundingBox(bb, pt.x, pt.y);\n      };\n\n      math.boundingBoxInBoundingBox = function (bb1, bb2) {\n        return math.inBoundingBox(bb1, bb2.x1, bb2.y1) && math.inBoundingBox(bb1, bb2.x2, bb2.y2);\n      };\n\n      math.roundRectangleIntersectLine = function (x, y, nodeX, nodeY, width, height, padding) {\n        var cornerRadius = this.getRoundRectangleRadius(width, height);\n        var halfWidth = width / 2;\n        var halfHeight = height / 2; // Check intersections with straight line segments\n\n        var straightLineIntersections = void 0; // Top segment, left to right\n\n        {\n          var topStartX = nodeX - halfWidth + cornerRadius - padding;\n          var topStartY = nodeY - halfHeight - padding;\n          var topEndX = nodeX + halfWidth - cornerRadius + padding;\n          var topEndY = topStartY;\n          straightLineIntersections = this.finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);\n\n          if (straightLineIntersections.length > 0) {\n            return straightLineIntersections;\n          }\n        } // Right segment, top to bottom\n\n        {\n          var rightStartX = nodeX + halfWidth + padding;\n          var rightStartY = nodeY - halfHeight + cornerRadius - padding;\n          var rightEndX = rightStartX;\n          var rightEndY = nodeY + halfHeight - cornerRadius + padding;\n          straightLineIntersections = this.finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);\n\n          if (straightLineIntersections.length > 0) {\n            return straightLineIntersections;\n          }\n        } // Bottom segment, left to right\n\n        {\n          var bottomStartX = nodeX - halfWidth + cornerRadius - padding;\n          var bottomStartY = nodeY + halfHeight + padding;\n          var bottomEndX = nodeX + halfWidth - cornerRadius + padding;\n          var bottomEndY = bottomStartY;\n          straightLineIntersections = this.finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);\n\n          if (straightLineIntersections.length > 0) {\n            return straightLineIntersections;\n          }\n        } // Left segment, top to bottom\n\n        {\n          var leftStartX = nodeX - halfWidth - padding;\n          var leftStartY = nodeY - halfHeight + cornerRadius - padding;\n          var leftEndX = leftStartX;\n          var leftEndY = nodeY + halfHeight - cornerRadius + padding;\n          straightLineIntersections = this.finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);\n\n          if (straightLineIntersections.length > 0) {\n            return straightLineIntersections;\n          }\n        } // Check intersections with arc segments\n\n        var arcIntersections = void 0; // Top Left\n\n        {\n          var topLeftCenterX = nodeX - halfWidth + cornerRadius;\n          var topLeftCenterY = nodeY - halfHeight + cornerRadius;\n          arcIntersections = this.intersectLineCircle(x, y, nodeX, nodeY, topLeftCenterX, topLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n          if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {\n            return [arcIntersections[0], arcIntersections[1]];\n          }\n        } // Top Right\n\n        {\n          var topRightCenterX = nodeX + halfWidth - cornerRadius;\n          var topRightCenterY = nodeY - halfHeight + cornerRadius;\n          arcIntersections = this.intersectLineCircle(x, y, nodeX, nodeY, topRightCenterX, topRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n          if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {\n            return [arcIntersections[0], arcIntersections[1]];\n          }\n        } // Bottom Right\n\n        {\n          var bottomRightCenterX = nodeX + halfWidth - cornerRadius;\n          var bottomRightCenterY = nodeY + halfHeight - cornerRadius;\n          arcIntersections = this.intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n          if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {\n            return [arcIntersections[0], arcIntersections[1]];\n          }\n        } // Bottom Left\n\n        {\n          var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;\n          var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;\n          arcIntersections = this.intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n          if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {\n            return [arcIntersections[0], arcIntersections[1]];\n          }\n        }\n        return []; // if nothing\n      };\n\n      math.inLineVicinity = function (x, y, lx1, ly1, lx2, ly2, tolerance) {\n        var t = tolerance;\n        var x1 = Math.min(lx1, lx2);\n        var x2 = Math.max(lx1, lx2);\n        var y1 = Math.min(ly1, ly2);\n        var y2 = Math.max(ly1, ly2);\n        return x1 - t <= x && x <= x2 + t && y1 - t <= y && y <= y2 + t;\n      };\n\n      math.inBezierVicinity = function (x, y, x1, y1, x2, y2, x3, y3, tolerance) {\n        var bb = {\n          x1: Math.min(x1, x3, x2) - tolerance,\n          x2: Math.max(x1, x3, x2) + tolerance,\n          y1: Math.min(y1, y3, y2) - tolerance,\n          y2: Math.max(y1, y3, y2) + tolerance\n        }; // if outside the rough bounding box for the bezier, then it can't be a hit\n\n        if (x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2) {\n          // console.log('bezier out of rough bb')\n          return false;\n        } else {\n          // console.log('do more expensive check');\n          return true;\n        }\n      };\n\n      math.solveQuadratic = function (a, b, c, val) {\n        c -= val;\n        var r = b * b - 4 * a * c;\n\n        if (r < 0) {\n          return [];\n        }\n\n        var sqrtR = Math.sqrt(r);\n        var denom = 2 * a;\n        var root1 = (-b + sqrtR) / denom;\n        var root2 = (-b - sqrtR) / denom;\n        return [root1, root2];\n      };\n\n      math.solveCubic = function (a, b, c, d, result) {\n        // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where\n        // r is the real component, i is the imaginary component\n        // An implementation of the Cardano method from the year 1545\n        // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots\n        b /= a;\n        c /= a;\n        d /= a;\n        var discriminant = void 0,\n            q = void 0,\n            r = void 0,\n            dum1 = void 0,\n            s = void 0,\n            t = void 0,\n            term1 = void 0,\n            r13 = void 0;\n        q = (3.0 * c - b * b) / 9.0;\n        r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));\n        r /= 54.0;\n        discriminant = q * q * q + r * r;\n        result[1] = 0;\n        term1 = b / 3.0;\n\n        if (discriminant > 0) {\n          s = r + Math.sqrt(discriminant);\n          s = s < 0 ? -Math.pow(-s, 1.0 / 3.0) : Math.pow(s, 1.0 / 3.0);\n          t = r - Math.sqrt(discriminant);\n          t = t < 0 ? -Math.pow(-t, 1.0 / 3.0) : Math.pow(t, 1.0 / 3.0);\n          result[0] = -term1 + s + t;\n          term1 += (s + t) / 2.0;\n          result[4] = result[2] = -term1;\n          term1 = Math.sqrt(3.0) * (-t + s) / 2;\n          result[3] = term1;\n          result[5] = -term1;\n          return;\n        }\n\n        result[5] = result[3] = 0;\n\n        if (discriminant === 0) {\n          r13 = r < 0 ? -Math.pow(-r, 1.0 / 3.0) : Math.pow(r, 1.0 / 3.0);\n          result[0] = -term1 + 2.0 * r13;\n          result[4] = result[2] = -(r13 + term1);\n          return;\n        }\n\n        q = -q;\n        dum1 = q * q * q;\n        dum1 = Math.acos(r / Math.sqrt(dum1));\n        r13 = 2.0 * Math.sqrt(q);\n        result[0] = -term1 + r13 * Math.cos(dum1 / 3.0);\n        result[2] = -term1 + r13 * Math.cos((dum1 + 2.0 * Math.PI) / 3.0);\n        result[4] = -term1 + r13 * Math.cos((dum1 + 4.0 * Math.PI) / 3.0);\n        return;\n      };\n\n      math.sqdistToQuadraticBezier = function (x, y, x1, y1, x2, y2, x3, y3) {\n        // Find minimum distance by using the minimum of the distance\n        // function between the given point and the curve\n        // This gives the coefficients of the resulting cubic equation\n        // whose roots tell us where a possible minimum is\n        // (Coefficients are divided by 4)\n        var a = 1.0 * x1 * x1 - 4 * x1 * x2 + 2 * x1 * x3 + 4 * x2 * x2 - 4 * x2 * x3 + x3 * x3 + y1 * y1 - 4 * y1 * y2 + 2 * y1 * y3 + 4 * y2 * y2 - 4 * y2 * y3 + y3 * y3;\n        var b = 1.0 * 9 * x1 * x2 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x2 * x2 + 3 * x2 * x3 + 9 * y1 * y2 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y2 * y2 + 3 * y2 * y3;\n        var c = 1.0 * 3 * x1 * x1 - 6 * x1 * x2 + x1 * x3 - x1 * x + 2 * x2 * x2 + 2 * x2 * x - x3 * x + 3 * y1 * y1 - 6 * y1 * y2 + y1 * y3 - y1 * y + 2 * y2 * y2 + 2 * y2 * y - y3 * y;\n        var d = 1.0 * x1 * x2 - x1 * x1 + x1 * x - x2 * x + y1 * y2 - y1 * y1 + y1 * y - y2 * y; // debug(\"coefficients: \" + a / a + \", \" + b / a + \", \" + c / a + \", \" + d / a);\n\n        var roots = []; // Use the cubic solving algorithm\n\n        this.solveCubic(a, b, c, d, roots);\n        var zeroThreshold = 0.0000001;\n        var params = [];\n\n        for (var index = 0; index < 6; index += 2) {\n          if (Math.abs(roots[index + 1]) < zeroThreshold && roots[index] >= 0 && roots[index] <= 1.0) {\n            params.push(roots[index]);\n          }\n        }\n\n        params.push(1.0);\n        params.push(0.0);\n        var minDistanceSquared = -1;\n        var curX = void 0,\n            curY = void 0,\n            distSquared = void 0;\n\n        for (var i = 0; i < params.length; i++) {\n          curX = Math.pow(1.0 - params[i], 2.0) * x1 + 2.0 * (1 - params[i]) * params[i] * x2 + params[i] * params[i] * x3;\n          curY = Math.pow(1 - params[i], 2.0) * y1 + 2 * (1.0 - params[i]) * params[i] * y2 + params[i] * params[i] * y3;\n          distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2); // debug('distance for param ' + params[i] + \": \" + Math.sqrt(distSquared));\n\n          if (minDistanceSquared >= 0) {\n            if (distSquared < minDistanceSquared) {\n              minDistanceSquared = distSquared;\n            }\n          } else {\n            minDistanceSquared = distSquared;\n          }\n        }\n\n        return minDistanceSquared;\n      };\n\n      math.sqdistToFiniteLine = function (x, y, x1, y1, x2, y2) {\n        var offset = [x - x1, y - y1];\n        var line = [x2 - x1, y2 - y1];\n        var lineSq = line[0] * line[0] + line[1] * line[1];\n        var hypSq = offset[0] * offset[0] + offset[1] * offset[1];\n        var dotProduct = offset[0] * line[0] + offset[1] * line[1];\n        var adjSq = dotProduct * dotProduct / lineSq;\n\n        if (dotProduct < 0) {\n          return hypSq;\n        }\n\n        if (adjSq > lineSq) {\n          return (x - x2) * (x - x2) + (y - y2) * (y - y2);\n        }\n\n        return hypSq - adjSq;\n      };\n\n      math.pointInsidePolygonPoints = function (x, y, points) {\n        var x1 = void 0,\n            y1 = void 0,\n            x2 = void 0,\n            y2 = void 0;\n        var y3 = void 0; // Intersect with vertical line through (x, y)\n\n        var up = 0; // let down = 0;\n\n        for (var i = 0; i < points.length / 2; i++) {\n          x1 = points[i * 2];\n          y1 = points[i * 2 + 1];\n\n          if (i + 1 < points.length / 2) {\n            x2 = points[(i + 1) * 2];\n            y2 = points[(i + 1) * 2 + 1];\n          } else {\n            x2 = points[(i + 1 - points.length / 2) * 2];\n            y2 = points[(i + 1 - points.length / 2) * 2 + 1];\n          }\n\n          if (x1 == x && x2 == x) {// then ignore\n          } else if (x1 >= x && x >= x2 || x1 <= x && x <= x2) {\n            y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;\n\n            if (y3 > y) {\n              up++;\n            } // if( y3 < y ){\n            // down++;\n            // }\n\n          } else {\n            continue;\n          }\n        }\n\n        if (up % 2 === 0) {\n          return false;\n        } else {\n          return true;\n        }\n      };\n\n      math.pointInsidePolygon = function (x, y, basePoints, centerX, centerY, width, height, direction, padding) {\n        //let direction = arguments[6];\n        var transformedPoints = new Array(basePoints.length); // Gives negative angle\n\n        var angle = void 0;\n\n        if (direction[0] != null) {\n          angle = Math.atan(direction[1] / direction[0]);\n\n          if (direction[0] < 0) {\n            angle = angle + Math.PI / 2;\n          } else {\n            angle = -angle - Math.PI / 2;\n          }\n        } else {\n          angle = direction;\n        }\n\n        var cos = Math.cos(-angle);\n        var sin = Math.sin(-angle); //    console.log(\"base: \" + basePoints);\n\n        for (var i = 0; i < transformedPoints.length / 2; i++) {\n          transformedPoints[i * 2] = width / 2 * (basePoints[i * 2] * cos - basePoints[i * 2 + 1] * sin);\n          transformedPoints[i * 2 + 1] = height / 2 * (basePoints[i * 2 + 1] * cos + basePoints[i * 2] * sin);\n          transformedPoints[i * 2] += centerX;\n          transformedPoints[i * 2 + 1] += centerY;\n        }\n\n        var points = void 0;\n\n        if (padding > 0) {\n          var expandedLineSet = this.expandPolygon(transformedPoints, -padding);\n          points = this.joinLines(expandedLineSet);\n        } else {\n          points = transformedPoints;\n        }\n\n        return math.pointInsidePolygonPoints(x, y, points);\n      };\n\n      math.joinLines = function (lineSet) {\n        var vertices = new Array(lineSet.length / 2);\n        var currentLineStartX = void 0,\n            currentLineStartY = void 0,\n            currentLineEndX = void 0,\n            currentLineEndY = void 0;\n        var nextLineStartX = void 0,\n            nextLineStartY = void 0,\n            nextLineEndX = void 0,\n            nextLineEndY = void 0;\n\n        for (var i = 0; i < lineSet.length / 4; i++) {\n          currentLineStartX = lineSet[i * 4];\n          currentLineStartY = lineSet[i * 4 + 1];\n          currentLineEndX = lineSet[i * 4 + 2];\n          currentLineEndY = lineSet[i * 4 + 3];\n\n          if (i < lineSet.length / 4 - 1) {\n            nextLineStartX = lineSet[(i + 1) * 4];\n            nextLineStartY = lineSet[(i + 1) * 4 + 1];\n            nextLineEndX = lineSet[(i + 1) * 4 + 2];\n            nextLineEndY = lineSet[(i + 1) * 4 + 3];\n          } else {\n            nextLineStartX = lineSet[0];\n            nextLineStartY = lineSet[1];\n            nextLineEndX = lineSet[2];\n            nextLineEndY = lineSet[3];\n          }\n\n          var intersection = this.finiteLinesIntersect(currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY, nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY, true);\n          vertices[i * 2] = intersection[0];\n          vertices[i * 2 + 1] = intersection[1];\n        }\n\n        return vertices;\n      };\n\n      math.expandPolygon = function (points, pad) {\n        var expandedLineSet = new Array(points.length * 2);\n        var currentPointX = void 0,\n            currentPointY = void 0,\n            nextPointX = void 0,\n            nextPointY = void 0;\n\n        for (var i = 0; i < points.length / 2; i++) {\n          currentPointX = points[i * 2];\n          currentPointY = points[i * 2 + 1];\n\n          if (i < points.length / 2 - 1) {\n            nextPointX = points[(i + 1) * 2];\n            nextPointY = points[(i + 1) * 2 + 1];\n          } else {\n            nextPointX = points[0];\n            nextPointY = points[1];\n          } // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]\n          // Assume CCW polygon winding\n\n\n          var offsetX = nextPointY - currentPointY;\n          var offsetY = -(nextPointX - currentPointX); // Normalize\n\n          var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);\n          var normalizedOffsetX = offsetX / offsetLength;\n          var normalizedOffsetY = offsetY / offsetLength;\n          expandedLineSet[i * 4] = currentPointX + normalizedOffsetX * pad;\n          expandedLineSet[i * 4 + 1] = currentPointY + normalizedOffsetY * pad;\n          expandedLineSet[i * 4 + 2] = nextPointX + normalizedOffsetX * pad;\n          expandedLineSet[i * 4 + 3] = nextPointY + normalizedOffsetY * pad;\n        }\n\n        return expandedLineSet;\n      };\n\n      math.intersectLineEllipse = function (x, y, centerX, centerY, ellipseWradius, ellipseHradius) {\n        var dispX = centerX - x;\n        var dispY = centerY - y;\n        dispX /= ellipseWradius;\n        dispY /= ellipseHradius;\n        var len = Math.sqrt(dispX * dispX + dispY * dispY);\n        var newLength = len - 1;\n\n        if (newLength < 0) {\n          return [];\n        }\n\n        var lenProportion = newLength / len;\n        return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];\n      };\n\n      math.checkInEllipse = function (x, y, width, height, centerX, centerY, padding) {\n        x -= centerX;\n        y -= centerY;\n        x /= width / 2 + padding;\n        y /= height / 2 + padding;\n        return x * x + y * y <= 1;\n      }; // Returns intersections of increasing distance from line's start point\n\n\n      math.intersectLineCircle = function (x1, y1, x2, y2, centerX, centerY, radius) {\n        // Calculate d, direction vector of line\n        var d = [x2 - x1, y2 - y1]; // Direction vector of line\n\n        var f = [x1 - centerX, y1 - centerY];\n        var a = d[0] * d[0] + d[1] * d[1];\n        var b = 2 * (f[0] * d[0] + f[1] * d[1]);\n        var c = f[0] * f[0] + f[1] * f[1] - radius * radius;\n        var discriminant = b * b - 4 * a * c;\n\n        if (discriminant < 0) {\n          return [];\n        }\n\n        var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);\n        var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);\n        var tMin = Math.min(t1, t2);\n        var tMax = Math.max(t1, t2);\n        var inRangeParams = [];\n\n        if (tMin >= 0 && tMin <= 1) {\n          inRangeParams.push(tMin);\n        }\n\n        if (tMax >= 0 && tMax <= 1) {\n          inRangeParams.push(tMax);\n        }\n\n        if (inRangeParams.length === 0) {\n          return [];\n        }\n\n        var nearIntersectionX = inRangeParams[0] * d[0] + x1;\n        var nearIntersectionY = inRangeParams[0] * d[1] + y1;\n\n        if (inRangeParams.length > 1) {\n          if (inRangeParams[0] == inRangeParams[1]) {\n            return [nearIntersectionX, nearIntersectionY];\n          } else {\n            var farIntersectionX = inRangeParams[1] * d[0] + x1;\n            var farIntersectionY = inRangeParams[1] * d[1] + y1;\n            return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];\n          }\n        } else {\n          return [nearIntersectionX, nearIntersectionY];\n        }\n      };\n\n      math.findCircleNearPoint = function (centerX, centerY, radius, farX, farY) {\n        var displacementX = farX - centerX;\n        var displacementY = farY - centerY;\n        var distance = Math.sqrt(displacementX * displacementX + displacementY * displacementY);\n        var unitDisplacementX = displacementX / distance;\n        var unitDisplacementY = displacementY / distance;\n        return [centerX + unitDisplacementX * radius, centerY + unitDisplacementY * radius];\n      };\n\n      math.findMaxSqDistanceToOrigin = function (points) {\n        var maxSqDistance = 0.000001;\n        var sqDistance = void 0;\n\n        for (var i = 0; i < points.length / 2; i++) {\n          sqDistance = points[i * 2] * points[i * 2] + points[i * 2 + 1] * points[i * 2 + 1];\n\n          if (sqDistance > maxSqDistance) {\n            maxSqDistance = sqDistance;\n          }\n        }\n\n        return maxSqDistance;\n      };\n\n      math.midOfThree = function (a, b, c) {\n        if (b <= a && a <= c || c <= a && a <= b) {\n          return a;\n        } else if (a <= b && b <= c || c <= b && b <= a) {\n          return b;\n        } else {\n          return c;\n        }\n      }; // (x1,y1)=>(x2,y2) intersect with (x3,y3)=>(x4,y4)\n\n\n      math.finiteLinesIntersect = function (x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {\n        var dx13 = x1 - x3;\n        var dx21 = x2 - x1;\n        var dx43 = x4 - x3;\n        var dy13 = y1 - y3;\n        var dy21 = y2 - y1;\n        var dy43 = y4 - y3;\n        var ua_t = dx43 * dy13 - dy43 * dx13;\n        var ub_t = dx21 * dy13 - dy21 * dx13;\n        var u_b = dy43 * dx21 - dx43 * dy21;\n\n        if (u_b !== 0) {\n          var ua = ua_t / u_b;\n          var ub = ub_t / u_b;\n          var flptThreshold = 0.001;\n          var min = 0 - flptThreshold;\n          var max = 1 + flptThreshold;\n\n          if (min <= ua && ua <= max && min <= ub && ub <= max) {\n            return [x1 + ua * dx21, y1 + ua * dy21];\n          } else {\n            if (!infiniteLines) {\n              return [];\n            } else {\n              return [x1 + ua * dx21, y1 + ua * dy21];\n            }\n          }\n        } else {\n          if (ua_t === 0 || ub_t === 0) {\n            // Parallel, coincident lines. Check if overlap\n            // Check endpoint of second line\n            if (this.midOfThree(x1, x2, x4) === x4) {\n              return [x4, y4];\n            } // Check start point of second line\n\n\n            if (this.midOfThree(x1, x2, x3) === x3) {\n              return [x3, y3];\n            } // Endpoint of first line\n\n\n            if (this.midOfThree(x3, x4, x2) === x2) {\n              return [x2, y2];\n            }\n\n            return [];\n          } else {\n            // Parallel, non-coincident\n            return [];\n          }\n        }\n      }; // math.polygonIntersectLine( x, y, basePoints, centerX, centerY, width, height, padding )\n      // intersect a node polygon (pts transformed)\n      //\n      // math.polygonIntersectLine( x, y, basePoints, centerX, centerY )\n      // intersect the points (no transform)\n\n\n      math.polygonIntersectLine = function (x, y, basePoints, centerX, centerY, width, height, padding) {\n        var intersections = [];\n        var intersection = void 0;\n        var transformedPoints = new Array(basePoints.length);\n        var doTransform = true;\n\n        if (arguments.length === 5) {\n          doTransform = false;\n        }\n\n        var points = void 0;\n\n        if (doTransform) {\n          for (var i = 0; i < transformedPoints.length / 2; i++) {\n            transformedPoints[i * 2] = basePoints[i * 2] * width + centerX;\n            transformedPoints[i * 2 + 1] = basePoints[i * 2 + 1] * height + centerY;\n          }\n\n          if (padding > 0) {\n            var expandedLineSet = math.expandPolygon(transformedPoints, -padding);\n            points = math.joinLines(expandedLineSet);\n          } else {\n            points = transformedPoints;\n          }\n        } else {\n          points = basePoints;\n        }\n\n        var currentX = void 0,\n            currentY = void 0,\n            nextX = void 0,\n            nextY = void 0;\n\n        for (var _i = 0; _i < points.length / 2; _i++) {\n          currentX = points[_i * 2];\n          currentY = points[_i * 2 + 1];\n\n          if (_i < points.length / 2 - 1) {\n            nextX = points[(_i + 1) * 2];\n            nextY = points[(_i + 1) * 2 + 1];\n          } else {\n            nextX = points[0];\n            nextY = points[1];\n          }\n\n          intersection = this.finiteLinesIntersect(x, y, centerX, centerY, currentX, currentY, nextX, nextY);\n\n          if (intersection.length !== 0) {\n            intersections.push(intersection[0], intersection[1]);\n          }\n        }\n\n        return intersections;\n      };\n\n      math.shortenIntersection = function (intersection, offset, amount) {\n        var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];\n        var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);\n        var lenRatio = (length - amount) / length;\n\n        if (lenRatio < 0) {\n          lenRatio = 0.00001;\n        }\n\n        return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];\n      };\n\n      math.generateUnitNgonPointsFitToSquare = function (sides, rotationRadians) {\n        var points = math.generateUnitNgonPoints(sides, rotationRadians);\n        points = math.fitPolygonToSquare(points);\n        return points;\n      };\n\n      math.fitPolygonToSquare = function (points) {\n        var x = void 0,\n            y = void 0;\n        var sides = points.length / 2;\n        var minX = Infinity,\n            minY = Infinity,\n            maxX = -Infinity,\n            maxY = -Infinity;\n\n        for (var i = 0; i < sides; i++) {\n          x = points[2 * i];\n          y = points[2 * i + 1];\n          minX = Math.min(minX, x);\n          maxX = Math.max(maxX, x);\n          minY = Math.min(minY, y);\n          maxY = Math.max(maxY, y);\n        } // stretch factors\n\n\n        var sx = 2 / (maxX - minX);\n        var sy = 2 / (maxY - minY);\n\n        for (var _i2 = 0; _i2 < sides; _i2++) {\n          x = points[2 * _i2] = points[2 * _i2] * sx;\n          y = points[2 * _i2 + 1] = points[2 * _i2 + 1] * sy;\n          minX = Math.min(minX, x);\n          maxX = Math.max(maxX, x);\n          minY = Math.min(minY, y);\n          maxY = Math.max(maxY, y);\n        }\n\n        if (minY < -1) {\n          for (var _i3 = 0; _i3 < sides; _i3++) {\n            y = points[2 * _i3 + 1] = points[2 * _i3 + 1] + (-1 - minY);\n          }\n        }\n\n        return points;\n      };\n\n      math.generateUnitNgonPoints = function (sides, rotationRadians) {\n        var increment = 1.0 / sides * 2 * Math.PI;\n        var startAngle = sides % 2 === 0 ? Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;\n        startAngle += rotationRadians;\n        var points = new Array(sides * 2);\n        var currentAngle = void 0;\n\n        for (var i = 0; i < sides; i++) {\n          currentAngle = i * increment + startAngle;\n          points[2 * i] = Math.cos(currentAngle); // x\n\n          points[2 * i + 1] = Math.sin(-currentAngle); // y\n        }\n\n        return points;\n      };\n\n      math.getRoundRectangleRadius = function (width, height) {\n        // Set the default radius, unless half of width or height is smaller than default\n        return Math.min(width / 4, height / 4, 8);\n      };\n\n      math.getCutRectangleCornerLength = function () {\n        return 8;\n      };\n\n      math.bezierPtsToQuadCoeff = function (p0, p1, p2) {\n        return [p0 - 2 * p1 + p2, 2 * (p1 - p0), p0];\n      };\n\n      math.getBarrelCurveConstants = function (width, height) {\n        // get curve width, height, and control point position offsets as a percentage of node height / width\n        return {\n          heightOffset: Math.min(15, 0.05 * height),\n          widthOffset: Math.min(100, 0.25 * width),\n          ctrlPtOffsetPct: 0.05\n        };\n      };\n\n      module.exports = math;\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      module.exports = typeof window === 'undefined' ? null : window; // eslint-disable-line no-undef\n\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\"; // use this module to cherry pick functions into your prototype\n      // (useful for functions shared between the core and collections, for example)\n      // e.g.\n      // let foo = define.foo({ /* params... */ })\n\n      var util = __webpack_require__(1);\n\n      var define = {};\n      [__webpack_require__(43), __webpack_require__(45), __webpack_require__(46)].forEach(function (m) {\n        util.assign(define, m);\n      });\n      module.exports = define;\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n      /*!\n      Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable\n      Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)\n      Licensed under The MIT License (http://opensource.org/licenses/MIT)\n      */\n\n      /*  promise states [Promises/A+ 2.1]  */\n\n\n      var STATE_PENDING = 0;\n      /*  [Promises/A+ 2.1.1]  */\n\n      var STATE_FULFILLED = 1;\n      /*  [Promises/A+ 2.1.2]  */\n\n      var STATE_REJECTED = 2;\n      /*  [Promises/A+ 2.1.3]  */\n\n      /*  promise object constructor  */\n\n      var api = function api(executor) {\n        /*  optionally support non-constructor/plain-function call  */\n        if (!(this instanceof api)) return new api(executor);\n        /*  initialize object  */\n\n        this.id = 'Thenable/1.0.7';\n        this.state = STATE_PENDING;\n        /*  initial state  */\n\n        this.fulfillValue = undefined;\n        /*  initial value  */\n\n        /*  [Promises/A+ 1.3, 2.1.2.2]  */\n\n        this.rejectReason = undefined;\n        /*  initial reason */\n\n        /*  [Promises/A+ 1.5, 2.1.3.2]  */\n\n        this.onFulfilled = [];\n        /*  initial handlers  */\n\n        this.onRejected = [];\n        /*  initial handlers  */\n\n        /*  provide optional information-hiding proxy  */\n\n        this.proxy = {\n          then: this.then.bind(this)\n        };\n        /*  support optional executor function  */\n\n        if (typeof executor === 'function') executor.call(this, this.fulfill.bind(this), this.reject.bind(this));\n      };\n      /*  promise API methods  */\n\n\n      api.prototype = {\n        /*  promise resolving methods  */\n        fulfill: function fulfill(value) {\n          return deliver(this, STATE_FULFILLED, 'fulfillValue', value);\n        },\n        reject: function reject(value) {\n          return deliver(this, STATE_REJECTED, 'rejectReason', value);\n        },\n\n        /*  \"The then Method\" [Promises/A+ 1.1, 1.2, 2.2]  */\n        then: function then(onFulfilled, onRejected) {\n          var curr = this;\n          var next = new api();\n          /*  [Promises/A+ 2.2.7]  */\n\n          curr.onFulfilled.push(resolver(onFulfilled, next, 'fulfill'));\n          /*  [Promises/A+ 2.2.2/2.2.6]  */\n\n          curr.onRejected.push(resolver(onRejected, next, 'reject'));\n          /*  [Promises/A+ 2.2.3/2.2.6]  */\n\n          execute(curr);\n          return next.proxy;\n          /*  [Promises/A+ 2.2.7, 3.3]  */\n        }\n      };\n      /*  deliver an action  */\n\n      var deliver = function deliver(curr, state, name, value) {\n        if (curr.state === STATE_PENDING) {\n          curr.state = state;\n          /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */\n\n          curr[name] = value;\n          /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */\n\n          execute(curr);\n        }\n\n        return curr;\n      };\n      /*  execute all handlers  */\n\n\n      var execute = function execute(curr) {\n        if (curr.state === STATE_FULFILLED) execute_handlers(curr, 'onFulfilled', curr.fulfillValue);else if (curr.state === STATE_REJECTED) execute_handlers(curr, 'onRejected', curr.rejectReason);\n      };\n      /*  execute particular set of handlers  */\n\n\n      var execute_handlers = function execute_handlers(curr, name, value) {\n        /* global setImmediate: true */\n\n        /* global setTimeout: true */\n\n        /*  short-circuit processing  */\n        if (curr[name].length === 0) return;\n        /*  iterate over all handlers, exactly once  */\n\n        var handlers = curr[name];\n        curr[name] = [];\n        /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */\n\n        var func = function func() {\n          for (var i = 0; i < handlers.length; i++) {\n            handlers[i](value);\n          }\n          /*  [Promises/A+ 2.2.5]  */\n\n        };\n        /*  execute procedure asynchronously  */\n\n        /*  [Promises/A+ 2.2.4, 3.1]  */\n\n\n        if (typeof setImmediate === 'function') setImmediate(func);else setTimeout(func, 0);\n      };\n      /*  generate a resolver function  */\n\n\n      var resolver = function resolver(cb, next, method) {\n        return function (value) {\n          if (typeof cb !== 'function')\n            /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */\n            next[method].call(next, value);\n            /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */\n          else {\n              var result;\n\n              try {\n                result = cb(value);\n              }\n              /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */\n              catch (e) {\n                next.reject(e);\n                /*  [Promises/A+ 2.2.7.2]  */\n\n                return;\n              }\n\n              resolve(next, result);\n              /*  [Promises/A+ 2.2.7.1]  */\n            }\n        };\n      };\n      /*  \"Promise Resolution Procedure\"  */\n\n      /*  [Promises/A+ 2.3]  */\n\n\n      var resolve = function resolve(promise, x) {\n        /*  sanity check arguments  */\n\n        /*  [Promises/A+ 2.3.1]  */\n        if (promise === x || promise.proxy === x) {\n          promise.reject(new TypeError('cannot resolve promise with itself'));\n          return;\n        }\n        /*  surgically check for a \"then\" method\n          (mainly to just call the \"getter\" of \"then\" only once)  */\n\n\n        var then;\n\n        if ((typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && x !== null || typeof x === 'function') {\n          try {\n            then = x.then;\n          }\n          /*  [Promises/A+ 2.3.3.1, 3.5]  */\n          catch (e) {\n            promise.reject(e);\n            /*  [Promises/A+ 2.3.3.2]  */\n\n            return;\n          }\n        }\n        /*  handle own Thenables    [Promises/A+ 2.3.2]\n          and similar \"thenables\" [Promises/A+ 2.3.3]  */\n\n\n        if (typeof then === 'function') {\n          var resolved = false;\n\n          try {\n            /*  call retrieved \"then\" method */\n\n            /*  [Promises/A+ 2.3.3.3]  */\n            then.call(x,\n            /*  resolvePromise  */\n\n            /*  [Promises/A+ 2.3.3.3.1]  */\n            function (y) {\n              if (resolved) return;\n              resolved = true;\n              /*  [Promises/A+ 2.3.3.3.3]  */\n\n              if (y === x)\n                /*  [Promises/A+ 3.6]  */\n                promise.reject(new TypeError('circular thenable chain'));else resolve(promise, y);\n            },\n            /*  rejectPromise  */\n\n            /*  [Promises/A+ 2.3.3.3.2]  */\n            function (r) {\n              if (resolved) return;\n              resolved = true;\n              /*  [Promises/A+ 2.3.3.3.3]  */\n\n              promise.reject(r);\n            });\n          } catch (e) {\n            if (!resolved)\n              /*  [Promises/A+ 2.3.3.3.3]  */\n              promise.reject(e);\n            /*  [Promises/A+ 2.3.3.3.4]  */\n          }\n\n          return;\n        }\n        /*  handle other values  */\n\n\n        promise.fulfill(x);\n        /*  [Promises/A+ 2.3.4, 2.3.3.4]  */\n      }; // so we always have Promise.all()\n\n\n      api.all = function (ps) {\n        return new api(function (resolveAll, rejectAll) {\n          var vals = new Array(ps.length);\n          var doneCount = 0;\n\n          var fulfill = function fulfill(i, val) {\n            vals[i] = val;\n            doneCount++;\n\n            if (doneCount === ps.length) {\n              resolveAll(vals);\n            }\n          };\n\n          for (var i = 0; i < ps.length; i++) {\n            (function (i) {\n              var p = ps[i];\n              var isPromise = p != null && p.then != null;\n\n              if (isPromise) {\n                p.then(function (val) {\n                  fulfill(i, val);\n                }, function (err) {\n                  rejectAll(err);\n                });\n              } else {\n                var val = p;\n                fulfill(i, val);\n              }\n            })(i);\n          }\n        });\n      };\n\n      api.resolve = function (val) {\n        return new api(function (resolve, reject) {\n          resolve(val);\n        });\n      };\n\n      api.reject = function (val) {\n        return new api(function (resolve, reject) {\n          reject(val);\n        });\n      };\n\n      module.exports = typeof Promise !== 'undefined' ? Promise : api; // eslint-disable-line no-undef\n\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var newQuery = __webpack_require__(10);\n\n      var Selector = function Selector(selector) {\n        var self = this;\n        self._private = {\n          selectorText: selector,\n          invalid: true\n        };\n\n        if (selector == null || is.string(selector) && selector.match(/^\\s*$/)) {\n          self.length = 0;\n        } else if (selector === '*' || selector === 'edge' || selector === 'node') {\n          // make single, group-only selectors cheap to make and cheap to filter\n          self[0] = newQuery();\n          self[0].group = selector === '*' ? selector : selector + 's';\n          self[0].groupOnly = true;\n          self[0].length = 1;\n          self._private.invalid = false;\n          self.length = 1;\n        } else if (is.elementOrCollection(selector)) {\n          var collection = selector.collection();\n          self[0] = newQuery();\n          self[0].collection = collection;\n          self[0].length = 1;\n          self.length = 1;\n        } else if (is.fn(selector)) {\n          self[0] = newQuery();\n          self[0].filter = selector;\n          self[0].length = 1;\n          self.length = 1;\n        } else if (is.string(selector)) {\n          if (!self.parse(selector)) {\n            return;\n          }\n        } else {\n          util.error('A selector must be created from a string; found ', selector);\n          return;\n        }\n\n        self._private.invalid = false;\n      };\n\n      var selfn = Selector.prototype;\n\n      selfn.valid = function () {\n        return !this._private.invalid;\n      };\n\n      selfn.invalid = function () {\n        return this._private.invalid;\n      };\n\n      selfn.text = function () {\n        return this._private.selectorText;\n      };\n\n      selfn.size = function () {\n        return this.length;\n      };\n\n      selfn.eq = function (i) {\n        return this[i];\n      };\n\n      selfn.sameText = function (otherSel) {\n        return this.text() === otherSel.text();\n      };\n\n      selfn.toString = selfn.selector = function () {\n        if (this._private.toStringCache != null) {\n          return this._private.toStringCache;\n        }\n\n        var i = void 0;\n        var str = '';\n\n        var clean = function clean(obj) {\n          if (obj == null) {\n            return '';\n          } else {\n            return obj;\n          }\n        };\n\n        var cleanVal = function cleanVal(val) {\n          if (is.string(val)) {\n            return '\"' + val + '\"';\n          } else {\n            return clean(val);\n          }\n        };\n\n        var space = function space(val) {\n          return ' ' + val + ' ';\n        };\n\n        var queryToString = function queryToString(query) {\n          var str = '';\n          var j = void 0,\n              sel = void 0;\n\n          if (query.subject === query) {\n            str += '$';\n          }\n\n          var group = clean(query.group);\n          str += group.substring(0, group.length - 1);\n\n          for (j = 0; j < query.data.length; j++) {\n            var data = query.data[j];\n\n            if (data.value) {\n              str += '[' + data.field + space(clean(data.operator)) + cleanVal(data.value) + ']';\n            } else {\n              str += '[' + clean(data.operator) + data.field + ']';\n            }\n          }\n\n          for (j = 0; j < query.meta.length; j++) {\n            var meta = query.meta[j];\n            str += '[[' + meta.field + space(clean(meta.operator)) + cleanVal(meta.value) + ']]';\n          }\n\n          for (j = 0; j < query.colonSelectors.length; j++) {\n            sel = query.colonSelectors[i];\n            str += sel;\n          }\n\n          for (j = 0; j < query.ids.length; j++) {\n            sel = '#' + query.ids[i];\n            str += sel;\n          }\n\n          for (j = 0; j < query.classes.length; j++) {\n            sel = '.' + query.classes[j];\n            str += sel;\n          }\n\n          if (query.source != null && query.target != null) {\n            str = queryToString(query.source) + ' -> ' + queryToString(query.target);\n          }\n\n          if (query.connectedNodes != null) {\n            var n = query.connectedNodes;\n            str = queryToString(n[0]) + ' <-> ' + queryToString(n[1]);\n          }\n\n          if (query.parent != null) {\n            str = queryToString(query.parent) + ' > ' + str;\n          }\n\n          if (query.ancestor != null) {\n            str = queryToString(query.ancestor) + ' ' + str;\n          }\n\n          if (query.child != null) {\n            str += ' > ' + queryToString(query.child);\n          }\n\n          if (query.descendant != null) {\n            str += ' ' + queryToString(query.descendant);\n          }\n\n          return str;\n        };\n\n        for (i = 0; i < this.length; i++) {\n          var query = this[i];\n          str += queryToString(query);\n\n          if (this.length > 1 && i < this.length - 1) {\n            str += ', ';\n          }\n        }\n\n        this._private.toStringCache = str;\n        return str;\n      };\n\n      [__webpack_require__(49), __webpack_require__(52)].forEach(function (p) {\n        return util.assign(selfn, p);\n      });\n      module.exports = Selector;\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var is = __webpack_require__(0);\n\n      var Map = __webpack_require__(28);\n\n      var Set = __webpack_require__(8);\n\n      var Element = __webpack_require__(14); // factory for generating edge ids when no id is specified for a new element\n\n\n      var idFactory = {\n        generate: function generate(cy, element, tryThisId) {\n          var id = tryThisId != null ? tryThisId : util.uuid();\n\n          while (cy.hasElementWithId(id)) {\n            id = util.uuid();\n          }\n\n          return id;\n        }\n      }; // represents a set of nodes, edges, or both together\n\n      var Collection = function Collection(cy, elements, options) {\n        if (cy === undefined || !is.core(cy)) {\n          util.error('A collection must have a reference to the core');\n          return;\n        }\n\n        var map = new Map();\n        var createdElements = false;\n\n        if (!elements) {\n          elements = [];\n        } else if (elements.length > 0 && is.plainObject(elements[0]) && !is.element(elements[0])) {\n          createdElements = true; // make elements from json and restore all at once later\n\n          var eles = [];\n          var elesIds = new Set();\n\n          for (var i = 0, l = elements.length; i < l; i++) {\n            var json = elements[i];\n\n            if (json.data == null) {\n              json.data = {};\n            }\n\n            var data = json.data; // make sure newly created elements have valid ids\n\n            if (data.id == null) {\n              data.id = idFactory.generate(cy, json);\n            } else if (cy.hasElementWithId(data.id) || elesIds.has(data.id)) {\n              continue; // can't create element if prior id already exists\n            }\n\n            var ele = new Element(cy, json, false);\n            eles.push(ele);\n            elesIds.add(data.id);\n          }\n\n          elements = eles;\n        }\n\n        this.length = 0;\n\n        for (var _i = 0, _l = elements.length; _i < _l; _i++) {\n          var element = elements[_i];\n\n          if (element == null) {\n            continue;\n          }\n\n          var id = element._private.data.id;\n\n          if (options == null || options.unique && !map.has(id)) {\n            map.set(id, {\n              index: this.length,\n              ele: element\n            });\n            this[this.length] = element;\n            this.length++;\n          }\n        }\n\n        this._private = {\n          cy: cy,\n          map: map\n        }; // restore the elements if we created them from json\n\n        if (createdElements) {\n          this.restore();\n        }\n      }; // Functions\n      ////////////////////////////////////////////////////////////////////////////////////////////////////\n      // keep the prototypes in sync (an element has the same functions as a collection)\n      // and use elefn and elesfn as shorthands to the prototypes\n\n\n      var elesfn = Element.prototype = Collection.prototype;\n\n      elesfn.instanceString = function () {\n        return 'collection';\n      };\n\n      elesfn.spawn = function (cy, eles, opts) {\n        if (!is.core(cy)) {\n          // cy is optional\n          opts = eles;\n          eles = cy;\n          cy = this.cy();\n        }\n\n        return new Collection(cy, eles, opts);\n      };\n\n      elesfn.spawnSelf = function () {\n        return this.spawn(this);\n      };\n\n      elesfn.cy = function () {\n        return this._private.cy;\n      };\n\n      elesfn.renderer = function () {\n        return this._private.cy.renderer();\n      };\n\n      elesfn.element = function () {\n        return this[0];\n      };\n\n      elesfn.collection = function () {\n        if (is.collection(this)) {\n          return this;\n        } else {\n          // an element\n          return new Collection(this._private.cy, [this]);\n        }\n      };\n\n      elesfn.unique = function () {\n        return new Collection(this._private.cy, this, {\n          unique: true\n        });\n      };\n\n      elesfn.hasElementWithId = function (id) {\n        return this._private.map.has(id);\n      };\n\n      elesfn.getElementById = function (id) {\n        var cy = this._private.cy;\n\n        var entry = this._private.map.get(id);\n\n        return entry ? entry.ele : new Collection(cy); // get ele or empty collection\n      };\n\n      elesfn.$id = elesfn.getElementById;\n\n      elesfn.poolIndex = function () {\n        var cy = this._private.cy;\n        var eles = cy._private.elements;\n        var id = this._private.data.id;\n        return eles._private.map.get(id).index;\n      };\n\n      elesfn.json = function (obj) {\n        var ele = this.element();\n        var cy = this.cy();\n\n        if (ele == null && obj) {\n          return this;\n        } // can't set to no eles\n\n\n        if (ele == null) {\n          return undefined;\n        } // can't get from no eles\n\n\n        var p = ele._private;\n\n        if (is.plainObject(obj)) {\n          // set\n          cy.startBatch();\n\n          if (obj.data) {\n            ele.data(obj.data);\n          }\n\n          if (obj.position) {\n            ele.position(obj.position);\n          } // ignore group -- immutable\n\n\n          var checkSwitch = function checkSwitch(k, trueFnName, falseFnName) {\n            var obj_k = obj[k];\n\n            if (obj_k != null && obj_k !== p[k]) {\n              if (obj_k) {\n                ele[trueFnName]();\n              } else {\n                ele[falseFnName]();\n              }\n            }\n          };\n\n          checkSwitch('removed', 'remove', 'restore');\n          checkSwitch('selected', 'select', 'unselect');\n          checkSwitch('selectable', 'selectify', 'unselectify');\n          checkSwitch('locked', 'lock', 'unlock');\n          checkSwitch('grabbable', 'grabify', 'ungrabify');\n\n          if (obj.classes != null) {\n            ele.classes(obj.classes);\n          }\n\n          cy.endBatch();\n          return this;\n        } else if (obj === undefined) {\n          // get\n          var json = {\n            data: util.copy(p.data),\n            position: util.copy(p.position),\n            group: p.group,\n            removed: p.removed,\n            selected: p.selected,\n            selectable: p.selectable,\n            locked: p.locked,\n            grabbable: p.grabbable,\n            classes: null\n          };\n          json.classes = '';\n          var i = 0;\n          p.classes.forEach(function (cls) {\n            return json.classes += i++ === 0 ? cls : ' ' + cls;\n          });\n          return json;\n        }\n      };\n\n      elesfn.jsons = function () {\n        var jsons = [];\n\n        for (var i = 0; i < this.length; i++) {\n          var ele = this[i];\n          var json = ele.json();\n          jsons.push(json);\n        }\n\n        return jsons;\n      };\n\n      elesfn.clone = function () {\n        var cy = this.cy();\n        var elesArr = [];\n\n        for (var i = 0; i < this.length; i++) {\n          var ele = this[i];\n          var json = ele.json();\n          var clone = new Element(cy, json, false); // NB no restore\n\n          elesArr.push(clone);\n        }\n\n        return new Collection(cy, elesArr);\n      };\n\n      elesfn.copy = elesfn.clone;\n\n      elesfn.restore = function (notifyRenderer) {\n        var self = this;\n        var cy = self.cy();\n        var cy_p = cy._private;\n\n        if (notifyRenderer === undefined) {\n          notifyRenderer = true;\n        } // create arrays of nodes and edges, since we need to\n        // restore the nodes first\n\n\n        var nodes = [];\n        var edges = [];\n        var elements = void 0;\n\n        for (var _i2 = 0, l = self.length; _i2 < l; _i2++) {\n          var ele = self[_i2];\n\n          if (!ele.removed()) {\n            // don't need to handle this ele\n            continue;\n          } // keep nodes first in the array and edges after\n\n\n          if (ele.isNode()) {\n            // put to front of array if node\n            nodes.push(ele);\n          } else {\n            // put to end of array if edge\n            edges.push(ele);\n          }\n        }\n\n        elements = nodes.concat(edges);\n        var i = void 0;\n\n        var removeFromElements = function removeFromElements() {\n          elements.splice(i, 1);\n          i--;\n        }; // now, restore each element\n\n\n        for (i = 0; i < elements.length; i++) {\n          var _ele = elements[i];\n          var _private = _ele._private;\n          var data = _private.data; // the traversal cache should start fresh when ele is added\n\n          _ele.clearTraversalCache(); // set id and validate\n\n\n          if (data.id === undefined) {\n            data.id = idFactory.generate(cy, _ele);\n          } else if (is.number(data.id)) {\n            data.id = '' + data.id; // now it's a string\n          } else if (is.emptyString(data.id) || !is.string(data.id)) {\n            util.error('Can not create element with invalid string ID `' + data.id + '`'); // can't create element if it has empty string as id or non-string id\n\n            removeFromElements();\n            continue;\n          } else if (cy.hasElementWithId(data.id)) {\n            util.error('Can not create second element with ID `' + data.id + '`'); // can't create element if one already has that id\n\n            removeFromElements();\n            continue;\n          }\n\n          var id = data.id; // id is finalised, now let's keep a ref\n\n          if (_ele.isNode()) {\n            // extra checks for nodes\n            var pos = _private.position; // make sure the nodes have a defined position\n\n            if (pos.x == null) {\n              pos.x = 0;\n            }\n\n            if (pos.y == null) {\n              pos.y = 0;\n            }\n          }\n\n          if (_ele.isEdge()) {\n            // extra checks for edges\n            var edge = _ele;\n            var fields = ['source', 'target'];\n            var fieldsLength = fields.length;\n            var badSourceOrTarget = false;\n\n            for (var j = 0; j < fieldsLength; j++) {\n              var field = fields[j];\n              var val = data[field];\n\n              if (is.number(val)) {\n                val = data[field] = '' + data[field]; // now string\n              }\n\n              if (val == null || val === '') {\n                // can't create if source or target is not defined properly\n                util.error('Can not create edge `' + id + '` with unspecified ' + field);\n                badSourceOrTarget = true;\n              } else if (!cy.hasElementWithId(val)) {\n                // can't create edge if one of its nodes doesn't exist\n                util.error('Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`');\n                badSourceOrTarget = true;\n              }\n            }\n\n            if (badSourceOrTarget) {\n              removeFromElements();\n              continue;\n            } // can't create this\n\n\n            var src = cy.getElementById(data.source);\n            var tgt = cy.getElementById(data.target);\n\n            src._private.edges.push(edge);\n\n            tgt._private.edges.push(edge);\n\n            edge._private.source = src;\n            edge._private.target = tgt;\n          } // if is edge\n          // create mock ids / indexes maps for element so it can be used like collections\n\n\n          _private.map = new Map();\n\n          _private.map.set(id, {\n            ele: _ele,\n            index: 0\n          });\n\n          _private.removed = false;\n          cy.addToPool(_ele);\n        } // for each element\n        // do compound node sanity checks\n\n\n        for (var _i3 = 0; _i3 < nodes.length; _i3++) {\n          // each node\n          var node = nodes[_i3];\n          var _data = node._private.data;\n\n          if (is.number(_data.parent)) {\n            // then automake string\n            _data.parent = '' + _data.parent;\n          }\n\n          var parentId = _data.parent;\n          var specifiedParent = parentId != null;\n\n          if (specifiedParent) {\n            var parent = cy.getElementById(parentId);\n\n            if (parent.empty()) {\n              // non-existant parent; just remove it\n              _data.parent = undefined;\n            } else {\n              var selfAsParent = false;\n              var ancestor = parent;\n\n              while (!ancestor.empty()) {\n                if (node.same(ancestor)) {\n                  // mark self as parent and remove from data\n                  selfAsParent = true;\n                  _data.parent = undefined; // remove parent reference\n                  // exit or we loop forever\n\n                  break;\n                }\n\n                ancestor = ancestor.parent();\n              }\n\n              if (!selfAsParent) {\n                // connect with children\n                parent[0]._private.children.push(node);\n\n                node._private.parent = parent[0]; // let the core know we have a compound graph\n\n                cy_p.hasCompoundNodes = true;\n              }\n            } // else\n\n          } // if specified parent\n\n        } // for each node\n\n\n        if (elements.length > 0) {\n          var restored = new Collection(cy, elements);\n\n          for (var _i4 = 0; _i4 < restored.length; _i4++) {\n            var _ele2 = restored[_i4];\n\n            if (_ele2.isNode()) {\n              continue;\n            } // adding an edge invalidates the traversal caches for the parallel edges\n\n\n            _ele2.parallelEdges().clearTraversalCache(); // adding an edge invalidates the traversal cache for the connected nodes\n\n\n            _ele2.source().clearTraversalCache();\n\n            _ele2.target().clearTraversalCache();\n          }\n\n          var toUpdateStyle = void 0;\n\n          if (cy_p.hasCompoundNodes) {\n            toUpdateStyle = cy.collection().merge(restored).merge(restored.connectedNodes()).merge(restored.parent());\n          } else {\n            toUpdateStyle = restored;\n          }\n\n          toUpdateStyle.dirtyCompoundBoundsCache().updateStyle(notifyRenderer);\n\n          if (notifyRenderer) {\n            restored.emitAndNotify('add');\n          } else {\n            restored.emit('add');\n          }\n        }\n\n        return self; // chainability\n      };\n\n      elesfn.removed = function () {\n        var ele = this[0];\n        return ele && ele._private.removed;\n      };\n\n      elesfn.inside = function () {\n        var ele = this[0];\n        return ele && !ele._private.removed;\n      };\n\n      elesfn.remove = function (notifyRenderer) {\n        var self = this;\n        var removed = [];\n        var elesToRemove = [];\n        var elesToRemoveIds = {};\n        var cy = self._private.cy;\n\n        if (notifyRenderer === undefined) {\n          notifyRenderer = true;\n        } // add connected edges\n\n\n        function addConnectedEdges(node) {\n          var edges = node._private.edges;\n\n          for (var i = 0; i < edges.length; i++) {\n            add(edges[i]);\n          }\n        } // add descendant nodes\n\n\n        function addChildren(node) {\n          var children = node._private.children;\n\n          for (var i = 0; i < children.length; i++) {\n            add(children[i]);\n          }\n        }\n\n        function add(ele) {\n          var alreadyAdded = elesToRemoveIds[ele.id()];\n\n          if (ele.removed() || alreadyAdded) {\n            return;\n          } else {\n            elesToRemoveIds[ele.id()] = true;\n          }\n\n          if (ele.isNode()) {\n            elesToRemove.push(ele); // nodes are removed last\n\n            addConnectedEdges(ele);\n            addChildren(ele);\n          } else {\n            elesToRemove.unshift(ele); // edges are removed first\n          }\n        } // make the list of elements to remove\n        // (may be removing more than specified due to connected edges etc)\n\n\n        for (var i = 0, l = self.length; i < l; i++) {\n          var ele = self[i];\n          add(ele);\n        }\n\n        function removeEdgeRef(node, edge) {\n          var connectedEdges = node._private.edges;\n          util.removeFromArray(connectedEdges, edge); // removing an edges invalidates the traversal cache for its nodes\n\n          node.clearTraversalCache();\n        }\n\n        function removeParallelRefs(edge) {\n          // removing an edge invalidates the traversal caches for the parallel edges\n          edge.parallelEdges().clearTraversalCache();\n        }\n\n        var alteredParents = [];\n        alteredParents.ids = {};\n\n        function removeChildRef(parent, ele) {\n          ele = ele[0];\n          parent = parent[0];\n          var children = parent._private.children;\n          var pid = parent.id();\n          util.removeFromArray(children, ele);\n\n          if (!alteredParents.ids[pid]) {\n            alteredParents.ids[pid] = true;\n            alteredParents.push(parent);\n          }\n        }\n\n        self.dirtyCompoundBoundsCache();\n        cy.removeFromPool(elesToRemove); // remove from core pool\n\n        for (var _i5 = 0; _i5 < elesToRemove.length; _i5++) {\n          var _ele3 = elesToRemove[_i5]; // mark as removed\n\n          _ele3._private.removed = true; // add to list of removed elements\n\n          removed.push(_ele3);\n\n          if (_ele3.isEdge()) {\n            // remove references to this edge in its connected nodes\n            var src = _ele3.source()[0];\n\n            var tgt = _ele3.target()[0];\n\n            removeEdgeRef(src, _ele3);\n            removeEdgeRef(tgt, _ele3);\n            removeParallelRefs(_ele3);\n          } else {\n            // remove reference to parent\n            var parent = _ele3.parent();\n\n            if (parent.length !== 0) {\n              removeChildRef(parent, _ele3);\n            }\n          }\n        } // check to see if we have a compound graph or not\n\n\n        var elesStillInside = cy._private.elements;\n        cy._private.hasCompoundNodes = false;\n\n        for (var _i6 = 0; _i6 < elesStillInside.length; _i6++) {\n          var _ele4 = elesStillInside[_i6];\n\n          if (_ele4.isParent()) {\n            cy._private.hasCompoundNodes = true;\n            break;\n          }\n        }\n\n        var removedElements = new Collection(this.cy(), removed);\n\n        if (removedElements.size() > 0) {\n          // must manually notify since trigger won't do this automatically once removed\n          if (notifyRenderer) {\n            this.cy().notify({\n              type: 'remove',\n              eles: removedElements\n            });\n          }\n\n          removedElements.emit('remove');\n        } // the parents who were modified by the removal need their style updated\n\n\n        for (var _i7 = 0; _i7 < alteredParents.length; _i7++) {\n          var _ele5 = alteredParents[_i7];\n\n          if (!_ele5.removed()) {\n            _ele5.updateStyle();\n          }\n        }\n\n        return new Collection(cy, removed);\n      };\n\n      elesfn.move = function (struct) {\n        var cy = this._private.cy;\n\n        if (struct.source !== undefined || struct.target !== undefined) {\n          var srcId = struct.source;\n          var tgtId = struct.target;\n          var srcExists = cy.hasElementWithId(srcId);\n          var tgtExists = cy.hasElementWithId(tgtId);\n\n          if (srcExists || tgtExists) {\n            var jsons = this.jsons();\n            this.remove();\n\n            for (var i = 0; i < jsons.length; i++) {\n              var json = jsons[i];\n              var ele = this[i];\n\n              if (json.group === 'edges') {\n                if (srcExists) {\n                  json.data.source = srcId;\n                }\n\n                if (tgtExists) {\n                  json.data.target = tgtId;\n                }\n\n                json.scratch = ele._private.scratch;\n              }\n            }\n\n            return cy.add(jsons);\n          }\n        } else if (struct.parent !== undefined) {\n          // move node to new parent\n          var parentId = struct.parent;\n          var parentExists = parentId === null || cy.hasElementWithId(parentId);\n\n          if (parentExists) {\n            var _jsons = this.jsons();\n\n            var descs = this.descendants();\n            var descsEtcJsons = descs.union(descs.union(this).connectedEdges()).jsons();\n            this.remove(); // NB: also removes descendants and their connected edges\n\n            for (var _i8 = 0; _i8 < _jsons.length; _i8++) {\n              var _json = _jsons[_i8];\n              var _ele6 = this[_i8];\n\n              if (_json.group === 'nodes') {\n                _json.data.parent = parentId === null ? undefined : parentId;\n                _json.scratch = _ele6._private.scratch;\n              }\n            }\n\n            return cy.add(_jsons.concat(descsEtcJsons));\n          }\n        }\n\n        return this; // if nothing done\n      };\n\n      [__webpack_require__(29), __webpack_require__(42), __webpack_require__(47), __webpack_require__(48), __webpack_require__(53), __webpack_require__(54), __webpack_require__(55), __webpack_require__(56), __webpack_require__(61), __webpack_require__(62), __webpack_require__(63), __webpack_require__(7), __webpack_require__(64), __webpack_require__(65), __webpack_require__(66), __webpack_require__(67), __webpack_require__(68)].forEach(function (props) {\n        util.extend(elesfn, props);\n      });\n      module.exports = Collection;\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /* global Set */\n\n\n      var undef = true ? 'undefined' : _typeof(undefined);\n\n      var ObjectSet = function () {\n        function ObjectSet(arrayOrObjectSet) {\n          _classCallCheck(this, ObjectSet);\n\n          this._obj = Object.create(null);\n\n          if (arrayOrObjectSet != null) {\n            var arr = void 0;\n\n            if (arrayOrObjectSet.instanceString != null && arrayOrObjectSet.instanceString() === this.instanceString()) {\n              arr = arrayOrObjectSet.toArray();\n            } else {\n              arr = arrayOrObjectSet;\n            }\n\n            for (var i = 0; i < arr.length; i++) {\n              this.add(arr[i]);\n            }\n          }\n        }\n\n        _createClass(ObjectSet, [{\n          key: 'instanceString',\n          value: function instanceString() {\n            return 'set';\n          }\n        }, {\n          key: 'add',\n          value: function add(val) {\n            this._obj[val] = 1;\n          }\n        }, {\n          key: 'delete',\n          value: function _delete(val) {\n            this._obj[val] = 0;\n          }\n        }, {\n          key: 'clear',\n          value: function clear() {\n            this._obj = Object.create(null);\n          }\n        }, {\n          key: 'has',\n          value: function has(val) {\n            return this._obj[val] === 1;\n          }\n        }, {\n          key: 'toArray',\n          value: function toArray() {\n            var _this = this;\n\n            return Object.keys(this._obj).filter(function (key) {\n              return _this.has(key);\n            });\n          }\n        }, {\n          key: 'forEach',\n          value: function forEach(callback, thisArg) {\n            return this.toArray().forEach(callback, thisArg);\n          }\n        }, {\n          key: 'size',\n          get: function get() {\n            return this.toArray().length;\n          }\n        }]);\n\n        return ObjectSet;\n      }(); // TODO use the stdlib Set in future...\n      // module.exports = typeof Set !== undef ? Set : ObjectSet;\n\n\n      module.exports = ObjectSet;\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      module.exports = __webpack_require__(32);\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\"; // storage for parsed queries\n\n      var newQuery = function newQuery() {\n        return {\n          classes: [],\n          colonSelectors: [],\n          data: [],\n          group: null,\n          ids: [],\n          meta: [],\n          // fake selectors\n          collection: null,\n          // a collection to match against\n          filter: null,\n          // filter function\n          // these are defined in the upward direction rather than down (e.g. child)\n          // because we need to go up in Selector.filter()\n          parent: null,\n          // parent query obj\n          ancestor: null,\n          // ancestor query obj\n          subject: null,\n          // defines subject in compound query (subject query obj; points to self if subject)\n          // use these only when subject has been defined\n          child: null,\n          descendant: null\n        };\n      };\n\n      module.exports = newQuery;\n      /***/\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var is = __webpack_require__(0);\n\n      var Event = __webpack_require__(16);\n\n      var eventRegex = /^([^.]+)(\\.(?:[^.]+))?$/; // regex for matching event strings (e.g. \"click.namespace\")\n\n      var universalNamespace = '.*'; // matches as if no namespace specified and prevents users from unbinding accidentally\n\n      var defaults = {\n        qualifierCompare: function qualifierCompare(q1, q2) {\n          return q1 === q2;\n        },\n        eventMatches: function eventMatches()\n        /*context, listener, eventObj*/\n        {\n          return true;\n        },\n        eventFields: function eventFields()\n        /*context*/\n        {\n          return {};\n        },\n        callbackContext: function callbackContext(context\n        /*, listener, eventObj*/\n        ) {\n          return context;\n        },\n        beforeEmit: function beforeEmit()\n        /* context, listener, eventObj */\n        {},\n        afterEmit: function afterEmit()\n        /* context, listener, eventObj */\n        {},\n        bubble: function bubble()\n        /*context*/\n        {\n          return false;\n        },\n        parent: function parent()\n        /*context*/\n        {\n          return null;\n        },\n        context: undefined\n      };\n\n      function Emitter(opts) {\n        util.assign(this, defaults, opts);\n        this.listeners = [];\n        this.emitting = 0;\n      }\n\n      var p = Emitter.prototype;\n\n      var forEachEvent = function forEachEvent(self, handler, events, qualifier, callback, conf, confOverrides) {\n        if (is.fn(qualifier)) {\n          callback = qualifier;\n          qualifier = null;\n        }\n\n        if (confOverrides) {\n          if (conf == null) {\n            conf = confOverrides;\n          } else {\n            conf = util.assign({}, conf, confOverrides);\n          }\n        }\n\n        var eventList = events.split(/\\s+/);\n\n        for (var i = 0; i < eventList.length; i++) {\n          var evt = eventList[i];\n\n          if (is.emptyString(evt)) {\n            continue;\n          }\n\n          var match = evt.match(eventRegex); // type[.namespace]\n\n          if (match) {\n            var type = match[1];\n            var namespace = match[2] ? match[2] : null;\n            var ret = handler(self, evt, type, namespace, qualifier, callback, conf);\n\n            if (ret === false) {\n              break;\n            } // allow exiting early\n\n          }\n        }\n      };\n\n      var makeEventObj = function makeEventObj(self, obj) {\n        return new Event(obj.type, util.assign(obj, self.eventFields(self.context)));\n      };\n\n      var forEachEventObj = function forEachEventObj(self, handler, events) {\n        if (is.event(events)) {\n          handler(self, events);\n          return;\n        } else if (is.plainObject(events)) {\n          handler(self, makeEventObj(self, events));\n          return;\n        }\n\n        var eventList = events.split(/\\s+/);\n\n        for (var i = 0; i < eventList.length; i++) {\n          var evt = eventList[i];\n\n          if (is.emptyString(evt)) {\n            continue;\n          }\n\n          var match = evt.match(eventRegex); // type[.namespace]\n\n          if (match) {\n            var type = match[1];\n            var namespace = match[2] ? match[2] : null;\n            var eventObj = makeEventObj(self, {\n              type: type,\n              namespace: namespace,\n              target: self.context\n            });\n            handler(self, eventObj);\n          }\n        }\n      };\n\n      p.on = p.addListener = function (events, qualifier, callback, conf, confOverrides) {\n        forEachEvent(this, function (self, event, type, namespace, qualifier, callback, conf) {\n          if (is.fn(callback)) {\n            self.listeners.push({\n              event: event,\n              // full event string\n              callback: callback,\n              // callback to run\n              type: type,\n              // the event type (e.g. 'click')\n              namespace: namespace,\n              // the event namespace (e.g. \".foo\")\n              qualifier: qualifier,\n              // a restriction on whether to match this emitter\n              conf: conf // additional configuration\n\n            });\n          }\n        }, events, qualifier, callback, conf, confOverrides);\n        return this;\n      };\n\n      p.one = function (events, qualifier, callback, conf) {\n        return this.on(events, qualifier, callback, conf, {\n          one: true\n        });\n      };\n\n      p.removeListener = p.off = function (events, qualifier, callback, conf) {\n        var _this = this;\n\n        if (this.emitting !== 0) {\n          this.listeners = util.copyArray(this.listeners);\n        }\n\n        var listeners = this.listeners;\n\n        var _loop = function _loop(i) {\n          var listener = listeners[i];\n          forEachEvent(_this, function (self, event, type, namespace, qualifier, callback\n          /*, conf*/\n          ) {\n            if (listener.type === type && (!namespace || listener.namespace === namespace) && (!qualifier || self.qualifierCompare(listener.qualifier, qualifier)) && (!callback || listener.callback === callback)) {\n              listeners.splice(i, 1);\n              return false;\n            }\n          }, events, qualifier, callback, conf);\n        };\n\n        for (var i = listeners.length - 1; i >= 0; i--) {\n          _loop(i);\n        }\n\n        return this;\n      };\n\n      p.emit = p.trigger = function (events, extraParams, manualCallback) {\n        var listeners = this.listeners;\n        var numListenersBeforeEmit = listeners.length;\n        this.emitting++;\n\n        if (!is.array(extraParams)) {\n          extraParams = [extraParams];\n        }\n\n        forEachEventObj(this, function (self, eventObj) {\n          if (manualCallback != null) {\n            listeners = [{\n              event: eventObj.event,\n              type: eventObj.type,\n              namespace: eventObj.namespace,\n              callback: manualCallback\n            }];\n            numListenersBeforeEmit = listeners.length;\n          }\n\n          var _loop2 = function _loop2(i) {\n            var listener = listeners[i];\n\n            if (listener.type === eventObj.type && (!listener.namespace || listener.namespace === eventObj.namespace || listener.namespace === universalNamespace) && self.eventMatches(self.context, listener, eventObj)) {\n              var args = [eventObj];\n\n              if (extraParams != null) {\n                util.push(args, extraParams);\n              }\n\n              self.beforeEmit(self.context, listener, eventObj);\n\n              if (listener.conf && listener.conf.one) {\n                self.listeners = self.listeners.filter(function (l) {\n                  return l !== listener;\n                });\n              }\n\n              var context = self.callbackContext(self.context, listener, eventObj);\n              var ret = listener.callback.apply(context, args);\n              self.afterEmit(self.context, listener, eventObj);\n\n              if (ret === false) {\n                eventObj.stopPropagation();\n                eventObj.preventDefault();\n              }\n            } // if listener matches\n\n          };\n\n          for (var i = 0; i < numListenersBeforeEmit; i++) {\n            _loop2(i);\n          } // for listener\n\n\n          if (self.bubble(self.context) && !eventObj.isPropagationStopped()) {\n            self.parent(self.context).emit(eventObj, extraParams);\n          }\n        }, events);\n        this.emitting--;\n        return this;\n      };\n\n      module.exports = Emitter;\n      /***/\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var window = __webpack_require__(3);\n\n      var util = __webpack_require__(1);\n\n      var Collection = __webpack_require__(7);\n\n      var is = __webpack_require__(0);\n\n      var Promise = __webpack_require__(5);\n\n      var define = __webpack_require__(4);\n\n      var Core = function Core(opts) {\n        var cy = this;\n        opts = util.extend({}, opts);\n        var container = opts.container; // allow for passing a wrapped jquery object\n        // e.g. cytoscape({ container: $('#cy') })\n\n        if (container && !is.htmlElement(container) && is.htmlElement(container[0])) {\n          container = container[0];\n        }\n\n        var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery\n\n        reg = reg || {};\n\n        if (reg && reg.cy) {\n          reg.cy.destroy();\n          reg = {}; // old instance => replace reg completely\n        }\n\n        var readies = reg.readies = reg.readies || [];\n\n        if (container) {\n          container._cyreg = reg;\n        } // make sure container assoc'd reg points to this cy\n\n\n        reg.cy = cy;\n        var head = window !== undefined && container !== undefined && !opts.headless;\n        var options = opts;\n        options.layout = util.extend({\n          name: head ? 'grid' : 'null'\n        }, options.layout);\n        options.renderer = util.extend({\n          name: head ? 'canvas' : 'null'\n        }, options.renderer);\n\n        var defVal = function defVal(def, val, altVal) {\n          if (val !== undefined) {\n            return val;\n          } else if (altVal !== undefined) {\n            return altVal;\n          } else {\n            return def;\n          }\n        };\n\n        var _p = this._private = {\n          container: container,\n          // html dom ele container\n          ready: false,\n          // whether ready has been triggered\n          options: options,\n          // cached options\n          elements: new Collection(this),\n          // elements in the graph\n          listeners: [],\n          // list of listeners\n          aniEles: new Collection(this),\n          // elements being animated\n          scratch: {},\n          // scratch object for core\n          layout: null,\n          renderer: null,\n          destroyed: false,\n          // whether destroy was called\n          notificationsEnabled: true,\n          // whether notifications are sent to the renderer\n          minZoom: 1e-50,\n          maxZoom: 1e50,\n          zoomingEnabled: defVal(true, options.zoomingEnabled),\n          userZoomingEnabled: defVal(true, options.userZoomingEnabled),\n          panningEnabled: defVal(true, options.panningEnabled),\n          userPanningEnabled: defVal(true, options.userPanningEnabled),\n          boxSelectionEnabled: defVal(true, options.boxSelectionEnabled),\n          autolock: defVal(false, options.autolock, options.autolockNodes),\n          autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),\n          autounselectify: defVal(false, options.autounselectify),\n          styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,\n          zoom: is.number(options.zoom) ? options.zoom : 1,\n          pan: {\n            x: is.plainObject(options.pan) && is.number(options.pan.x) ? options.pan.x : 0,\n            y: is.plainObject(options.pan) && is.number(options.pan.y) ? options.pan.y : 0\n          },\n          animation: {\n            // object for currently-running animations\n            current: [],\n            queue: []\n          },\n          hasCompoundNodes: false\n        };\n\n        this.createEmitter(); // set selection type\n\n        var selType = options.selectionType;\n\n        if (selType === undefined || selType !== 'additive' && selType !== 'single') {\n          // then set default\n          _p.selectionType = 'single';\n        } else {\n          _p.selectionType = selType;\n        } // init zoom bounds\n\n\n        if (is.number(options.minZoom) && is.number(options.maxZoom) && options.minZoom < options.maxZoom) {\n          _p.minZoom = options.minZoom;\n          _p.maxZoom = options.maxZoom;\n        } else if (is.number(options.minZoom) && options.maxZoom === undefined) {\n          _p.minZoom = options.minZoom;\n        } else if (is.number(options.maxZoom) && options.minZoom === undefined) {\n          _p.maxZoom = options.maxZoom;\n        }\n\n        var loadExtData = function loadExtData(extData, next) {\n          var anyIsPromise = extData.some(is.promise);\n\n          if (anyIsPromise) {\n            return Promise.all(extData).then(next); // load all data asynchronously, then exec rest of init\n          } else {\n            next(extData); // exec synchronously for convenience\n          }\n        }; // start with the default stylesheet so we have something before loading an external stylesheet\n\n\n        if (_p.styleEnabled) {\n          cy.setStyle([]);\n        } // create the renderer\n\n\n        cy.initRenderer(util.extend({\n          hideEdgesOnViewport: options.hideEdgesOnViewport,\n          textureOnViewport: options.textureOnViewport,\n          wheelSensitivity: is.number(options.wheelSensitivity) && options.wheelSensitivity > 0 ? options.wheelSensitivity : 1,\n          motionBlur: options.motionBlur === undefined ? false : options.motionBlur,\n          // off by default\n          motionBlurOpacity: options.motionBlurOpacity === undefined ? 0.05 : options.motionBlurOpacity,\n          pixelRatio: is.number(options.pixelRatio) && options.pixelRatio > 0 ? options.pixelRatio : undefined,\n          desktopTapThreshold: options.desktopTapThreshold === undefined ? 4 : options.desktopTapThreshold,\n          touchTapThreshold: options.touchTapThreshold === undefined ? 8 : options.touchTapThreshold\n        }, options.renderer));\n\n        var setElesAndLayout = function setElesAndLayout(elements, onload, ondone) {\n          cy.notifications(false); // remove old elements\n\n          var oldEles = cy.mutableElements();\n\n          if (oldEles.length > 0) {\n            oldEles.remove();\n          }\n\n          if (elements != null) {\n            if (is.plainObject(elements) || is.array(elements)) {\n              cy.add(elements);\n            }\n          }\n\n          cy.one('layoutready', function (e) {\n            cy.notifications(true);\n            cy.emit(e); // we missed this event by turning notifications off, so pass it on\n\n            cy.notify({\n              type: 'load',\n              eles: cy.mutableElements()\n            });\n            cy.one('load', onload);\n            cy.emit('load');\n          }).one('layoutstop', function () {\n            cy.one('done', ondone);\n            cy.emit('done');\n          });\n          var layoutOpts = util.extend({}, cy._private.options.layout);\n          layoutOpts.eles = cy.elements();\n          cy.layout(layoutOpts).run();\n        };\n\n        loadExtData([options.style, options.elements], function (thens) {\n          var initStyle = thens[0];\n          var initEles = thens[1]; // init style\n\n          if (_p.styleEnabled) {\n            cy.style().append(initStyle);\n          } // initial load\n\n\n          setElesAndLayout(initEles, function () {\n            // onready\n            cy.startAnimationLoop();\n            _p.ready = true; // if a ready callback is specified as an option, the bind it\n\n            if (is.fn(options.ready)) {\n              cy.on('ready', options.ready);\n            } // bind all the ready handlers registered before creating this instance\n\n\n            for (var i = 0; i < readies.length; i++) {\n              var fn = readies[i];\n              cy.on('ready', fn);\n            }\n\n            if (reg) {\n              reg.readies = [];\n            } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc\n\n\n            cy.emit('ready');\n          }, options.done);\n        });\n      };\n\n      var corefn = Core.prototype; // short alias\n\n      util.extend(corefn, {\n        instanceString: function instanceString() {\n          return 'core';\n        },\n        isReady: function isReady() {\n          return this._private.ready;\n        },\n        isDestroyed: function isDestroyed() {\n          return this._private.destroyed;\n        },\n        ready: function ready(fn) {\n          if (this.isReady()) {\n            this.emitter().emit('ready', [], fn); // just calls fn as though triggered via ready event\n          } else {\n            this.on('ready', fn);\n          }\n\n          return this;\n        },\n        destroy: function destroy() {\n          var cy = this;\n          if (cy.isDestroyed()) return;\n          cy.stopAnimationLoop();\n          cy.destroyRenderer();\n          this.emit('destroy');\n          cy._private.destroyed = true;\n          return cy;\n        },\n        hasElementWithId: function hasElementWithId(id) {\n          return this._private.elements.hasElementWithId(id);\n        },\n        getElementById: function getElementById(id) {\n          return this._private.elements.getElementById(id);\n        },\n        selectionType: function selectionType() {\n          return this._private.selectionType;\n        },\n        hasCompoundNodes: function hasCompoundNodes() {\n          return this._private.hasCompoundNodes;\n        },\n        headless: function headless() {\n          return this._private.options.renderer.name === 'null';\n        },\n        styleEnabled: function styleEnabled() {\n          return this._private.styleEnabled;\n        },\n        addToPool: function addToPool(eles) {\n          this._private.elements.merge(eles);\n\n          return this; // chaining\n        },\n        removeFromPool: function removeFromPool(eles) {\n          this._private.elements.unmerge(eles);\n\n          return this;\n        },\n        container: function container() {\n          return this._private.container;\n        },\n        options: function options() {\n          return util.copy(this._private.options);\n        },\n        json: function json(obj) {\n          var cy = this;\n          var _p = cy._private;\n          var eles = cy.mutableElements();\n\n          if (is.plainObject(obj)) {\n            // set\n            cy.startBatch();\n\n            if (obj.elements) {\n              var idInJson = {};\n\n              var updateEles = function updateEles(jsons, gr) {\n                for (var i = 0; i < jsons.length; i++) {\n                  var json = jsons[i];\n                  var id = json.data.id;\n                  var ele = cy.getElementById(id);\n                  idInJson[id] = true;\n\n                  if (ele.length !== 0) {\n                    // existing element should be updated\n                    ele.json(json);\n                  } else {\n                    // otherwise should be added\n                    if (gr) {\n                      cy.add(util.extend({\n                        group: gr\n                      }, json));\n                    } else {\n                      cy.add(json);\n                    }\n                  }\n                }\n              };\n\n              if (is.array(obj.elements)) {\n                // elements: []\n                updateEles(obj.elements);\n              } else {\n                // elements: { nodes: [], edges: [] }\n                var grs = ['nodes', 'edges'];\n\n                for (var i = 0; i < grs.length; i++) {\n                  var gr = grs[i];\n                  var elements = obj.elements[gr];\n\n                  if (is.array(elements)) {\n                    updateEles(elements, gr);\n                  }\n                }\n              } // elements not specified in json should be removed\n\n\n              eles.stdFilter(function (ele) {\n                return !idInJson[ele.id()];\n              }).remove();\n            }\n\n            if (obj.style) {\n              cy.style(obj.style);\n            }\n\n            if (obj.zoom != null && obj.zoom !== _p.zoom) {\n              cy.zoom(obj.zoom);\n            }\n\n            if (obj.pan) {\n              if (obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y) {\n                cy.pan(obj.pan);\n              }\n            }\n\n            var fields = ['minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled', 'panningEnabled', 'userPanningEnabled', 'boxSelectionEnabled', 'autolock', 'autoungrabify', 'autounselectify'];\n\n            for (var _i = 0; _i < fields.length; _i++) {\n              var f = fields[_i];\n\n              if (obj[f] != null) {\n                cy[f](obj[f]);\n              }\n            }\n\n            cy.endBatch();\n            return this; // chaining\n          } else if (obj === undefined) {\n            // get\n            var json = {};\n            json.elements = {};\n            eles.forEach(function (ele) {\n              var group = ele.group();\n\n              if (!json.elements[group]) {\n                json.elements[group] = [];\n              }\n\n              json.elements[group].push(ele.json());\n            });\n\n            if (this._private.styleEnabled) {\n              json.style = cy.style().json();\n            }\n\n            json.zoomingEnabled = cy._private.zoomingEnabled;\n            json.userZoomingEnabled = cy._private.userZoomingEnabled;\n            json.zoom = cy._private.zoom;\n            json.minZoom = cy._private.minZoom;\n            json.maxZoom = cy._private.maxZoom;\n            json.panningEnabled = cy._private.panningEnabled;\n            json.userPanningEnabled = cy._private.userPanningEnabled;\n            json.pan = util.copy(cy._private.pan);\n            json.boxSelectionEnabled = cy._private.boxSelectionEnabled;\n            json.renderer = util.copy(cy._private.options.renderer);\n            json.hideEdgesOnViewport = cy._private.options.hideEdgesOnViewport;\n            json.textureOnViewport = cy._private.options.textureOnViewport;\n            json.wheelSensitivity = cy._private.options.wheelSensitivity;\n            json.motionBlur = cy._private.options.motionBlur;\n            return json;\n          }\n        },\n        scratch: define.data({\n          field: 'scratch',\n          bindingEvent: 'scratch',\n          allowBinding: true,\n          allowSetting: true,\n          settingEvent: 'scratch',\n          settingTriggersEvent: true,\n          triggerFnName: 'trigger',\n          allowGetting: true\n        }),\n        removeScratch: define.removeData({\n          field: 'scratch',\n          event: 'scratch',\n          triggerFnName: 'trigger',\n          triggerEvent: true\n        })\n      });\n      corefn.$id = corefn.getElementById;\n      [__webpack_require__(69), __webpack_require__(70), __webpack_require__(78), __webpack_require__(79), __webpack_require__(80), __webpack_require__(81), __webpack_require__(82), __webpack_require__(83), __webpack_require__(84), __webpack_require__(93)].forEach(function (props) {\n        util.extend(corefn, props);\n      });\n      module.exports = Core;\n      /***/\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      module.exports = function memoize(fn, keyFn) {\n        if (!keyFn) {\n          keyFn = function keyFn() {\n            if (arguments.length === 1) {\n              return arguments[0];\n            } else if (arguments.length === 0) {\n              return 'undefined';\n            }\n\n            var args = [];\n\n            for (var i = 0; i < arguments.length; i++) {\n              args.push(arguments[i]);\n            }\n\n            return args.join('$');\n          };\n        }\n\n        var memoizedFn = function memoizedFn() {\n          var self = this;\n          var args = arguments;\n          var ret = void 0;\n          var k = keyFn.apply(self, args);\n          var cache = memoizedFn.cache;\n\n          if (!(ret = cache[k])) {\n            ret = cache[k] = fn.apply(self, args);\n          }\n\n          return ret;\n        };\n\n        memoizedFn.cache = {};\n        return memoizedFn;\n      };\n      /***/\n\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var is = __webpack_require__(0);\n\n      var Set = __webpack_require__(8); // represents a node or an edge\n\n\n      var Element = function Element(cy, params, restore) {\n        restore = restore === undefined || restore ? true : false;\n\n        if (cy === undefined || params === undefined || !is.core(cy)) {\n          util.error('An element must have a core reference and parameters set');\n          return;\n        }\n\n        var group = params.group; // try to automatically infer the group if unspecified\n\n        if (group == null) {\n          if (params.data && params.data.source != null && params.data.target != null) {\n            group = 'edges';\n          } else {\n            group = 'nodes';\n          }\n        } // validate group\n\n\n        if (group !== 'nodes' && group !== 'edges') {\n          util.error('An element must be of type `nodes` or `edges`; you specified `' + group + '`');\n          return;\n        } // make the element array-like, just like a collection\n\n\n        this.length = 1;\n        this[0] = this; // NOTE: when something is added here, add also to ele.json()\n\n        var _p = this._private = {\n          cy: cy,\n          single: true,\n          // indicates this is an element\n          data: params.data || {},\n          // data object\n          position: params.position || {},\n          // (x, y) position pair\n          autoWidth: undefined,\n          // width and height of nodes calculated by the renderer when set to special 'auto' value\n          autoHeight: undefined,\n          autoPadding: undefined,\n          compoundBoundsClean: false,\n          // whether the compound dimensions need to be recalculated the next time dimensions are read\n          listeners: [],\n          // array of bound listeners\n          group: group,\n          // string; 'nodes' or 'edges'\n          style: {},\n          // properties as set by the style\n          rstyle: {},\n          // properties for style sent from the renderer to the core\n          styleCxts: [],\n          // applied style contexts from the styler\n          removed: true,\n          // whether it's inside the vis; true if removed (set true here since we call restore)\n          selected: params.selected ? true : false,\n          // whether it's selected\n          selectable: params.selectable === undefined ? true : params.selectable ? true : false,\n          // whether it's selectable\n          locked: params.locked ? true : false,\n          // whether the element is locked (cannot be moved)\n          grabbed: false,\n          // whether the element is grabbed by the mouse; renderer sets this privately\n          grabbable: params.grabbable === undefined ? true : params.grabbable ? true : false,\n          // whether the element can be grabbed\n          active: false,\n          // whether the element is active from user interaction\n          classes: new Set(),\n          // map ( className => true )\n          animation: {\n            // object for currently-running animations\n            current: [],\n            queue: []\n          },\n          rscratch: {},\n          // object in which the renderer can store information\n          scratch: params.scratch || {},\n          // scratch objects\n          edges: [],\n          // array of connected edges\n          children: [],\n          // array of children\n          parent: null,\n          // parent ref\n          traversalCache: {},\n          // cache of output of traversal functions\n          backgrounding: false // whether background images are loading\n\n        }; // renderedPosition overrides if specified\n\n\n        if (params.renderedPosition) {\n          var rpos = params.renderedPosition;\n          var pan = cy.pan();\n          var zoom = cy.zoom();\n          _p.position = {\n            x: (rpos.x - pan.x) / zoom,\n            y: (rpos.y - pan.y) / zoom\n          };\n        }\n\n        if (is.string(params.classes)) {\n          var classes = params.classes.split(/\\s+/);\n\n          for (var i = 0, l = classes.length; i < l; i++) {\n            var cls = classes[i];\n\n            if (!cls || cls === '') {\n              continue;\n            }\n\n            _p.classes.add(cls);\n          }\n        }\n\n        if (params.style || params.css) {\n          cy.style().applyBypass(this, params.style || params.css);\n        }\n\n        this.createEmitter();\n\n        if (restore === undefined || restore) {\n          this.restore();\n        }\n      };\n\n      module.exports = Element;\n      /***/\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var stateSelectors = [{\n        selector: ':selected',\n        matches: function matches(ele) {\n          return ele.selected();\n        }\n      }, {\n        selector: ':unselected',\n        matches: function matches(ele) {\n          return !ele.selected();\n        }\n      }, {\n        selector: ':selectable',\n        matches: function matches(ele) {\n          return ele.selectable();\n        }\n      }, {\n        selector: ':unselectable',\n        matches: function matches(ele) {\n          return !ele.selectable();\n        }\n      }, {\n        selector: ':locked',\n        matches: function matches(ele) {\n          return ele.locked();\n        }\n      }, {\n        selector: ':unlocked',\n        matches: function matches(ele) {\n          return !ele.locked();\n        }\n      }, {\n        selector: ':visible',\n        matches: function matches(ele) {\n          return ele.visible();\n        }\n      }, {\n        selector: ':hidden',\n        matches: function matches(ele) {\n          return !ele.visible();\n        }\n      }, {\n        selector: ':transparent',\n        matches: function matches(ele) {\n          return ele.transparent();\n        }\n      }, {\n        selector: ':grabbed',\n        matches: function matches(ele) {\n          return ele.grabbed();\n        }\n      }, {\n        selector: ':free',\n        matches: function matches(ele) {\n          return !ele.grabbed();\n        }\n      }, {\n        selector: ':removed',\n        matches: function matches(ele) {\n          return ele.removed();\n        }\n      }, {\n        selector: ':inside',\n        matches: function matches(ele) {\n          return !ele.removed();\n        }\n      }, {\n        selector: ':grabbable',\n        matches: function matches(ele) {\n          return ele.grabbable();\n        }\n      }, {\n        selector: ':ungrabbable',\n        matches: function matches(ele) {\n          return !ele.grabbable();\n        }\n      }, {\n        selector: ':animated',\n        matches: function matches(ele) {\n          return ele.animated();\n        }\n      }, {\n        selector: ':unanimated',\n        matches: function matches(ele) {\n          return !ele.animated();\n        }\n      }, {\n        selector: ':parent',\n        matches: function matches(ele) {\n          return ele.isParent();\n        }\n      }, {\n        selector: ':childless',\n        matches: function matches(ele) {\n          return ele.isChildless();\n        }\n      }, {\n        selector: ':child',\n        matches: function matches(ele) {\n          return ele.isChild();\n        }\n      }, {\n        selector: ':orphan',\n        matches: function matches(ele) {\n          return ele.isOrphan();\n        }\n      }, {\n        selector: ':nonorphan',\n        matches: function matches(ele) {\n          return ele.isChild();\n        }\n      }, {\n        selector: ':loop',\n        matches: function matches(ele) {\n          return ele.isLoop();\n        }\n      }, {\n        selector: ':simple',\n        matches: function matches(ele) {\n          return ele.isSimple();\n        }\n      }, {\n        selector: ':active',\n        matches: function matches(ele) {\n          return ele.active();\n        }\n      }, {\n        selector: ':inactive',\n        matches: function matches(ele) {\n          return !ele.active();\n        }\n      }, {\n        selector: ':backgrounding',\n        matches: function matches(ele) {\n          return ele.backgrounding();\n        }\n      }, {\n        selector: ':nonbackgrounding',\n        matches: function matches(ele) {\n          return !ele.backgrounding();\n        }\n      }].sort(function (a, b) {\n        // n.b. selectors that are starting substrings of others must have the longer ones first\n        return util.sort.descending(a.selector, b.selector);\n      });\n\n      var stateSelectorMatches = function stateSelectorMatches(sel, ele) {\n        var lookup = stateSelectorMatches.lookup = stateSelectorMatches.lookup || function () {\n          var selToFn = {};\n          var s = void 0;\n\n          for (var i = 0; i < stateSelectors.length; i++) {\n            s = stateSelectors[i];\n            selToFn[s.selector] = s.matches;\n          }\n\n          return selToFn;\n        }();\n\n        return lookup[sel](ele);\n      };\n\n      var stateSelectorRegex = '(' + stateSelectors.map(function (s) {\n        return s.selector;\n      }).join('|') + ')';\n      module.exports = {\n        stateSelectors: stateSelectors,\n        stateSelectorMatches: stateSelectorMatches,\n        stateSelectorRegex: stateSelectorRegex\n      };\n      /***/\n    },\n    /* 16 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /*!\n      Event object based on jQuery events, MIT license\n      \n      https://jquery.org/license/\n      https://tldrlegal.com/license/mit-license\n      https://github.com/jquery/jquery/blob/master/src/event.js\n      */\n\n      var Event = function Event(src, props) {\n        this.recycle(src, props);\n      };\n\n      function returnFalse() {\n        return false;\n      }\n\n      function returnTrue() {\n        return true;\n      } // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\n\n      Event.prototype = {\n        instanceString: function instanceString() {\n          return 'event';\n        },\n        recycle: function recycle(src, props) {\n          this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = returnFalse;\n\n          if (src != null && src.preventDefault) {\n            // Browser Event object\n            this.type = src.type; // Events bubbling up the document may have been marked as prevented\n            // by a handler lower down the tree; reflect the correct value.\n\n            this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;\n          } else if (src != null && src.type) {\n            // Plain object containing all event details\n            props = src;\n          } else {\n            // Event string\n            this.type = src;\n          } // Put explicitly provided properties onto the event object\n\n\n          if (props != null) {\n            // more efficient to manually copy fields we use\n            this.originalEvent = props.originalEvent;\n            this.type = props.type != null ? props.type : this.type;\n            this.cy = props.cy;\n            this.target = props.target;\n            this.position = props.position;\n            this.renderedPosition = props.renderedPosition;\n            this.namespace = props.namespace;\n            this.layout = props.layout;\n          }\n\n          if (this.cy != null && this.position != null && this.renderedPosition == null) {\n            // create a rendered position based on the passed position\n            var pos = this.position;\n            var zoom = this.cy.zoom();\n            var pan = this.cy.pan();\n            this.renderedPosition = {\n              x: pos.x * zoom + pan.x,\n              y: pos.y * zoom + pan.y\n            };\n          } // Create a timestamp if incoming event doesn't have one\n\n\n          this.timeStamp = src && src.timeStamp || Date.now();\n        },\n        preventDefault: function preventDefault() {\n          this.isDefaultPrevented = returnTrue;\n          var e = this.originalEvent;\n\n          if (!e) {\n            return;\n          } // if preventDefault exists run it on the original event\n\n\n          if (e.preventDefault) {\n            e.preventDefault();\n          }\n        },\n        stopPropagation: function stopPropagation() {\n          this.isPropagationStopped = returnTrue;\n          var e = this.originalEvent;\n\n          if (!e) {\n            return;\n          } // if stopPropagation exists run it on the original event\n\n\n          if (e.stopPropagation) {\n            e.stopPropagation();\n          }\n        },\n        stopImmediatePropagation: function stopImmediatePropagation() {\n          this.isImmediatePropagationStopped = returnTrue;\n          this.stopPropagation();\n        },\n        isDefaultPrevented: returnFalse,\n        isPropagationStopped: returnFalse,\n        isImmediatePropagationStopped: returnFalse\n      };\n      module.exports = Event;\n      /***/\n    },\n    /* 17 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /**\n       *  Elements are drawn in a specific order based on compound depth (low to high), the element type (nodes above edges),\n       *  and z-index (low to high).  These styles affect how this applies:\n       *\n       *  z-compound-depth: May be `bottom | orphan | auto | top`.  The first drawn is `bottom`, then `orphan` which is the\n       *      same depth as the root of the compound graph, followed by the default value `auto` which draws in order from\n       *      root to leaves of the compound graph.  The last drawn is `top`.\n       *  z-index-compare: May be `auto | manual`.  The default value is `auto` which always draws edges under nodes.\n       *      `manual` ignores this convention and draws based on the `z-index` value setting.\n       *  z-index: An integer value that affects the relative draw order of elements.  In general, an element with a higher\n       *      `z-index` will be drawn on top of an element with a lower `z-index`.\n       */\n\n      var util = __webpack_require__(1);\n\n      var zIndexSort = function zIndexSort(a, b) {\n        var cy = a.cy();\n        var hasCompoundNodes = cy.hasCompoundNodes();\n\n        function getDepth(ele) {\n          var style = ele.pstyle('z-compound-depth');\n\n          if (style.value === 'auto') {\n            return hasCompoundNodes ? ele.zDepth() : 0;\n          } else if (style.value === 'bottom') {\n            return -1;\n          } else if (style.value === 'top') {\n            return util.MAX_INT;\n          } // 'orphan'\n\n\n          return 0;\n        }\n\n        var depthDiff = getDepth(a) - getDepth(b);\n\n        if (depthDiff !== 0) {\n          return depthDiff;\n        }\n\n        function getEleDepth(ele) {\n          var style = ele.pstyle('z-index-compare');\n\n          if (style.value === 'auto') {\n            return ele.isNode() ? 1 : 0;\n          } // 'manual'\n\n\n          return 0;\n        }\n\n        var eleDiff = getEleDepth(a) - getEleDepth(b);\n\n        if (eleDiff !== 0) {\n          return eleDiff;\n        }\n\n        var zDiff = a.pstyle('z-index').value - b.pstyle('z-index').value;\n\n        if (zDiff !== 0) {\n          return zDiff;\n        } // compare indices in the core (order added to graph w/ last on top)\n\n\n        return a.poolIndex() - b.poolIndex();\n      };\n\n      module.exports = zIndexSort;\n      /***/\n    },\n    /* 18 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var Selector = __webpack_require__(6);\n\n      var Style = function Style(cy) {\n        if (!(this instanceof Style)) {\n          return new Style(cy);\n        }\n\n        if (!is.core(cy)) {\n          util.error('A style must have a core reference');\n          return;\n        }\n\n        this._private = {\n          cy: cy,\n          coreStyle: {}\n        };\n        this.length = 0;\n        this.resetToDefault();\n      };\n\n      var styfn = Style.prototype;\n\n      styfn.instanceString = function () {\n        return 'style';\n      }; // remove all contexts\n\n\n      styfn.clear = function () {\n        for (var i = 0; i < this.length; i++) {\n          this[i] = undefined;\n        }\n\n        this.length = 0;\n        var _p = this._private;\n        _p.newStyle = true;\n        return this; // chaining\n      };\n\n      styfn.resetToDefault = function () {\n        this.clear();\n        this.addDefaultStylesheet();\n        return this;\n      }; // builds a style object for the 'core' selector\n\n\n      styfn.core = function () {\n        return this._private.coreStyle;\n      }; // create a new context from the specified selector string and switch to that context\n\n\n      styfn.selector = function (selectorStr) {\n        // 'core' is a special case and does not need a selector\n        var selector = selectorStr === 'core' ? null : new Selector(selectorStr);\n        var i = this.length++; // new context means new index\n\n        this[i] = {\n          selector: selector,\n          properties: [],\n          mappedProperties: [],\n          index: i\n        };\n        return this; // chaining\n      }; // add one or many css rules to the current context\n\n\n      styfn.css = function () {\n        var self = this;\n        var args = arguments;\n\n        switch (args.length) {\n          case 1:\n            var map = args[0];\n\n            for (var i = 0; i < self.properties.length; i++) {\n              var prop = self.properties[i];\n              var mapVal = map[prop.name];\n\n              if (mapVal === undefined) {\n                mapVal = map[util.dash2camel(prop.name)];\n              }\n\n              if (mapVal !== undefined) {\n                this.cssRule(prop.name, mapVal);\n              }\n            }\n\n            break;\n\n          case 2:\n            this.cssRule(args[0], args[1]);\n            break;\n\n          default:\n            break;\n          // do nothing if args are invalid\n        }\n\n        return this; // chaining\n      };\n\n      styfn.style = styfn.css; // add a single css rule to the current context\n\n      styfn.cssRule = function (name, value) {\n        // name-value pair\n        var property = this.parse(name, value); // add property to current context if valid\n\n        if (property) {\n          var i = this.length - 1;\n          this[i].properties.push(property);\n          this[i].properties[property.name] = property; // allow access by name as well\n\n          if (property.name.match(/pie-(\\d+)-background-size/) && property.value) {\n            this._private.hasPie = true;\n          }\n\n          if (property.mapped) {\n            this[i].mappedProperties.push(property);\n          } // add to core style if necessary\n\n\n          var currentSelectorIsCore = !this[i].selector;\n\n          if (currentSelectorIsCore) {\n            this._private.coreStyle[property.name] = property;\n          }\n        }\n\n        return this; // chaining\n      };\n\n      styfn.append = function (style) {\n        if (is.stylesheet(style)) {\n          style.appendToStyle(this);\n        } else if (is.array(style)) {\n          this.appendFromJson(style);\n        } else if (is.string(style)) {\n          this.appendFromString(style);\n        } // you probably wouldn't want to append a Style, since you'd duplicate the default parts\n\n\n        return this;\n      }; // static function\n\n\n      Style.fromJson = function (cy, json) {\n        var style = new Style(cy);\n        style.fromJson(json);\n        return style;\n      };\n\n      Style.fromString = function (cy, string) {\n        return new Style(cy).fromString(string);\n      };\n\n      [__webpack_require__(85), __webpack_require__(86), __webpack_require__(87), __webpack_require__(88), __webpack_require__(89), __webpack_require__(90), __webpack_require__(91), __webpack_require__(92)].forEach(function (props) {\n        util.extend(styfn, props);\n      });\n      Style.types = styfn.types;\n      Style.properties = styfn.properties;\n      module.exports = Style;\n      /***/\n    },\n    /* 19 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var fullFpsTime = 1000 / 60; // assume 60 frames per second\n\n      module.exports = {\n        setupDequeueing: function setupDequeueing(opts) {\n          return function setupDequeueingImpl() {\n            var self = this;\n            var r = this.renderer;\n\n            if (self.dequeueingSetup) {\n              return;\n            } else {\n              self.dequeueingSetup = true;\n            }\n\n            var queueRedraw = util.debounce(function () {\n              r.redrawHint('eles', true);\n              r.redrawHint('drag', true);\n              r.redraw();\n            }, opts.deqRedrawThreshold);\n\n            var dequeue = function dequeue(willDraw, frameStartTime) {\n              var startTime = util.performanceNow();\n              var avgRenderTime = r.averageRedrawTime;\n              var renderTime = r.lastRedrawTime;\n              var deqd = [];\n              var extent = r.cy.extent();\n              var pixelRatio = r.getPixelRatio();\n\n              while (true) {\n                var now = util.performanceNow();\n                var duration = now - startTime;\n                var frameDuration = now - frameStartTime;\n\n                if (renderTime < fullFpsTime) {\n                  // if we're rendering faster than the ideal fps, then do dequeueing\n                  // during all of the remaining frame time\n                  var timeAvailable = fullFpsTime - (willDraw ? avgRenderTime : 0);\n\n                  if (frameDuration >= opts.deqFastCost * timeAvailable) {\n                    break;\n                  }\n                } else {\n                  if (willDraw) {\n                    if (duration >= opts.deqCost * renderTime || duration >= opts.deqAvgCost * avgRenderTime) {\n                      break;\n                    }\n                  } else if (frameDuration >= opts.deqNoDrawCost * fullFpsTime) {\n                    break;\n                  }\n                }\n\n                var thisDeqd = opts.deq(self, pixelRatio, extent);\n\n                if (thisDeqd.length > 0) {\n                  for (var i = 0; i < thisDeqd.length; i++) {\n                    deqd.push(thisDeqd[i]);\n                  }\n                } else {\n                  break;\n                }\n              } // callbacks on dequeue\n\n\n              if (deqd.length > 0) {\n                opts.onDeqd(self, deqd);\n\n                if (!willDraw && opts.shouldRedraw(self, deqd, pixelRatio, extent)) {\n                  queueRedraw();\n                }\n              }\n            };\n\n            var priority = opts.priority || util.noop;\n            r.beforeRender(dequeue, priority(self));\n          };\n        }\n      };\n      /***/\n    },\n    /* 20 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var Core = __webpack_require__(12);\n\n      var extension = __webpack_require__(94);\n\n      var Stylesheet = __webpack_require__(136);\n\n      var cytoscape = function cytoscape(options) {\n        // jshint ignore:line\n        // if no options specified, use default\n        if (options === undefined) {\n          options = {};\n        } // create instance\n\n\n        if (is.plainObject(options)) {\n          return new Core(options);\n        } // allow for registration of extensions\n        else if (is.string(options)) {\n            return extension.apply(extension, arguments);\n          }\n      }; // e.g. cytoscape.use( require('cytoscape-foo'), bar )\n\n\n      cytoscape.use = function (ext) {\n        var args = Array.prototype.slice.call(arguments, 1); // args to pass to ext\n\n        args.unshift(cytoscape); // cytoscape is first arg to ext\n\n        ext.apply(null, args);\n        return this;\n      }; // replaced by build system\n\n\n      cytoscape.version = __webpack_require__(137); // expose public apis (mostly for extensions)\n\n      cytoscape.stylesheet = cytoscape.Stylesheet = Stylesheet;\n      module.exports = cytoscape;\n      /***/\n    },\n    /* 21 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      module.exports = {\n        // get [r, g, b] from #abc or #aabbcc\n        hex2tuple: function hex2tuple(hex) {\n          if (!(hex.length === 4 || hex.length === 7) || hex[0] !== '#') {\n            return;\n          }\n\n          var shortHex = hex.length === 4;\n          var r = void 0,\n              g = void 0,\n              b = void 0;\n          var base = 16;\n\n          if (shortHex) {\n            r = parseInt(hex[1] + hex[1], base);\n            g = parseInt(hex[2] + hex[2], base);\n            b = parseInt(hex[3] + hex[3], base);\n          } else {\n            r = parseInt(hex[1] + hex[2], base);\n            g = parseInt(hex[3] + hex[4], base);\n            b = parseInt(hex[5] + hex[6], base);\n          }\n\n          return [r, g, b];\n        },\n        // get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)\n        hsl2tuple: function hsl2tuple(hsl) {\n          var ret = void 0;\n          var h = void 0,\n              s = void 0,\n              l = void 0,\n              a = void 0,\n              r = void 0,\n              g = void 0,\n              b = void 0;\n\n          function hue2rgb(p, q, t) {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n          }\n\n          var m = new RegExp('^' + this.regex.hsla + '$').exec(hsl);\n\n          if (m) {\n            // get hue\n            h = parseInt(m[1]);\n\n            if (h < 0) {\n              h = (360 - -1 * h % 360) % 360;\n            } else if (h > 360) {\n              h = h % 360;\n            }\n\n            h /= 360; // normalise on [0, 1]\n\n            s = parseFloat(m[2]);\n\n            if (s < 0 || s > 100) {\n              return;\n            } // saturation is [0, 100]\n\n\n            s = s / 100; // normalise on [0, 1]\n\n            l = parseFloat(m[3]);\n\n            if (l < 0 || l > 100) {\n              return;\n            } // lightness is [0, 100]\n\n\n            l = l / 100; // normalise on [0, 1]\n\n            a = m[4];\n\n            if (a !== undefined) {\n              a = parseFloat(a);\n\n              if (a < 0 || a > 1) {\n                return;\n              } // alpha is [0, 1]\n\n            } // now, convert to rgb\n            // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n\n\n            if (s === 0) {\n              r = g = b = Math.round(l * 255); // achromatic\n            } else {\n              var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n              var p = 2 * l - q;\n              r = Math.round(255 * hue2rgb(p, q, h + 1 / 3));\n              g = Math.round(255 * hue2rgb(p, q, h));\n              b = Math.round(255 * hue2rgb(p, q, h - 1 / 3));\n            }\n\n            ret = [r, g, b, a];\n          }\n\n          return ret;\n        },\n        // get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)\n        rgb2tuple: function rgb2tuple(rgb) {\n          var ret = void 0;\n          var m = new RegExp('^' + this.regex.rgba + '$').exec(rgb);\n\n          if (m) {\n            ret = [];\n            var isPct = [];\n\n            for (var i = 1; i <= 3; i++) {\n              var channel = m[i];\n\n              if (channel[channel.length - 1] === '%') {\n                isPct[i] = true;\n              }\n\n              channel = parseFloat(channel);\n\n              if (isPct[i]) {\n                channel = channel / 100 * 255; // normalise to [0, 255]\n              }\n\n              if (channel < 0 || channel > 255) {\n                return;\n              } // invalid channel value\n\n\n              ret.push(Math.floor(channel));\n            }\n\n            var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];\n            var allArePct = isPct[1] && isPct[2] && isPct[3];\n\n            if (atLeastOneIsPct && !allArePct) {\n              return;\n            } // must all be percent values if one is\n\n\n            var alpha = m[4];\n\n            if (alpha !== undefined) {\n              alpha = parseFloat(alpha);\n\n              if (alpha < 0 || alpha > 1) {\n                return;\n              } // invalid alpha value\n\n\n              ret.push(alpha);\n            }\n          }\n\n          return ret;\n        },\n        colorname2tuple: function colorname2tuple(color) {\n          return this.colors[color.toLowerCase()];\n        },\n        color2tuple: function color2tuple(color) {\n          return (is.array(color) ? color : null) || this.colorname2tuple(color) || this.hex2tuple(color) || this.rgb2tuple(color) || this.hsl2tuple(color);\n        },\n        colors: {\n          // special colour names\n          transparent: [0, 0, 0, 0],\n          // NB alpha === 0\n          // regular colours\n          aliceblue: [240, 248, 255],\n          antiquewhite: [250, 235, 215],\n          aqua: [0, 255, 255],\n          aquamarine: [127, 255, 212],\n          azure: [240, 255, 255],\n          beige: [245, 245, 220],\n          bisque: [255, 228, 196],\n          black: [0, 0, 0],\n          blanchedalmond: [255, 235, 205],\n          blue: [0, 0, 255],\n          blueviolet: [138, 43, 226],\n          brown: [165, 42, 42],\n          burlywood: [222, 184, 135],\n          cadetblue: [95, 158, 160],\n          chartreuse: [127, 255, 0],\n          chocolate: [210, 105, 30],\n          coral: [255, 127, 80],\n          cornflowerblue: [100, 149, 237],\n          cornsilk: [255, 248, 220],\n          crimson: [220, 20, 60],\n          cyan: [0, 255, 255],\n          darkblue: [0, 0, 139],\n          darkcyan: [0, 139, 139],\n          darkgoldenrod: [184, 134, 11],\n          darkgray: [169, 169, 169],\n          darkgreen: [0, 100, 0],\n          darkgrey: [169, 169, 169],\n          darkkhaki: [189, 183, 107],\n          darkmagenta: [139, 0, 139],\n          darkolivegreen: [85, 107, 47],\n          darkorange: [255, 140, 0],\n          darkorchid: [153, 50, 204],\n          darkred: [139, 0, 0],\n          darksalmon: [233, 150, 122],\n          darkseagreen: [143, 188, 143],\n          darkslateblue: [72, 61, 139],\n          darkslategray: [47, 79, 79],\n          darkslategrey: [47, 79, 79],\n          darkturquoise: [0, 206, 209],\n          darkviolet: [148, 0, 211],\n          deeppink: [255, 20, 147],\n          deepskyblue: [0, 191, 255],\n          dimgray: [105, 105, 105],\n          dimgrey: [105, 105, 105],\n          dodgerblue: [30, 144, 255],\n          firebrick: [178, 34, 34],\n          floralwhite: [255, 250, 240],\n          forestgreen: [34, 139, 34],\n          fuchsia: [255, 0, 255],\n          gainsboro: [220, 220, 220],\n          ghostwhite: [248, 248, 255],\n          gold: [255, 215, 0],\n          goldenrod: [218, 165, 32],\n          gray: [128, 128, 128],\n          grey: [128, 128, 128],\n          green: [0, 128, 0],\n          greenyellow: [173, 255, 47],\n          honeydew: [240, 255, 240],\n          hotpink: [255, 105, 180],\n          indianred: [205, 92, 92],\n          indigo: [75, 0, 130],\n          ivory: [255, 255, 240],\n          khaki: [240, 230, 140],\n          lavender: [230, 230, 250],\n          lavenderblush: [255, 240, 245],\n          lawngreen: [124, 252, 0],\n          lemonchiffon: [255, 250, 205],\n          lightblue: [173, 216, 230],\n          lightcoral: [240, 128, 128],\n          lightcyan: [224, 255, 255],\n          lightgoldenrodyellow: [250, 250, 210],\n          lightgray: [211, 211, 211],\n          lightgreen: [144, 238, 144],\n          lightgrey: [211, 211, 211],\n          lightpink: [255, 182, 193],\n          lightsalmon: [255, 160, 122],\n          lightseagreen: [32, 178, 170],\n          lightskyblue: [135, 206, 250],\n          lightslategray: [119, 136, 153],\n          lightslategrey: [119, 136, 153],\n          lightsteelblue: [176, 196, 222],\n          lightyellow: [255, 255, 224],\n          lime: [0, 255, 0],\n          limegreen: [50, 205, 50],\n          linen: [250, 240, 230],\n          magenta: [255, 0, 255],\n          maroon: [128, 0, 0],\n          mediumaquamarine: [102, 205, 170],\n          mediumblue: [0, 0, 205],\n          mediumorchid: [186, 85, 211],\n          mediumpurple: [147, 112, 219],\n          mediumseagreen: [60, 179, 113],\n          mediumslateblue: [123, 104, 238],\n          mediumspringgreen: [0, 250, 154],\n          mediumturquoise: [72, 209, 204],\n          mediumvioletred: [199, 21, 133],\n          midnightblue: [25, 25, 112],\n          mintcream: [245, 255, 250],\n          mistyrose: [255, 228, 225],\n          moccasin: [255, 228, 181],\n          navajowhite: [255, 222, 173],\n          navy: [0, 0, 128],\n          oldlace: [253, 245, 230],\n          olive: [128, 128, 0],\n          olivedrab: [107, 142, 35],\n          orange: [255, 165, 0],\n          orangered: [255, 69, 0],\n          orchid: [218, 112, 214],\n          palegoldenrod: [238, 232, 170],\n          palegreen: [152, 251, 152],\n          paleturquoise: [175, 238, 238],\n          palevioletred: [219, 112, 147],\n          papayawhip: [255, 239, 213],\n          peachpuff: [255, 218, 185],\n          peru: [205, 133, 63],\n          pink: [255, 192, 203],\n          plum: [221, 160, 221],\n          powderblue: [176, 224, 230],\n          purple: [128, 0, 128],\n          red: [255, 0, 0],\n          rosybrown: [188, 143, 143],\n          royalblue: [65, 105, 225],\n          saddlebrown: [139, 69, 19],\n          salmon: [250, 128, 114],\n          sandybrown: [244, 164, 96],\n          seagreen: [46, 139, 87],\n          seashell: [255, 245, 238],\n          sienna: [160, 82, 45],\n          silver: [192, 192, 192],\n          skyblue: [135, 206, 235],\n          slateblue: [106, 90, 205],\n          slategray: [112, 128, 144],\n          slategrey: [112, 128, 144],\n          snow: [255, 250, 250],\n          springgreen: [0, 255, 127],\n          steelblue: [70, 130, 180],\n          tan: [210, 180, 140],\n          teal: [0, 128, 128],\n          thistle: [216, 191, 216],\n          tomato: [255, 99, 71],\n          turquoise: [64, 224, 208],\n          violet: [238, 130, 238],\n          wheat: [245, 222, 179],\n          white: [255, 255, 255],\n          whitesmoke: [245, 245, 245],\n          yellow: [255, 255, 0],\n          yellowgreen: [154, 205, 50]\n        }\n      };\n      /***/\n    },\n    /* 22 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      module.exports = {\n        // has anything been set in the map\n        mapEmpty: function mapEmpty(map) {\n          var empty = true;\n\n          if (map != null) {\n            return Object.keys(map).length === 0;\n          }\n\n          return empty;\n        },\n        // pushes to the array at the end of a map (map may not be built)\n        pushMap: function pushMap(options) {\n          var array = this.getMap(options);\n\n          if (array == null) {\n            // if empty, put initial array\n            this.setMap(this.extend({}, options, {\n              value: [options.value]\n            }));\n          } else {\n            array.push(options.value);\n          }\n        },\n        // sets the value in a map (map may not be built)\n        setMap: function setMap(options) {\n          var obj = options.map;\n          var key = void 0;\n          var keys = options.keys;\n          var l = keys.length;\n\n          for (var i = 0; i < l; i++) {\n            var _key = keys[i];\n\n            if (is.plainObject(_key)) {\n              this.error('Tried to set map with object key');\n            }\n\n            if (i < keys.length - 1) {\n              // extend the map if necessary\n              if (obj[_key] == null) {\n                obj[_key] = {};\n              }\n\n              obj = obj[_key];\n            } else {\n              // set the value\n              obj[_key] = options.value;\n            }\n          }\n        },\n        // gets the value in a map even if it's not built in places\n        getMap: function getMap(options) {\n          var obj = options.map;\n          var keys = options.keys;\n          var l = keys.length;\n\n          for (var i = 0; i < l; i++) {\n            var key = keys[i];\n\n            if (is.plainObject(key)) {\n              this.error('Tried to get map with object key');\n            }\n\n            obj = obj[key];\n\n            if (obj == null) {\n              return obj;\n            }\n          }\n\n          return obj;\n        },\n        // deletes the entry in the map\n        deleteMap: function deleteMap(options) {\n          var obj = options.map;\n          var keys = options.keys;\n          var l = keys.length;\n          var keepChildren = options.keepChildren;\n\n          for (var i = 0; i < l; i++) {\n            var key = keys[i];\n\n            if (is.plainObject(key)) {\n              this.error('Tried to delete map with object key');\n            }\n\n            var lastKey = i === options.keys.length - 1;\n\n            if (lastKey) {\n              if (keepChildren) {\n                // then only delete child fields not in keepChildren\n                var children = Object.keys(obj);\n\n                for (var j = 0; j < children.length; j++) {\n                  var child = children[j];\n\n                  if (!keepChildren[child]) {\n                    obj[child] = undefined;\n                  }\n                }\n              } else {\n                obj[key] = undefined;\n              }\n            } else {\n              obj = obj[key];\n            }\n          }\n        }\n      };\n      /***/\n    },\n    /* 23 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var number = '(?:[-+]?(?:(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:[Ee][+-]?\\\\d+)?))';\n      var rgba = 'rgb[a]?\\\\((' + number + '[%]?)\\\\s*,\\\\s*(' + number + '[%]?)\\\\s*,\\\\s*(' + number + '[%]?)(?:\\\\s*,\\\\s*(' + number + '))?\\\\)';\n      var rgbaNoBackRefs = 'rgb[a]?\\\\((?:' + number + '[%]?)\\\\s*,\\\\s*(?:' + number + '[%]?)\\\\s*,\\\\s*(?:' + number + '[%]?)(?:\\\\s*,\\\\s*(?:' + number + '))?\\\\)';\n      var hsla = 'hsl[a]?\\\\((' + number + ')\\\\s*,\\\\s*(' + number + '[%])\\\\s*,\\\\s*(' + number + '[%])(?:\\\\s*,\\\\s*(' + number + '))?\\\\)';\n      var hslaNoBackRefs = 'hsl[a]?\\\\((?:' + number + ')\\\\s*,\\\\s*(?:' + number + '[%])\\\\s*,\\\\s*(?:' + number + '[%])(?:\\\\s*,\\\\s*(?:' + number + '))?\\\\)';\n      var hex3 = '\\\\#[0-9a-fA-F]{3}';\n      var hex6 = '\\\\#[0-9a-fA-F]{6}';\n      module.exports = {\n        regex: {\n          number: number,\n          rgba: rgba,\n          rgbaNoBackRefs: rgbaNoBackRefs,\n          hsla: hsla,\n          hslaNoBackRefs: hslaNoBackRefs,\n          hex3: hex3,\n          hex6: hex6\n        }\n      };\n      /***/\n    },\n    /* 24 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var memoize = __webpack_require__(13);\n\n      var is = __webpack_require__(0);\n\n      module.exports = {\n        camel2dash: memoize(function (str) {\n          return str.replace(/([A-Z])/g, function (v) {\n            return '-' + v.toLowerCase();\n          });\n        }),\n        dash2camel: memoize(function (str) {\n          return str.replace(/(-\\w)/g, function (v) {\n            return v[1].toUpperCase();\n          });\n        }),\n        prependCamel: memoize(function (prefix, str) {\n          return prefix + str[0].toUpperCase() + str.substring(1);\n        }, function (prefix, str) {\n          return prefix + '$' + str;\n        }),\n        capitalize: function capitalize(str) {\n          if (is.emptyString(str)) {\n            return str;\n          }\n\n          return str.charAt(0).toUpperCase() + str.substring(1);\n        }\n      };\n      /***/\n    },\n    /* 25 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var window = __webpack_require__(3);\n\n      var performance = window ? window.performance : null;\n      var util = {};\n      var pnow = performance && performance.now ? function () {\n        return performance.now();\n      } : function () {\n        return Date.now();\n      };\n\n      var raf = function () {\n        if (window) {\n          if (window.requestAnimationFrame) {\n            return function (fn) {\n              window.requestAnimationFrame(fn);\n            };\n          } else if (window.mozRequestAnimationFrame) {\n            return function (fn) {\n              window.mozRequestAnimationFrame(fn);\n            };\n          } else if (window.webkitRequestAnimationFrame) {\n            return function (fn) {\n              window.webkitRequestAnimationFrame(fn);\n            };\n          } else if (window.msRequestAnimationFrame) {\n            return function (fn) {\n              window.msRequestAnimationFrame(fn);\n            };\n          }\n        }\n\n        return function (fn) {\n          if (fn) {\n            setTimeout(function () {\n              fn(pnow());\n            }, 1000 / 60);\n          }\n        };\n      }();\n\n      util.requestAnimationFrame = function (fn) {\n        raf(fn);\n      };\n\n      util.performanceNow = pnow;\n      util.debounce = __webpack_require__(26);\n\n      util.now = function () {\n        return Date.now();\n      };\n\n      module.exports = util;\n      /***/\n    },\n    /* 26 */\n\n    /***/\n    function (module, exports) {\n      module.exports = __WEBPACK_EXTERNAL_MODULE_26__;\n      /***/\n    },\n    /* 27 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function ascending(a, b) {\n        if (a < b) {\n          return -1;\n        } else if (a > b) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n\n      function descending(a, b) {\n        return -1 * ascending(a, b);\n      }\n\n      module.exports = {\n        sort: {\n          ascending: ascending,\n          descending: descending\n        }\n      };\n      /***/\n    },\n    /* 28 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function ObjectMap() {\n        this._obj = {};\n      }\n\n      var p = ObjectMap.prototype;\n\n      p.set = function (key, val) {\n        this._obj[key] = val;\n      };\n\n      p.delete = function (key) {\n        this._obj[key] = null;\n      };\n\n      p.has = function (key) {\n        return this._obj[key] != null;\n      };\n\n      p.get = function (key) {\n        return this._obj[key];\n      }; // TODO use the stdlib Map in future...\n      // module.exports = typeof Map !== 'undefined' ? Map : ObjectMap;\n\n\n      module.exports = ObjectMap;\n      /***/\n    },\n    /* 29 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var elesfn = {};\n      [__webpack_require__(30), __webpack_require__(31), __webpack_require__(33), __webpack_require__(34), __webpack_require__(35), __webpack_require__(36), __webpack_require__(37), __webpack_require__(38), __webpack_require__(39), __webpack_require__(40), __webpack_require__(41)].forEach(function (props) {\n        util.extend(elesfn, props);\n      });\n      module.exports = elesfn;\n      /***/\n    },\n    /* 30 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var defineSearch = function defineSearch(params) {\n        params = {\n          bfs: params.bfs || !params.dfs,\n          dfs: params.dfs || !params.bfs\n        }; // from pseudocode on wikipedia\n\n        return function searchFn(roots, fn, directed) {\n          var options;\n\n          if (is.plainObject(roots) && !is.elementOrCollection(roots)) {\n            options = roots;\n            roots = options.roots || options.root;\n            fn = options.visit;\n            directed = options.directed;\n          }\n\n          directed = arguments.length === 2 && !is.fn(fn) ? fn : directed;\n          fn = is.fn(fn) ? fn : function () {};\n          var cy = this._private.cy;\n          var v = roots = is.string(roots) ? this.filter(roots) : roots;\n          var Q = [];\n          var connectedNodes = [];\n          var connectedBy = {};\n          var id2depth = {};\n          var V = {};\n          var j = 0;\n          var found;\n          var nodes = this.nodes();\n          var edges = this.edges(); // enqueue v\n\n          for (var i = 0; i < v.length; i++) {\n            if (v[i].isNode()) {\n              Q.unshift(v[i]);\n\n              if (params.bfs) {\n                V[v[i].id()] = true;\n                connectedNodes.push(v[i]);\n              }\n\n              id2depth[v[i].id()] = 0;\n            }\n          }\n\n          while (Q.length !== 0) {\n            var v = params.bfs ? Q.shift() : Q.pop();\n\n            if (params.dfs) {\n              if (V[v.id()]) {\n                continue;\n              }\n\n              V[v.id()] = true;\n              connectedNodes.push(v);\n            }\n\n            var depth = id2depth[v.id()];\n            var prevEdge = connectedBy[v.id()];\n            var prevNode = prevEdge == null ? undefined : prevEdge.connectedNodes().not(v)[0];\n            var ret;\n            ret = fn(v, prevEdge, prevNode, j++, depth);\n\n            if (ret === true) {\n              found = v;\n              break;\n            }\n\n            if (ret === false) {\n              break;\n            }\n\n            var vwEdges = v.connectedEdges(directed ? function (ele) {\n              return ele.data('source') === v.id();\n            } : undefined).intersect(edges);\n\n            for (var i = 0; i < vwEdges.length; i++) {\n              var e = vwEdges[i];\n              var w = e.connectedNodes(function (n) {\n                return n.id() !== v.id();\n              }).intersect(nodes);\n\n              if (w.length !== 0 && !V[w.id()]) {\n                w = w[0];\n                Q.push(w);\n\n                if (params.bfs) {\n                  V[w.id()] = true;\n                  connectedNodes.push(w);\n                }\n\n                connectedBy[w.id()] = e;\n                id2depth[w.id()] = id2depth[v.id()] + 1;\n              }\n            }\n          }\n\n          var connectedEles = [];\n\n          for (var i = 0; i < connectedNodes.length; i++) {\n            var node = connectedNodes[i];\n            var edge = connectedBy[node.id()];\n\n            if (edge) {\n              connectedEles.push(edge);\n            }\n\n            connectedEles.push(node);\n          }\n\n          return {\n            path: cy.collection(connectedEles, {\n              unique: true\n            }),\n            found: cy.collection(found)\n          };\n        };\n      }; // search, spanning trees, etc\n\n\n      var elesfn = {\n        breadthFirstSearch: defineSearch({\n          bfs: true\n        }),\n        depthFirstSearch: defineSearch({\n          dfs: true\n        })\n      }; // nice, short mathemathical alias\n\n      elesfn.bfs = elesfn.breadthFirstSearch;\n      elesfn.dfs = elesfn.depthFirstSearch;\n      module.exports = elesfn;\n      /***/\n    },\n    /* 31 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var Heap = __webpack_require__(9);\n\n      var elesfn = {\n        dijkstra: function dijkstra(root, weightFn, directed) {\n          var options;\n\n          if (is.plainObject(root) && !is.elementOrCollection(root)) {\n            options = root;\n            root = options.root;\n            weightFn = options.weight;\n            directed = options.directed;\n          }\n\n          var cy = this._private.cy;\n          weightFn = is.fn(weightFn) ? weightFn : function () {\n            return 1;\n          }; // if not specified, assume each edge has equal weight (1)\n\n          var source = is.string(root) ? this.filter(root)[0] : root[0];\n          var dist = {};\n          var prev = {};\n          var knownDist = {};\n          var edges = this.edges().filter(function (ele) {\n            return !ele.isLoop();\n          });\n          var nodes = this.nodes();\n\n          var getDist = function getDist(node) {\n            return dist[node.id()];\n          };\n\n          var setDist = function setDist(node, d) {\n            dist[node.id()] = d;\n            Q.updateItem(node);\n          };\n\n          var Q = new Heap(function (a, b) {\n            return getDist(a) - getDist(b);\n          });\n\n          for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            dist[node.id()] = node.same(source) ? 0 : Infinity;\n            Q.push(node);\n          }\n\n          var distBetween = function distBetween(u, v) {\n            var uvs = (directed ? u.edgesTo(v) : u.edgesWith(v)).intersect(edges);\n            var smallestDistance = Infinity;\n            var smallestEdge;\n\n            for (var i = 0; i < uvs.length; i++) {\n              var edge = uvs[i];\n              var weight = weightFn(edge);\n\n              if (weight < smallestDistance || !smallestEdge) {\n                smallestDistance = weight;\n                smallestEdge = edge;\n              }\n            }\n\n            return {\n              edge: smallestEdge,\n              dist: smallestDistance\n            };\n          };\n\n          while (Q.size() > 0) {\n            var u = Q.pop();\n            var smalletsDist = getDist(u);\n            var uid = u.id();\n            knownDist[uid] = smalletsDist;\n\n            if (smalletsDist === Infinity) {\n              continue;\n            }\n\n            var neighbors = u.neighborhood().intersect(nodes);\n\n            for (var i = 0; i < neighbors.length; i++) {\n              var v = neighbors[i];\n              var vid = v.id();\n              var vDist = distBetween(u, v);\n              var alt = smalletsDist + vDist.dist;\n\n              if (alt < getDist(v)) {\n                setDist(v, alt);\n                prev[vid] = {\n                  node: u,\n                  edge: vDist.edge\n                };\n              }\n            } // for\n\n          } // while\n\n\n          return {\n            distanceTo: function distanceTo(node) {\n              var target = is.string(node) ? nodes.filter(node)[0] : node[0];\n              return knownDist[target.id()];\n            },\n            pathTo: function pathTo(node) {\n              var target = is.string(node) ? nodes.filter(node)[0] : node[0];\n              var S = [];\n              var u = target;\n\n              if (target.length > 0) {\n                S.unshift(target);\n\n                while (prev[u.id()]) {\n                  var p = prev[u.id()];\n                  S.unshift(p.edge);\n                  S.unshift(p.node);\n                  u = p.node;\n                }\n              }\n\n              return cy.collection(S);\n            }\n          };\n        }\n      };\n      module.exports = elesfn;\n      /***/\n    },\n    /* 32 */\n\n    /***/\n    function (module, exports) {\n      module.exports = __WEBPACK_EXTERNAL_MODULE_32__;\n      /***/\n    },\n    /* 33 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0); // search, spanning trees, etc\n\n\n      var elesfn = {\n        // kruskal's algorithm (finds min spanning tree, assuming undirected graph)\n        // implemented from pseudocode from wikipedia\n        kruskal: function kruskal(weightFn) {\n          var cy = this.cy();\n          weightFn = is.fn(weightFn) ? weightFn : function () {\n            return 1;\n          }; // if not specified, assume each edge has equal weight (1)\n\n          function findSet(ele) {\n            for (var i = 0; i < forest.length; i++) {\n              var eles = forest[i];\n\n              if (eles.anySame(ele)) {\n                return {\n                  eles: eles,\n                  index: i\n                };\n              }\n            }\n          }\n\n          var A = cy.collection(cy, []);\n          var forest = [];\n          var nodes = this.nodes();\n\n          for (var i = 0; i < nodes.length; i++) {\n            forest.push(nodes[i].collection());\n          }\n\n          var edges = this.edges();\n          var S = edges.toArray().sort(function (a, b) {\n            var weightA = weightFn(a);\n            var weightB = weightFn(b);\n            return weightA - weightB;\n          });\n\n          for (var i = 0; i < S.length; i++) {\n            var edge = S[i];\n            var u = edge.source()[0];\n            var v = edge.target()[0];\n            var setU = findSet(u);\n            var setV = findSet(v);\n\n            if (setU.index !== setV.index) {\n              A = A.add(edge); // combine forests for u and v\n\n              forest[setU.index] = setU.eles.add(setV.eles);\n              forest.splice(setV.index, 1);\n            }\n          }\n\n          return nodes.add(A);\n        }\n      };\n      module.exports = elesfn;\n      /***/\n    },\n    /* 34 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var elesfn = {\n        // Implemented from pseudocode from wikipedia\n        aStar: function aStar(options) {\n          var eles = this;\n          options = options || {}; // Reconstructs the path from Start to End, acumulating the result in pathAcum\n\n          var reconstructPath = function reconstructPath(start, end, cameFromMap, pathAcum) {\n            // Base case\n            if (start == end) {\n              pathAcum.unshift(cy.getElementById(end));\n              return pathAcum;\n            }\n\n            if (end in cameFromMap) {\n              // We know which node is before the last one\n              var previous = cameFromMap[end];\n              var previousEdge = cameFromEdge[end];\n              pathAcum.unshift(cy.getElementById(previousEdge));\n              pathAcum.unshift(cy.getElementById(end));\n              return reconstructPath(start, previous, cameFromMap, pathAcum);\n            } // We should not reach here!\n\n\n            return undefined;\n          }; // Returns the index of the element in openSet which has minimum fScore\n\n\n          var findMin = function findMin(openSet, fScore) {\n            if (openSet.length === 0) {\n              // Should never be the case\n              return undefined;\n            }\n\n            var minPos = 0;\n            var tempScore = fScore[openSet[0]];\n\n            for (var i = 1; i < openSet.length; i++) {\n              var s = fScore[openSet[i]];\n\n              if (s < tempScore) {\n                tempScore = s;\n                minPos = i;\n              }\n            }\n\n            return minPos;\n          };\n\n          var cy = this._private.cy; // root - mandatory!\n\n          if (options != null && options.root != null) {\n            var source = is.string(options.root) ? // use it as a selector, e.g. \"#rootID\n            this.filter(options.root)[0] : options.root[0];\n          } else {\n            return undefined;\n          } // goal - mandatory!\n\n\n          if (options.goal != null) {\n            var target = is.string(options.goal) ? // use it as a selector, e.g. \"#goalID\n            this.filter(options.goal)[0] : options.goal[0];\n          } else {\n            return undefined;\n          } // Heuristic function - optional\n\n\n          if (options.heuristic != null && is.fn(options.heuristic)) {\n            var heuristic = options.heuristic;\n          } else {\n            var heuristic = function heuristic() {\n              return 0;\n            }; // use constant if unspecified\n\n          } // Weight function - optional\n\n\n          if (options.weight != null && is.fn(options.weight)) {\n            var weightFn = options.weight;\n          } else {\n            // If not specified, assume each edge has equal weight (1)\n            var weightFn = function weightFn(e) {\n              return 1;\n            };\n          } // directed - optional\n\n\n          if (options.directed != null) {\n            var directed = options.directed;\n          } else {\n            var directed = false;\n          }\n\n          var sid = source.id();\n          var tid = target.id();\n          var closedSet = [];\n          var openSet = [sid];\n          var cameFrom = {};\n          var cameFromEdge = {};\n          var gScore = {};\n          var fScore = {};\n          gScore[sid] = 0;\n          fScore[sid] = heuristic(source); // Counter\n\n          var steps = 0; // Main loop\n\n          while (openSet.length > 0) {\n            var minPos = findMin(openSet, fScore);\n            var cMin = cy.getElementById(openSet[minPos]);\n            var cMinId = cMin.id();\n            steps++; // If we've found our goal, then we are done\n\n            if (cMinId == tid) {\n              var rPath = reconstructPath(sid, tid, cameFrom, []);\n              return {\n                found: true,\n                distance: gScore[cMinId],\n                path: eles.spawn(rPath),\n                steps: steps\n              };\n            } // Add cMin to processed nodes\n\n\n            closedSet.push(cMinId); // Remove cMin from boundary nodes\n\n            openSet.splice(minPos, 1); // Update scores for neighbors of cMin\n            // Take into account if graph is directed or not\n\n            var vwEdges = cMin._private.edges;\n\n            for (var i = 0; i < vwEdges.length; i++) {\n              var e = vwEdges[i]; // edge must be in set of calling eles\n\n              if (!this.hasElementWithId(e.id())) {\n                continue;\n              } // cMin must be the source of edge if directed\n\n\n              if (directed && e.data('source') !== cMinId) {\n                continue;\n              }\n\n              var wSrc = e.source();\n              var wTgt = e.target();\n              var w = wSrc.id() !== cMinId ? wSrc : wTgt;\n              var wid = w.id(); // node must be in set of calling eles\n\n              if (!this.hasElementWithId(wid)) {\n                continue;\n              } // if node is in closedSet, ignore it\n\n\n              if (closedSet.indexOf(wid) != -1) {\n                continue;\n              } // New tentative score for node w\n\n\n              var tempScore = gScore[cMinId] + weightFn(e); // Update gScore for node w if:\n              //   w not present in openSet\n              // OR\n              //   tentative gScore is less than previous value\n              // w not in openSet\n\n              if (openSet.indexOf(wid) == -1) {\n                gScore[wid] = tempScore;\n                fScore[wid] = tempScore + heuristic(w);\n                openSet.push(wid); // Add node to openSet\n\n                cameFrom[wid] = cMinId;\n                cameFromEdge[wid] = e.id();\n                continue;\n              } // w already in openSet, but with greater gScore\n\n\n              if (tempScore < gScore[wid]) {\n                gScore[wid] = tempScore;\n                fScore[wid] = tempScore + heuristic(w);\n                cameFrom[wid] = cMinId;\n              }\n            } // End of neighbors update\n\n          } // End of main loop\n          // If we've reached here, then we've not reached our goal\n\n\n          return {\n            found: false,\n            distance: undefined,\n            path: undefined,\n            steps: steps\n          };\n        }\n      }; // elesfn\n\n      module.exports = elesfn;\n      /***/\n    },\n    /* 35 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var elesfn = {\n        // Implemented from pseudocode from wikipedia\n        floydWarshall: function floydWarshall(options) {\n          options = options || {};\n          var cy = this.cy(); // Weight function - optional\n\n          if (options.weight != null && is.fn(options.weight)) {\n            var weightFn = options.weight;\n          } else {\n            // If not specified, assume each edge has equal weight (1)\n            var weightFn = function weightFn(e) {\n              return 1;\n            };\n          } // directed - optional\n\n\n          if (options.directed != null) {\n            var directed = options.directed;\n          } else {\n            var directed = false;\n          }\n\n          var edges = this.edges().stdFilter(function (e) {\n            return !e.isLoop();\n          });\n          var nodes = this.nodes();\n          var numNodes = nodes.length; // mapping: node id -> position in nodes array\n\n          var id2position = {};\n\n          for (var i = 0; i < numNodes; i++) {\n            id2position[nodes[i].id()] = i;\n          } // Initialize distance matrix\n\n\n          var dist = [];\n\n          for (var i = 0; i < numNodes; i++) {\n            var newRow = new Array(numNodes);\n\n            for (var j = 0; j < numNodes; j++) {\n              if (i == j) {\n                newRow[j] = 0;\n              } else {\n                newRow[j] = Infinity;\n              }\n            }\n\n            dist.push(newRow);\n          } // Initialize matrix used for path reconstruction\n          // Initialize distance matrix\n\n\n          var next = [];\n          var edgeNext = [];\n\n          var initMatrix = function initMatrix(next) {\n            for (var i = 0; i < numNodes; i++) {\n              var newRow = new Array(numNodes);\n\n              for (var j = 0; j < numNodes; j++) {\n                newRow[j] = undefined;\n              }\n\n              next.push(newRow);\n            }\n          };\n\n          initMatrix(next);\n          initMatrix(edgeNext); // Process edges\n\n          for (var i = 0; i < edges.length; i++) {\n            var sourceIndex = id2position[edges[i].source().id()];\n            var targetIndex = id2position[edges[i].target().id()];\n            var weight = weightFn(edges[i]); // Check if already process another edge between same 2 nodes\n\n            if (dist[sourceIndex][targetIndex] > weight) {\n              dist[sourceIndex][targetIndex] = weight;\n              next[sourceIndex][targetIndex] = targetIndex;\n              edgeNext[sourceIndex][targetIndex] = edges[i];\n            }\n          } // If undirected graph, process 'reversed' edges\n\n\n          if (!directed) {\n            for (var i = 0; i < edges.length; i++) {\n              var sourceIndex = id2position[edges[i].target().id()];\n              var targetIndex = id2position[edges[i].source().id()];\n              var weight = weightFn(edges[i]); // Check if already process another edge between same 2 nodes\n\n              if (dist[sourceIndex][targetIndex] > weight) {\n                dist[sourceIndex][targetIndex] = weight;\n                next[sourceIndex][targetIndex] = targetIndex;\n                edgeNext[sourceIndex][targetIndex] = edges[i];\n              }\n            }\n          } // Main loop\n\n\n          for (var k = 0; k < numNodes; k++) {\n            for (var i = 0; i < numNodes; i++) {\n              for (var j = 0; j < numNodes; j++) {\n                if (dist[i][k] + dist[k][j] < dist[i][j]) {\n                  dist[i][j] = dist[i][k] + dist[k][j];\n                  next[i][j] = next[i][k];\n                }\n              }\n            }\n          } // Build result object\n\n\n          var position2id = [];\n\n          for (var i = 0; i < numNodes; i++) {\n            position2id.push(nodes[i].id());\n          }\n\n          var res = {\n            distance: function distance(from, to) {\n              if (is.string(from)) {\n                // from is a selector string\n                var fromId = cy.filter(from)[0].id();\n              } else {\n                // from is a node\n                var fromId = from.id();\n              }\n\n              if (is.string(to)) {\n                // to is a selector string\n                var toId = cy.filter(to)[0].id();\n              } else {\n                // to is a node\n                var toId = to.id();\n              }\n\n              return dist[id2position[fromId]][id2position[toId]];\n            },\n            path: function path(from, to) {\n              var reconstructPathAux = function reconstructPathAux(from, to, next, position2id, edgeNext) {\n                if (from === to) {\n                  return cy.getElementById(position2id[from]);\n                }\n\n                if (next[from][to] === undefined) {\n                  return undefined;\n                }\n\n                var path = [cy.getElementById(position2id[from])];\n                var prev = from;\n\n                while (from !== to) {\n                  prev = from;\n                  from = next[from][to];\n                  var edge = edgeNext[prev][from];\n                  path.push(edge);\n                  path.push(cy.getElementById(position2id[from]));\n                }\n\n                return path;\n              };\n\n              if (is.string(from)) {\n                // from is a selector string\n                var fromId = cy.filter(from)[0].id();\n              } else {\n                // from is a node\n                var fromId = from.id();\n              }\n\n              if (is.string(to)) {\n                // to is a selector string\n                var toId = cy.filter(to)[0].id();\n              } else {\n                // to is a node\n                var toId = to.id();\n              }\n\n              var pathArr = reconstructPathAux(id2position[fromId], id2position[toId], next, position2id, edgeNext);\n              return cy.collection(pathArr);\n            }\n          };\n          return res;\n        } // floydWarshall\n\n      }; // elesfn\n\n      module.exports = elesfn;\n      /***/\n    },\n    /* 36 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var elesfn = {\n        // Implemented from pseudocode from wikipedia\n        bellmanFord: function bellmanFord(options) {\n          var eles = this;\n          options = options || {}; // Weight function - optional\n\n          if (options.weight != null && is.fn(options.weight)) {\n            var weightFn = options.weight;\n          } else {\n            // If not specified, assume each edge has equal weight (1)\n            var weightFn = function weightFn(e) {\n              return 1;\n            };\n          } // directed - optional\n\n\n          if (options.directed != null) {\n            var directed = options.directed;\n          } else {\n            var directed = false;\n          } // root - mandatory!\n\n\n          if (options.root != null) {\n            if (is.string(options.root)) {\n              // use it as a selector, e.g. \"#rootID\n              var source = this.filter(options.root)[0];\n            } else {\n              var source = options.root[0];\n            }\n          } else {\n            return undefined;\n          }\n\n          var cy = this._private.cy;\n          var edges = this.edges().stdFilter(function (e) {\n            return !e.isLoop();\n          });\n          var nodes = this.nodes();\n          var numNodes = nodes.length; // mapping: node id -> position in nodes array\n\n          var id2position = {};\n\n          for (var i = 0; i < numNodes; i++) {\n            id2position[nodes[i].id()] = i;\n          } // Initializations\n\n\n          var cost = [];\n          var predecessor = [];\n          var predEdge = [];\n\n          for (var i = 0; i < numNodes; i++) {\n            if (nodes[i].id() === source.id()) {\n              cost[i] = 0;\n            } else {\n              cost[i] = Infinity;\n            }\n\n            predecessor[i] = undefined;\n          } // Edges relaxation\n\n\n          var flag = false;\n\n          for (var i = 1; i < numNodes; i++) {\n            flag = false;\n\n            for (var e = 0; e < edges.length; e++) {\n              var sourceIndex = id2position[edges[e].source().id()];\n              var targetIndex = id2position[edges[e].target().id()];\n              var weight = weightFn(edges[e]);\n              var temp = cost[sourceIndex] + weight;\n\n              if (temp < cost[targetIndex]) {\n                cost[targetIndex] = temp;\n                predecessor[targetIndex] = sourceIndex;\n                predEdge[targetIndex] = edges[e];\n                flag = true;\n              } // If undirected graph, we need to take into account the 'reverse' edge\n\n\n              if (!directed) {\n                var temp = cost[targetIndex] + weight;\n\n                if (temp < cost[sourceIndex]) {\n                  cost[sourceIndex] = temp;\n                  predecessor[sourceIndex] = targetIndex;\n                  predEdge[sourceIndex] = edges[e];\n                  flag = true;\n                }\n              }\n            }\n\n            if (!flag) {\n              break;\n            }\n          }\n\n          if (flag) {\n            // Check for negative weight cycles\n            for (var e = 0; e < edges.length; e++) {\n              var sourceIndex = id2position[edges[e].source().id()];\n              var targetIndex = id2position[edges[e].target().id()];\n              var weight = weightFn(edges[e]);\n\n              if (cost[sourceIndex] + weight < cost[targetIndex]) {\n                util.error('Graph contains a negative weight cycle for Bellman-Ford');\n                return {\n                  pathTo: undefined,\n                  distanceTo: undefined,\n                  hasNegativeWeightCycle: true\n                };\n              }\n            }\n          } // Build result object\n\n\n          var position2id = [];\n\n          for (var i = 0; i < numNodes; i++) {\n            position2id.push(nodes[i].id());\n          }\n\n          var res = {\n            distanceTo: function distanceTo(to) {\n              if (is.string(to)) {\n                // to is a selector string\n                var toId = cy.filter(to)[0].id();\n              } else {\n                // to is a node\n                var toId = to.id();\n              }\n\n              return cost[id2position[toId]];\n            },\n            pathTo: function pathTo(to) {\n              var reconstructPathAux = function reconstructPathAux(predecessor, fromPos, toPos, position2id, acumPath, predEdge) {\n                for (;;) {\n                  // Add toId to path\n                  acumPath.push(cy.getElementById(position2id[toPos]));\n                  acumPath.push(predEdge[toPos]);\n\n                  if (fromPos === toPos) {\n                    // reached starting node\n                    return acumPath;\n                  } // If no path exists, discart acumulated path and return undefined\n\n\n                  var predPos = predecessor[toPos];\n\n                  if (typeof predPos === 'undefined') {\n                    return undefined;\n                  }\n\n                  toPos = predPos;\n                }\n              };\n\n              if (is.string(to)) {\n                // to is a selector string\n                var toId = cy.filter(to)[0].id();\n              } else {\n                // to is a node\n                var toId = to.id();\n              }\n\n              var path = []; // This returns a reversed path\n\n              var res = reconstructPathAux(predecessor, id2position[source.id()], id2position[toId], position2id, path, predEdge); // Get it in the correct order and return it\n\n              if (res != null) {\n                res.reverse();\n              }\n\n              return eles.spawn(res);\n            },\n            hasNegativeWeightCycle: false\n          };\n          return res;\n        } // bellmanFord\n\n      }; // elesfn\n\n      module.exports = elesfn;\n      /***/\n    },\n    /* 37 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var elesfn = {\n        // Computes the minimum cut of an undirected graph\n        // Returns the correct answer with high probability\n        kargerStein: function kargerStein(options) {\n          var eles = this;\n          options = options || {}; // Function which colapses 2 (meta) nodes into one\n          // Updates the remaining edge lists\n          // Receives as a paramater the edge which causes the collapse\n\n          var colapse = function colapse(edgeIndex, nodeMap, remainingEdges) {\n            var edgeInfo = remainingEdges[edgeIndex];\n            var sourceIn = edgeInfo[1];\n            var targetIn = edgeInfo[2];\n            var partition1 = nodeMap[sourceIn];\n            var partition2 = nodeMap[targetIn]; // Delete all edges between partition1 and partition2\n\n            var newEdges = remainingEdges.filter(function (edge) {\n              if (nodeMap[edge[1]] === partition1 && nodeMap[edge[2]] === partition2) {\n                return false;\n              }\n\n              if (nodeMap[edge[1]] === partition2 && nodeMap[edge[2]] === partition1) {\n                return false;\n              }\n\n              return true;\n            }); // All edges pointing to partition2 should now point to partition1\n\n            for (var i = 0; i < newEdges.length; i++) {\n              var edge = newEdges[i];\n\n              if (edge[1] === partition2) {\n                // Check source\n                newEdges[i] = edge.slice(0);\n                newEdges[i][1] = partition1;\n              } else if (edge[2] === partition2) {\n                // Check target\n                newEdges[i] = edge.slice(0);\n                newEdges[i][2] = partition1;\n              }\n            } // Move all nodes from partition2 to partition1\n\n\n            for (var i = 0; i < nodeMap.length; i++) {\n              if (nodeMap[i] === partition2) {\n                nodeMap[i] = partition1;\n              }\n            }\n\n            return newEdges;\n          }; // Contracts a graph until we reach a certain number of meta nodes\n\n\n          var contractUntil = function contractUntil(metaNodeMap, remainingEdges, size, sizeLimit) {\n            // Stop condition\n            if (size <= sizeLimit) {\n              return remainingEdges;\n            } // Choose an edge randomly\n\n\n            var edgeIndex = Math.floor(Math.random() * remainingEdges.length); // Colapse graph based on edge\n\n            var newEdges = colapse(edgeIndex, metaNodeMap, remainingEdges);\n            return contractUntil(metaNodeMap, newEdges, size - 1, sizeLimit);\n          };\n\n          var cy = this._private.cy;\n          var edges = this.edges().stdFilter(function (e) {\n            return !e.isLoop();\n          });\n          var nodes = this.nodes();\n          var numNodes = nodes.length;\n          var numEdges = edges.length;\n          var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));\n          var stopSize = Math.floor(numNodes / Math.sqrt(2));\n\n          if (numNodes < 2) {\n            util.error('At least 2 nodes are required for Karger-Stein algorithm');\n            return undefined;\n          } // Create numerical identifiers for each node\n          // mapping: node id -> position in nodes array\n          // for reverse mapping, simply use nodes array\n\n\n          var id2position = {};\n\n          for (var i = 0; i < numNodes; i++) {\n            id2position[nodes[i].id()] = i;\n          } // Now store edge destination as indexes\n          // Format for each edge (edge index, source node index, target node index)\n\n\n          var edgeIndexes = [];\n\n          for (var i = 0; i < numEdges; i++) {\n            var e = edges[i];\n            edgeIndexes.push([i, id2position[e.source().id()], id2position[e.target().id()]]);\n          } // We will store the best cut found here\n\n\n          var minCutSize = Infinity;\n          var minCut; // Initial meta node partition\n\n          var originalMetaNode = [];\n\n          for (var i = 0; i < numNodes; i++) {\n            originalMetaNode.push(i);\n          } // Main loop\n\n\n          for (var iter = 0; iter <= numIter; iter++) {\n            // Create new meta node partition\n            var metaNodeMap = originalMetaNode.slice(0); // Contract until stop point (stopSize nodes)\n\n            var edgesState = contractUntil(metaNodeMap, edgeIndexes, numNodes, stopSize); // Create a copy of the colapsed nodes state\n\n            var metaNodeMap2 = metaNodeMap.slice(0); // Run 2 iterations starting in the stop state\n\n            var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);\n            var res2 = contractUntil(metaNodeMap2, edgesState, stopSize, 2); // Is any of the 2 results the best cut so far?\n\n            if (res1.length <= res2.length && res1.length < minCutSize) {\n              minCutSize = res1.length;\n              minCut = [res1, metaNodeMap];\n            } else if (res2.length <= res1.length && res2.length < minCutSize) {\n              minCutSize = res2.length;\n              minCut = [res2, metaNodeMap2];\n            }\n          } // end of main loop\n          // Construct result\n\n\n          var resEdges = minCut[0].map(function (e) {\n            return edges[e[0]];\n          });\n          var partition1 = [];\n          var partition2 = []; // traverse metaNodeMap for best cut\n\n          var witnessNodePartition = minCut[1][0];\n\n          for (var i = 0; i < minCut[1].length; i++) {\n            var partitionId = minCut[1][i];\n\n            if (partitionId === witnessNodePartition) {\n              partition1.push(nodes[i]);\n            } else {\n              partition2.push(nodes[i]);\n            }\n          }\n\n          var ret = {\n            cut: eles.spawn(cy, resEdges),\n            partition1: eles.spawn(partition1),\n            partition2: eles.spawn(partition2)\n          };\n          return ret;\n        }\n      }; // elesfn\n\n      module.exports = elesfn;\n      /***/\n    },\n    /* 38 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var elesfn = {\n        pageRank: function pageRank(options) {\n          options = options || {};\n\n          var normalizeVector = function normalizeVector(vector) {\n            var length = vector.length; // First, get sum of all elements\n\n            var total = 0;\n\n            for (var i = 0; i < length; i++) {\n              total += vector[i];\n            } // Now, divide each by the sum of all elements\n\n\n            for (var i = 0; i < length; i++) {\n              vector[i] = vector[i] / total;\n            }\n          }; // dampingFactor - optional\n\n\n          if (options != null && options.dampingFactor != null) {\n            var dampingFactor = options.dampingFactor;\n          } else {\n            var dampingFactor = 0.8; // Default damping factor\n          } // desired precision - optional\n\n\n          if (options != null && options.precision != null) {\n            var epsilon = options.precision;\n          } else {\n            var epsilon = 0.000001; // Default precision\n          } // Max number of iterations - optional\n\n\n          if (options != null && options.iterations != null) {\n            var numIter = options.iterations;\n          } else {\n            var numIter = 200; // Default number of iterations\n          } // Weight function - optional\n\n\n          if (options != null && options.weight != null && is.fn(options.weight)) {\n            var weightFn = options.weight;\n          } else {\n            // If not specified, assume each edge has equal weight (1)\n            var weightFn = function weightFn(e) {\n              return 1;\n            };\n          }\n\n          var cy = this._private.cy;\n          var edges = this.edges().stdFilter(function (e) {\n            return !e.isLoop();\n          });\n          var nodes = this.nodes();\n          var numNodes = nodes.length;\n          var numEdges = edges.length; // Create numerical identifiers for each node\n          // mapping: node id -> position in nodes array\n          // for reverse mapping, simply use nodes array\n\n          var id2position = {};\n\n          for (var i = 0; i < numNodes; i++) {\n            id2position[nodes[i].id()] = i;\n          } // Construct transposed adjacency matrix\n          // First lets have a zeroed matrix of the right size\n          // We'll also keep track of the sum of each column\n\n\n          var matrix = [];\n          var columnSum = [];\n          var additionalProb = (1 - dampingFactor) / numNodes; // Create null matric\n\n          for (var i = 0; i < numNodes; i++) {\n            var newRow = [];\n\n            for (var j = 0; j < numNodes; j++) {\n              newRow.push(0.0);\n            }\n\n            matrix.push(newRow);\n            columnSum.push(0.0);\n          } // Now, process edges\n\n\n          for (var i = 0; i < numEdges; i++) {\n            var edge = edges[i];\n            var s = id2position[edge.source().id()];\n            var t = id2position[edge.target().id()];\n            var w = weightFn(edge); // Update matrix\n\n            matrix[t][s] += w; // Update column sum\n\n            columnSum[s] += w;\n          } // Add additional probability based on damping factor\n          // Also, take into account columns that have sum = 0\n\n\n          var p = 1.0 / numNodes + additionalProb; // Shorthand\n          // Traverse matrix, column by column\n\n          for (var j = 0; j < numNodes; j++) {\n            if (columnSum[j] === 0) {\n              // No 'links' out from node jth, assume equal probability for each possible node\n              for (var i = 0; i < numNodes; i++) {\n                matrix[i][j] = p;\n              }\n            } else {\n              // Node jth has outgoing link, compute normalized probabilities\n              for (var i = 0; i < numNodes; i++) {\n                matrix[i][j] = matrix[i][j] / columnSum[j] + additionalProb;\n              }\n            }\n          } // Compute dominant eigenvector using power method\n\n\n          var eigenvector = [];\n          var nullVector = [];\n          var previous; // Start with a vector of all 1's\n          // Also, initialize a null vector which will be used as shorthand\n\n          for (var i = 0; i < numNodes; i++) {\n            eigenvector.push(1.0);\n            nullVector.push(0.0);\n          }\n\n          for (var iter = 0; iter < numIter; iter++) {\n            // New array with all 0's\n            var temp = nullVector.slice(0); // Multiply matrix with previous result\n\n            for (var i = 0; i < numNodes; i++) {\n              for (var j = 0; j < numNodes; j++) {\n                temp[i] += matrix[i][j] * eigenvector[j];\n              }\n            }\n\n            normalizeVector(temp);\n            previous = eigenvector;\n            eigenvector = temp;\n            var diff = 0; // Compute difference (squared module) of both vectors\n\n            for (var i = 0; i < numNodes; i++) {\n              diff += Math.pow(previous[i] - eigenvector[i], 2);\n            } // If difference is less than the desired threshold, stop iterating\n\n\n            if (diff < epsilon) {\n              break;\n            }\n          } // Construct result\n\n\n          var res = {\n            rank: function rank(node) {\n              if (is.string(node)) {\n                // is a selector string\n                var nodeId = cy.filter(node)[0].id();\n              } else {\n                // is a node object\n                var nodeId = node.id();\n              }\n\n              return eigenvector[id2position[nodeId]];\n            }\n          };\n          return res;\n        } // pageRank\n\n      }; // elesfn\n\n      module.exports = elesfn;\n      /***/\n    },\n    /* 39 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var elesfn = {\n        degreeCentralityNormalized: function degreeCentralityNormalized(options) {\n          options = options || {};\n          var cy = this.cy(); // directed - optional\n\n          if (options.directed != null) {\n            var directed = options.directed;\n          } else {\n            var directed = false;\n          }\n\n          var nodes = this.nodes();\n          var numNodes = nodes.length;\n\n          if (!directed) {\n            var degrees = {};\n            var maxDegree = 0;\n\n            for (var i = 0; i < numNodes; i++) {\n              var node = nodes[i]; // add current node to the current options object and call degreeCentrality\n\n              var currDegree = this.degreeCentrality(util.extend({}, options, {\n                root: node\n              }));\n              if (maxDegree < currDegree.degree) maxDegree = currDegree.degree;\n              degrees[node.id()] = currDegree.degree;\n            }\n\n            return {\n              degree: function degree(node) {\n                if (maxDegree == 0) return 0;\n\n                if (is.string(node)) {\n                  // from is a selector string\n                  var node = cy.filter(node)[0].id();\n                } else {\n                  // from is a node\n                  var node = node.id();\n                }\n\n                return degrees[node] / maxDegree;\n              }\n            };\n          } else {\n            var indegrees = {};\n            var outdegrees = {};\n            var maxIndegree = 0;\n            var maxOutdegree = 0;\n\n            for (var i = 0; i < numNodes; i++) {\n              var node = nodes[i]; // add current node to the current options object and call degreeCentrality\n\n              var currDegree = this.degreeCentrality(util.extend({}, options, {\n                root: node\n              }));\n              if (maxIndegree < currDegree.indegree) maxIndegree = currDegree.indegree;\n              if (maxOutdegree < currDegree.outdegree) maxOutdegree = currDegree.outdegree;\n              indegrees[node.id()] = currDegree.indegree;\n              outdegrees[node.id()] = currDegree.outdegree;\n            }\n\n            return {\n              indegree: function indegree(node) {\n                if (maxIndegree == 0) return 0;\n\n                if (is.string(node)) {\n                  // from is a selector string\n                  var node = cy.filter(node)[0].id();\n                } else {\n                  // from is a node\n                  var node = node.id();\n                }\n\n                return indegrees[node] / maxIndegree;\n              },\n              outdegree: function outdegree(node) {\n                if (maxOutdegree == 0) return 0;\n\n                if (is.string(node)) {\n                  // from is a selector string\n                  var node = cy.filter(node)[0].id();\n                } else {\n                  // from is a node\n                  var node = node.id();\n                }\n\n                return outdegrees[node] / maxOutdegree;\n              }\n            };\n          }\n        },\n        // degreeCentralityNormalized\n        // Implemented from the algorithm in Opsahl's paper\n        // \"Node centrality in weighted networks: Generalizing degree and shortest paths\"\n        // check the heading 2 \"Degree\"\n        degreeCentrality: function degreeCentrality(options) {\n          options = options || {};\n          var callingEles = this; // root - mandatory!\n\n          if (options != null && options.root != null) {\n            var root = is.string(options.root) ? this.filter(options.root)[0] : options.root[0];\n          } else {\n            return undefined;\n          } // weight - optional\n\n\n          if (options.weight != null && is.fn(options.weight)) {\n            var weightFn = options.weight;\n          } else {\n            // If not specified, assume each edge has equal weight (1)\n            var weightFn = function weightFn(e) {\n              return 1;\n            };\n          } // directed - optional\n\n\n          if (options.directed != null) {\n            var directed = options.directed;\n          } else {\n            var directed = false;\n          } // alpha - optional\n\n\n          if (options.alpha != null && is.number(options.alpha)) {\n            var alpha = options.alpha;\n          } else {\n            alpha = 0;\n          }\n\n          if (!directed) {\n            var connEdges = root.connectedEdges().intersection(callingEles);\n            var k = connEdges.length;\n            var s = 0; // Now, sum edge weights\n\n            for (var i = 0; i < connEdges.length; i++) {\n              var edge = connEdges[i];\n              s += weightFn(edge);\n            }\n\n            return {\n              degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)\n            };\n          } else {\n            var incoming = root.connectedEdges('edge[target = \"' + root.id() + '\"]').intersection(callingEles);\n            var outgoing = root.connectedEdges('edge[source = \"' + root.id() + '\"]').intersection(callingEles);\n            var k_in = incoming.length;\n            var k_out = outgoing.length;\n            var s_in = 0;\n            var s_out = 0; // Now, sum incoming edge weights\n\n            for (var i = 0; i < incoming.length; i++) {\n              var edge = incoming[i];\n              s_in += weightFn(edge);\n            } // Now, sum outgoing edge weights\n\n\n            for (var i = 0; i < outgoing.length; i++) {\n              var edge = outgoing[i];\n              s_out += weightFn(edge);\n            }\n\n            return {\n              indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),\n              outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)\n            };\n          }\n        } // degreeCentrality\n\n      }; // elesfn\n      // nice, short mathemathical alias\n\n      elesfn.dc = elesfn.degreeCentrality;\n      elesfn.dcn = elesfn.degreeCentralityNormalised = elesfn.degreeCentralityNormalized;\n      module.exports = elesfn;\n      /***/\n    },\n    /* 40 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var elesfn = {\n        closenessCentralityNormalized: function closenessCentralityNormalized(options) {\n          options = options || {};\n          var cy = this.cy();\n          var harmonic = options.harmonic;\n\n          if (harmonic === undefined) {\n            harmonic = true;\n          }\n\n          var closenesses = {};\n          var maxCloseness = 0;\n          var nodes = this.nodes();\n          var fw = this.floydWarshall({\n            weight: options.weight,\n            directed: options.directed\n          }); // Compute closeness for every node and find the maximum closeness\n\n          for (var i = 0; i < nodes.length; i++) {\n            var currCloseness = 0;\n\n            for (var j = 0; j < nodes.length; j++) {\n              if (i != j) {\n                var d = fw.distance(nodes[i], nodes[j]);\n\n                if (harmonic) {\n                  currCloseness += 1 / d;\n                } else {\n                  currCloseness += d;\n                }\n              }\n            }\n\n            if (!harmonic) {\n              currCloseness = 1 / currCloseness;\n            }\n\n            if (maxCloseness < currCloseness) {\n              maxCloseness = currCloseness;\n            }\n\n            closenesses[nodes[i].id()] = currCloseness;\n          }\n\n          return {\n            closeness: function closeness(node) {\n              if (maxCloseness == 0) {\n                return 0;\n              }\n\n              if (is.string(node)) {\n                // from is a selector string\n                var node = cy.filter(node)[0].id();\n              } else {\n                // from is a node\n                var node = node.id();\n              }\n\n              return closenesses[node] / maxCloseness;\n            }\n          };\n        },\n        // Implemented from pseudocode from wikipedia\n        closenessCentrality: function closenessCentrality(options) {\n          options = options || {}; // root - mandatory!\n\n          if (options.root != null) {\n            if (is.string(options.root)) {\n              // use it as a selector, e.g. \"#rootID\n              var root = this.filter(options.root)[0];\n            } else {\n              var root = options.root[0];\n            }\n          } else {\n            return undefined;\n          } // weight - optional\n\n\n          if (options.weight != null && is.fn(options.weight)) {\n            var weight = options.weight;\n          } else {\n            var weight = function weight() {\n              return 1;\n            };\n          } // directed - optional\n\n\n          if (options.directed != null && is.bool(options.directed)) {\n            var directed = options.directed;\n          } else {\n            var directed = false;\n          }\n\n          var harmonic = options.harmonic;\n\n          if (harmonic === undefined) {\n            harmonic = true;\n          } // we need distance from this node to every other node\n\n\n          var dijkstra = this.dijkstra({\n            root: root,\n            weight: weight,\n            directed: directed\n          });\n          var totalDistance = 0;\n          var nodes = this.nodes();\n\n          for (var i = 0; i < nodes.length; i++) {\n            if (nodes[i].id() != root.id()) {\n              var d = dijkstra.distanceTo(nodes[i]);\n\n              if (harmonic) {\n                totalDistance += 1 / d;\n              } else {\n                totalDistance += d;\n              }\n            }\n          }\n\n          return harmonic ? totalDistance : 1 / totalDistance;\n        } // closenessCentrality\n\n      }; // elesfn\n      // nice, short mathemathical alias\n\n      elesfn.cc = elesfn.closenessCentrality;\n      elesfn.ccn = elesfn.closenessCentralityNormalised = elesfn.closenessCentralityNormalized;\n      module.exports = elesfn;\n      /***/\n    },\n    /* 41 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var Heap = __webpack_require__(9);\n\n      var elesfn = {\n        // Implemented from the algorithm in the paper \"On Variants of Shortest-Path Betweenness Centrality and their Generic Computation\" by Ulrik Brandes\n        betweennessCentrality: function betweennessCentrality(options) {\n          options = options || {}; // Weight - optional\n\n          var weighted, weightFn;\n\n          if (is.fn(options.weight)) {\n            weightFn = options.weight;\n            weighted = true;\n          } else {\n            weighted = false;\n          } // Directed - default false\n\n\n          var directed = options.directed != null ? options.directed : false;\n          var cy = this._private.cy; // starting\n\n          var V = this.nodes();\n          var A = {};\n          var _C = {};\n          var max = 0;\n          var C = {\n            set: function set(key, val) {\n              _C[key] = val;\n\n              if (val > max) {\n                max = val;\n              }\n            },\n            get: function get(key) {\n              return _C[key];\n            }\n          }; // A contains the neighborhoods of every node\n\n          for (var i = 0; i < V.length; i++) {\n            var v = V[i];\n            var vid = v.id();\n\n            if (directed) {\n              A[vid] = v.outgoers().nodes(); // get outgoers of every node\n            } else {\n              A[vid] = v.openNeighborhood().nodes(); // get neighbors of every node\n            }\n\n            C.set(vid, 0);\n          }\n\n          for (var s = 0; s < V.length; s++) {\n            var sid = V[s].id();\n            var S = []; // stack\n\n            var P = {};\n            var g = {};\n            var d = {};\n            var Q = new Heap(function (a, b) {\n              return d[a] - d[b];\n            }); // queue\n            // init dictionaries\n\n            for (var i = 0; i < V.length; i++) {\n              var vid = V[i].id();\n              P[vid] = [];\n              g[vid] = 0;\n              d[vid] = Infinity;\n            }\n\n            g[sid] = 1; // sigma\n\n            d[sid] = 0; // distance to s\n\n            Q.push(sid);\n\n            while (!Q.empty()) {\n              var v = Q.pop();\n              S.push(v);\n\n              if (weighted) {\n                for (var j = 0; j < A[v].length; j++) {\n                  var w = A[v][j];\n                  var vEle = cy.getElementById(v);\n                  var edge;\n\n                  if (vEle.edgesTo(w).length > 0) {\n                    edge = vEle.edgesTo(w)[0];\n                  } else {\n                    edge = w.edgesTo(vEle)[0];\n                  }\n\n                  var edgeWeight = weightFn(edge);\n                  w = w.id();\n\n                  if (d[w] > d[v] + edgeWeight) {\n                    d[w] = d[v] + edgeWeight;\n\n                    if (Q.nodes.indexOf(w) < 0) {\n                      //if w is not in Q\n                      Q.push(w);\n                    } else {\n                      // update position if w is in Q\n                      Q.updateItem(w);\n                    }\n\n                    g[w] = 0;\n                    P[w] = [];\n                  }\n\n                  if (d[w] == d[v] + edgeWeight) {\n                    g[w] = g[w] + g[v];\n                    P[w].push(v);\n                  }\n                }\n              } else {\n                for (var j = 0; j < A[v].length; j++) {\n                  var w = A[v][j].id();\n\n                  if (d[w] == Infinity) {\n                    Q.push(w);\n                    d[w] = d[v] + 1;\n                  }\n\n                  if (d[w] == d[v] + 1) {\n                    g[w] = g[w] + g[v];\n                    P[w].push(v);\n                  }\n                }\n              }\n            }\n\n            var e = {};\n\n            for (var i = 0; i < V.length; i++) {\n              e[V[i].id()] = 0;\n            }\n\n            while (S.length > 0) {\n              var w = S.pop();\n\n              for (var j = 0; j < P[w].length; j++) {\n                var v = P[w][j];\n                e[v] = e[v] + g[v] / g[w] * (1 + e[w]);\n\n                if (w != V[s].id()) {\n                  C.set(w, C.get(w) + e[w]);\n                }\n              }\n            }\n          }\n\n          var ret = {\n            betweenness: function betweenness(node) {\n              if (is.string(node)) {\n                var node = cy.filter(node).id();\n              } else {\n                var node = node.id();\n              }\n\n              return C.get(node);\n            },\n            betweennessNormalized: function betweennessNormalized(node) {\n              if (max == 0) return 0;\n\n              if (is.string(node)) {\n                var node = cy.filter(node).id();\n              } else {\n                var node = node.id();\n              }\n\n              return C.get(node) / max;\n            }\n          }; // alias\n\n          ret.betweennessNormalised = ret.betweennessNormalized;\n          return ret;\n        } // betweennessCentrality\n\n      }; // elesfn\n      // nice, short mathemathical alias\n\n      elesfn.bc = elesfn.betweennessCentrality;\n      module.exports = elesfn;\n      /***/\n    },\n    /* 42 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var define = __webpack_require__(4);\n\n      var elesfn = {\n        animate: define.animate(),\n        animation: define.animation(),\n        animated: define.animated(),\n        clearQueue: define.clearQueue(),\n        delay: define.delay(),\n        delayAnimation: define.delayAnimation(),\n        stop: define.stop()\n      };\n      module.exports = elesfn;\n      /***/\n    },\n    /* 43 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var Animation = __webpack_require__(44);\n\n      var math = __webpack_require__(2);\n\n      var is = __webpack_require__(0);\n\n      var define = {\n        animated: function animated() {\n          return function animatedImpl() {\n            var self = this;\n            var selfIsArrayLike = self.length !== undefined;\n            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n\n            var cy = this._private.cy || this;\n\n            if (!cy.styleEnabled()) {\n              return false;\n            }\n\n            var ele = all[0];\n\n            if (ele) {\n              return ele._private.animation.current.length > 0;\n            }\n          };\n        },\n        // animated\n        clearQueue: function clearQueue() {\n          return function clearQueueImpl() {\n            var self = this;\n            var selfIsArrayLike = self.length !== undefined;\n            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n\n            var cy = this._private.cy || this;\n\n            if (!cy.styleEnabled()) {\n              return this;\n            }\n\n            for (var i = 0; i < all.length; i++) {\n              var ele = all[i];\n              ele._private.animation.queue = [];\n            }\n\n            return this;\n          };\n        },\n        // clearQueue\n        delay: function delay() {\n          return function delayImpl(time, complete) {\n            var cy = this._private.cy || this;\n\n            if (!cy.styleEnabled()) {\n              return this;\n            }\n\n            return this.animate({\n              delay: time,\n              duration: time,\n              complete: complete\n            });\n          };\n        },\n        // delay\n        delayAnimation: function delayAnimation() {\n          return function delayAnimationImpl(time, complete) {\n            var cy = this._private.cy || this;\n\n            if (!cy.styleEnabled()) {\n              return this;\n            }\n\n            return this.animation({\n              delay: time,\n              duration: time,\n              complete: complete\n            });\n          };\n        },\n        // delay\n        animation: function animation() {\n          return function animationImpl(properties, params) {\n            var self = this;\n            var selfIsArrayLike = self.length !== undefined;\n            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n\n            var cy = this._private.cy || this;\n            var isCore = !selfIsArrayLike;\n            var isEles = !isCore;\n\n            if (!cy.styleEnabled()) {\n              return this;\n            }\n\n            var style = cy.style();\n            properties = util.assign({}, properties, params);\n            var propertiesEmpty = Object.keys(properties).length === 0;\n\n            if (propertiesEmpty) {\n              return new Animation(all[0], properties); // nothing to animate\n            }\n\n            if (properties.duration === undefined) {\n              properties.duration = 400;\n            }\n\n            switch (properties.duration) {\n              case 'slow':\n                properties.duration = 600;\n                break;\n\n              case 'fast':\n                properties.duration = 200;\n                break;\n            }\n\n            if (isEles) {\n              properties.style = style.getPropsList(properties.style || properties.css);\n              properties.css = undefined;\n            }\n\n            if (isEles && properties.renderedPosition != null) {\n              var rpos = properties.renderedPosition;\n              var pan = cy.pan();\n              var zoom = cy.zoom();\n              properties.position = math.renderedToModelPosition(rpos, zoom, pan);\n            } // override pan w/ panBy if set\n\n\n            if (isCore && properties.panBy != null) {\n              var panBy = properties.panBy;\n              var cyPan = cy.pan();\n              properties.pan = {\n                x: cyPan.x + panBy.x,\n                y: cyPan.y + panBy.y\n              };\n            } // override pan w/ center if set\n\n\n            var center = properties.center || properties.centre;\n\n            if (isCore && center != null) {\n              var centerPan = cy.getCenterPan(center.eles, properties.zoom);\n\n              if (centerPan != null) {\n                properties.pan = centerPan;\n              }\n            } // override pan & zoom w/ fit if set\n\n\n            if (isCore && properties.fit != null) {\n              var fit = properties.fit;\n              var fitVp = cy.getFitViewport(fit.eles || fit.boundingBox, fit.padding);\n\n              if (fitVp != null) {\n                properties.pan = fitVp.pan;\n                properties.zoom = fitVp.zoom;\n              }\n            } // override zoom (& potentially pan) w/ zoom obj if set\n\n\n            if (isCore && is.plainObject(properties.zoom)) {\n              var vp = cy.getZoomedViewport(properties.zoom);\n\n              if (vp != null) {\n                if (vp.zoomed) {\n                  properties.zoom = vp.zoom;\n                }\n\n                if (vp.panned) {\n                  properties.pan = vp.pan;\n                }\n              }\n            }\n\n            return new Animation(all[0], properties);\n          };\n        },\n        // animate\n        animate: function animate() {\n          return function animateImpl(properties, params) {\n            var self = this;\n            var selfIsArrayLike = self.length !== undefined;\n            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n\n            var cy = this._private.cy || this;\n\n            if (!cy.styleEnabled()) {\n              return this;\n            }\n\n            if (params) {\n              properties = util.extend({}, properties, params);\n            } // manually hook and run the animation\n\n\n            for (var i = 0; i < all.length; i++) {\n              var ele = all[i];\n              var queue = ele.animated() && (properties.queue === undefined || properties.queue);\n              var ani = ele.animation(properties, queue ? {\n                queue: true\n              } : undefined);\n              ani.play();\n            }\n\n            return this; // chaining\n          };\n        },\n        // animate\n        stop: function stop() {\n          return function stopImpl(clearQueue, jumpToEnd) {\n            var self = this;\n            var selfIsArrayLike = self.length !== undefined;\n            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n\n            var cy = this._private.cy || this;\n\n            if (!cy.styleEnabled()) {\n              return this;\n            }\n\n            for (var i = 0; i < all.length; i++) {\n              var ele = all[i];\n              var _p = ele._private;\n              var anis = _p.animation.current;\n\n              for (var j = 0; j < anis.length; j++) {\n                var ani = anis[j];\n                var ani_p = ani._private;\n\n                if (jumpToEnd) {\n                  // next iteration of the animation loop, the animation\n                  // will go straight to the end and be removed\n                  ani_p.duration = 0;\n                }\n              } // clear the queue of future animations\n\n\n              if (clearQueue) {\n                _p.animation.queue = [];\n              }\n\n              if (!jumpToEnd) {\n                _p.animation.current = [];\n              }\n            } // we have to notify (the animation loop doesn't do it for us on `stop`)\n\n\n            cy.notify({\n              eles: this,\n              type: 'draw'\n            });\n            return this;\n          };\n        } // stop\n\n      }; // define\n\n      module.exports = define;\n      /***/\n    },\n    /* 44 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var is = __webpack_require__(0);\n\n      var Promise = __webpack_require__(5);\n\n      var Animation = function Animation(target, opts, opts2) {\n        var _p = this._private = util.extend({\n          duration: 1000\n        }, opts, opts2);\n\n        _p.target = target;\n        _p.style = _p.style || _p.css;\n        _p.started = false;\n        _p.playing = false;\n        _p.hooked = false;\n        _p.applying = false;\n        _p.progress = 0;\n        _p.completes = [];\n        _p.frames = [];\n\n        if (_p.complete && is.fn(_p.complete)) {\n          _p.completes.push(_p.complete);\n        } // for future timeline/animations impl\n\n\n        this.length = 1;\n        this[0] = this;\n      };\n\n      var anifn = Animation.prototype;\n      util.extend(anifn, {\n        instanceString: function instanceString() {\n          return 'animation';\n        },\n        hook: function hook() {\n          var _p = this._private;\n\n          if (!_p.hooked) {\n            // add to target's animation queue\n            var q = void 0;\n            var tAni = _p.target._private.animation;\n\n            if (_p.queue) {\n              q = tAni.queue;\n            } else {\n              q = tAni.current;\n            }\n\n            q.push(this); // add to the animation loop pool\n\n            if (is.elementOrCollection(_p.target)) {\n              _p.target.cy().addToAnimationPool(_p.target);\n            }\n\n            _p.hooked = true;\n          }\n\n          return this;\n        },\n        play: function play() {\n          var _p = this._private; // autorewind\n\n          if (_p.progress === 1) {\n            _p.progress = 0;\n          }\n\n          _p.playing = true;\n          _p.started = false; // needs to be started by animation loop\n\n          _p.stopped = false;\n          this.hook(); // the animation loop will start the animation...\n\n          return this;\n        },\n        playing: function playing() {\n          return this._private.playing;\n        },\n        apply: function apply() {\n          var _p = this._private;\n          _p.applying = true;\n          _p.started = false; // needs to be started by animation loop\n\n          _p.stopped = false;\n          this.hook(); // the animation loop will apply the animation at this progress\n\n          return this;\n        },\n        applying: function applying() {\n          return this._private.applying;\n        },\n        pause: function pause() {\n          var _p = this._private;\n          _p.playing = false;\n          _p.started = false;\n          return this;\n        },\n        stop: function stop() {\n          var _p = this._private;\n          _p.playing = false;\n          _p.started = false;\n          _p.stopped = true; // to be removed from animation queues\n\n          return this;\n        },\n        rewind: function rewind() {\n          return this.progress(0);\n        },\n        fastforward: function fastforward() {\n          return this.progress(1);\n        },\n        time: function time(t) {\n          var _p = this._private;\n\n          if (t === undefined) {\n            return _p.progress * _p.duration;\n          } else {\n            return this.progress(t / _p.duration);\n          }\n        },\n        progress: function progress(p) {\n          var _p = this._private;\n          var wasPlaying = _p.playing;\n\n          if (p === undefined) {\n            return _p.progress;\n          } else {\n            if (wasPlaying) {\n              this.pause();\n            }\n\n            _p.progress = p;\n            _p.started = false;\n\n            if (wasPlaying) {\n              this.play();\n            }\n          }\n\n          return this;\n        },\n        completed: function completed() {\n          return this._private.progress === 1;\n        },\n        reverse: function reverse() {\n          var _p = this._private;\n          var wasPlaying = _p.playing;\n\n          if (wasPlaying) {\n            this.pause();\n          }\n\n          _p.progress = 1 - _p.progress;\n          _p.started = false;\n\n          var swap = function swap(a, b) {\n            var _pa = _p[a];\n\n            if (_pa == null) {\n              return;\n            }\n\n            _p[a] = _p[b];\n            _p[b] = _pa;\n          };\n\n          swap('zoom', 'startZoom');\n          swap('pan', 'startPan');\n          swap('position', 'startPosition'); // swap styles\n\n          if (_p.style) {\n            for (var i = 0; i < _p.style.length; i++) {\n              var prop = _p.style[i];\n              var name = prop.name;\n              var startStyleProp = _p.startStyle[name];\n              _p.startStyle[name] = prop;\n              _p.style[i] = startStyleProp;\n            }\n          }\n\n          if (wasPlaying) {\n            this.play();\n          }\n\n          return this;\n        },\n        promise: function promise(type) {\n          var _p = this._private;\n          var arr = void 0;\n\n          switch (type) {\n            case 'frame':\n              arr = _p.frames;\n              break;\n\n            default:\n            case 'complete':\n            case 'completed':\n              arr = _p.completes;\n          }\n\n          return new Promise(function (resolve, reject) {\n            arr.push(function () {\n              resolve();\n            });\n          });\n        }\n      });\n      anifn.complete = anifn.completed;\n      module.exports = Animation;\n      /***/\n    },\n    /* 45 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function _defineProperty(obj, key, value) {\n        if (key in obj) {\n          Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n          });\n        } else {\n          obj[key] = value;\n        }\n\n        return obj;\n      }\n\n      var util = __webpack_require__(1);\n\n      var is = __webpack_require__(0);\n\n      var define = {\n        // access data field\n        data: function data(params) {\n          var defaults = {\n            field: 'data',\n            bindingEvent: 'data',\n            allowBinding: false,\n            allowSetting: false,\n            allowGetting: false,\n            settingEvent: 'data',\n            settingTriggersEvent: false,\n            triggerFnName: 'trigger',\n            immutableKeys: {},\n            // key => true if immutable\n            updateStyle: false,\n            beforeGet: function beforeGet(self) {},\n            beforeSet: function beforeSet(self, obj) {},\n            onSet: function onSet(self) {},\n            canSet: function canSet(self) {\n              return true;\n            }\n          };\n          params = util.extend({}, defaults, params);\n          return function dataImpl(name, value) {\n            var p = params;\n            var self = this;\n            var selfIsArrayLike = self.length !== undefined;\n            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n\n            var single = selfIsArrayLike ? self[0] : self; // .data('foo', ...)\n\n            if (is.string(name)) {\n              // set or get property\n              // .data('foo')\n              if (p.allowGetting && value === undefined) {\n                // get\n                var ret = void 0;\n\n                if (single) {\n                  p.beforeGet(single);\n                  ret = single._private[p.field][name];\n                }\n\n                return ret; // .data('foo', 'bar')\n              } else if (p.allowSetting && value !== undefined) {\n                // set\n                var valid = !p.immutableKeys[name];\n\n                if (valid) {\n                  var change = _defineProperty({}, name, value);\n\n                  p.beforeSet(self, change);\n\n                  for (var i = 0, l = all.length; i < l; i++) {\n                    var ele = all[i];\n\n                    if (p.canSet(ele)) {\n                      ele._private[p.field][name] = value;\n                    }\n                  } // update mappers if asked\n\n\n                  if (p.updateStyle) {\n                    self.updateStyle();\n                  } // call onSet callback\n\n\n                  p.onSet(self);\n\n                  if (p.settingTriggersEvent) {\n                    self[p.triggerFnName](p.settingEvent);\n                  }\n                }\n              } // .data({ 'foo': 'bar' })\n\n            } else if (p.allowSetting && is.plainObject(name)) {\n              // extend\n              var obj = name;\n              var k = void 0,\n                  v = void 0;\n              var keys = Object.keys(obj);\n              p.beforeSet(self, obj);\n\n              for (var _i = 0; _i < keys.length; _i++) {\n                k = keys[_i];\n                v = obj[k];\n\n                var _valid = !p.immutableKeys[k];\n\n                if (_valid) {\n                  for (var j = 0; j < all.length; j++) {\n                    var _ele = all[j];\n\n                    if (p.canSet(_ele)) {\n                      _ele._private[p.field][k] = v;\n                    }\n                  }\n                }\n              } // update mappers if asked\n\n\n              if (p.updateStyle) {\n                self.updateStyle();\n              } // call onSet callback\n\n\n              p.onSet(self);\n\n              if (p.settingTriggersEvent) {\n                self[p.triggerFnName](p.settingEvent);\n              } // .data(function(){ ... })\n\n            } else if (p.allowBinding && is.fn(name)) {\n              // bind to event\n              var fn = name;\n              self.on(p.bindingEvent, fn); // .data()\n            } else if (p.allowGetting && name === undefined) {\n              // get whole object\n              var _ret = void 0;\n\n              if (single) {\n                p.beforeGet(single);\n                _ret = single._private[p.field];\n              }\n\n              return _ret;\n            }\n\n            return self; // maintain chainability\n          }; // function\n        },\n        // data\n        // remove data field\n        removeData: function removeData(params) {\n          var defaults = {\n            field: 'data',\n            event: 'data',\n            triggerFnName: 'trigger',\n            triggerEvent: false,\n            immutableKeys: {} // key => true if immutable\n\n          };\n          params = util.extend({}, defaults, params);\n          return function removeDataImpl(names) {\n            var p = params;\n            var self = this;\n            var selfIsArrayLike = self.length !== undefined;\n            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like\n            // .removeData('foo bar')\n\n            if (is.string(names)) {\n              // then get the list of keys, and delete them\n              var keys = names.split(/\\s+/);\n              var l = keys.length;\n\n              for (var i = 0; i < l; i++) {\n                // delete each non-empty key\n                var key = keys[i];\n\n                if (is.emptyString(key)) {\n                  continue;\n                }\n\n                var valid = !p.immutableKeys[key]; // not valid if immutable\n\n                if (valid) {\n                  for (var i_a = 0, l_a = all.length; i_a < l_a; i_a++) {\n                    all[i_a]._private[p.field][key] = undefined;\n                  }\n                }\n              }\n\n              if (p.triggerEvent) {\n                self[p.triggerFnName](p.event);\n              } // .removeData()\n\n            } else if (names === undefined) {\n              // then delete all keys\n              for (var _i_a = 0, _l_a = all.length; _i_a < _l_a; _i_a++) {\n                var _privateFields = all[_i_a]._private[p.field];\n\n                var _keys = Object.keys(_privateFields);\n\n                for (var _i2 = 0; _i2 < _keys.length; _i2++) {\n                  var _key = _keys[_i2];\n                  var validKeyToDelete = !p.immutableKeys[_key];\n\n                  if (validKeyToDelete) {\n                    _privateFields[_key] = undefined;\n                  }\n                }\n              }\n\n              if (p.triggerEvent) {\n                self[p.triggerFnName](p.event);\n              }\n            }\n\n            return self; // maintain chaining\n          }; // function\n        } // removeData\n\n      }; // define\n\n      module.exports = define;\n      /***/\n    },\n    /* 46 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var Promise = __webpack_require__(5);\n\n      var define = {\n        eventAliasesOn: function eventAliasesOn(proto) {\n          var p = proto;\n          p.addListener = p.listen = p.bind = p.on;\n          p.unlisten = p.unbind = p.off = p.removeListener;\n          p.trigger = p.emit; // this is just a wrapper alias of .on()\n\n          p.pon = p.promiseOn = function (events, selector) {\n            var self = this;\n            var args = Array.prototype.slice.call(arguments, 0);\n            return new Promise(function (resolve, reject) {\n              var callback = function callback(e) {\n                self.off.apply(self, offArgs);\n                resolve(e);\n              };\n\n              var onArgs = args.concat([callback]);\n              var offArgs = onArgs.concat([]);\n              self.on.apply(self, onArgs);\n            });\n          };\n        }\n      }; // define\n\n      module.exports = define;\n      /***/\n    },\n    /* 47 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var Set = __webpack_require__(8);\n\n      var elesfn = {\n        classes: function classes(_classes) {\n          _classes = (_classes || '').match(/\\S+/g) || [];\n          var self = this;\n          var changed = [];\n          var classesMap = new Set(_classes); // check and update each ele\n\n          var _loop = function _loop(j) {\n            var ele = self[j];\n            var _p = ele._private;\n            var eleClasses = _p.classes;\n            var changedEle = false; // check if ele has all of the passed classes\n\n            classesMap.forEach(function (cls) {\n              var eleHasClass = eleClasses.has(cls);\n\n              if (!eleHasClass) {\n                changedEle = true;\n              }\n            }); // check if ele has classes outside of those passed\n\n            if (!changedEle) {\n              eleClasses.forEach(function (eleCls) {\n                var specdClass = classesMap.has(eleCls);\n\n                if (!specdClass) {\n                  changedEle = true;\n                }\n              });\n            }\n\n            if (changedEle) {\n              _p.classes = new Set(classesMap);\n              changed.push(ele);\n            }\n          };\n\n          for (var j = 0; j < self.length; j++) {\n            _loop(j);\n          } // trigger update style on those eles that had class changes\n\n\n          if (changed.length > 0) {\n            this.spawn(changed).updateStyle().emit('class');\n          }\n\n          return self;\n        },\n        addClass: function addClass(classes) {\n          return this.toggleClass(classes, true);\n        },\n        hasClass: function hasClass(className) {\n          var ele = this[0];\n          return ele != null && ele._private.classes.has(className);\n        },\n        toggleClass: function toggleClass(classesStr, toggle) {\n          var classes = classesStr.match(/\\S+/g) || [];\n          var self = this;\n          var changed = []; // eles who had classes changed\n\n          for (var i = 0, il = self.length; i < il; i++) {\n            var _ele = self[i];\n            var _changedEle = false;\n\n            for (var j = 0; j < classes.length; j++) {\n              var cls = classes[j];\n              var _eleClasses = _ele._private.classes;\n\n              var hasClass = _eleClasses.has(cls);\n\n              var shouldAdd = toggle || toggle === undefined && !hasClass;\n\n              if (shouldAdd) {\n                _eleClasses.add(cls);\n\n                if (!hasClass && !_changedEle) {\n                  changed.push(_ele);\n                  _changedEle = true;\n                }\n              } else {\n                // then remove\n                _eleClasses.delete(cls);\n\n                if (hasClass && !_changedEle) {\n                  changed.push(_ele);\n                  _changedEle = true;\n                }\n              }\n            } // for j classes\n\n          } // for i eles\n          // trigger update style on those eles that had class changes\n\n\n          if (changed.length > 0) {\n            this.spawn(changed).updateStyle().emit('class');\n          }\n\n          return self;\n        },\n        removeClass: function removeClass(classes) {\n          return this.toggleClass(classes, false);\n        },\n        flashClass: function flashClass(classes, duration) {\n          var self = this;\n\n          if (duration == null) {\n            duration = 250;\n          } else if (duration === 0) {\n            return self; // nothing to do really\n          }\n\n          self.addClass(classes);\n          setTimeout(function () {\n            self.removeClass(classes);\n          }, duration);\n          return self;\n        }\n      };\n      module.exports = elesfn;\n      /***/\n    },\n    /* 48 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var Selector = __webpack_require__(6);\n\n      var elesfn = {\n        allAre: function allAre(selector) {\n          var selObj = new Selector(selector);\n          return this.every(function (ele) {\n            return selObj.matches(ele);\n          });\n        },\n        is: function is(selector) {\n          var selObj = new Selector(selector);\n          return this.some(function (ele) {\n            return selObj.matches(ele);\n          });\n        },\n        some: function some(fn, thisArg) {\n          for (var i = 0; i < this.length; i++) {\n            var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);\n\n            if (ret) {\n              return true;\n            }\n          }\n\n          return false;\n        },\n        every: function every(fn, thisArg) {\n          for (var i = 0; i < this.length; i++) {\n            var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);\n\n            if (!ret) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        same: function same(collection) {\n          collection = this.cy().collection(collection); // cheap extra check\n\n          if (this.length !== collection.length) {\n            return false;\n          }\n\n          return this.every(function (ele) {\n            return collection.hasElementWithId(ele.id());\n          });\n        },\n        anySame: function anySame(collection) {\n          collection = this.cy().collection(collection);\n          return this.some(function (ele) {\n            return collection.hasElementWithId(ele.id());\n          });\n        },\n        allAreNeighbors: function allAreNeighbors(collection) {\n          collection = this.cy().collection(collection);\n          var nhood = this.neighborhood();\n          return collection.every(function (ele) {\n            return nhood.hasElementWithId(ele.id());\n          });\n        },\n        contains: function contains(collection) {\n          collection = this.cy().collection(collection);\n          var self = this;\n          return collection.every(function (ele) {\n            return self.hasElementWithId(ele.id());\n          });\n        }\n      };\n      elesfn.allAreNeighbours = elesfn.allAreNeighbors;\n      elesfn.has = elesfn.contains;\n      module.exports = elesfn;\n      /***/\n    },\n    /* 49 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var exprs = __webpack_require__(50);\n\n      var newQuery = __webpack_require__(10); // of all the expressions, find the first match in the remaining text\n\n\n      var consumeExpr = function consumeExpr(remaining) {\n        var expr = void 0;\n        var match = void 0;\n        var name = void 0;\n\n        for (var j = 0; j < exprs.length; j++) {\n          var e = exprs[j];\n          var n = e.name;\n          var m = remaining.match(e.regexObj);\n\n          if (m != null) {\n            match = m;\n            expr = e;\n            name = n;\n            var consumed = m[0];\n            remaining = remaining.substring(consumed.length);\n            break; // we've consumed one expr, so we can return now\n          }\n        }\n\n        return {\n          expr: expr,\n          match: match,\n          name: name,\n          remaining: remaining\n        };\n      }; // consume all leading whitespace\n\n\n      var consumeWhitespace = function consumeWhitespace(remaining) {\n        var match = remaining.match(/^\\s+/);\n\n        if (match) {\n          var consumed = match[0];\n          remaining = remaining.substring(consumed.length);\n        }\n\n        return remaining;\n      };\n\n      var parse = function parse(selector) {\n        var self = this;\n        var remaining = self._private.selectorText = selector;\n        var currentQuery = self[0] = newQuery();\n        self.length = 1;\n        remaining = consumeWhitespace(remaining); // get rid of leading whitespace\n\n        for (;;) {\n          var check = consumeExpr(remaining);\n\n          if (check.expr == null) {\n            util.error('The selector `' + selector + '`is invalid');\n            return false;\n          } else {\n            var args = check.match.slice(1); // let the token populate the selector object in currentQuery\n\n            var ret = check.expr.populate(self, currentQuery, args);\n\n            if (ret === false) {\n              return false; // exit if population failed\n            } else if (ret != null) {\n              currentQuery = ret; // change the current query to be filled if the expr specifies\n            }\n          }\n\n          remaining = check.remaining; // we're done when there's nothing left to parse\n\n          if (remaining.match(/^\\s*$/)) {\n            break;\n          }\n        } // adjust references for subject\n\n\n        for (var j = 0; j < self.length; j++) {\n          var query = self[j];\n\n          if (query.subject != null) {\n            // go up the tree until we reach the subject\n            for (;;) {\n              if (query.subject === query) {\n                break;\n              } // done if subject is self\n\n\n              if (query.parent != null) {\n                // swap parent/child reference\n                var parent = query.parent;\n                var child = query;\n                child.parent = null;\n                parent.child = child;\n                query = parent; // go up the tree\n              } else if (query.ancestor != null) {\n                // swap ancestor/descendant\n                var ancestor = query.ancestor;\n                var descendant = query;\n                descendant.ancestor = null;\n                ancestor.descendant = descendant;\n                query = ancestor; // go up the tree\n              } else if (query.source || query.target || query.connectedNodes) {\n                util.error('The selector `' + self.text() + '` can not contain a subject selector that applies to the source or target of an edge selector');\n                return false;\n              } else {\n                util.error('When adjusting references for the selector `' + self.text() + '`, neither parent nor ancestor was found');\n                return false;\n              }\n            } // for\n\n\n            self[j] = query.subject; // subject should be the root query\n          } // if\n\n        } // for\n\n\n        return true; // success\n      };\n\n      module.exports = {\n        parse: parse\n      };\n      /***/\n    },\n    /* 50 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var _slicedToArray = function () {\n        function sliceIterator(arr, i) {\n          var _arr = [];\n          var _n = true;\n          var _d = false;\n          var _e = undefined;\n\n          try {\n            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n              _arr.push(_s.value);\n\n              if (i && _arr.length === i) break;\n            }\n          } catch (err) {\n            _d = true;\n            _e = err;\n          } finally {\n            try {\n              if (!_n && _i[\"return\"]) _i[\"return\"]();\n            } finally {\n              if (_d) throw _e;\n            }\n          }\n\n          return _arr;\n        }\n\n        return function (arr, i) {\n          if (Array.isArray(arr)) {\n            return arr;\n          } else if (Symbol.iterator in Object(arr)) {\n            return sliceIterator(arr, i);\n          } else {\n            throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n          }\n        };\n      }();\n\n      var _require = __webpack_require__(15),\n          stateSelectorRegex = _require.stateSelectorRegex;\n\n      var tokens = __webpack_require__(51);\n\n      var util = __webpack_require__(1);\n\n      var newQuery = __webpack_require__(10); // when a token like a variable has escaped meta characters, we need to clean the backslashes out\n      // so that values get compared properly in Selector.filter()\n\n\n      var cleanMetaChars = function cleanMetaChars(str) {\n        return str.replace(new RegExp('\\\\\\\\(' + tokens.metaChar + ')', 'g'), function (match, $1) {\n          return $1;\n        });\n      };\n\n      var replaceLastQuery = function replaceLastQuery(selector, examiningQuery, replacementQuery) {\n        if (examiningQuery === selector[selector.length - 1]) {\n          selector[selector.length - 1] = replacementQuery;\n        }\n      }; // NOTE: add new expression syntax here to have it recognised by the parser;\n      // - a query contains all adjacent (i.e. no separator in between) expressions;\n      // - the current query is stored in selector[i] --- you can use the reference to `this` in the populate function;\n      // - you need to check the query objects in Selector.filter() for it actually filter properly, but that's pretty straight forward\n      // - when you add something here, also add to Selector.toString()\n\n\n      var exprs = [{\n        name: 'group',\n        query: true,\n        regex: '(' + tokens.group + ')',\n        populate: function populate(selector, query, _ref) {\n          var _ref2 = _slicedToArray(_ref, 1),\n              group = _ref2[0];\n\n          query.group = group === '*' ? group : group + 's';\n        }\n      }, {\n        name: 'state',\n        query: true,\n        regex: stateSelectorRegex,\n        populate: function populate(selector, query, _ref3) {\n          var _ref4 = _slicedToArray(_ref3, 1),\n              state = _ref4[0];\n\n          query.colonSelectors.push(state);\n        }\n      }, {\n        name: 'id',\n        query: true,\n        regex: '\\\\#(' + tokens.id + ')',\n        populate: function populate(selector, query, _ref5) {\n          var _ref6 = _slicedToArray(_ref5, 1),\n              id = _ref6[0];\n\n          query.ids.push(cleanMetaChars(id));\n        }\n      }, {\n        name: 'className',\n        query: true,\n        regex: '\\\\.(' + tokens.className + ')',\n        populate: function populate(selector, query, _ref7) {\n          var _ref8 = _slicedToArray(_ref7, 1),\n              className = _ref8[0];\n\n          query.classes.push(cleanMetaChars(className));\n        }\n      }, {\n        name: 'dataExists',\n        query: true,\n        regex: '\\\\[\\\\s*(' + tokens.variable + ')\\\\s*\\\\]',\n        populate: function populate(selector, query, _ref9) {\n          var _ref10 = _slicedToArray(_ref9, 1),\n              variable = _ref10[0];\n\n          query.data.push({\n            field: cleanMetaChars(variable)\n          });\n        }\n      }, {\n        name: 'dataCompare',\n        query: true,\n        regex: '\\\\[\\\\s*(' + tokens.variable + ')\\\\s*(' + tokens.comparatorOp + ')\\\\s*(' + tokens.value + ')\\\\s*\\\\]',\n        populate: function populate(selector, query, _ref11) {\n          var _ref12 = _slicedToArray(_ref11, 3),\n              variable = _ref12[0],\n              comparatorOp = _ref12[1],\n              value = _ref12[2];\n\n          var valueIsString = new RegExp('^' + tokens.string + '$').exec(value) != null;\n\n          if (valueIsString) {\n            value = value.substring(1, value.length - 1);\n          } else {\n            value = parseFloat(value);\n          }\n\n          query.data.push({\n            field: cleanMetaChars(variable),\n            operator: comparatorOp,\n            value: value\n          });\n        }\n      }, {\n        name: 'dataBool',\n        query: true,\n        regex: '\\\\[\\\\s*(' + tokens.boolOp + ')\\\\s*(' + tokens.variable + ')\\\\s*\\\\]',\n        populate: function populate(selector, query, _ref13) {\n          var _ref14 = _slicedToArray(_ref13, 2),\n              boolOp = _ref14[0],\n              variable = _ref14[1];\n\n          query.data.push({\n            field: cleanMetaChars(variable),\n            operator: boolOp\n          });\n        }\n      }, {\n        name: 'metaCompare',\n        query: true,\n        regex: '\\\\[\\\\[\\\\s*(' + tokens.meta + ')\\\\s*(' + tokens.comparatorOp + ')\\\\s*(' + tokens.number + ')\\\\s*\\\\]\\\\]',\n        populate: function populate(selector, query, _ref15) {\n          var _ref16 = _slicedToArray(_ref15, 3),\n              meta = _ref16[0],\n              comparatorOp = _ref16[1],\n              number = _ref16[2];\n\n          query.meta.push({\n            field: cleanMetaChars(meta),\n            operator: comparatorOp,\n            value: parseFloat(number)\n          });\n        }\n      }, {\n        name: 'nextQuery',\n        separator: true,\n        regex: tokens.separator,\n        populate: function populate(selector) {\n          // go on to next query\n          var nextQuery = selector[selector.length++] = newQuery();\n          selector.currentSubject = null;\n          return nextQuery;\n        }\n      }, {\n        name: 'directedEdge',\n        separator: true,\n        regex: tokens.directedEdge,\n        populate: function populate(selector, query) {\n          var edgeQuery = newQuery();\n          var source = query;\n          var target = newQuery();\n          edgeQuery.group = 'edges';\n          edgeQuery.target = target;\n          edgeQuery.source = source;\n          edgeQuery.subject = selector.currentSubject; // the query in the selector should be the edge rather than the source\n\n          replaceLastQuery(selector, query, edgeQuery); // we're now populating the target query with expressions that follow\n\n          return target;\n        }\n      }, {\n        name: 'undirectedEdge',\n        separator: true,\n        regex: tokens.undirectedEdge,\n        populate: function populate(selector, query) {\n          var edgeQuery = newQuery();\n          var source = query;\n          var target = newQuery();\n          edgeQuery.group = 'edges';\n          edgeQuery.connectedNodes = [source, target];\n          edgeQuery.subject = selector.currentSubject; // the query in the selector should be the edge rather than the source\n\n          replaceLastQuery(selector, query, edgeQuery); // we're now populating the target query with expressions that follow\n\n          return target;\n        }\n      }, {\n        name: 'child',\n        separator: true,\n        regex: tokens.child,\n        populate: function populate(selector, query) {\n          // this query is the parent of the following query\n          var childQuery = newQuery();\n          childQuery.parent = query;\n          childQuery.subject = selector.currentSubject; // it's cheaper to compare children first and go up so replace the parent\n\n          replaceLastQuery(selector, query, childQuery); // we're now populating the child query with expressions that follow\n\n          return childQuery;\n        }\n      }, {\n        name: 'descendant',\n        separator: true,\n        regex: tokens.descendant,\n        populate: function populate(selector, query) {\n          // this query is the ancestor of the following query\n          var descendantQuery = newQuery();\n          descendantQuery.ancestor = query;\n          descendantQuery.subject = selector.currentSubject; // it's cheaper to compare descendants first and go up so replace the ancestor\n\n          replaceLastQuery(selector, query, descendantQuery); // we're now populating the descendant query with expressions that follow\n\n          return descendantQuery;\n        }\n      }, {\n        name: 'subject',\n        modifier: true,\n        regex: tokens.subject,\n        populate: function populate(selector, query) {\n          if (selector.currentSubject != null && query.subject != query) {\n            util.error('Redefinition of subject in selector `' + selector.toString() + '`');\n            return false;\n          }\n\n          selector.currentSubject = query;\n          query.subject = query;\n          selector[selector.length - 1].subject = query;\n        }\n      }];\n      exprs.forEach(function (e) {\n        return e.regexObj = new RegExp('^' + e.regex);\n      });\n      module.exports = exprs;\n      /***/\n    },\n    /* 51 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1); // tokens in the query language\n\n\n      var tokens = {\n        metaChar: '[\\\\!\\\\\"\\\\#\\\\$\\\\%\\\\&\\\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\.\\\\/\\\\:\\\\;\\\\<\\\\=\\\\>\\\\?\\\\@\\\\[\\\\]\\\\^\\\\`\\\\{\\\\|\\\\}\\\\~]',\n        // chars we need to escape in let names, etc\n        comparatorOp: '=|\\\\!=|>|>=|<|<=|\\\\$=|\\\\^=|\\\\*=',\n        // binary comparison op (used in data selectors)\n        boolOp: '\\\\?|\\\\!|\\\\^',\n        // boolean (unary) operators (used in data selectors)\n        string: '\"(?:\\\\\\\\\"|[^\"])*\"' + '|' + \"'(?:\\\\\\\\'|[^'])*'\",\n        // string literals (used in data selectors) -- doublequotes | singlequotes\n        number: util.regex.number,\n        // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123\n        meta: 'degree|indegree|outdegree',\n        // allowed metadata fields (i.e. allowed functions to use from Collection)\n        separator: '\\\\s*,\\\\s*',\n        // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass\n        descendant: '\\\\s+',\n        child: '\\\\s+>\\\\s+',\n        subject: '\\\\$',\n        group: 'node|edge|\\\\*',\n        directedEdge: '\\\\s+->\\\\s+',\n        undirectedEdge: '\\\\s+<->\\\\s+'\n      };\n      tokens.variable = '(?:[\\\\w-]|(?:\\\\\\\\' + tokens.metaChar + '))+'; // a variable name\n\n      tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number\n\n      tokens.className = tokens.variable; // a class name (follows variable conventions)\n\n      tokens.id = tokens.variable; // an element id (follows variable conventions)\n\n      (function () {\n        var ops = void 0,\n            op = void 0,\n            i = void 0; // add @ variants to comparatorOp\n\n        ops = tokens.comparatorOp.split('|');\n\n        for (i = 0; i < ops.length; i++) {\n          op = ops[i];\n          tokens.comparatorOp += '|@' + op;\n        } // add ! variants to comparatorOp\n\n\n        ops = tokens.comparatorOp.split('|');\n\n        for (i = 0; i < ops.length; i++) {\n          op = ops[i];\n\n          if (op.indexOf('!') >= 0) {\n            continue;\n          } // skip ops that explicitly contain !\n\n\n          if (op === '=') {\n            continue;\n          } // skip = b/c != is explicitly defined\n\n\n          tokens.comparatorOp += '|\\\\!' + op;\n        }\n      })();\n\n      module.exports = tokens;\n      /***/\n    },\n    /* 52 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var _require = __webpack_require__(15),\n          stateSelectorMatches = _require.stateSelectorMatches;\n\n      var is = __webpack_require__(0); // generic checking for data/metadata\n\n\n      var operandsMatch = function operandsMatch(query, params) {\n        var allDataMatches = true;\n\n        for (var k = 0; k < query[params.name].length; k++) {\n          var data = query[params.name][k];\n          var operator = data.operator;\n          var value = data.value;\n          var field = data.field;\n\n          var _matches = void 0;\n\n          var fieldVal = params.fieldValue(field);\n\n          if (operator != null && value != null) {\n            var fieldStr = !is.string(fieldVal) && !is.number(fieldVal) ? '' : '' + fieldVal;\n            var valStr = '' + value;\n            var caseInsensitive = false;\n\n            if (operator.indexOf('@') >= 0) {\n              fieldStr = fieldStr.toLowerCase();\n              valStr = valStr.toLowerCase();\n              operator = operator.replace('@', '');\n              caseInsensitive = true;\n            }\n\n            var notExpr = false;\n\n            if (operator.indexOf('!') >= 0) {\n              operator = operator.replace('!', '');\n              notExpr = true;\n            } // if we're doing a case insensitive comparison, then we're using a STRING comparison\n            // even if we're comparing numbers\n\n\n            if (caseInsensitive) {\n              value = valStr.toLowerCase();\n              fieldVal = fieldStr.toLowerCase();\n            }\n\n            var isIneqCmp = false;\n\n            switch (operator) {\n              case '*=':\n                _matches = fieldStr.indexOf(valStr) >= 0;\n                break;\n\n              case '$=':\n                _matches = fieldStr.indexOf(valStr, fieldStr.length - valStr.length) >= 0;\n                break;\n\n              case '^=':\n                _matches = fieldStr.indexOf(valStr) === 0;\n                break;\n\n              case '=':\n                _matches = fieldVal === value;\n                break;\n\n              case '>':\n                isIneqCmp = true;\n                _matches = fieldVal > value;\n                break;\n\n              case '>=':\n                isIneqCmp = true;\n                _matches = fieldVal >= value;\n                break;\n\n              case '<':\n                isIneqCmp = true;\n                _matches = fieldVal < value;\n                break;\n\n              case '<=':\n                isIneqCmp = true;\n                _matches = fieldVal <= value;\n                break;\n\n              default:\n                _matches = false;\n                break;\n            } // apply the not op, but null vals for inequalities should always stay non-matching\n\n\n            if (notExpr && (fieldVal != null || !isIneqCmp)) {\n              _matches = !_matches;\n            }\n          } else if (operator != null) {\n            switch (operator) {\n              case '?':\n                _matches = fieldVal ? true : false;\n                break;\n\n              case '!':\n                _matches = fieldVal ? false : true;\n                break;\n\n              case '^':\n                _matches = fieldVal === undefined;\n                break;\n            }\n          } else {\n            _matches = fieldVal !== undefined;\n          }\n\n          if (!_matches) {\n            allDataMatches = false;\n            break;\n          }\n        } // for\n\n\n        return allDataMatches;\n      }; // operandsMatch\n      // check parent/child relations\n\n\n      var confirmRelations = function confirmRelations(query, isNecessary, eles) {\n        if (query != null) {\n          var _matches2 = false;\n\n          if (!isNecessary) {\n            return false;\n          }\n\n          eles = eles(); // save cycles if query == null\n          // query must match for at least one element (may be recursive)\n\n          for (var i = 0; i < eles.length; i++) {\n            if (queryMatches(query, eles[i])) {\n              _matches2 = true;\n              break;\n            }\n          }\n\n          return _matches2;\n        } else {\n          return true;\n        }\n      };\n\n      var queryMatches = function queryMatches(query, ele) {\n        // make single group-only selectors really cheap to check since they're the most common ones\n        if (query.groupOnly) {\n          return query.group === '*' || query.group === ele.group();\n        } // check group\n\n\n        if (query.group != null && query.group != '*' && query.group != ele.group()) {\n          return false;\n        }\n\n        var cy = ele.cy();\n        var k = void 0; // check colon selectors\n\n        var allColonSelectorsMatch = true;\n\n        for (k = 0; k < query.colonSelectors.length; k++) {\n          var sel = query.colonSelectors[k];\n          allColonSelectorsMatch = stateSelectorMatches(sel, ele);\n          if (!allColonSelectorsMatch) break;\n        }\n\n        if (!allColonSelectorsMatch) return false; // check id\n\n        var allIdsMatch = true;\n\n        for (k = 0; k < query.ids.length; k++) {\n          var id = query.ids[k];\n          var actualId = ele.id();\n          allIdsMatch = allIdsMatch && id == actualId;\n          if (!allIdsMatch) break;\n        }\n\n        if (!allIdsMatch) return false; // check classes\n\n        var allClassesMatch = true;\n\n        for (k = 0; k < query.classes.length; k++) {\n          var cls = query.classes[k];\n          allClassesMatch = allClassesMatch && ele.hasClass(cls);\n          if (!allClassesMatch) break;\n        }\n\n        if (!allClassesMatch) return false; // check data matches\n\n        var allDataMatches = operandsMatch(query, {\n          name: 'data',\n          fieldValue: function fieldValue(field) {\n            return ele.data(field);\n          }\n        });\n\n        if (!allDataMatches) {\n          return false;\n        } // check metadata matches\n\n\n        var allMetaMatches = operandsMatch(query, {\n          name: 'meta',\n          fieldValue: function fieldValue(field) {\n            return ele[field]();\n          }\n        });\n\n        if (!allMetaMatches) {\n          return false;\n        } // check collection\n\n\n        if (query.collection != null) {\n          var matchesAny = query.collection.hasElementWithId(ele.id());\n\n          if (!matchesAny) {\n            return false;\n          }\n        } // check filter function\n\n\n        if (query.filter != null && ele.collection().some(query.filter)) {\n          return false;\n        }\n\n        var isCompound = cy.hasCompoundNodes();\n\n        var getSource = function getSource() {\n          return ele.source();\n        };\n\n        var getTarget = function getTarget() {\n          return ele.target();\n        };\n\n        if (!confirmRelations(query.parent, isCompound, function () {\n          return ele.parent();\n        })) {\n          return false;\n        }\n\n        if (!confirmRelations(query.ancestor, isCompound, function () {\n          return ele.parents();\n        })) {\n          return false;\n        }\n\n        if (!confirmRelations(query.child, isCompound, function () {\n          return ele.children();\n        })) {\n          return false;\n        }\n\n        if (!confirmRelations(query.descendant, isCompound, function () {\n          return ele.descendants();\n        })) {\n          return false;\n        }\n\n        if (!confirmRelations(query.source, true, getSource)) {\n          return false;\n        }\n\n        if (!confirmRelations(query.target, true, getTarget)) {\n          return false;\n        }\n\n        if (query.connectedNodes) {\n          var q0 = query.connectedNodes[0];\n          var q1 = query.connectedNodes[1];\n\n          if (confirmRelations(q0, true, getSource) && confirmRelations(q1, true, getTarget)) {// match\n          } else if (confirmRelations(q0, true, getTarget) && confirmRelations(q1, true, getSource)) {// match\n          } else {\n            return false;\n          }\n        } // we've reached the end, so we've matched everything for this query\n\n\n        return true;\n      }; // queryMatches\n      // filter an existing collection\n\n\n      var filter = function filter(collection) {\n        var self = this;\n        var cy = collection.cy(); // don't bother trying if it's invalid\n\n        if (self.invalid()) {\n          return cy.collection();\n        } // for 1 id #foo queries, just get the element\n\n\n        if (self.length === 1 && self[0].length === 1 && self[0].ids.length === 1) {\n          return collection.getElementById(self[0].ids[0]).collection();\n        }\n\n        var selectorFunction = function selectorFunction(element) {\n          for (var j = 0; j < self.length; j++) {\n            var query = self[j];\n\n            if (queryMatches(query, element)) {\n              return true;\n            }\n          }\n\n          return false;\n        };\n\n        if (self.text() == null) {\n          selectorFunction = function selectorFunction() {\n            return true;\n          };\n        }\n\n        var filteredCollection = collection.filter(selectorFunction);\n        return filteredCollection;\n      }; // filter\n      // does selector match a single element?\n\n\n      var matches = function matches(ele) {\n        var self = this; // don't bother trying if it's invalid\n\n        if (self.invalid()) {\n          return false;\n        }\n\n        for (var j = 0; j < self.length; j++) {\n          var query = self[j];\n\n          if (queryMatches(query, ele)) {\n            return true;\n          }\n        }\n\n        return false;\n      }; // filter\n\n\n      module.exports = {\n        matches: matches,\n        filter: filter\n      };\n      /***/\n    },\n    /* 53 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var Set = __webpack_require__(8);\n\n      var elesfn = {\n        parent: function parent(selector) {\n          var parents = []; // optimisation for single ele call\n\n          if (this.length === 1) {\n            var parent = this[0]._private.parent;\n\n            if (parent) {\n              return parent;\n            }\n          }\n\n          for (var i = 0; i < this.length; i++) {\n            var ele = this[i];\n            var _parent = ele._private.parent;\n\n            if (_parent) {\n              parents.push(_parent);\n            }\n          }\n\n          return this.spawn(parents, {\n            unique: true\n          }).filter(selector);\n        },\n        parents: function parents(selector) {\n          var parents = [];\n          var eles = this.parent();\n\n          while (eles.nonempty()) {\n            for (var i = 0; i < eles.length; i++) {\n              var ele = eles[i];\n              parents.push(ele);\n            }\n\n            eles = eles.parent();\n          }\n\n          return this.spawn(parents, {\n            unique: true\n          }).filter(selector);\n        },\n        commonAncestors: function commonAncestors(selector) {\n          var ancestors = void 0;\n\n          for (var i = 0; i < this.length; i++) {\n            var ele = this[i];\n            var parents = ele.parents();\n            ancestors = ancestors || parents;\n            ancestors = ancestors.intersect(parents); // current list must be common with current ele parents set\n          }\n\n          return ancestors.filter(selector);\n        },\n        orphans: function orphans(selector) {\n          return this.stdFilter(function (ele) {\n            return ele.isOrphan();\n          }).filter(selector);\n        },\n        nonorphans: function nonorphans(selector) {\n          return this.stdFilter(function (ele) {\n            return ele.isChild();\n          }).filter(selector);\n        },\n        children: function children(selector) {\n          var children = [];\n\n          for (var i = 0; i < this.length; i++) {\n            var ele = this[i];\n            children = children.concat(ele._private.children);\n          }\n\n          return this.spawn(children, {\n            unique: true\n          }).filter(selector);\n        },\n        siblings: function siblings(selector) {\n          return this.parent().children().not(this).filter(selector);\n        },\n        isParent: function isParent() {\n          var ele = this[0];\n\n          if (ele) {\n            return ele.isNode() && ele._private.children.length !== 0;\n          }\n        },\n        isChildless: function isChildless() {\n          var ele = this[0];\n\n          if (ele) {\n            return ele.isNode() && ele._private.children.length === 0;\n          }\n        },\n        isChild: function isChild() {\n          var ele = this[0];\n\n          if (ele) {\n            return ele.isNode() && ele._private.parent != null;\n          }\n        },\n        isOrphan: function isOrphan() {\n          var ele = this[0];\n\n          if (ele) {\n            return ele.isNode() && ele._private.parent == null;\n          }\n        },\n        descendants: function descendants(selector) {\n          var elements = [];\n\n          function add(eles) {\n            for (var i = 0; i < eles.length; i++) {\n              var ele = eles[i];\n              elements.push(ele);\n\n              if (ele.children().nonempty()) {\n                add(ele.children());\n              }\n            }\n          }\n\n          add(this.children());\n          return this.spawn(elements, {\n            unique: true\n          }).filter(selector);\n        }\n      };\n\n      function forEachCompound(eles, fn, includeSelf, recursiveStep) {\n        var q = [];\n        var did = new Set();\n        var cy = eles.cy();\n        var hasCompounds = cy.hasCompoundNodes();\n\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n\n          if (includeSelf) {\n            q.push(ele);\n          } else if (hasCompounds) {\n            recursiveStep(q, did, ele);\n          }\n        }\n\n        while (q.length > 0) {\n          var _ele = q.shift();\n\n          fn(_ele);\n          did.add(_ele.id());\n\n          if (hasCompounds) {\n            recursiveStep(q, did, _ele);\n          }\n        }\n\n        return eles;\n      }\n\n      function addChildren(q, did, ele) {\n        if (ele.isParent()) {\n          var children = ele._private.children;\n\n          for (var i = 0; i < children.length; i++) {\n            var child = children[i];\n\n            if (!did.has(child.id())) {\n              q.push(child);\n            }\n          }\n        }\n      } // very efficient version of eles.add( eles.descendants() ).forEach()\n      // for internal use\n\n\n      elesfn.forEachDown = function (fn) {\n        var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return forEachCompound(this, fn, includeSelf, addChildren);\n      };\n\n      function addParent(q, did, ele) {\n        if (ele.isChild()) {\n          var parent = ele._private.parent;\n\n          if (!did.has(parent.id())) {\n            q.push(parent);\n          }\n        }\n      }\n\n      elesfn.forEachUp = function (fn) {\n        var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return forEachCompound(this, fn, includeSelf, addParent);\n      };\n\n      function addParentAndChildren(q, did, ele) {\n        addParent(q, did, ele);\n        addChildren(q, did, ele);\n      }\n\n      elesfn.forEachUpAndDown = function (fn) {\n        var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return forEachCompound(this, fn, includeSelf, addParentAndChildren);\n      }; // aliases\n\n\n      elesfn.ancestors = elesfn.parents;\n      module.exports = elesfn;\n      /***/\n    },\n    /* 54 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var define = __webpack_require__(4);\n\n      var fn = void 0,\n          elesfn = void 0;\n      fn = elesfn = {\n        data: define.data({\n          field: 'data',\n          bindingEvent: 'data',\n          allowBinding: true,\n          allowSetting: true,\n          settingEvent: 'data',\n          settingTriggersEvent: true,\n          triggerFnName: 'trigger',\n          allowGetting: true,\n          immutableKeys: {\n            'id': true,\n            'source': true,\n            'target': true,\n            'parent': true\n          },\n          updateStyle: true\n        }),\n        removeData: define.removeData({\n          field: 'data',\n          event: 'data',\n          triggerFnName: 'trigger',\n          triggerEvent: true,\n          immutableKeys: {\n            'id': true,\n            'source': true,\n            'target': true,\n            'parent': true\n          },\n          updateStyle: true\n        }),\n        scratch: define.data({\n          field: 'scratch',\n          bindingEvent: 'scratch',\n          allowBinding: true,\n          allowSetting: true,\n          settingEvent: 'scratch',\n          settingTriggersEvent: true,\n          triggerFnName: 'trigger',\n          allowGetting: true,\n          updateStyle: true\n        }),\n        removeScratch: define.removeData({\n          field: 'scratch',\n          event: 'scratch',\n          triggerFnName: 'trigger',\n          triggerEvent: true,\n          updateStyle: true\n        }),\n        rscratch: define.data({\n          field: 'rscratch',\n          allowBinding: false,\n          allowSetting: true,\n          settingTriggersEvent: false,\n          allowGetting: true\n        }),\n        removeRscratch: define.removeData({\n          field: 'rscratch',\n          triggerEvent: false\n        }),\n        id: function id() {\n          var ele = this[0];\n\n          if (ele) {\n            return ele._private.data.id;\n          }\n        }\n      }; // aliases\n\n      fn.attr = fn.data;\n      fn.removeAttr = fn.removeData;\n      module.exports = elesfn;\n      /***/\n    },\n    /* 55 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var elesfn = {};\n\n      function defineDegreeFunction(callback) {\n        return function (includeLoops) {\n          var self = this;\n\n          if (includeLoops === undefined) {\n            includeLoops = true;\n          }\n\n          if (self.length === 0) {\n            return;\n          }\n\n          if (self.isNode() && !self.removed()) {\n            var degree = 0;\n            var node = self[0];\n            var connectedEdges = node._private.edges;\n\n            for (var i = 0; i < connectedEdges.length; i++) {\n              var edge = connectedEdges[i];\n\n              if (!includeLoops && edge.isLoop()) {\n                continue;\n              }\n\n              degree += callback(node, edge);\n            }\n\n            return degree;\n          } else {\n            return;\n          }\n        };\n      }\n\n      util.extend(elesfn, {\n        degree: defineDegreeFunction(function (node, edge) {\n          if (edge.source().same(edge.target())) {\n            return 2;\n          } else {\n            return 1;\n          }\n        }),\n        indegree: defineDegreeFunction(function (node, edge) {\n          if (edge.target().same(node)) {\n            return 1;\n          } else {\n            return 0;\n          }\n        }),\n        outdegree: defineDegreeFunction(function (node, edge) {\n          if (edge.source().same(node)) {\n            return 1;\n          } else {\n            return 0;\n          }\n        })\n      });\n\n      function defineDegreeBoundsFunction(degreeFn, callback) {\n        return function (includeLoops) {\n          var ret = void 0;\n          var nodes = this.nodes();\n\n          for (var i = 0; i < nodes.length; i++) {\n            var ele = nodes[i];\n            var degree = ele[degreeFn](includeLoops);\n\n            if (degree !== undefined && (ret === undefined || callback(degree, ret))) {\n              ret = degree;\n            }\n          }\n\n          return ret;\n        };\n      }\n\n      util.extend(elesfn, {\n        minDegree: defineDegreeBoundsFunction('degree', function (degree, min) {\n          return degree < min;\n        }),\n        maxDegree: defineDegreeBoundsFunction('degree', function (degree, max) {\n          return degree > max;\n        }),\n        minIndegree: defineDegreeBoundsFunction('indegree', function (degree, min) {\n          return degree < min;\n        }),\n        maxIndegree: defineDegreeBoundsFunction('indegree', function (degree, max) {\n          return degree > max;\n        }),\n        minOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, min) {\n          return degree < min;\n        }),\n        maxOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, max) {\n          return degree > max;\n        })\n      });\n      util.extend(elesfn, {\n        totalDegree: function totalDegree(includeLoops) {\n          var total = 0;\n          var nodes = this.nodes();\n\n          for (var i = 0; i < nodes.length; i++) {\n            total += nodes[i].degree(includeLoops);\n          }\n\n          return total;\n        }\n      });\n      module.exports = elesfn;\n      /***/\n    },\n    /* 56 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var position = __webpack_require__(57);\n\n      var bounds = __webpack_require__(58);\n\n      var widthHeight = __webpack_require__(59);\n\n      var edgePoints = __webpack_require__(60);\n\n      module.exports = util.assign({}, position, bounds, widthHeight, edgePoints);\n      /***/\n    },\n    /* 57 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var define = __webpack_require__(4);\n\n      var is = __webpack_require__(0);\n\n      var math = __webpack_require__(2);\n\n      var fn = void 0,\n          elesfn = void 0;\n\n      var beforePositionSet = function beforePositionSet(eles, newPos) {\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n\n          if (ele.isParent() && !ele.locked()) {\n            var oldPos = ele._private.position;\n            var delta = {\n              x: newPos.x - oldPos.x,\n              y: newPos.y - oldPos.y\n            };\n            eles.children().shift(delta);\n          }\n        }\n      };\n\n      fn = elesfn = {\n        position: define.data({\n          field: 'position',\n          bindingEvent: 'position',\n          allowBinding: true,\n          allowSetting: true,\n          settingEvent: 'position',\n          settingTriggersEvent: true,\n          triggerFnName: 'emitAndNotify',\n          allowGetting: true,\n          validKeys: ['x', 'y'],\n          beforeGet: function beforeGet(ele) {\n            ele.updateCompoundBounds();\n          },\n          beforeSet: beforePositionSet,\n          onSet: function onSet(eles) {\n            eles.dirtyCompoundBoundsCache();\n          },\n          canSet: function canSet(ele) {\n            return !ele.locked();\n          }\n        }),\n        // position but no notification to renderer\n        silentPosition: define.data({\n          field: 'position',\n          bindingEvent: 'position',\n          allowBinding: false,\n          allowSetting: true,\n          settingEvent: 'position',\n          settingTriggersEvent: false,\n          triggerFnName: 'trigger',\n          allowGetting: false,\n          validKeys: ['x', 'y'],\n          beforeSet: beforePositionSet,\n          onSet: function onSet(eles) {\n            eles.dirtyCompoundBoundsCache();\n          },\n          canSet: function canSet(ele) {\n            return !ele.locked();\n          }\n        }),\n        positions: function positions(pos, silent) {\n          if (is.plainObject(pos)) {\n            if (silent) {\n              this.silentPosition(pos);\n            } else {\n              this.position(pos);\n            }\n          } else if (is.fn(pos)) {\n            var _fn = pos;\n            var cy = this.cy();\n            cy.startBatch();\n\n            for (var i = 0; i < this.length; i++) {\n              var ele = this[i];\n\n              var _pos = void 0;\n\n              if (_pos = _fn(ele, i)) {\n                if (silent) {\n                  ele.silentPosition(_pos);\n                } else {\n                  ele.position(_pos);\n                }\n              }\n            }\n\n            cy.endBatch();\n          }\n\n          return this; // chaining\n        },\n        silentPositions: function silentPositions(pos) {\n          return this.positions(pos, true);\n        },\n        shift: function shift(dim, val) {\n          var delta = void 0;\n\n          if (is.plainObject(dim)) {\n            delta = dim;\n          } else if (is.string(dim) && is.number(val)) {\n            delta = {\n              x: 0,\n              y: 0\n            };\n            delta[dim] = val;\n          }\n\n          if (delta != null) {\n            for (var i = 0; i < this.length; i++) {\n              var ele = this[i];\n              var pos = ele.position();\n              ele.position({\n                x: pos.x + delta.x,\n                y: pos.y + delta.y\n              });\n            }\n          }\n\n          return this;\n        },\n        // get/set the rendered (i.e. on screen) positon of the element\n        renderedPosition: function renderedPosition(dim, val) {\n          var ele = this[0];\n          var cy = this.cy();\n          var zoom = cy.zoom();\n          var pan = cy.pan();\n          var rpos = is.plainObject(dim) ? dim : undefined;\n          var setting = rpos !== undefined || val !== undefined && is.string(dim);\n\n          if (ele && ele.isNode()) {\n            // must have an element and must be a node to return position\n            if (setting) {\n              for (var i = 0; i < this.length; i++) {\n                var _ele = this[i];\n\n                if (val !== undefined) {\n                  // set one dimension\n                  _ele.position(dim, (val - pan[dim]) / zoom);\n                } else if (rpos !== undefined) {\n                  // set whole position\n                  _ele.position(math.renderedToModelPosition(rpos, zoom, pan));\n                }\n              }\n            } else {\n              // getting\n              var pos = ele.position();\n              rpos = math.modelToRenderedPosition(pos, zoom, pan);\n\n              if (dim === undefined) {\n                // then return the whole rendered position\n                return rpos;\n              } else {\n                // then return the specified dimension\n                return rpos[dim];\n              }\n            }\n          } else if (!setting) {\n            return undefined; // for empty collection case\n          }\n\n          return this; // chaining\n        },\n        // get/set the position relative to the parent\n        relativePosition: function relativePosition(dim, val) {\n          var ele = this[0];\n          var cy = this.cy();\n          var ppos = is.plainObject(dim) ? dim : undefined;\n          var setting = ppos !== undefined || val !== undefined && is.string(dim);\n          var hasCompoundNodes = cy.hasCompoundNodes();\n\n          if (ele && ele.isNode()) {\n            // must have an element and must be a node to return position\n            if (setting) {\n              for (var i = 0; i < this.length; i++) {\n                var _ele2 = this[i];\n                var parent = hasCompoundNodes ? _ele2.parent() : null;\n                var hasParent = parent && parent.length > 0;\n                var relativeToParent = hasParent;\n\n                if (hasParent) {\n                  parent = parent[0];\n                }\n\n                var origin = relativeToParent ? parent.position() : {\n                  x: 0,\n                  y: 0\n                };\n\n                if (val !== undefined) {\n                  // set one dimension\n                  _ele2.position(dim, val + origin[dim]);\n                } else if (ppos !== undefined) {\n                  // set whole position\n                  _ele2.position({\n                    x: ppos.x + origin.x,\n                    y: ppos.y + origin.y\n                  });\n                }\n              }\n            } else {\n              // getting\n              var pos = ele.position();\n\n              var _parent = hasCompoundNodes ? ele.parent() : null;\n\n              var _hasParent = _parent && _parent.length > 0;\n\n              var _relativeToParent = _hasParent;\n\n              if (_hasParent) {\n                _parent = _parent[0];\n              }\n\n              var _origin = _relativeToParent ? _parent.position() : {\n                x: 0,\n                y: 0\n              };\n\n              ppos = {\n                x: pos.x - _origin.x,\n                y: pos.y - _origin.y\n              };\n\n              if (dim === undefined) {\n                // then return the whole rendered position\n                return ppos;\n              } else {\n                // then return the specified dimension\n                return ppos[dim];\n              }\n            }\n          } else if (!setting) {\n            return undefined; // for empty collection case\n          }\n\n          return this; // chaining\n        }\n      }; // aliases\n\n      fn.modelPosition = fn.point = fn.position;\n      fn.modelPositions = fn.points = fn.positions;\n      fn.renderedPoint = fn.renderedPosition;\n      fn.relativePoint = fn.relativePosition;\n      module.exports = elesfn;\n      /***/\n    },\n    /* 58 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var math = __webpack_require__(2);\n\n      var fn = void 0,\n          elesfn = void 0;\n      fn = elesfn = {};\n\n      elesfn.renderedBoundingBox = function (options) {\n        var bb = this.boundingBox(options);\n        var cy = this.cy();\n        var zoom = cy.zoom();\n        var pan = cy.pan();\n        var x1 = bb.x1 * zoom + pan.x;\n        var x2 = bb.x2 * zoom + pan.x;\n        var y1 = bb.y1 * zoom + pan.y;\n        var y2 = bb.y2 * zoom + pan.y;\n        return {\n          x1: x1,\n          x2: x2,\n          y1: y1,\n          y2: y2,\n          w: x2 - x1,\n          h: y2 - y1\n        };\n      };\n\n      elesfn.dirtyCompoundBoundsCache = function () {\n        var cy = this.cy();\n\n        if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {\n          return this;\n        }\n\n        this.forEachUp(function (ele) {\n          ele._private.compoundBoundsClean = false;\n\n          if (ele.isParent()) {\n            ele.emit('bounds');\n          }\n        });\n        return this;\n      };\n\n      elesfn.updateCompoundBounds = function () {\n        var cy = this.cy(); // save cycles for non compound graphs or when style disabled\n\n        if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {\n          return this;\n        } // save cycles when batching -- but bounds will be stale (or not exist yet)\n\n\n        if (cy.batching()) {\n          return this;\n        }\n\n        var updated = [];\n\n        function update(parent) {\n          if (!parent.isParent()) {\n            return;\n          }\n\n          var _p = parent._private;\n          var children = parent.children();\n          var includeLabels = parent.pstyle('compound-sizing-wrt-labels').value === 'include';\n          var min = {\n            width: {\n              val: parent.pstyle('min-width').pfValue,\n              left: parent.pstyle('min-width-bias-left'),\n              right: parent.pstyle('min-width-bias-right')\n            },\n            height: {\n              val: parent.pstyle('min-height').pfValue,\n              top: parent.pstyle('min-height-bias-top'),\n              bottom: parent.pstyle('min-height-bias-bottom')\n            }\n          };\n          var bb = children.boundingBox({\n            includeLabels: includeLabels,\n            includeOverlays: false,\n            // updating the compound bounds happens outside of the regular\n            // cache cycle (i.e. before fired events)\n            useCache: false\n          });\n          var pos = _p.position; // if children take up zero area then keep position and fall back on stylesheet w/h\n\n          if (bb.w === 0 || bb.h === 0) {\n            bb = {\n              w: parent.pstyle('width').pfValue,\n              h: parent.pstyle('height').pfValue\n            };\n            bb.x1 = pos.x - bb.w / 2;\n            bb.x2 = pos.x + bb.w / 2;\n            bb.y1 = pos.y - bb.h / 2;\n            bb.y2 = pos.y + bb.h / 2;\n          }\n\n          function computeBiasValues(propDiff, propBias, propBiasComplement) {\n            var biasDiff = 0;\n            var biasComplementDiff = 0;\n            var biasTotal = propBias + propBiasComplement;\n\n            if (propDiff > 0 && biasTotal > 0) {\n              biasDiff = propBias / biasTotal * propDiff;\n              biasComplementDiff = propBiasComplement / biasTotal * propDiff;\n            }\n\n            return {\n              biasDiff: biasDiff,\n              biasComplementDiff: biasComplementDiff\n            };\n          }\n\n          function computePaddingValues(width, height, paddingObject, relativeTo) {\n            // Assuming percentage is number from 0 to 1\n            if (paddingObject.units === '%') {\n              switch (relativeTo) {\n                case 'width':\n                  return width > 0 ? paddingObject.pfValue * width : 0;\n\n                case 'height':\n                  return height > 0 ? paddingObject.pfValue * height : 0;\n\n                case 'average':\n                  return width > 0 && height > 0 ? paddingObject.pfValue * (width + height) / 2 : 0;\n\n                case 'min':\n                  return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * height : paddingObject.pfValue * width : 0;\n\n                case 'max':\n                  return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * width : paddingObject.pfValue * height : 0;\n\n                default:\n                  return 0;\n              }\n            } else if (paddingObject.units === 'px') {\n              return paddingObject.pfValue;\n            } else {\n              return 0;\n            }\n          }\n\n          var leftVal = min.width.left.value;\n\n          if (min.width.left.units === 'px' && min.width.val > 0) {\n            leftVal = leftVal * 100 / min.width.val;\n          }\n\n          var rightVal = min.width.right.value;\n\n          if (min.width.right.units === 'px' && min.width.val > 0) {\n            rightVal = rightVal * 100 / min.width.val;\n          }\n\n          var topVal = min.height.top.value;\n\n          if (min.height.top.units === 'px' && min.height.val > 0) {\n            topVal = topVal * 100 / min.height.val;\n          }\n\n          var bottomVal = min.height.bottom.value;\n\n          if (min.height.bottom.units === 'px' && min.height.val > 0) {\n            bottomVal = bottomVal * 100 / min.height.val;\n          }\n\n          var widthBiasDiffs = computeBiasValues(min.width.val - bb.w, leftVal, rightVal);\n          var diffLeft = widthBiasDiffs.biasDiff;\n          var diffRight = widthBiasDiffs.biasComplementDiff;\n          var heightBiasDiffs = computeBiasValues(min.height.val - bb.h, topVal, bottomVal);\n          var diffTop = heightBiasDiffs.biasDiff;\n          var diffBottom = heightBiasDiffs.biasComplementDiff;\n          _p.autoPadding = computePaddingValues(bb.w, bb.h, parent.pstyle('padding'), parent.pstyle('padding-relative-to').value);\n          _p.autoWidth = Math.max(bb.w, min.width.val);\n          pos.x = (-diffLeft + bb.x1 + bb.x2 + diffRight) / 2;\n          _p.autoHeight = Math.max(bb.h, min.height.val);\n          pos.y = (-diffTop + bb.y1 + bb.y2 + diffBottom) / 2;\n          updated.push(parent);\n        }\n\n        for (var i = 0; i < this.length; i++) {\n          var ele = this[i];\n          var _p = ele._private;\n\n          if (!_p.compoundBoundsClean) {\n            update(ele);\n\n            if (!cy._private.batchingStyle) {\n              _p.compoundBoundsClean = true;\n            }\n          }\n        }\n\n        return this;\n      };\n\n      var noninf = function noninf(x) {\n        if (x === Infinity || x === -Infinity) {\n          return 0;\n        }\n\n        return x;\n      };\n\n      var updateBounds = function updateBounds(b, x1, y1, x2, y2) {\n        // don't update with zero area boxes\n        if (x2 - x1 === 0 || y2 - y1 === 0) {\n          return;\n        } // don't update with null dim\n\n\n        if (x1 == null || y1 == null || x2 == null || y2 == null) {\n          return;\n        }\n\n        b.x1 = x1 < b.x1 ? x1 : b.x1;\n        b.x2 = x2 > b.x2 ? x2 : b.x2;\n        b.y1 = y1 < b.y1 ? y1 : b.y1;\n        b.y2 = y2 > b.y2 ? y2 : b.y2;\n      };\n\n      var updateBoundsFromBox = function updateBoundsFromBox(b, b2) {\n        return updateBounds(b, b2.x1, b2.y1, b2.x2, b2.y2);\n      };\n\n      var prefixedProperty = function prefixedProperty(obj, field, prefix) {\n        return util.getPrefixedProperty(obj, field, prefix);\n      };\n\n      var updateBoundsFromArrow = function updateBoundsFromArrow(bounds, ele, prefix) {\n        if (ele.cy().headless()) {\n          return;\n        }\n\n        var _p = ele._private;\n        var rstyle = _p.rstyle;\n        var halfArW = rstyle.arrowWidth / 2;\n        var arrowType = ele.pstyle(prefix + '-arrow-shape').value;\n        var x = void 0;\n        var y = void 0;\n\n        if (arrowType !== 'none') {\n          if (prefix === 'source') {\n            x = rstyle.srcX;\n            y = rstyle.srcY;\n          } else if (prefix === 'target') {\n            x = rstyle.tgtX;\n            y = rstyle.tgtY;\n          } else {\n            x = rstyle.midX;\n            y = rstyle.midY;\n          }\n\n          updateBounds(bounds, x - halfArW, y - halfArW, x + halfArW, y + halfArW);\n        }\n      };\n\n      var updateBoundsFromLabel = function updateBoundsFromLabel(bounds, ele, prefix) {\n        if (ele.cy().headless()) {\n          return;\n        }\n\n        var prefixDash = void 0;\n\n        if (prefix) {\n          prefixDash = prefix + '-';\n        } else {\n          prefixDash = '';\n        }\n\n        var _p = ele._private;\n        var rstyle = _p.rstyle;\n        var label = ele.pstyle(prefixDash + 'label').strValue;\n\n        if (label) {\n          var halign = ele.pstyle('text-halign');\n          var valign = ele.pstyle('text-valign');\n          var labelWidth = prefixedProperty(rstyle, 'labelWidth', prefix);\n          var labelHeight = prefixedProperty(rstyle, 'labelHeight', prefix);\n          var labelX = prefixedProperty(rstyle, 'labelX', prefix);\n          var labelY = prefixedProperty(rstyle, 'labelY', prefix);\n          var marginX = ele.pstyle(prefixDash + 'text-margin-x').pfValue;\n          var marginY = ele.pstyle(prefixDash + 'text-margin-y').pfValue;\n          var isEdge = ele.isEdge();\n          var rotation = ele.pstyle(prefixDash + 'text-rotation');\n          var outlineWidth = ele.pstyle('text-outline-width').pfValue;\n          var borderWidth = ele.pstyle('text-border-width').pfValue;\n          var halfBorderWidth = borderWidth / 2;\n          var padding = ele.pstyle('text-background-padding').pfValue;\n          var lh = labelHeight + 2 * padding;\n          var lw = labelWidth + 2 * padding;\n          var lw_2 = lw / 2;\n          var lh_2 = lh / 2;\n          var lx1 = void 0,\n              lx2 = void 0,\n              ly1 = void 0,\n              ly2 = void 0;\n\n          if (isEdge) {\n            lx1 = labelX - lw_2;\n            lx2 = labelX + lw_2;\n            ly1 = labelY - lh_2;\n            ly2 = labelY + lh_2;\n          } else {\n            switch (halign.value) {\n              case 'left':\n                lx1 = labelX - lw;\n                lx2 = labelX;\n                break;\n\n              case 'center':\n                lx1 = labelX - lw_2;\n                lx2 = labelX + lw_2;\n                break;\n\n              case 'right':\n                lx1 = labelX;\n                lx2 = labelX + lw;\n                break;\n            }\n\n            switch (valign.value) {\n              case 'top':\n                ly1 = labelY - lh;\n                ly2 = labelY;\n                break;\n\n              case 'center':\n                ly1 = labelY - lh_2;\n                ly2 = labelY + lh_2;\n                break;\n\n              case 'bottom':\n                ly1 = labelY;\n                ly2 = labelY + lh;\n                break;\n            }\n          }\n\n          var isAutorotate = isEdge && rotation.strValue === 'autorotate';\n          var isPfValue = rotation.pfValue != null && rotation.pfValue !== 0;\n\n          if (isAutorotate || isPfValue) {\n            var theta = isAutorotate ? prefixedProperty(_p.rstyle, 'labelAngle', prefix) : rotation.pfValue;\n            var cos = Math.cos(theta);\n            var sin = Math.sin(theta);\n\n            var rotate = function rotate(x, y) {\n              x = x - labelX;\n              y = y - labelY;\n              return {\n                x: x * cos - y * sin + labelX,\n                y: x * sin + y * cos + labelY\n              };\n            };\n\n            var px1y1 = rotate(lx1, ly1);\n            var px1y2 = rotate(lx1, ly2);\n            var px2y1 = rotate(lx2, ly1);\n            var px2y2 = rotate(lx2, ly2);\n            lx1 = Math.min(px1y1.x, px1y2.x, px2y1.x, px2y2.x);\n            lx2 = Math.max(px1y1.x, px1y2.x, px2y1.x, px2y2.x);\n            ly1 = Math.min(px1y1.y, px1y2.y, px2y1.y, px2y2.y);\n            ly2 = Math.max(px1y1.y, px1y2.y, px2y1.y, px2y2.y);\n          }\n\n          lx1 += marginX - Math.max(outlineWidth, halfBorderWidth);\n          lx2 += marginX + Math.max(outlineWidth, halfBorderWidth);\n          ly1 += marginY - Math.max(outlineWidth, halfBorderWidth);\n          ly2 += marginY + Math.max(outlineWidth, halfBorderWidth);\n          updateBounds(bounds, lx1, ly1, lx2, ly2);\n        }\n\n        return bounds;\n      }; // get the bounding box of the elements (in raw model position)\n\n\n      var boundingBoxImpl = function boundingBoxImpl(ele, options) {\n        var cy = ele._private.cy;\n        var styleEnabled = cy.styleEnabled();\n        var headless = cy.headless();\n        var bounds = {\n          x1: Infinity,\n          y1: Infinity,\n          x2: -Infinity,\n          y2: -Infinity\n        };\n        var _p = ele._private;\n        var display = styleEnabled ? ele.pstyle('display').value : 'element';\n        var isNode = ele.isNode();\n        var isEdge = ele.isEdge();\n        var ex1 = void 0,\n            ex2 = void 0,\n            ey1 = void 0,\n            ey2 = void 0; // extrema of body / lines\n\n        var x = void 0,\n            y = void 0; // node pos\n\n        var displayed = display !== 'none';\n\n        if (displayed) {\n          var overlayOpacity = 0;\n          var overlayPadding = 0;\n\n          if (styleEnabled && options.includeOverlays) {\n            overlayOpacity = ele.pstyle('overlay-opacity').value;\n\n            if (overlayOpacity !== 0) {\n              overlayPadding = ele.pstyle('overlay-padding').value;\n            }\n          }\n\n          var w = 0;\n          var wHalf = 0;\n\n          if (styleEnabled) {\n            w = ele.pstyle('width').pfValue;\n            wHalf = w / 2;\n          }\n\n          if (isNode && options.includeNodes) {\n            var pos = ele.position();\n            x = pos.x;\n            y = pos.y;\n\n            var _w = ele.outerWidth();\n\n            var halfW = _w / 2;\n            var h = ele.outerHeight();\n            var halfH = h / 2; // handle node dimensions\n            /////////////////////////\n\n            ex1 = x - halfW - overlayPadding;\n            ex2 = x + halfW + overlayPadding;\n            ey1 = y - halfH - overlayPadding;\n            ey2 = y + halfH + overlayPadding;\n            updateBounds(bounds, ex1, ey1, ex2, ey2);\n          } else if (isEdge && options.includeEdges) {\n            var rstyle = _p.rstyle || {}; // handle edge dimensions (rough box estimate)\n            //////////////////////////////////////////////\n\n            if (styleEnabled && !headless) {\n              ex1 = Math.min(rstyle.srcX, rstyle.midX, rstyle.tgtX);\n              ex2 = Math.max(rstyle.srcX, rstyle.midX, rstyle.tgtX);\n              ey1 = Math.min(rstyle.srcY, rstyle.midY, rstyle.tgtY);\n              ey2 = Math.max(rstyle.srcY, rstyle.midY, rstyle.tgtY); // take into account edge width\n\n              ex1 -= wHalf;\n              ex2 += wHalf;\n              ey1 -= wHalf;\n              ey2 += wHalf;\n              updateBounds(bounds, ex1, ey1, ex2, ey2);\n            } // precise haystacks\n            ////////////////////\n\n\n            if (styleEnabled && !headless && ele.pstyle('curve-style').strValue === 'haystack') {\n              var hpts = rstyle.haystackPts || [];\n              ex1 = hpts[0].x;\n              ey1 = hpts[0].y;\n              ex2 = hpts[1].x;\n              ey2 = hpts[1].y;\n\n              if (ex1 > ex2) {\n                var temp = ex1;\n                ex1 = ex2;\n                ex2 = temp;\n              }\n\n              if (ey1 > ey2) {\n                var _temp = ey1;\n                ey1 = ey2;\n                ey2 = _temp;\n              }\n\n              updateBounds(bounds, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf); // handle points along edge\n              ///////////////////////////\n            } else {\n              var pts = rstyle.bezierPts || rstyle.linePts || [];\n\n              for (var j = 0; j < pts.length; j++) {\n                var pt = pts[j];\n                ex1 = pt.x - wHalf;\n                ex2 = pt.x + wHalf;\n                ey1 = pt.y - wHalf;\n                ey2 = pt.y + wHalf;\n                updateBounds(bounds, ex1, ey1, ex2, ey2);\n              } // fallback on source and target positions\n              //////////////////////////////////////////\n\n\n              if (pts.length === 0) {\n                var n1 = ele.source();\n                var n1pos = n1.position();\n                var n2 = ele.target();\n                var n2pos = n2.position();\n                ex1 = n1pos.x;\n                ex2 = n2pos.x;\n                ey1 = n1pos.y;\n                ey2 = n2pos.y;\n\n                if (ex1 > ex2) {\n                  var _temp2 = ex1;\n                  ex1 = ex2;\n                  ex2 = _temp2;\n                }\n\n                if (ey1 > ey2) {\n                  var _temp3 = ey1;\n                  ey1 = ey2;\n                  ey2 = _temp3;\n                } // take into account edge width\n\n\n                ex1 -= wHalf;\n                ex2 += wHalf;\n                ey1 -= wHalf;\n                ey2 += wHalf;\n                updateBounds(bounds, ex1, ey1, ex2, ey2);\n              }\n            }\n          } // edges\n          // handle edge arrow size\n          /////////////////////////\n\n\n          if (styleEnabled && options.includeEdges && isEdge) {\n            updateBoundsFromArrow(bounds, ele, 'mid-source', options);\n            updateBoundsFromArrow(bounds, ele, 'mid-target', options);\n            updateBoundsFromArrow(bounds, ele, 'source', options);\n            updateBoundsFromArrow(bounds, ele, 'target', options);\n          } // ghost\n          ////////\n\n\n          if (styleEnabled) {\n            var ghost = ele.pstyle('ghost').value === 'yes';\n\n            if (ghost) {\n              var gx = ele.pstyle('ghost-offset-x').pfValue;\n              var gy = ele.pstyle('ghost-offset-y').pfValue;\n              updateBounds(bounds, bounds.x1 + gx, bounds.y1 + gy, bounds.x2 + gx, bounds.y2 + gy);\n            }\n          } // overlay\n          //////////\n\n\n          if (styleEnabled) {\n            ex1 = bounds.x1;\n            ex2 = bounds.x2;\n            ey1 = bounds.y1;\n            ey2 = bounds.y2;\n            updateBounds(bounds, ex1 - overlayPadding, ey1 - overlayPadding, ex2 + overlayPadding, ey2 + overlayPadding);\n          } // handle label dimensions\n          //////////////////////////\n\n\n          if (styleEnabled && options.includeLabels) {\n            updateBoundsFromLabel(bounds, ele, null, options);\n\n            if (isEdge) {\n              updateBoundsFromLabel(bounds, ele, 'source', options);\n              updateBoundsFromLabel(bounds, ele, 'target', options);\n            }\n          } // style enabled for labels\n\n        } // if displayed\n\n\n        bounds.x1 = noninf(bounds.x1);\n        bounds.y1 = noninf(bounds.y1);\n        bounds.x2 = noninf(bounds.x2);\n        bounds.y2 = noninf(bounds.y2);\n        bounds.w = noninf(bounds.x2 - bounds.x1);\n        bounds.h = noninf(bounds.y2 - bounds.y1); // expand bounds by 1 because antialiasing can increase the visual/effective size by 1 on all sides\n\n        if (bounds.w > 0 && bounds.h > 0 && displayed) {\n          math.expandBoundingBox(bounds, 1);\n        }\n\n        return bounds;\n      };\n\n      var tf = function tf(val) {\n        if (val) {\n          return 't';\n        } else {\n          return 'f';\n        }\n      };\n\n      var getKey = function getKey(opts) {\n        var key = '';\n        key += tf(opts.incudeNodes);\n        key += tf(opts.includeEdges);\n        key += tf(opts.includeLabels);\n        key += tf(opts.includeOverlays);\n        return key;\n      };\n\n      var cachedBoundingBoxImpl = function cachedBoundingBoxImpl(ele, opts) {\n        var _p = ele._private;\n        var bb = void 0;\n        var headless = ele.cy().headless();\n        var key = opts === defBbOpts ? defBbOptsKey : getKey(opts);\n\n        if (!opts.useCache || headless || !_p.bbCache || !_p.bbCache[key]) {\n          bb = boundingBoxImpl(ele, opts);\n\n          if (!headless) {\n            _p.bbCache = _p.bbCache || {};\n            _p.bbCache[key] = bb;\n          }\n        } else {\n          bb = _p.bbCache[key];\n        }\n\n        return bb;\n      };\n\n      var defBbOpts = {\n        includeNodes: true,\n        includeEdges: true,\n        includeLabels: true,\n        includeOverlays: true,\n        useCache: true\n      };\n      var defBbOptsKey = getKey(defBbOpts);\n\n      function filledBbOpts(options) {\n        return {\n          includeNodes: util.default(options.includeNodes, defBbOpts.includeNodes),\n          includeEdges: util.default(options.includeEdges, defBbOpts.includeEdges),\n          includeLabels: util.default(options.includeLabels, defBbOpts.includeLabels),\n          includeOverlays: util.default(options.includeOverlays, defBbOpts.includeOverlays),\n          useCache: util.default(options.useCache, defBbOpts.useCache)\n        };\n      }\n\n      elesfn.boundingBox = function (options) {\n        // the main usecase is ele.boundingBox() for a single element with no/def options\n        // specified s.t. the cache is used, so check for this case to make it faster by\n        // avoiding the overhead of the rest of the function\n        if (this.length === 1 && this[0]._private.bbCache && (options === undefined || options.useCache === undefined || options.useCache === true)) {\n          if (options === undefined) {\n            options = defBbOpts;\n          } else {\n            options = filledBbOpts(options);\n          }\n\n          return cachedBoundingBoxImpl(this[0], options);\n        }\n\n        var bounds = {\n          x1: Infinity,\n          y1: Infinity,\n          x2: -Infinity,\n          y2: -Infinity\n        };\n        options = options || util.staticEmptyObject();\n        var opts = filledBbOpts(options);\n        var eles = this;\n        var cy = eles.cy();\n        var styleEnabled = cy.styleEnabled();\n\n        if (styleEnabled) {\n          this.recalculateRenderedStyle(opts.useCache);\n        }\n\n        this.updateCompoundBounds();\n        var updatedEdge = {}; // use to avoid duplicated edge updates\n\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n\n          if (styleEnabled && ele.isEdge() && ele.pstyle('curve-style').strValue === 'bezier' && !updatedEdge[ele.id()]) {\n            var edges = ele.parallelEdges();\n\n            for (var j = 0; j < edges.length; j++) {\n              // make all as updated\n              updatedEdge[edges[j].id()] = true;\n            }\n\n            edges.recalculateRenderedStyle(opts.useCache); // n.b. ele.parallelEdges() single is cached\n          }\n\n          updateBoundsFromBox(bounds, cachedBoundingBoxImpl(ele, opts));\n        }\n\n        bounds.x1 = noninf(bounds.x1);\n        bounds.y1 = noninf(bounds.y1);\n        bounds.x2 = noninf(bounds.x2);\n        bounds.y2 = noninf(bounds.y2);\n        bounds.w = noninf(bounds.x2 - bounds.x1);\n        bounds.h = noninf(bounds.y2 - bounds.y1);\n        return bounds;\n      }; // private helper to get bounding box for custom node positions\n      // - good for perf in certain cases but currently requires dirtying the rendered style\n      // - would be better to not modify the nodes but the nodes are read directly everywhere in the renderer...\n      // - try to use for only things like discrete layouts where the node position would change anyway\n\n\n      elesfn.boundingBoxAt = function (fn) {\n        var nodes = this.nodes();\n\n        if (is.plainObject(fn)) {\n          var obj = fn;\n\n          fn = function fn() {\n            return obj;\n          };\n        } // save the current position and set the new one, per node\n\n\n        for (var i = 0; i < nodes.length; i++) {\n          var n = nodes[i];\n          var _p = n._private;\n          var pos = _p.position;\n          var newPos = fn.call(n, n, i);\n          _p.bbAtOldPos = {\n            x: pos.x,\n            y: pos.y\n          };\n\n          if (newPos) {\n            pos.x = newPos.x;\n            pos.y = newPos.y;\n          }\n        }\n\n        this.emit('dirty'); // let the renderer know we've manually dirtied rendered dim calcs\n\n        nodes.dirtyCompoundBoundsCache().updateCompoundBounds();\n        var bb = this.boundingBox({\n          useCache: false\n        }); // restore the original position, per node\n\n        for (var _i = 0; _i < nodes.length; _i++) {\n          var _n = nodes[_i];\n          var _p2 = _n._private;\n          var _pos = _n._private.position;\n          var old = _p2.bbAtOldPos;\n          _pos.x = old.x;\n          _pos.y = old.y;\n        }\n\n        nodes.dirtyCompoundBoundsCache();\n        this.emit('dirty'); // let the renderer know we've manually dirtied rendered dim calcs\n\n        return bb;\n      };\n\n      fn.boundingbox = fn.boundingBox;\n      fn.renderedBoundingbox = fn.renderedBoundingBox;\n      module.exports = elesfn;\n      /***/\n    },\n    /* 59 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var fn = void 0,\n          elesfn = void 0;\n      fn = elesfn = {};\n\n      var defineDimFns = function defineDimFns(opts) {\n        opts.uppercaseName = util.capitalize(opts.name);\n        opts.autoName = 'auto' + opts.uppercaseName;\n        opts.labelName = 'label' + opts.uppercaseName;\n        opts.outerName = 'outer' + opts.uppercaseName;\n        opts.uppercaseOuterName = util.capitalize(opts.outerName);\n\n        fn[opts.name] = function dimImpl() {\n          var ele = this[0];\n          var _p = ele._private;\n          var cy = _p.cy;\n          var styleEnabled = cy._private.styleEnabled;\n\n          if (ele) {\n            if (styleEnabled) {\n              if (ele.isParent()) {\n                ele.updateCompoundBounds();\n                return _p[opts.autoName] || 0;\n              }\n\n              var d = ele.pstyle(opts.name);\n\n              switch (d.strValue) {\n                case 'label':\n                  ele.recalculateRenderedStyle();\n                  return _p.rstyle[opts.labelName] || 0;\n\n                default:\n                  return d.pfValue;\n              }\n            } else {\n              return 1;\n            }\n          }\n        };\n\n        fn['outer' + opts.uppercaseName] = function outerDimImpl() {\n          var ele = this[0];\n          var _p = ele._private;\n          var cy = _p.cy;\n          var styleEnabled = cy._private.styleEnabled;\n\n          if (ele) {\n            if (styleEnabled) {\n              var dim = ele[opts.name]();\n              var border = ele.pstyle('border-width').pfValue; // n.b. 1/2 each side\n\n              var padding = 2 * ele.padding();\n              return dim + border + padding;\n            } else {\n              return 1;\n            }\n          }\n        };\n\n        fn['rendered' + opts.uppercaseName] = function renderedDimImpl() {\n          var ele = this[0];\n\n          if (ele) {\n            var d = ele[opts.name]();\n            return d * this.cy().zoom();\n          }\n        };\n\n        fn['rendered' + opts.uppercaseOuterName] = function renderedOuterDimImpl() {\n          var ele = this[0];\n\n          if (ele) {\n            var od = ele[opts.outerName]();\n            return od * this.cy().zoom();\n          }\n        };\n      };\n\n      defineDimFns({\n        name: 'width'\n      });\n      defineDimFns({\n        name: 'height'\n      });\n\n      elesfn.padding = function () {\n        var ele = this[0];\n        var _p = ele._private;\n\n        if (ele.isParent()) {\n          ele.updateCompoundBounds();\n\n          if (_p.autoPadding !== undefined) {\n            return _p.autoPadding;\n          } else {\n            return ele.pstyle('padding').pfValue;\n          }\n        } else {\n          return ele.pstyle('padding').pfValue;\n        }\n      };\n\n      module.exports = elesfn;\n      /***/\n    },\n    /* 60 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var ifEdge = function ifEdge(self, then) {\n        if (self.isEdge()) {\n          return then(self.renderer());\n        }\n      };\n\n      module.exports = {\n        controlPoints: function controlPoints() {\n          var _this = this;\n\n          return ifEdge(this, function (renderer) {\n            return renderer.getControlPoints(_this);\n          });\n        },\n        segmentPoints: function segmentPoints() {\n          var _this2 = this;\n\n          return ifEdge(this, function (renderer) {\n            return renderer.getSegmentPoints(_this2);\n          });\n        },\n        sourceEndpoint: function sourceEndpoint() {\n          var _this3 = this;\n\n          return ifEdge(this, function (renderer) {\n            return renderer.getSourceEndpoint(_this3);\n          });\n        },\n        targetEndpoint: function targetEndpoint() {\n          var _this4 = this;\n\n          return ifEdge(this, function (renderer) {\n            return renderer.getTargetEndpoint(_this4);\n          });\n        },\n        midpoint: function midpoint() {\n          var _this5 = this;\n\n          return ifEdge(this, function (renderer) {\n            return renderer.getEdgeMidpoint(_this5);\n          });\n        }\n      };\n      /***/\n    },\n    /* 61 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var Emitter = __webpack_require__(11);\n\n      var define = __webpack_require__(4);\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var Selector = __webpack_require__(6);\n\n      var emitterOptions = {\n        qualifierCompare: function qualifierCompare(selector1, selector2) {\n          if (selector1 == null || selector2 == null) {\n            return selector1 == null && selector2 == null;\n          } else {\n            return selector1.sameText(selector2);\n          }\n        },\n        eventMatches: function eventMatches(ele, listener, eventObj) {\n          var selector = listener.qualifier;\n\n          if (selector != null) {\n            return ele !== eventObj.target && is.element(eventObj.target) && selector.matches(eventObj.target);\n          }\n\n          return true;\n        },\n        eventFields: function eventFields(ele) {\n          return {\n            cy: ele.cy(),\n            target: ele\n          };\n        },\n        callbackContext: function callbackContext(ele, listener, eventObj) {\n          return listener.qualifier != null ? eventObj.target : ele;\n        },\n        beforeEmit: function beforeEmit(context, listener\n        /*, eventObj*/\n        ) {\n          if (listener.conf && listener.conf.once) {\n            listener.conf.onceCollection.removeListener(listener.event, listener.qualifier, listener.callback);\n          }\n        },\n        bubble: function bubble() {\n          return true;\n        },\n        parent: function parent(ele) {\n          return ele.isChild() ? ele.parent() : ele.cy();\n        }\n      };\n\n      var argSelector = function argSelector(arg) {\n        if (is.string(arg)) {\n          return new Selector(arg);\n        } else {\n          return arg;\n        }\n      };\n\n      var elesfn = {\n        createEmitter: function createEmitter() {\n          for (var i = 0; i < this.length; i++) {\n            var ele = this[i];\n            var _p = ele._private;\n\n            if (!_p.emitter) {\n              _p.emitter = new Emitter(util.assign({\n                context: ele\n              }, emitterOptions));\n            }\n          }\n\n          return this;\n        },\n        emitter: function emitter() {\n          return this._private.emitter;\n        },\n        on: function on(events, selector, callback) {\n          for (var i = 0; i < this.length; i++) {\n            var ele = this[i];\n            ele.emitter().on(events, argSelector(selector), callback);\n          }\n\n          return this;\n        },\n        removeListener: function removeListener(events, selector, callback) {\n          for (var i = 0; i < this.length; i++) {\n            var ele = this[i];\n            ele.emitter().removeListener(events, argSelector(selector), callback);\n          }\n\n          return this;\n        },\n        one: function one(events, selector, callback) {\n          for (var i = 0; i < this.length; i++) {\n            var ele = this[i];\n            ele.emitter().one(events, argSelector(selector), callback);\n          }\n\n          return this;\n        },\n        once: function once(events, selector, callback) {\n          for (var i = 0; i < this.length; i++) {\n            var ele = this[i];\n            ele.emitter().on(events, argSelector(selector), callback, {\n              once: true,\n              onceCollection: this\n            });\n          }\n        },\n        emit: function emit(events, extraParams) {\n          for (var i = 0; i < this.length; i++) {\n            var ele = this[i];\n            ele.emitter().emit(events, extraParams);\n          }\n\n          return this;\n        },\n        emitAndNotify: function emitAndNotify(event, extraParams) {\n          // for internal use only\n          if (this.length === 0) {\n            return;\n          } // empty collections don't need to notify anything\n          // notify renderer\n\n\n          this.cy().notify({\n            type: event,\n            eles: this\n          });\n          this.emit(event, extraParams);\n          return this;\n        }\n      };\n      define.eventAliasesOn(elesfn);\n      module.exports = elesfn;\n      /***/\n    },\n    /* 62 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var Selector = __webpack_require__(6);\n\n      var elesfn = {\n        nodes: function nodes(selector) {\n          return this.filter(function (ele) {\n            return ele.isNode();\n          }).filter(selector);\n        },\n        edges: function edges(selector) {\n          return this.filter(function (ele) {\n            return ele.isEdge();\n          }).filter(selector);\n        },\n        filter: function filter(_filter, thisArg) {\n          if (_filter === undefined) {\n            // check this first b/c it's the most common/performant case\n            return this;\n          } else if (is.string(_filter) || is.elementOrCollection(_filter)) {\n            return new Selector(_filter).filter(this);\n          } else if (is.fn(_filter)) {\n            var filterEles = this.spawn();\n            var eles = this;\n\n            for (var i = 0; i < eles.length; i++) {\n              var ele = eles[i];\n              var include = thisArg ? _filter.apply(thisArg, [ele, i, eles]) : _filter(ele, i, eles);\n\n              if (include) {\n                filterEles.merge(ele);\n              }\n            }\n\n            return filterEles;\n          }\n\n          return this.spawn(); // if not handled by above, give 'em an empty collection\n        },\n        not: function not(toRemove) {\n          if (!toRemove) {\n            return this;\n          } else {\n            if (is.string(toRemove)) {\n              toRemove = this.filter(toRemove);\n            }\n\n            var elements = [];\n            var rMap = toRemove._private.map;\n\n            for (var i = 0; i < this.length; i++) {\n              var element = this[i];\n              var remove = rMap.has(element.id());\n\n              if (!remove) {\n                elements.push(element);\n              }\n            }\n\n            return this.spawn(elements);\n          }\n        },\n        absoluteComplement: function absoluteComplement() {\n          var cy = this.cy();\n          return cy.mutableElements().not(this);\n        },\n        intersect: function intersect(other) {\n          // if a selector is specified, then filter by it instead\n          if (is.string(other)) {\n            var selector = other;\n            return this.filter(selector);\n          }\n\n          var elements = [];\n          var col1 = this;\n          var col2 = other;\n          var col1Smaller = this.length < other.length;\n          var map2 = col1Smaller ? col2._private.map : col1._private.map;\n          var col = col1Smaller ? col1 : col2;\n\n          for (var i = 0; i < col.length; i++) {\n            var id = col[i]._private.data.id;\n            var entry = map2.get(id);\n\n            if (entry) {\n              elements.push(entry.ele);\n            }\n          }\n\n          return this.spawn(elements);\n        },\n        xor: function xor(other) {\n          var cy = this._private.cy;\n\n          if (is.string(other)) {\n            other = cy.$(other);\n          }\n\n          var elements = [];\n          var col1 = this;\n          var col2 = other;\n\n          var add = function add(col, other) {\n            for (var i = 0; i < col.length; i++) {\n              var ele = col[i];\n              var id = ele._private.data.id;\n              var inOther = other.hasElementWithId(id);\n\n              if (!inOther) {\n                elements.push(ele);\n              }\n            }\n          };\n\n          add(col1, col2);\n          add(col2, col1);\n          return this.spawn(elements);\n        },\n        diff: function diff(other) {\n          var cy = this._private.cy;\n\n          if (is.string(other)) {\n            other = cy.$(other);\n          }\n\n          var left = [];\n          var right = [];\n          var both = [];\n          var col1 = this;\n          var col2 = other;\n\n          var add = function add(col, other, retEles) {\n            for (var i = 0; i < col.length; i++) {\n              var ele = col[i];\n              var id = ele._private.data.id;\n              var inOther = other.hasElementWithId(id);\n\n              if (inOther) {\n                both.push(ele);\n              } else {\n                retEles.push(ele);\n              }\n            }\n          };\n\n          add(col1, col2, left);\n          add(col2, col1, right);\n          return {\n            left: this.spawn(left, {\n              unique: true\n            }),\n            right: this.spawn(right, {\n              unique: true\n            }),\n            both: this.spawn(both, {\n              unique: true\n            })\n          };\n        },\n        add: function add(toAdd) {\n          var cy = this._private.cy;\n\n          if (!toAdd) {\n            return this;\n          }\n\n          if (is.string(toAdd)) {\n            var selector = toAdd;\n            toAdd = cy.mutableElements().filter(selector);\n          }\n\n          var elements = [];\n\n          for (var i = 0; i < this.length; i++) {\n            elements.push(this[i]);\n          }\n\n          var map = this._private.map;\n\n          for (var _i = 0; _i < toAdd.length; _i++) {\n            var add = !map.has(toAdd[_i].id());\n\n            if (add) {\n              elements.push(toAdd[_i]);\n            }\n          }\n\n          return this.spawn(elements);\n        },\n        // in place merge on calling collection\n        merge: function merge(toAdd) {\n          var _p = this._private;\n          var cy = _p.cy;\n\n          if (!toAdd) {\n            return this;\n          }\n\n          if (toAdd && is.string(toAdd)) {\n            var selector = toAdd;\n            toAdd = cy.mutableElements().filter(selector);\n          }\n\n          var map = _p.map;\n\n          for (var i = 0; i < toAdd.length; i++) {\n            var toAddEle = toAdd[i];\n            var id = toAddEle._private.data.id;\n            var add = !map.has(id);\n\n            if (add) {\n              var index = this.length++;\n              this[index] = toAddEle;\n              map.set(id, {\n                ele: toAddEle,\n                index: index\n              });\n            } else {\n              // replace\n              var _index = map.get(id).index;\n              this[_index] = toAddEle;\n              map.set(id, {\n                ele: toAddEle,\n                index: _index\n              });\n            }\n          }\n\n          return this; // chaining\n        },\n        // remove single ele in place in calling collection\n        unmergeOne: function unmergeOne(ele) {\n          ele = ele[0];\n          var _p = this._private;\n          var id = ele._private.data.id;\n          var map = _p.map;\n          var entry = map.get(id);\n\n          if (!entry) {\n            return this; // no need to remove\n          }\n\n          var i = entry.index; // remove ele\n\n          this[i] = undefined;\n          map.delete(id);\n          var unmergedLastEle = i === this.length - 1; // replace empty spot with last ele in collection\n\n          if (this.length > 1 && !unmergedLastEle) {\n            var lastEleI = this.length - 1;\n            var lastEle = this[lastEleI];\n            var lastEleId = lastEle._private.data.id;\n            this[lastEleI] = undefined;\n            this[i] = lastEle;\n            map.set(lastEleId, {\n              ele: lastEle,\n              index: i\n            });\n          } // the collection is now 1 ele smaller\n\n\n          this.length--;\n          return this;\n        },\n        // remove eles in place on calling collection\n        unmerge: function unmerge(toRemove) {\n          var cy = this._private.cy;\n\n          if (!toRemove) {\n            return this;\n          }\n\n          if (toRemove && is.string(toRemove)) {\n            var selector = toRemove;\n            toRemove = cy.mutableElements().filter(selector);\n          }\n\n          for (var i = 0; i < toRemove.length; i++) {\n            this.unmergeOne(toRemove[i]);\n          }\n\n          return this; // chaining\n        },\n        map: function map(mapFn, thisArg) {\n          var arr = [];\n          var eles = this;\n\n          for (var i = 0; i < eles.length; i++) {\n            var ele = eles[i];\n            var ret = thisArg ? mapFn.apply(thisArg, [ele, i, eles]) : mapFn(ele, i, eles);\n            arr.push(ret);\n          }\n\n          return arr;\n        },\n        reduce: function reduce(fn, initialValue) {\n          var val = initialValue;\n          var eles = this;\n\n          for (var i = 0; i < eles.length; i++) {\n            val = fn(val, eles[i], i, eles);\n          }\n\n          return val;\n        },\n        max: function max(valFn, thisArg) {\n          var max = -Infinity;\n          var maxEle = void 0;\n          var eles = this;\n\n          for (var i = 0; i < eles.length; i++) {\n            var ele = eles[i];\n            var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);\n\n            if (val > max) {\n              max = val;\n              maxEle = ele;\n            }\n          }\n\n          return {\n            value: max,\n            ele: maxEle\n          };\n        },\n        min: function min(valFn, thisArg) {\n          var min = Infinity;\n          var minEle = void 0;\n          var eles = this;\n\n          for (var i = 0; i < eles.length; i++) {\n            var ele = eles[i];\n            var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);\n\n            if (val < min) {\n              min = val;\n              minEle = ele;\n            }\n          }\n\n          return {\n            value: min,\n            ele: minEle\n          };\n        }\n      }; // aliases\n\n      var fn = elesfn;\n      fn['u'] = fn['|'] = fn['+'] = fn.union = fn.or = fn.add;\n      fn['\\\\'] = fn['!'] = fn['-'] = fn.difference = fn.relativeComplement = fn.subtract = fn.not;\n      fn['n'] = fn['&'] = fn['.'] = fn.and = fn.intersection = fn.intersect;\n      fn['^'] = fn['(+)'] = fn['(-)'] = fn.symmetricDifference = fn.symdiff = fn.xor;\n      fn.fnFilter = fn.filterFn = fn.stdFilter = fn.filter;\n      fn.complement = fn.abscomp = fn.absoluteComplement;\n      module.exports = elesfn;\n      /***/\n    },\n    /* 63 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var elesfn = {\n        isNode: function isNode() {\n          return this.group() === 'nodes';\n        },\n        isEdge: function isEdge() {\n          return this.group() === 'edges';\n        },\n        isLoop: function isLoop() {\n          return this.isEdge() && this.source().id() === this.target().id();\n        },\n        isSimple: function isSimple() {\n          return this.isEdge() && this.source().id() !== this.target().id();\n        },\n        group: function group() {\n          var ele = this[0];\n\n          if (ele) {\n            return ele._private.group;\n          }\n        }\n      };\n      module.exports = elesfn;\n      /***/\n    },\n    /* 64 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var zIndexSort = __webpack_require__(17);\n\n      var util = __webpack_require__(1);\n\n      var elesfn = {\n        forEach: function forEach(fn, thisArg) {\n          if (is.fn(fn)) {\n            for (var i = 0; i < this.length; i++) {\n              var ele = this[i];\n              var ret = thisArg ? fn.apply(thisArg, [ele, i, this]) : fn(ele, i, this);\n\n              if (ret === false) {\n                break;\n              } // exit each early on return false\n\n            }\n          }\n\n          return this;\n        },\n        toArray: function toArray() {\n          var array = [];\n\n          for (var i = 0; i < this.length; i++) {\n            array.push(this[i]);\n          }\n\n          return array;\n        },\n        slice: function slice(start, end) {\n          var array = [];\n          var thisSize = this.length;\n\n          if (end == null) {\n            end = thisSize;\n          }\n\n          if (start == null) {\n            start = 0;\n          }\n\n          if (start < 0) {\n            start = thisSize + start;\n          }\n\n          if (end < 0) {\n            end = thisSize + end;\n          }\n\n          for (var i = start; i >= 0 && i < end && i < thisSize; i++) {\n            array.push(this[i]);\n          }\n\n          return this.spawn(array);\n        },\n        size: function size() {\n          return this.length;\n        },\n        eq: function eq(i) {\n          return this[i] || this.spawn();\n        },\n        first: function first() {\n          return this[0] || this.spawn();\n        },\n        last: function last() {\n          return this[this.length - 1] || this.spawn();\n        },\n        empty: function empty() {\n          return this.length === 0;\n        },\n        nonempty: function nonempty() {\n          return !this.empty();\n        },\n        sort: function sort(sortFn) {\n          if (!is.fn(sortFn)) {\n            return this;\n          }\n\n          var sorted = this.toArray().sort(sortFn);\n          return this.spawn(sorted);\n        },\n        sortByZIndex: function sortByZIndex() {\n          return this.sort(zIndexSort);\n        },\n        zDepth: function zDepth() {\n          var ele = this[0];\n\n          if (!ele) {\n            return undefined;\n          } // let cy = ele.cy();\n\n\n          var _p = ele._private;\n          var group = _p.group;\n\n          if (group === 'nodes') {\n            var depth = _p.data.parent ? ele.parents().size() : 0;\n\n            if (!ele.isParent()) {\n              return util.MAX_INT - 1; // childless nodes always on top\n            }\n\n            return depth;\n          } else {\n            var src = _p.source;\n            var tgt = _p.target;\n            var srcDepth = src.zDepth();\n            var tgtDepth = tgt.zDepth();\n            return Math.max(srcDepth, tgtDepth, 0); // depth of deepest parent\n          }\n        }\n      };\n      elesfn.each = elesfn.forEach;\n      module.exports = elesfn;\n      /***/\n    },\n    /* 65 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var Promise = __webpack_require__(5);\n\n      var math = __webpack_require__(2);\n\n      var elesfn = {\n        // Calculates and returns node dimensions { x, y } based on options given\n        layoutDimensions: function layoutDimensions(options) {\n          options = util.assign({\n            nodeDimensionsIncludeLabels: true\n          }, options);\n\n          if (options.nodeDimensionsIncludeLabels) {\n            var bbDim = this.boundingBox();\n            return {\n              w: bbDim.w,\n              h: bbDim.h\n            };\n          } else {\n            return {\n              w: this.outerWidth(),\n              h: this.outerHeight()\n            };\n          }\n        },\n        // using standard layout options, apply position function (w/ or w/o animation)\n        layoutPositions: function layoutPositions(layout, options, fn) {\n          var nodes = this.nodes();\n          var cy = this.cy();\n          var layoutEles = options.eles; // nodes & edges\n\n          var getMemoizeKey = function getMemoizeKey(node, i) {\n            return node.id() + '$' + i;\n          };\n\n          var fnMem = util.memoize(fn, getMemoizeKey); // memoized version of position function\n\n          layout.emit({\n            type: 'layoutstart',\n            layout: layout\n          });\n          layout.animations = [];\n\n          var calculateSpacing = function calculateSpacing(spacing, nodesBb, pos) {\n            var center = {\n              x: nodesBb.x1 + nodesBb.w / 2,\n              y: nodesBb.y1 + nodesBb.h / 2\n            };\n            var spacingVector = {\n              // scale from center of bounding box (not necessarily 0,0)\n              x: (pos.x - center.x) * spacing,\n              y: (pos.y - center.y) * spacing\n            };\n            return {\n              x: center.x + spacingVector.x,\n              y: center.y + spacingVector.y\n            };\n          };\n\n          var useSpacingFactor = options.spacingFactor && options.spacingFactor !== 1;\n\n          var spacingBb = function spacingBb() {\n            if (!useSpacingFactor) {\n              return null;\n            }\n\n            var bb = math.makeBoundingBox();\n\n            for (var i = 0; i < nodes.length; i++) {\n              var node = nodes[i];\n              var pos = fnMem(node, i);\n              math.expandBoundingBoxByPoint(bb, pos.x, pos.y);\n            }\n\n            return bb;\n          };\n\n          var bb = spacingBb();\n          var getFinalPos = util.memoize(function (node, i) {\n            var newPos = fnMem(node, i);\n            var pos = node.position();\n\n            if (!is.number(pos.x) || !is.number(pos.y)) {\n              node.silentPosition({\n                x: 0,\n                y: 0\n              });\n            }\n\n            if (useSpacingFactor) {\n              var spacing = Math.abs(options.spacingFactor);\n              newPos = calculateSpacing(spacing, bb, newPos);\n            }\n\n            if (options.transform != null) {\n              newPos = options.transform(node, newPos);\n            }\n\n            return newPos;\n          }, getMemoizeKey);\n\n          if (options.animate) {\n            for (var i = 0; i < nodes.length; i++) {\n              var node = nodes[i];\n              var newPos = getFinalPos(node, i);\n              var animateNode = options.animateFilter == null || options.animateFilter(node, i);\n\n              if (animateNode) {\n                var ani = node.animation({\n                  position: newPos,\n                  duration: options.animationDuration,\n                  easing: options.animationEasing\n                });\n                layout.animations.push(ani);\n                ani.play();\n              } else {\n                node.position(newPos);\n              }\n            }\n\n            if (options.fit) {\n              var fitAni = cy.animation({\n                fit: {\n                  boundingBox: layoutEles.boundingBoxAt(getFinalPos),\n                  padding: options.padding\n                },\n                duration: options.animationDuration,\n                easing: options.animationEasing\n              });\n              layout.animations.push(fitAni);\n              fitAni.play();\n            } else if (options.zoom !== undefined && options.pan !== undefined) {\n              var zoomPanAni = cy.animation({\n                zoom: options.zoom,\n                pan: options.pan,\n                duration: options.animationDuration,\n                easing: options.animationEasing\n              });\n              layout.animations.push(zoomPanAni);\n              zoomPanAni.play();\n            }\n\n            layout.one('layoutready', options.ready);\n            layout.emit({\n              type: 'layoutready',\n              layout: layout\n            });\n            Promise.all(layout.animations.map(function (ani) {\n              return ani.promise();\n            })).then(function () {\n              layout.one('layoutstop', options.stop);\n              layout.emit({\n                type: 'layoutstop',\n                layout: layout\n              });\n            });\n          } else {\n            nodes.positions(getFinalPos);\n\n            if (options.fit) {\n              cy.fit(options.eles, options.padding);\n            }\n\n            if (options.zoom != null) {\n              cy.zoom(options.zoom);\n            }\n\n            if (options.pan) {\n              cy.pan(options.pan);\n            }\n\n            layout.one('layoutready', options.ready);\n            layout.emit({\n              type: 'layoutready',\n              layout: layout\n            });\n            layout.one('layoutstop', options.stop);\n            layout.emit({\n              type: 'layoutstop',\n              layout: layout\n            });\n          }\n\n          return this; // chaining\n        },\n        layout: function layout(options) {\n          var cy = this.cy();\n          return cy.makeLayout(util.extend({}, options, {\n            eles: this\n          }));\n        }\n      }; // aliases:\n\n      elesfn.createLayout = elesfn.makeLayout = elesfn.layout;\n      module.exports = elesfn;\n      /***/\n    },\n    /* 66 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      function styleCache(key, fn, ele) {\n        var _p = ele._private;\n        var cache = _p.styleCache = _p.styleCache || {};\n        var val;\n\n        if ((val = cache[key]) != null) {\n          return val;\n        } else {\n          val = cache[key] = fn(ele);\n          return val;\n        }\n      }\n\n      function cacheStyleFunction(key, fn) {\n        return function cachedStyleFunction(ele) {\n          return styleCache(key, fn, ele);\n        };\n      }\n\n      function cachePrototypeStyleFunction(key, fn) {\n        var selfFn = function selfFn(ele) {\n          return fn.call(ele);\n        };\n\n        return function cachedPrototypeStyleFunction() {\n          var ele = this[0];\n\n          if (ele) {\n            return styleCache(key, selfFn, ele);\n          }\n        };\n      }\n\n      var elesfn = {\n        recalculateRenderedStyle: function recalculateRenderedStyle(useCache) {\n          var cy = this.cy();\n          var renderer = cy.renderer();\n          var styleEnabled = cy.styleEnabled();\n\n          if (renderer && styleEnabled) {\n            renderer.recalculateRenderedStyle(this, useCache);\n          }\n\n          return this;\n        },\n        dirtyStyleCache: function dirtyStyleCache() {\n          var cy = this.cy();\n\n          var dirty = function dirty(ele) {\n            return ele._private.styleCache = {};\n          };\n\n          if (cy.hasCompoundNodes()) {\n            var eles = void 0;\n            eles = this.spawnSelf().merge(this.descendants()).merge(this.parents());\n            eles.merge(eles.connectedEdges());\n            eles.forEach(dirty);\n          } else {\n            this.forEach(function (ele) {\n              dirty(ele);\n              ele.connectedEdges().forEach(dirty);\n            });\n          }\n\n          return this;\n        },\n        // fully updates (recalculates) the style for the elements\n        updateStyle: function updateStyle(notifyRenderer) {\n          var cy = this._private.cy;\n\n          if (!cy.styleEnabled()) {\n            return this;\n          }\n\n          if (cy._private.batchingStyle) {\n            var bEles = cy._private.batchStyleEles;\n            bEles.merge(this);\n            return this; // chaining and exit early when batching\n          }\n\n          var hasCompounds = cy.hasCompoundNodes();\n          var style = cy.style();\n          var updatedEles = this;\n          notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;\n\n          if (hasCompounds) {\n            // then add everything up and down for compound selector checks\n            updatedEles = this.spawnSelf().merge(this.descendants()).merge(this.parents());\n          }\n\n          var changedEles = style.apply(updatedEles);\n          changedEles.dirtyStyleCache();\n          changedEles.dirtyCompoundBoundsCache();\n\n          if (notifyRenderer) {\n            changedEles.emitAndNotify('style'); // let renderer know we changed style\n          } else {\n            changedEles.emit('style'); // just fire the event\n          }\n\n          return this; // chaining\n        },\n        // just update the mappers in the elements' styles; cheaper than eles.updateStyle()\n        updateMappers: function updateMappers(notifyRenderer) {\n          var cy = this._private.cy;\n          var style = cy.style();\n          notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;\n\n          if (!cy.styleEnabled()) {\n            return this;\n          }\n\n          var changedEles = style.updateMappers(this);\n          changedEles.dirtyStyleCache();\n          changedEles.dirtyCompoundBoundsCache();\n\n          if (notifyRenderer) {\n            changedEles.emitAndNotify('style'); // let renderer know we changed style\n          } else {\n            changedEles.emit('style'); // just fire the event\n          }\n\n          return this; // chaining\n        },\n        // get the internal parsed style object for the specified property\n        parsedStyle: function parsedStyle(property) {\n          var ele = this[0];\n          var cy = ele.cy();\n\n          if (!cy.styleEnabled()) {\n            return;\n          }\n\n          if (ele) {\n            return ele._private.style[property] || cy.style().getDefaultProperty(property);\n          }\n        },\n        numericStyle: function numericStyle(property) {\n          var ele = this[0];\n\n          if (!ele.cy().styleEnabled()) {\n            return;\n          }\n\n          if (ele) {\n            var pstyle = ele.pstyle(property);\n            return pstyle.pfValue !== undefined ? pstyle.pfValue : pstyle.value;\n          }\n        },\n        numericStyleUnits: function numericStyleUnits(property) {\n          var ele = this[0];\n\n          if (!ele.cy().styleEnabled()) {\n            return;\n          }\n\n          if (ele) {\n            return ele.pstyle(property).units;\n          }\n        },\n        // get the specified css property as a rendered value (i.e. on-screen value)\n        // or get the whole rendered style if no property specified (NB doesn't allow setting)\n        renderedStyle: function renderedStyle(property) {\n          var cy = this.cy();\n\n          if (!cy.styleEnabled()) {\n            return this;\n          }\n\n          var ele = this[0];\n\n          if (ele) {\n            return cy.style().getRenderedStyle(ele, property);\n          }\n        },\n        // read the calculated css style of the element or override the style (via a bypass)\n        style: function style(name, value) {\n          var cy = this.cy();\n\n          if (!cy.styleEnabled()) {\n            return this;\n          }\n\n          var updateTransitions = false;\n          var style = cy.style();\n\n          if (is.plainObject(name)) {\n            // then extend the bypass\n            var props = name;\n            style.applyBypass(this, props, updateTransitions);\n            this.dirtyStyleCache();\n            this.dirtyCompoundBoundsCache();\n            this.emitAndNotify('style'); // let the renderer know we've updated style\n          } else if (is.string(name)) {\n            if (value === undefined) {\n              // then get the property from the style\n              var ele = this[0];\n\n              if (ele) {\n                return style.getStylePropertyValue(ele, name);\n              } else {\n                // empty collection => can't get any value\n                return;\n              }\n            } else {\n              // then set the bypass with the property value\n              style.applyBypass(this, name, value, updateTransitions);\n              this.dirtyStyleCache();\n              this.dirtyCompoundBoundsCache();\n              this.emitAndNotify('style'); // let the renderer know we've updated style\n            }\n          } else if (name === undefined) {\n            var _ele = this[0];\n\n            if (_ele) {\n              return style.getRawStyle(_ele);\n            } else {\n              // empty collection => can't get any value\n              return;\n            }\n          }\n\n          return this; // chaining\n        },\n        removeStyle: function removeStyle(names) {\n          var cy = this.cy();\n\n          if (!cy.styleEnabled()) {\n            return this;\n          }\n\n          var updateTransitions = false;\n          var style = cy.style();\n          var eles = this;\n\n          if (names === undefined) {\n            for (var i = 0; i < eles.length; i++) {\n              var ele = eles[i];\n              style.removeAllBypasses(ele, updateTransitions);\n            }\n          } else {\n            names = names.split(/\\s+/);\n\n            for (var _i = 0; _i < eles.length; _i++) {\n              var _ele2 = eles[_i];\n              style.removeBypasses(_ele2, names, updateTransitions);\n            }\n          }\n\n          this.dirtyStyleCache();\n          this.dirtyCompoundBoundsCache();\n          this.emitAndNotify('style'); // let the renderer know we've updated style\n\n          return this; // chaining\n        },\n        show: function show() {\n          this.css('display', 'element');\n          return this; // chaining\n        },\n        hide: function hide() {\n          this.css('display', 'none');\n          return this; // chaining\n        },\n        effectiveOpacity: function effectiveOpacity() {\n          var cy = this.cy();\n\n          if (!cy.styleEnabled()) {\n            return 1;\n          }\n\n          var hasCompoundNodes = cy.hasCompoundNodes();\n          var ele = this[0];\n\n          if (ele) {\n            var _p = ele._private;\n            var parentOpacity = ele.pstyle('opacity').value;\n\n            if (!hasCompoundNodes) {\n              return parentOpacity;\n            }\n\n            var parents = !_p.data.parent ? null : ele.parents();\n\n            if (parents) {\n              for (var i = 0; i < parents.length; i++) {\n                var parent = parents[i];\n                var opacity = parent.pstyle('opacity').value;\n                parentOpacity = opacity * parentOpacity;\n              }\n            }\n\n            return parentOpacity;\n          }\n        },\n        transparent: function transparent() {\n          var cy = this.cy();\n\n          if (!cy.styleEnabled()) {\n            return false;\n          }\n\n          var ele = this[0];\n          var hasCompoundNodes = ele.cy().hasCompoundNodes();\n\n          if (ele) {\n            if (!hasCompoundNodes) {\n              return ele.pstyle('opacity').value === 0;\n            } else {\n              return ele.effectiveOpacity() === 0;\n            }\n          }\n        },\n        backgrounding: function backgrounding() {\n          var cy = this.cy();\n\n          if (!cy.styleEnabled()) {\n            return false;\n          }\n\n          var ele = this[0];\n          return ele._private.backgrounding ? true : false;\n        }\n      };\n\n      function checkCompound(ele, parentOk) {\n        var _p = ele._private;\n        var parents = _p.data.parent ? ele.parents() : null;\n\n        if (parents) {\n          for (var i = 0; i < parents.length; i++) {\n            var parent = parents[i];\n\n            if (!parentOk(parent)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      function defineDerivedStateFunction(specs) {\n        var ok = specs.ok;\n        var edgeOkViaNode = specs.edgeOkViaNode || specs.ok;\n        var parentOk = specs.parentOk || specs.ok;\n        return function () {\n          var cy = this.cy();\n\n          if (!cy.styleEnabled()) {\n            return true;\n          }\n\n          var ele = this[0];\n          var hasCompoundNodes = cy.hasCompoundNodes();\n\n          if (ele) {\n            var _p = ele._private;\n\n            if (!ok(ele)) {\n              return false;\n            }\n\n            if (ele.isNode()) {\n              return !hasCompoundNodes || checkCompound(ele, parentOk);\n            } else {\n              var src = _p.source;\n              var tgt = _p.target;\n              return edgeOkViaNode(src) && (!hasCompoundNodes || checkCompound(src, edgeOkViaNode)) && (src === tgt || edgeOkViaNode(tgt) && (!hasCompoundNodes || checkCompound(tgt, edgeOkViaNode)));\n            }\n          }\n        };\n      }\n\n      var eleTakesUpSpace = cacheStyleFunction('eleTakesUpSpace', function (ele) {\n        return ele.pstyle('display').value === 'element' && ele.width() !== 0 && (ele.isNode() ? ele.height() !== 0 : true);\n      });\n      elesfn.takesUpSpace = cachePrototypeStyleFunction('takesUpSpace', defineDerivedStateFunction({\n        ok: eleTakesUpSpace\n      }));\n      var eleInteractive = cacheStyleFunction('eleInteractive', function (ele) {\n        return ele.pstyle('events').value === 'yes' && ele.pstyle('visibility').value === 'visible' && eleTakesUpSpace(ele);\n      });\n      var parentInteractive = cacheStyleFunction('parentInteractive', function (parent) {\n        return parent.pstyle('visibility').value === 'visible' && eleTakesUpSpace(parent);\n      });\n      elesfn.interactive = cachePrototypeStyleFunction('interactive', defineDerivedStateFunction({\n        ok: eleInteractive,\n        parentOk: parentInteractive,\n        edgeOkViaNode: eleTakesUpSpace\n      }));\n\n      elesfn.noninteractive = function () {\n        var ele = this[0];\n\n        if (ele) {\n          return !ele.interactive();\n        }\n      };\n\n      var eleVisible = cacheStyleFunction('eleVisible', function (ele) {\n        return ele.pstyle('visibility').value === 'visible' && ele.pstyle('opacity').pfValue !== 0 && eleTakesUpSpace(ele);\n      });\n      var edgeVisibleViaNode = eleTakesUpSpace;\n      elesfn.visible = cachePrototypeStyleFunction('visible', defineDerivedStateFunction({\n        ok: eleVisible,\n        edgeOkViaNode: edgeVisibleViaNode\n      }));\n\n      elesfn.hidden = function () {\n        var ele = this[0];\n\n        if (ele) {\n          return !ele.visible();\n        }\n      };\n\n      elesfn.bypass = elesfn.css = elesfn.style;\n      elesfn.renderedCss = elesfn.renderedStyle;\n      elesfn.removeBypass = elesfn.removeCss = elesfn.removeStyle;\n      elesfn.pstyle = elesfn.parsedStyle;\n      module.exports = elesfn;\n      /***/\n    },\n    /* 67 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var elesfn = {};\n\n      function defineSwitchFunction(params) {\n        return function () {\n          var args = arguments;\n          var changedEles = []; // e.g. cy.nodes().select( data, handler )\n\n          if (args.length === 2) {\n            var data = args[0];\n            var handler = args[1];\n            this.on(params.event, data, handler);\n          } // e.g. cy.nodes().select( handler )\n          else if (args.length === 1) {\n              var _handler = args[0];\n              this.on(params.event, _handler);\n            } // e.g. cy.nodes().select()\n            else if (args.length === 0) {\n                for (var i = 0; i < this.length; i++) {\n                  var ele = this[i];\n                  var able = !params.ableField || ele._private[params.ableField];\n                  var changed = ele._private[params.field] != params.value;\n\n                  if (params.overrideAble) {\n                    var overrideAble = params.overrideAble(ele);\n\n                    if (overrideAble !== undefined) {\n                      able = overrideAble;\n\n                      if (!overrideAble) {\n                        return this;\n                      } // to save cycles assume not able for all on override\n\n                    }\n                  }\n\n                  if (able) {\n                    ele._private[params.field] = params.value;\n\n                    if (changed) {\n                      changedEles.push(ele);\n                    }\n                  }\n                }\n\n                var changedColl = this.spawn(changedEles);\n                changedColl.updateStyle(); // change of state => possible change of style\n\n                changedColl.emit(params.event);\n              }\n\n          return this;\n        };\n      }\n\n      function defineSwitchSet(params) {\n        elesfn[params.field] = function () {\n          var ele = this[0];\n\n          if (ele) {\n            if (params.overrideField) {\n              var val = params.overrideField(ele);\n\n              if (val !== undefined) {\n                return val;\n              }\n            }\n\n            return ele._private[params.field];\n          }\n        };\n\n        elesfn[params.on] = defineSwitchFunction({\n          event: params.on,\n          field: params.field,\n          ableField: params.ableField,\n          overrideAble: params.overrideAble,\n          value: true\n        });\n        elesfn[params.off] = defineSwitchFunction({\n          event: params.off,\n          field: params.field,\n          ableField: params.ableField,\n          overrideAble: params.overrideAble,\n          value: false\n        });\n      }\n\n      defineSwitchSet({\n        field: 'locked',\n        overrideField: function overrideField(ele) {\n          return ele.cy().autolock() ? true : undefined;\n        },\n        on: 'lock',\n        off: 'unlock'\n      });\n      defineSwitchSet({\n        field: 'grabbable',\n        overrideField: function overrideField(ele) {\n          return ele.cy().autoungrabify() ? false : undefined;\n        },\n        on: 'grabify',\n        off: 'ungrabify'\n      });\n      defineSwitchSet({\n        field: 'selected',\n        ableField: 'selectable',\n        overrideAble: function overrideAble(ele) {\n          return ele.cy().autounselectify() ? false : undefined;\n        },\n        on: 'select',\n        off: 'unselect'\n      });\n      defineSwitchSet({\n        field: 'selectable',\n        overrideField: function overrideField(ele) {\n          return ele.cy().autounselectify() ? false : undefined;\n        },\n        on: 'selectify',\n        off: 'unselectify'\n      });\n      elesfn.deselect = elesfn.unselect;\n\n      elesfn.grabbed = function () {\n        var ele = this[0];\n\n        if (ele) {\n          return ele._private.grabbed;\n        }\n      };\n\n      defineSwitchSet({\n        field: 'active',\n        on: 'activate',\n        off: 'unactivate'\n      });\n\n      elesfn.inactive = function () {\n        var ele = this[0];\n\n        if (ele) {\n          return !ele._private.active;\n        }\n      };\n\n      module.exports = elesfn;\n      /***/\n    },\n    /* 68 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var is = __webpack_require__(0);\n\n      var elesfn = {};\n\n      var cache = function cache(fn, name) {\n        return function traversalCache(arg1, arg2, arg3, arg4) {\n          var selectorOrEles = arg1;\n          var eles = this;\n          var key = void 0;\n\n          if (selectorOrEles == null) {\n            key = 'null';\n          } else if (is.elementOrCollection(selectorOrEles) && selectorOrEles.length === 1) {\n            key = '#' + selectorOrEles.id();\n          }\n\n          if (eles.length === 1 && key) {\n            var _p = eles[0]._private;\n            var tch = _p.traversalCache = _p.traversalCache || {};\n            var ch = tch[name] = tch[name] || {};\n            var cacheHit = ch[key];\n\n            if (cacheHit) {\n              return cacheHit;\n            } else {\n              return ch[key] = fn.call(eles, arg1, arg2, arg3, arg4);\n            }\n          } else {\n            return fn.call(eles, arg1, arg2, arg3, arg4);\n          }\n        };\n      }; // DAG functions\n      ////////////////\n\n\n      var defineDagExtremity = function defineDagExtremity(params) {\n        return function dagExtremityImpl(selector) {\n          var eles = this;\n          var ret = [];\n\n          for (var i = 0; i < eles.length; i++) {\n            var ele = eles[i];\n\n            if (!ele.isNode()) {\n              continue;\n            }\n\n            var disqualified = false;\n            var edges = ele.connectedEdges();\n\n            for (var j = 0; j < edges.length; j++) {\n              var edge = edges[j];\n              var src = edge.source();\n              var tgt = edge.target();\n\n              if (params.noIncomingEdges && tgt === ele && src !== ele || params.noOutgoingEdges && src === ele && tgt !== ele) {\n                disqualified = true;\n                break;\n              }\n            }\n\n            if (!disqualified) {\n              ret.push(ele);\n            }\n          }\n\n          return this.spawn(ret, {\n            unique: true\n          }).filter(selector);\n        };\n      };\n\n      var defineDagOneHop = function defineDagOneHop(params) {\n        return function (selector) {\n          var eles = this;\n          var oEles = [];\n\n          for (var i = 0; i < eles.length; i++) {\n            var ele = eles[i];\n\n            if (!ele.isNode()) {\n              continue;\n            }\n\n            var edges = ele.connectedEdges();\n\n            for (var j = 0; j < edges.length; j++) {\n              var edge = edges[j];\n              var src = edge.source();\n              var tgt = edge.target();\n\n              if (params.outgoing && src === ele) {\n                oEles.push(edge);\n                oEles.push(tgt);\n              } else if (params.incoming && tgt === ele) {\n                oEles.push(edge);\n                oEles.push(src);\n              }\n            }\n          }\n\n          return this.spawn(oEles, {\n            unique: true\n          }).filter(selector);\n        };\n      };\n\n      var defineDagAllHops = function defineDagAllHops(params) {\n        return function (selector) {\n          var eles = this;\n          var sEles = [];\n          var sElesIds = {};\n\n          for (;;) {\n            var next = params.outgoing ? eles.outgoers() : eles.incomers();\n\n            if (next.length === 0) {\n              break;\n            } // done if none left\n\n\n            var newNext = false;\n\n            for (var i = 0; i < next.length; i++) {\n              var n = next[i];\n              var nid = n.id();\n\n              if (!sElesIds[nid]) {\n                sElesIds[nid] = true;\n                sEles.push(n);\n                newNext = true;\n              }\n            }\n\n            if (!newNext) {\n              break;\n            } // done if touched all outgoers already\n\n\n            eles = next;\n          }\n\n          return this.spawn(sEles, {\n            unique: true\n          }).filter(selector);\n        };\n      };\n\n      elesfn.clearTraversalCache = function () {\n        for (var i = 0; i < this.length; i++) {\n          this[i]._private.traversalCache = null;\n        }\n      };\n\n      util.extend(elesfn, {\n        // get the root nodes in the DAG\n        roots: defineDagExtremity({\n          noIncomingEdges: true\n        }),\n        // get the leaf nodes in the DAG\n        leaves: defineDagExtremity({\n          noOutgoingEdges: true\n        }),\n        // normally called children in graph theory\n        // these nodes =edges=> outgoing nodes\n        outgoers: cache(defineDagOneHop({\n          outgoing: true\n        }), 'outgoers'),\n        // aka DAG descendants\n        successors: defineDagAllHops({\n          outgoing: true\n        }),\n        // normally called parents in graph theory\n        // these nodes <=edges= incoming nodes\n        incomers: cache(defineDagOneHop({\n          incoming: true\n        }), 'incomers'),\n        // aka DAG ancestors\n        predecessors: defineDagAllHops({\n          incoming: true\n        })\n      }); // Neighbourhood functions\n      //////////////////////////\n\n      util.extend(elesfn, {\n        neighborhood: cache(function (selector) {\n          var elements = [];\n          var nodes = this.nodes();\n\n          for (var i = 0; i < nodes.length; i++) {\n            // for all nodes\n            var node = nodes[i];\n            var connectedEdges = node.connectedEdges(); // for each connected edge, add the edge and the other node\n\n            for (var j = 0; j < connectedEdges.length; j++) {\n              var edge = connectedEdges[j];\n              var src = edge.source();\n              var tgt = edge.target();\n              var otherNode = node === src ? tgt : src; // need check in case of loop\n\n              if (otherNode.length > 0) {\n                elements.push(otherNode[0]); // add node 1 hop away\n              } // add connected edge\n\n\n              elements.push(edge[0]);\n            }\n          }\n\n          return this.spawn(elements, {\n            unique: true\n          }).filter(selector);\n        }, 'neighborhood'),\n        closedNeighborhood: function closedNeighborhood(selector) {\n          return this.neighborhood().add(this).filter(selector);\n        },\n        openNeighborhood: function openNeighborhood(selector) {\n          return this.neighborhood(selector);\n        }\n      }); // aliases\n\n      elesfn.neighbourhood = elesfn.neighborhood;\n      elesfn.closedNeighbourhood = elesfn.closedNeighborhood;\n      elesfn.openNeighbourhood = elesfn.openNeighborhood; // Edge functions\n      /////////////////\n\n      util.extend(elesfn, {\n        source: cache(function sourceImpl(selector) {\n          var ele = this[0];\n          var src = void 0;\n\n          if (ele) {\n            src = ele._private.source || ele.cy().collection();\n          }\n\n          return src && selector ? src.filter(selector) : src;\n        }, 'source'),\n        target: cache(function targetImpl(selector) {\n          var ele = this[0];\n          var tgt = void 0;\n\n          if (ele) {\n            tgt = ele._private.target || ele.cy().collection();\n          }\n\n          return tgt && selector ? tgt.filter(selector) : tgt;\n        }, 'target'),\n        sources: defineSourceFunction({\n          attr: 'source'\n        }),\n        targets: defineSourceFunction({\n          attr: 'target'\n        })\n      });\n\n      function defineSourceFunction(params) {\n        return function sourceImpl(selector) {\n          var sources = [];\n\n          for (var i = 0; i < this.length; i++) {\n            var ele = this[i];\n            var src = ele._private[params.attr];\n\n            if (src) {\n              sources.push(src);\n            }\n          }\n\n          return this.spawn(sources, {\n            unique: true\n          }).filter(selector);\n        };\n      }\n\n      util.extend(elesfn, {\n        edgesWith: cache(defineEdgesWithFunction(), 'edgesWith'),\n        edgesTo: cache(defineEdgesWithFunction({\n          thisIsSrc: true\n        }), 'edgesTo')\n      });\n\n      function defineEdgesWithFunction(params) {\n        return function edgesWithImpl(otherNodes) {\n          var elements = [];\n          var cy = this._private.cy;\n          var p = params || {}; // get elements if a selector is specified\n\n          if (is.string(otherNodes)) {\n            otherNodes = cy.$(otherNodes);\n          }\n\n          for (var h = 0; h < otherNodes.length; h++) {\n            var edges = otherNodes[h]._private.edges;\n\n            for (var i = 0; i < edges.length; i++) {\n              var edge = edges[i];\n              var edgeData = edge._private.data;\n              var thisToOther = this.hasElementWithId(edgeData.source) && otherNodes.hasElementWithId(edgeData.target);\n              var otherToThis = otherNodes.hasElementWithId(edgeData.source) && this.hasElementWithId(edgeData.target);\n              var edgeConnectsThisAndOther = thisToOther || otherToThis;\n\n              if (!edgeConnectsThisAndOther) {\n                continue;\n              }\n\n              if (p.thisIsSrc || p.thisIsTgt) {\n                if (p.thisIsSrc && !thisToOther) {\n                  continue;\n                }\n\n                if (p.thisIsTgt && !otherToThis) {\n                  continue;\n                }\n              }\n\n              elements.push(edge);\n            }\n          }\n\n          return this.spawn(elements, {\n            unique: true\n          });\n        };\n      }\n\n      util.extend(elesfn, {\n        connectedEdges: cache(function (selector) {\n          var retEles = [];\n          var eles = this;\n\n          for (var i = 0; i < eles.length; i++) {\n            var node = eles[i];\n\n            if (!node.isNode()) {\n              continue;\n            }\n\n            var edges = node._private.edges;\n\n            for (var j = 0; j < edges.length; j++) {\n              var edge = edges[j];\n              retEles.push(edge);\n            }\n          }\n\n          return this.spawn(retEles, {\n            unique: true\n          }).filter(selector);\n        }, 'connectedEdges'),\n        connectedNodes: cache(function (selector) {\n          var retEles = [];\n          var eles = this;\n\n          for (var i = 0; i < eles.length; i++) {\n            var edge = eles[i];\n\n            if (!edge.isEdge()) {\n              continue;\n            }\n\n            retEles.push(edge.source()[0]);\n            retEles.push(edge.target()[0]);\n          }\n\n          return this.spawn(retEles, {\n            unique: true\n          }).filter(selector);\n        }, 'connectedNodes'),\n        parallelEdges: cache(defineParallelEdgesFunction(), 'parallelEdges'),\n        codirectedEdges: cache(defineParallelEdgesFunction({\n          codirected: true\n        }), 'codirectedEdges')\n      });\n\n      function defineParallelEdgesFunction(params) {\n        var defaults = {\n          codirected: false\n        };\n        params = util.extend({}, defaults, params);\n        return function parallelEdgesImpl(selector) {\n          // micro-optimised for renderer\n          var elements = [];\n          var edges = this.edges();\n          var p = params; // look at all the edges in the collection\n\n          for (var i = 0; i < edges.length; i++) {\n            var edge1 = edges[i];\n            var edge1_p = edge1._private;\n            var src1 = edge1_p.source;\n            var srcid1 = src1._private.data.id;\n            var tgtid1 = edge1_p.data.target;\n            var srcEdges1 = src1._private.edges; // look at edges connected to the src node of this edge\n\n            for (var j = 0; j < srcEdges1.length; j++) {\n              var edge2 = srcEdges1[j];\n              var edge2data = edge2._private.data;\n              var tgtid2 = edge2data.target;\n              var srcid2 = edge2data.source;\n              var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;\n              var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;\n\n              if (p.codirected && codirected || !p.codirected && (codirected || oppdirected)) {\n                elements.push(edge2);\n              }\n            }\n          }\n\n          return this.spawn(elements, {\n            unique: true\n          }).filter(selector);\n        };\n      } // Misc functions\n      /////////////////\n\n\n      util.extend(elesfn, {\n        components: function components() {\n          var self = this;\n          var cy = self.cy();\n          var visited = self.spawn();\n          var unvisited = self.nodes().spawnSelf();\n          var components = [];\n\n          var visitInComponent = function visitInComponent(node, component) {\n            visited.merge(node);\n            unvisited.unmerge(node);\n            component.merge(node);\n          };\n\n          if (unvisited.empty()) {\n            return self.spawn();\n          }\n\n          var _loop = function _loop() {\n            var component = cy.collection();\n            components.push(component);\n            var root = unvisited[0];\n            visitInComponent(root, component);\n            self.bfs({\n              directed: false,\n              roots: root,\n              visit: function visit(v, e, u, i, depth) {\n                visitInComponent(v, component);\n              }\n            });\n          };\n\n          do {\n            _loop();\n          } while (unvisited.length > 0);\n\n          return components.map(function (component) {\n            var connectedEdges = component.connectedEdges().stdFilter(function (edge) {\n              return component.anySame(edge.source()) && component.anySame(edge.target());\n            });\n            return component.union(connectedEdges);\n          });\n        }\n      });\n      module.exports = elesfn;\n      /***/\n    },\n    /* 69 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var Collection = __webpack_require__(7);\n\n      var Element = __webpack_require__(14);\n\n      var corefn = {\n        add: function add(opts) {\n          var elements = void 0;\n          var cy = this; // add the elements\n\n          if (is.elementOrCollection(opts)) {\n            var eles = opts;\n\n            if (eles._private.cy === cy) {\n              // same instance => just restore\n              elements = eles.restore();\n            } else {\n              // otherwise, copy from json\n              var jsons = [];\n\n              for (var i = 0; i < eles.length; i++) {\n                var ele = eles[i];\n                jsons.push(ele.json());\n              }\n\n              elements = new Collection(cy, jsons);\n            }\n          } // specify an array of options\n          else if (is.array(opts)) {\n              var _jsons = opts;\n              elements = new Collection(cy, _jsons);\n            } // specify via opts.nodes and opts.edges\n            else if (is.plainObject(opts) && (is.array(opts.nodes) || is.array(opts.edges))) {\n                var elesByGroup = opts;\n                var _jsons2 = [];\n                var grs = ['nodes', 'edges'];\n\n                for (var _i = 0, il = grs.length; _i < il; _i++) {\n                  var group = grs[_i];\n                  var elesArray = elesByGroup[group];\n\n                  if (is.array(elesArray)) {\n                    for (var j = 0, jl = elesArray.length; j < jl; j++) {\n                      var json = util.extend({\n                        group: group\n                      }, elesArray[j]);\n\n                      _jsons2.push(json);\n                    }\n                  }\n                }\n\n                elements = new Collection(cy, _jsons2);\n              } // specify options for one element\n              else {\n                  var _json = opts;\n                  elements = new Element(cy, _json).collection();\n                }\n\n          return elements;\n        },\n        remove: function remove(collection) {\n          if (is.elementOrCollection(collection)) {// already have right ref\n          } else if (is.string(collection)) {\n            var selector = collection;\n            collection = this.$(selector);\n          }\n\n          return collection.remove();\n        }\n      };\n      module.exports = corefn;\n      /***/\n    },\n    /* 70 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var define = __webpack_require__(4);\n\n      var util = __webpack_require__(1);\n\n      var stepAll = __webpack_require__(71);\n\n      var corefn = {\n        // pull in animation functions\n        animate: define.animate(),\n        animation: define.animation(),\n        animated: define.animated(),\n        clearQueue: define.clearQueue(),\n        delay: define.delay(),\n        delayAnimation: define.delayAnimation(),\n        stop: define.stop(),\n        addToAnimationPool: function addToAnimationPool(eles) {\n          var cy = this;\n\n          if (!cy.styleEnabled()) {\n            return;\n          } // save cycles when no style used\n\n\n          cy._private.aniEles.merge(eles);\n        },\n        stopAnimationLoop: function stopAnimationLoop() {\n          this._private.animationsRunning = false;\n        },\n        startAnimationLoop: function startAnimationLoop() {\n          var cy = this;\n          cy._private.animationsRunning = true;\n\n          if (!cy.styleEnabled()) {\n            return;\n          } // save cycles when no style used\n          // NB the animation loop will exec in headless environments if style enabled\n          // and explicit cy.destroy() is necessary to stop the loop\n\n\n          function headlessStep() {\n            if (!cy._private.animationsRunning) {\n              return;\n            }\n\n            util.requestAnimationFrame(function animationStep(now) {\n              stepAll(now, cy);\n              headlessStep();\n            });\n          }\n\n          var renderer = cy.renderer();\n\n          if (renderer && renderer.beforeRender) {\n            // let the renderer schedule animations\n            renderer.beforeRender(function rendererAnimationStep(willDraw, now) {\n              stepAll(now, cy);\n            }, renderer.beforeRenderPriorities.animations);\n          } else {\n            // manage the animation loop ourselves\n            headlessStep(); // first call\n          }\n        }\n      };\n      module.exports = corefn;\n      /***/\n    },\n    /* 71 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var step = __webpack_require__(72);\n\n      var startAnimation = __webpack_require__(77);\n\n      function stepAll(now, cy) {\n        var eles = cy._private.aniEles;\n        var doneEles = [];\n\n        function stepOne(ele, isCore) {\n          var _p = ele._private;\n          var current = _p.animation.current;\n          var queue = _p.animation.queue;\n          var ranAnis = false; // cancel all animations on display:none ele\n\n          if (!isCore && ele.pstyle('display').value === 'none') {\n            // put all current and queue animations in this tick's current list\n            // and empty the lists for the element\n            current = current.splice(0, current.length).concat(queue.splice(0, queue.length)); // stop all animations\n\n            for (var i = 0; i < current.length; i++) {\n              current[i].stop();\n            }\n          } // if nothing currently animating, get something from the queue\n\n\n          if (current.length === 0) {\n            var next = queue.shift();\n\n            if (next) {\n              current.push(next);\n            }\n          }\n\n          var callbacks = function callbacks(_callbacks) {\n            for (var j = _callbacks.length - 1; j >= 0; j--) {\n              var cb = _callbacks[j];\n              cb();\n            }\n\n            _callbacks.splice(0, _callbacks.length);\n          }; // step and remove if done\n\n\n          for (var _i = current.length - 1; _i >= 0; _i--) {\n            var ani = current[_i];\n            var ani_p = ani._private;\n\n            if (ani_p.stopped) {\n              current.splice(_i, 1);\n              ani_p.hooked = false;\n              ani_p.playing = false;\n              ani_p.started = false;\n              callbacks(ani_p.frames);\n              continue;\n            }\n\n            if (!ani_p.playing && !ani_p.applying) {\n              continue;\n            } // an apply() while playing shouldn't do anything\n\n\n            if (ani_p.playing && ani_p.applying) {\n              ani_p.applying = false;\n            }\n\n            if (!ani_p.started) {\n              startAnimation(ele, ani, now, isCore);\n            }\n\n            step(ele, ani, now, isCore);\n\n            if (ani_p.applying) {\n              ani_p.applying = false;\n            }\n\n            callbacks(ani_p.frames);\n\n            if (ani.completed()) {\n              current.splice(_i, 1);\n              ani_p.hooked = false;\n              ani_p.playing = false;\n              ani_p.started = false;\n              callbacks(ani_p.completes);\n            }\n\n            ranAnis = true;\n          }\n\n          if (!isCore && current.length === 0 && queue.length === 0) {\n            doneEles.push(ele);\n          }\n\n          return ranAnis;\n        } // stepElement\n        // handle all eles\n\n\n        var ranEleAni = false;\n\n        for (var e = 0; e < eles.length; e++) {\n          var ele = eles[e];\n          var handledThisEle = stepOne(ele);\n          ranEleAni = ranEleAni || handledThisEle;\n        } // each element\n\n\n        var ranCoreAni = stepOne(cy, true); // notify renderer\n\n        if (ranEleAni || ranCoreAni) {\n          if (eles.length > 0) {\n            eles.dirtyCompoundBoundsCache();\n            cy.notify({\n              type: 'draw',\n              eles: eles\n            });\n          } else {\n            cy.notify({\n              type: 'draw'\n            });\n          }\n        } // remove elements from list of currently animating if its queues are empty\n\n\n        eles.unmerge(doneEles);\n        cy.emit('step');\n      } // stepAll\n\n\n      module.exports = stepAll;\n      /***/\n    },\n    /* 72 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var easings = __webpack_require__(73);\n\n      var ease = __webpack_require__(76);\n\n      var is = __webpack_require__(0);\n\n      function step(self, ani, now, isCore) {\n        var isEles = !isCore;\n        var _p = self._private;\n        var ani_p = ani._private;\n        var pEasing = ani_p.easing;\n        var startTime = ani_p.startTime;\n        var cy = isCore ? self : self.cy();\n        var style = cy.style();\n\n        if (!ani_p.easingImpl) {\n          if (pEasing == null) {\n            // use default\n            ani_p.easingImpl = easings['linear'];\n          } else {\n            // then define w/ name\n            var easingVals = void 0;\n\n            if (is.string(pEasing)) {\n              var easingProp = style.parse('transition-timing-function', pEasing);\n              easingVals = easingProp.value;\n            } else {\n              // then assume preparsed array\n              easingVals = pEasing;\n            }\n\n            var name = void 0,\n                args = void 0;\n\n            if (is.string(easingVals)) {\n              name = easingVals;\n              args = [];\n            } else {\n              name = easingVals[1];\n              args = easingVals.slice(2).map(function (n) {\n                return +n;\n              });\n            }\n\n            if (args.length > 0) {\n              // create with args\n              if (name === 'spring') {\n                args.push(ani_p.duration); // need duration to generate spring\n              }\n\n              ani_p.easingImpl = easings[name].apply(null, args);\n            } else {\n              // static impl by name\n              ani_p.easingImpl = easings[name];\n            }\n          }\n        }\n\n        var easing = ani_p.easingImpl;\n        var percent = void 0;\n\n        if (ani_p.duration === 0) {\n          percent = 1;\n        } else {\n          percent = (now - startTime) / ani_p.duration;\n        }\n\n        if (ani_p.applying) {\n          percent = ani_p.progress;\n        }\n\n        if (percent < 0) {\n          percent = 0;\n        } else if (percent > 1) {\n          percent = 1;\n        }\n\n        if (ani_p.delay == null) {\n          // then update\n          var startPos = ani_p.startPosition;\n          var endPos = ani_p.position;\n\n          if (endPos && isEles && !self.locked()) {\n            var pos = self.position();\n\n            if (valid(startPos.x, endPos.x)) {\n              pos.x = ease(startPos.x, endPos.x, percent, easing);\n            }\n\n            if (valid(startPos.y, endPos.y)) {\n              pos.y = ease(startPos.y, endPos.y, percent, easing);\n            }\n\n            self.emit('position');\n          }\n\n          var startPan = ani_p.startPan;\n          var endPan = ani_p.pan;\n          var pan = _p.pan;\n          var animatingPan = endPan != null && isCore;\n\n          if (animatingPan) {\n            if (valid(startPan.x, endPan.x)) {\n              pan.x = ease(startPan.x, endPan.x, percent, easing);\n            }\n\n            if (valid(startPan.y, endPan.y)) {\n              pan.y = ease(startPan.y, endPan.y, percent, easing);\n            }\n\n            self.emit('pan');\n          }\n\n          var startZoom = ani_p.startZoom;\n          var endZoom = ani_p.zoom;\n          var animatingZoom = endZoom != null && isCore;\n\n          if (animatingZoom) {\n            if (valid(startZoom, endZoom)) {\n              _p.zoom = ease(startZoom, endZoom, percent, easing);\n            }\n\n            self.emit('zoom');\n          }\n\n          if (animatingPan || animatingZoom) {\n            self.emit('viewport');\n          }\n\n          var props = ani_p.style;\n\n          if (props && props.length > 0 && isEles) {\n            for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              var _name = prop.name;\n              var end = prop;\n              var start = ani_p.startStyle[_name];\n              var propSpec = style.properties[start.name];\n              var easedVal = ease(start, end, percent, easing, propSpec);\n              style.overrideBypass(self, _name, easedVal);\n            } // for props\n\n\n            self.emit('style');\n          } // if\n\n        }\n\n        ani_p.progress = percent;\n        return percent;\n      }\n\n      function valid(start, end) {\n        if (start == null || end == null) {\n          return false;\n        }\n\n        if (is.number(start) && is.number(end)) {\n          return true;\n        } else if (start && end) {\n          return true;\n        }\n\n        return false;\n      }\n\n      module.exports = step;\n      /***/\n    },\n    /* 73 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var generateCubicBezier = __webpack_require__(74);\n\n      var generateSpringRK4 = __webpack_require__(75);\n\n      var cubicBezier = function cubicBezier(t1, p1, t2, p2) {\n        var bezier = generateCubicBezier(t1, p1, t2, p2);\n        return function (start, end, percent) {\n          return start + (end - start) * bezier(percent);\n        };\n      };\n\n      var easings = {\n        'linear': function linear(start, end, percent) {\n          return start + (end - start) * percent;\n        },\n        // default easings\n        'ease': cubicBezier(0.25, 0.1, 0.25, 1),\n        'ease-in': cubicBezier(0.42, 0, 1, 1),\n        'ease-out': cubicBezier(0, 0, 0.58, 1),\n        'ease-in-out': cubicBezier(0.42, 0, 0.58, 1),\n        // sine\n        'ease-in-sine': cubicBezier(0.47, 0, 0.745, 0.715),\n        'ease-out-sine': cubicBezier(0.39, 0.575, 0.565, 1),\n        'ease-in-out-sine': cubicBezier(0.445, 0.05, 0.55, 0.95),\n        // quad\n        'ease-in-quad': cubicBezier(0.55, 0.085, 0.68, 0.53),\n        'ease-out-quad': cubicBezier(0.25, 0.46, 0.45, 0.94),\n        'ease-in-out-quad': cubicBezier(0.455, 0.03, 0.515, 0.955),\n        // cubic\n        'ease-in-cubic': cubicBezier(0.55, 0.055, 0.675, 0.19),\n        'ease-out-cubic': cubicBezier(0.215, 0.61, 0.355, 1),\n        'ease-in-out-cubic': cubicBezier(0.645, 0.045, 0.355, 1),\n        // quart\n        'ease-in-quart': cubicBezier(0.895, 0.03, 0.685, 0.22),\n        'ease-out-quart': cubicBezier(0.165, 0.84, 0.44, 1),\n        'ease-in-out-quart': cubicBezier(0.77, 0, 0.175, 1),\n        // quint\n        'ease-in-quint': cubicBezier(0.755, 0.05, 0.855, 0.06),\n        'ease-out-quint': cubicBezier(0.23, 1, 0.32, 1),\n        'ease-in-out-quint': cubicBezier(0.86, 0, 0.07, 1),\n        // expo\n        'ease-in-expo': cubicBezier(0.95, 0.05, 0.795, 0.035),\n        'ease-out-expo': cubicBezier(0.19, 1, 0.22, 1),\n        'ease-in-out-expo': cubicBezier(1, 0, 0, 1),\n        // circ\n        'ease-in-circ': cubicBezier(0.6, 0.04, 0.98, 0.335),\n        'ease-out-circ': cubicBezier(0.075, 0.82, 0.165, 1),\n        'ease-in-out-circ': cubicBezier(0.785, 0.135, 0.15, 0.86),\n        // user param easings...\n        'spring': function spring(tension, friction, duration) {\n          if (duration === 0) {\n            // can't get a spring w/ duration 0\n            return easings.linear; // duration 0 => jump to end so impl doesn't matter\n          }\n\n          var spring = generateSpringRK4(tension, friction, duration);\n          return function (start, end, percent) {\n            return start + (end - start) * spring(percent);\n          };\n        },\n        'cubic-bezier': cubicBezier\n      };\n      module.exports = easings;\n      /***/\n    },\n    /* 74 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /* global Float32Array */\n\n      /*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */\n\n      function generateCubicBezier(mX1, mY1, mX2, mY2) {\n        var NEWTON_ITERATIONS = 4,\n            NEWTON_MIN_SLOPE = 0.001,\n            SUBDIVISION_PRECISION = 0.0000001,\n            SUBDIVISION_MAX_ITERATIONS = 10,\n            kSplineTableSize = 11,\n            kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),\n            float32ArraySupported = typeof Float32Array !== 'undefined';\n        /* Must contain four arguments. */\n\n        if (arguments.length !== 4) {\n          return false;\n        }\n        /* Arguments must be numbers. */\n\n\n        for (var i = 0; i < 4; ++i) {\n          if (typeof arguments[i] !== \"number\" || isNaN(arguments[i]) || !isFinite(arguments[i])) {\n            return false;\n          }\n        }\n        /* X values must be in the [0, 1] range. */\n\n\n        mX1 = Math.min(mX1, 1);\n        mX2 = Math.min(mX2, 1);\n        mX1 = Math.max(mX1, 0);\n        mX2 = Math.max(mX2, 0);\n        var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n        function A(aA1, aA2) {\n          return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n        }\n\n        function B(aA1, aA2) {\n          return 3.0 * aA2 - 6.0 * aA1;\n        }\n\n        function C(aA1) {\n          return 3.0 * aA1;\n        }\n\n        function calcBezier(aT, aA1, aA2) {\n          return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n        }\n\n        function getSlope(aT, aA1, aA2) {\n          return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n        }\n\n        function newtonRaphsonIterate(aX, aGuessT) {\n          for (var _i = 0; _i < NEWTON_ITERATIONS; ++_i) {\n            var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n            if (currentSlope === 0.0) {\n              return aGuessT;\n            }\n\n            var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n            aGuessT -= currentX / currentSlope;\n          }\n\n          return aGuessT;\n        }\n\n        function calcSampleValues() {\n          for (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {\n            mSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);\n          }\n        }\n\n        function binarySubdivide(aX, aA, aB) {\n          var currentX = void 0,\n              currentT = void 0,\n              i = 0;\n\n          do {\n            currentT = aA + (aB - aA) / 2.0;\n            currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n            if (currentX > 0.0) {\n              aB = currentT;\n            } else {\n              aA = currentT;\n            }\n          } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n          return currentT;\n        }\n\n        function getTForX(aX) {\n          var intervalStart = 0.0,\n              currentSample = 1,\n              lastSample = kSplineTableSize - 1;\n\n          for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n          }\n\n          --currentSample;\n          var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),\n              guessForT = intervalStart + dist * kSampleStepSize,\n              initialSlope = getSlope(guessForT, mX1, mX2);\n\n          if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT);\n          } else if (initialSlope === 0.0) {\n            return guessForT;\n          } else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);\n          }\n        }\n\n        var _precomputed = false;\n\n        function precompute() {\n          _precomputed = true;\n\n          if (mX1 !== mY1 || mX2 !== mY2) {\n            calcSampleValues();\n          }\n        }\n\n        var f = function f(aX) {\n          if (!_precomputed) {\n            precompute();\n          }\n\n          if (mX1 === mY1 && mX2 === mY2) {\n            return aX;\n          }\n\n          if (aX === 0) {\n            return 0;\n          }\n\n          if (aX === 1) {\n            return 1;\n          }\n\n          return calcBezier(getTForX(aX), mY1, mY2);\n        };\n\n        f.getControlPoints = function () {\n          return [{\n            x: mX1,\n            y: mY1\n          }, {\n            x: mX2,\n            y: mY2\n          }];\n        };\n\n        var str = \"generateBezier(\" + [mX1, mY1, mX2, mY2] + \")\";\n\n        f.toString = function () {\n          return str;\n        };\n\n        return f;\n      }\n\n      module.exports = generateCubicBezier;\n      /***/\n    },\n    /* 75 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */\n\n      /* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass\n         then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */\n\n      var generateSpringRK4 = function () {\n        function springAccelerationForState(state) {\n          return -state.tension * state.x - state.friction * state.v;\n        }\n\n        function springEvaluateStateWithDerivative(initialState, dt, derivative) {\n          var state = {\n            x: initialState.x + derivative.dx * dt,\n            v: initialState.v + derivative.dv * dt,\n            tension: initialState.tension,\n            friction: initialState.friction\n          };\n          return {\n            dx: state.v,\n            dv: springAccelerationForState(state)\n          };\n        }\n\n        function springIntegrateState(state, dt) {\n          var a = {\n            dx: state.v,\n            dv: springAccelerationForState(state)\n          },\n              b = springEvaluateStateWithDerivative(state, dt * 0.5, a),\n              c = springEvaluateStateWithDerivative(state, dt * 0.5, b),\n              d = springEvaluateStateWithDerivative(state, dt, c),\n              dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),\n              dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);\n          state.x = state.x + dxdt * dt;\n          state.v = state.v + dvdt * dt;\n          return state;\n        }\n\n        return function springRK4Factory(tension, friction, duration) {\n          var initState = {\n            x: -1,\n            v: 0,\n            tension: null,\n            friction: null\n          },\n              path = [0],\n              time_lapsed = 0,\n              tolerance = 1 / 10000,\n              DT = 16 / 1000,\n              have_duration = void 0,\n              dt = void 0,\n              last_state = void 0;\n          tension = parseFloat(tension) || 500;\n          friction = parseFloat(friction) || 20;\n          duration = duration || null;\n          initState.tension = tension;\n          initState.friction = friction;\n          have_duration = duration !== null;\n          /* Calculate the actual time it takes for this animation to complete with the provided conditions. */\n\n          if (have_duration) {\n            /* Run the simulation without a duration. */\n            time_lapsed = springRK4Factory(tension, friction);\n            /* Compute the adjusted time delta. */\n\n            dt = time_lapsed / duration * DT;\n          } else {\n            dt = DT;\n          }\n\n          for (;;) {\n            /* Next/step function .*/\n            last_state = springIntegrateState(last_state || initState, dt);\n            /* Store the position. */\n\n            path.push(1 + last_state.x);\n            time_lapsed += 16;\n            /* If the change threshold is reached, break. */\n\n            if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {\n              break;\n            }\n          }\n          /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the\n             computed path and returns a snapshot of the position according to a given percentComplete. */\n\n\n          return !have_duration ? time_lapsed : function (percentComplete) {\n            return path[percentComplete * (path.length - 1) | 0];\n          };\n        };\n      }();\n\n      module.exports = generateSpringRK4;\n      /***/\n    },\n    /* 76 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      function getEasedValue(type, start, end, percent, easingFn) {\n        if (percent === 1) {\n          return end;\n        }\n\n        var val = easingFn(start, end, percent);\n\n        if (type == null) {\n          return val;\n        }\n\n        if (type.roundValue || type.color) {\n          val = Math.round(val);\n        }\n\n        if (type.min !== undefined) {\n          val = Math.max(val, type.min);\n        }\n\n        if (type.max !== undefined) {\n          val = Math.min(val, type.max);\n        }\n\n        return val;\n      }\n\n      function getValue(prop, spec) {\n        if (prop.pfValue != null || prop.value != null) {\n          if (prop.pfValue != null && (spec == null || spec.type.units !== '%')) {\n            return prop.pfValue;\n          } else {\n            return prop.value;\n          }\n        } else {\n          return prop;\n        }\n      }\n\n      function ease(startProp, endProp, percent, easingFn, propSpec) {\n        var type = propSpec != null ? propSpec.type : null;\n\n        if (percent < 0) {\n          percent = 0;\n        } else if (percent > 1) {\n          percent = 1;\n        }\n\n        var start = getValue(startProp, propSpec);\n        var end = getValue(endProp, propSpec);\n\n        if (is.number(start) && is.number(end)) {\n          return getEasedValue(type, start, end, percent, easingFn);\n        } else if (is.array(start) && is.array(end)) {\n          var easedArr = [];\n\n          for (var i = 0; i < end.length; i++) {\n            var si = start[i];\n            var ei = end[i];\n\n            if (si != null && ei != null) {\n              var val = getEasedValue(type, si, ei, percent, easingFn);\n              easedArr.push(val);\n            } else {\n              easedArr.push(ei);\n            }\n          }\n\n          return easedArr;\n        }\n\n        return undefined;\n      }\n\n      module.exports = ease;\n      /***/\n    },\n    /* 77 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function startAnimation(self, ani, now, isCore) {\n        var isEles = !isCore;\n        var ele = self;\n        var ani_p = ani._private;\n        var cy = isCore ? self : self.cy();\n        var style = cy.style();\n\n        if (isEles) {\n          var pos = ele.position();\n          ani_p.startPosition = ani_p.startPosition || {\n            x: pos.x,\n            y: pos.y\n          };\n          ani_p.startStyle = ani_p.startStyle || style.getAnimationStartStyle(ele, ani_p.style);\n        }\n\n        if (isCore) {\n          var pan = cy._private.pan;\n          ani_p.startPan = ani_p.startPan || {\n            x: pan.x,\n            y: pan.y\n          };\n          ani_p.startZoom = ani_p.startZoom != null ? ani_p.startZoom : cy._private.zoom;\n        }\n\n        ani_p.started = true;\n        ani_p.startTime = now - ani_p.progress * ani_p.duration;\n      }\n\n      module.exports = startAnimation;\n      /***/\n    },\n    /* 78 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var Emitter = __webpack_require__(11);\n\n      var define = __webpack_require__(4);\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var Selector = __webpack_require__(6);\n\n      var emitterOptions = {\n        qualifierCompare: function qualifierCompare(selector1, selector2) {\n          if (selector1 == null || selector2 == null) {\n            return selector1 == null && selector2 == null;\n          } else {\n            return selector1.sameText(selector2);\n          }\n        },\n        eventMatches: function eventMatches(cy, listener, eventObj) {\n          var selector = listener.qualifier;\n\n          if (selector != null) {\n            return cy !== eventObj.target && is.element(eventObj.target) && selector.matches(eventObj.target);\n          }\n\n          return true;\n        },\n        eventFields: function eventFields(cy) {\n          return {\n            cy: cy,\n            target: cy\n          };\n        },\n        callbackContext: function callbackContext(cy, listener, eventObj) {\n          return listener.qualifier != null ? eventObj.target : cy;\n        }\n      };\n\n      var argSelector = function argSelector(arg) {\n        if (is.string(arg)) {\n          return new Selector(arg);\n        } else {\n          return arg;\n        }\n      };\n\n      var elesfn = {\n        createEmitter: function createEmitter() {\n          var _p = this._private;\n\n          if (!_p.emitter) {\n            _p.emitter = new Emitter(util.assign({\n              context: this\n            }, emitterOptions));\n          }\n\n          return this;\n        },\n        emitter: function emitter() {\n          return this._private.emitter;\n        },\n        on: function on(events, selector, callback) {\n          this.emitter().on(events, argSelector(selector), callback);\n          return this;\n        },\n        removeListener: function removeListener(events, selector, callback) {\n          this.emitter().removeListener(events, argSelector(selector), callback);\n          return this;\n        },\n        one: function one(events, selector, callback) {\n          this.emitter().one(events, argSelector(selector), callback);\n          return this;\n        },\n        once: function once(events, selector, callback) {\n          this.emitter().one(events, argSelector(selector), callback);\n          return this;\n        },\n        emit: function emit(events, extraParams) {\n          this.emitter().emit(events, extraParams);\n          return this;\n        }\n      };\n      define.eventAliasesOn(elesfn);\n      module.exports = elesfn;\n      /***/\n    },\n    /* 79 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var corefn = {\n        png: function png(options) {\n          var renderer = this._private.renderer;\n          options = options || {};\n          return renderer.png(options);\n        },\n        jpg: function jpg(options) {\n          var renderer = this._private.renderer;\n          options = options || {};\n          options.bg = options.bg || '#fff';\n          return renderer.jpg(options);\n        }\n      };\n      corefn.jpeg = corefn.jpg;\n      module.exports = corefn;\n      /***/\n    },\n    /* 80 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var is = __webpack_require__(0);\n\n      var corefn = {\n        layout: function layout(options) {\n          var cy = this;\n\n          if (options == null) {\n            util.error('Layout options must be specified to make a layout');\n            return;\n          }\n\n          if (options.name == null) {\n            util.error('A `name` must be specified to make a layout');\n            return;\n          }\n\n          var name = options.name;\n          var Layout = cy.extension('layout', name);\n\n          if (Layout == null) {\n            util.error('Can not apply layout: No such layout `' + name + '` found; did you include its JS file?');\n            return;\n          }\n\n          var eles = void 0;\n\n          if (is.string(options.eles)) {\n            eles = cy.$(options.eles);\n          } else {\n            eles = options.eles != null ? options.eles : cy.$();\n          }\n\n          var layout = new Layout(util.extend({}, options, {\n            cy: cy,\n            eles: eles\n          }));\n          return layout;\n        }\n      };\n      corefn.createLayout = corefn.makeLayout = corefn.layout;\n      module.exports = corefn;\n      /***/\n    },\n    /* 81 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var corefn = {\n        notify: function notify(params) {\n          var _p = this._private;\n\n          if (_p.batchingNotify) {\n            var bEles = _p.batchNotifyEles;\n            var bTypes = _p.batchNotifyTypes;\n\n            if (params.eles) {\n              bEles.merge(params.eles);\n            }\n\n            if (!bTypes.ids[params.type]) {\n              bTypes.push(params.type);\n              bTypes.ids[params.type] = true;\n            }\n\n            return; // notifications are disabled during batching\n          }\n\n          if (!_p.notificationsEnabled) {\n            return;\n          } // exit on disabled\n\n\n          var renderer = this.renderer(); // exit if destroy() called on core or renderer in between frames #1499 #1528\n\n          if (this.isDestroyed() || !renderer) {\n            return;\n          }\n\n          renderer.notify(params);\n        },\n        notifications: function notifications(bool) {\n          var p = this._private;\n\n          if (bool === undefined) {\n            return p.notificationsEnabled;\n          } else {\n            p.notificationsEnabled = bool ? true : false;\n          }\n        },\n        noNotifications: function noNotifications(callback) {\n          this.notifications(false);\n          callback();\n          this.notifications(true);\n        },\n        batching: function batching() {\n          return this._private.batchCount > 0;\n        },\n        startBatch: function startBatch() {\n          var _p = this._private;\n\n          if (_p.batchCount == null) {\n            _p.batchCount = 0;\n          }\n\n          if (_p.batchCount === 0) {\n            _p.batchingStyle = _p.batchingNotify = true;\n            _p.batchStyleEles = this.collection();\n            _p.batchNotifyEles = this.collection();\n            _p.batchNotifyTypes = [];\n            _p.batchNotifyTypes.ids = {};\n          }\n\n          _p.batchCount++;\n          return this;\n        },\n        endBatch: function endBatch() {\n          var _p = this._private;\n          _p.batchCount--;\n\n          if (_p.batchCount === 0) {\n            // update style for dirty eles\n            _p.batchingStyle = false;\n\n            _p.batchStyleEles.updateStyle(); // notify the renderer of queued eles and event types\n\n\n            _p.batchingNotify = false;\n            this.notify({\n              type: _p.batchNotifyTypes,\n              eles: _p.batchNotifyEles\n            });\n          }\n\n          return this;\n        },\n        batch: function batch(callback) {\n          this.startBatch();\n          callback();\n          this.endBatch();\n          return this;\n        },\n        // for backwards compatibility\n        batchData: function batchData(map) {\n          var cy = this;\n          return this.batch(function () {\n            var ids = Object.keys(map);\n\n            for (var i = 0; i < ids.length; i++) {\n              var id = ids[i];\n              var data = map[id];\n              var ele = cy.getElementById(id);\n              ele.data(data);\n            }\n          });\n        }\n      };\n      module.exports = corefn;\n      /***/\n    },\n    /* 82 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var corefn = {\n        renderTo: function renderTo(context, zoom, pan, pxRatio) {\n          var r = this._private.renderer;\n          r.renderTo(context, zoom, pan, pxRatio);\n          return this;\n        },\n        renderer: function renderer() {\n          return this._private.renderer;\n        },\n        forceRender: function forceRender() {\n          this.notify({\n            type: 'draw'\n          });\n          return this;\n        },\n        resize: function resize() {\n          this.invalidateSize();\n          this.notify({\n            type: 'resize'\n          });\n          this.emit('resize');\n          return this;\n        },\n        initRenderer: function initRenderer(options) {\n          var cy = this;\n          var RendererProto = cy.extension('renderer', options.name);\n\n          if (RendererProto == null) {\n            util.error('Can not initialise: No such renderer `%s` found; did you include its JS file?', options.name);\n            return;\n          }\n\n          cy._private.renderer = new RendererProto(util.extend({}, options, {\n            cy: cy\n          }));\n          this.notify({\n            type: 'init'\n          });\n        },\n        destroyRenderer: function destroyRenderer() {\n          var cy = this;\n          cy.notify({\n            type: 'destroy'\n          }); // destroy the renderer\n\n          var domEle = cy.container();\n\n          if (domEle) {\n            domEle._cyreg = null;\n\n            while (domEle.childNodes.length > 0) {\n              domEle.removeChild(domEle.childNodes[0]);\n            }\n          }\n\n          cy._private.renderer = null; // to be extra safe, remove the ref\n        },\n        onRender: function onRender(fn) {\n          return this.on('render', fn);\n        },\n        offRender: function offRender(fn) {\n          return this.off('render', fn);\n        }\n      };\n      corefn.invalidateDimensions = corefn.resize;\n      module.exports = corefn;\n      /***/\n    },\n    /* 83 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var Collection = __webpack_require__(7);\n\n      var corefn = {\n        // get a collection\n        // - empty collection on no args\n        // - collection of elements in the graph on selector arg\n        // - guarantee a returned collection when elements or collection specified\n        collection: function collection(eles, opts) {\n          if (is.string(eles)) {\n            return this.$(eles);\n          } else if (is.elementOrCollection(eles)) {\n            return eles.collection();\n          } else if (is.array(eles)) {\n            return new Collection(this, eles, opts);\n          }\n\n          return new Collection(this);\n        },\n        nodes: function nodes(selector) {\n          var nodes = this.$(function (ele) {\n            return ele.isNode();\n          });\n\n          if (selector) {\n            return nodes.filter(selector);\n          }\n\n          return nodes;\n        },\n        edges: function edges(selector) {\n          var edges = this.$(function (ele) {\n            return ele.isEdge();\n          });\n\n          if (selector) {\n            return edges.filter(selector);\n          }\n\n          return edges;\n        },\n        // search the graph like jQuery\n        $: function $(selector) {\n          var eles = this._private.elements;\n\n          if (selector) {\n            return eles.filter(selector);\n          } else {\n            return eles.spawnSelf();\n          }\n        },\n        mutableElements: function mutableElements() {\n          return this._private.elements;\n        }\n      }; // aliases\n\n      corefn.elements = corefn.filter = corefn.$;\n      module.exports = corefn;\n      /***/\n    },\n    /* 84 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var Style = __webpack_require__(18);\n\n      var corefn = {\n        style: function style(newStyle) {\n          if (newStyle) {\n            var s = this.setStyle(newStyle);\n            s.update();\n          }\n\n          return this._private.style;\n        },\n        setStyle: function setStyle(style) {\n          var _p = this._private;\n\n          if (is.stylesheet(style)) {\n            _p.style = style.generateStyle(this);\n          } else if (is.array(style)) {\n            _p.style = Style.fromJson(this, style);\n          } else if (is.string(style)) {\n            _p.style = Style.fromString(this, style);\n          } else {\n            _p.style = Style(this);\n          }\n\n          return _p.style;\n        }\n      };\n      module.exports = corefn;\n      /***/\n    },\n    /* 85 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var is = __webpack_require__(0);\n\n      var Promise = __webpack_require__(5);\n\n      var styfn = {}; // (potentially expensive calculation)\n      // apply the style to the element based on\n      // - its bypass\n      // - what selectors match it\n\n      styfn.apply = function (eles) {\n        var self = this;\n        var _p = self._private;\n        var cy = _p.cy;\n        var updatedEles = cy.collection();\n\n        if (_p.newStyle) {\n          // clear style caches\n          _p.contextStyles = {};\n          _p.propDiffs = {};\n          self.cleanElements(eles, true);\n        }\n\n        for (var ie = 0; ie < eles.length; ie++) {\n          var ele = eles[ie];\n          var cxtMeta = self.getContextMeta(ele);\n\n          if (cxtMeta.empty) {\n            continue;\n          } else {\n            updatedEles.merge(ele);\n          }\n\n          var cxtStyle = self.getContextStyle(cxtMeta);\n          var app = self.applyContextStyle(cxtMeta, cxtStyle, ele);\n\n          if (!_p.newStyle) {\n            self.updateTransitions(ele, app.diffProps);\n          }\n\n          self.updateStyleHints(ele);\n        } // for elements\n\n\n        _p.newStyle = false;\n        return updatedEles;\n      };\n\n      styfn.getPropertiesDiff = function (oldCxtKey, newCxtKey) {\n        var self = this;\n        var cache = self._private.propDiffs = self._private.propDiffs || {};\n        var dualCxtKey = oldCxtKey + '-' + newCxtKey;\n        var cachedVal = cache[dualCxtKey];\n\n        if (cachedVal) {\n          return cachedVal;\n        }\n\n        var diffProps = [];\n        var addedProp = {};\n\n        for (var i = 0; i < self.length; i++) {\n          var cxt = self[i];\n          var oldHasCxt = oldCxtKey[i] === 't';\n          var newHasCxt = newCxtKey[i] === 't';\n          var cxtHasDiffed = oldHasCxt !== newHasCxt;\n          var cxtHasMappedProps = cxt.mappedProperties.length > 0;\n\n          if (cxtHasDiffed || cxtHasMappedProps) {\n            var props = void 0;\n\n            if (cxtHasDiffed && cxtHasMappedProps) {\n              props = cxt.properties; // suffices b/c mappedProperties is a subset of properties\n            } else if (cxtHasDiffed) {\n              props = cxt.properties; // need to check them all\n            } else if (cxtHasMappedProps) {\n              props = cxt.mappedProperties; // only need to check mapped\n            }\n\n            for (var j = 0; j < props.length; j++) {\n              var prop = props[j];\n              var name = prop.name; // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter\n              // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result\n              // is cached)\n\n              var laterCxtOverrides = false;\n\n              for (var k = i + 1; k < self.length; k++) {\n                var laterCxt = self[k];\n                var hasLaterCxt = newCxtKey[k] === 't';\n\n                if (!hasLaterCxt) {\n                  continue;\n                } // can't override unless the context is active\n\n\n                laterCxtOverrides = laterCxt.properties[prop.name] != null;\n\n                if (laterCxtOverrides) {\n                  break;\n                } // exit early as long as one later context overrides\n\n              }\n\n              if (!addedProp[name] && !laterCxtOverrides) {\n                addedProp[name] = true;\n                diffProps.push(name);\n              }\n            } // for props\n\n          } // if\n\n        } // for contexts\n\n\n        cache[dualCxtKey] = diffProps;\n        return diffProps;\n      };\n\n      styfn.getContextMeta = function (ele) {\n        var self = this;\n        var cxtKey = '';\n        var diffProps = void 0;\n        var prevKey = ele._private.styleCxtKey || '';\n\n        if (self._private.newStyle) {\n          prevKey = ''; // since we need to apply all style if a fresh stylesheet\n        } // get the cxt key\n\n\n        for (var i = 0; i < self.length; i++) {\n          var context = self[i];\n          var contextSelectorMatches = context.selector && context.selector.matches(ele); // NB: context.selector may be null for 'core'\n\n          if (contextSelectorMatches) {\n            cxtKey += 't';\n          } else {\n            cxtKey += 'f';\n          }\n        } // for context\n\n\n        diffProps = self.getPropertiesDiff(prevKey, cxtKey);\n        ele._private.styleCxtKey = cxtKey;\n        return {\n          key: cxtKey,\n          diffPropNames: diffProps,\n          empty: diffProps.length === 0\n        };\n      }; // gets a computed ele style object based on matched contexts\n\n\n      styfn.getContextStyle = function (cxtMeta) {\n        var cxtKey = cxtMeta.key;\n        var self = this;\n        var cxtStyles = this._private.contextStyles = this._private.contextStyles || {}; // if already computed style, returned cached copy\n\n        if (cxtStyles[cxtKey]) {\n          return cxtStyles[cxtKey];\n        }\n\n        var style = {\n          _private: {\n            key: cxtKey\n          }\n        };\n\n        for (var i = 0; i < self.length; i++) {\n          var cxt = self[i];\n          var hasCxt = cxtKey[i] === 't';\n\n          if (!hasCxt) {\n            continue;\n          }\n\n          for (var j = 0; j < cxt.properties.length; j++) {\n            var prop = cxt.properties[j];\n            style[prop.name] = prop;\n          }\n        }\n\n        cxtStyles[cxtKey] = style;\n        return style;\n      };\n\n      styfn.applyContextStyle = function (cxtMeta, cxtStyle, ele) {\n        var self = this;\n        var diffProps = cxtMeta.diffPropNames;\n        var retDiffProps = {};\n\n        for (var i = 0; i < diffProps.length; i++) {\n          var diffPropName = diffProps[i];\n          var cxtProp = cxtStyle[diffPropName];\n          var eleProp = ele.pstyle(diffPropName);\n\n          if (!cxtProp) {\n            // no context prop means delete\n            if (!eleProp) {\n              continue; // no existing prop means nothing needs to be removed\n              // nb affects initial application on mapped values like control-point-distances\n            } else if (eleProp.bypass) {\n              cxtProp = {\n                name: diffPropName,\n                deleteBypassed: true\n              };\n            } else {\n              cxtProp = {\n                name: diffPropName,\n                delete: true\n              };\n            }\n          } // save cycles when the context prop doesn't need to be applied\n\n\n          if (eleProp === cxtProp) {\n            continue;\n          }\n\n          var retDiffProp = retDiffProps[diffPropName] = {\n            prev: eleProp\n          };\n          self.applyParsedProperty(ele, cxtProp);\n          retDiffProp.next = ele.pstyle(diffPropName);\n\n          if (retDiffProp.next && retDiffProp.next.bypass) {\n            retDiffProp.next = retDiffProp.next.bypassed;\n          }\n        }\n\n        return {\n          diffProps: retDiffProps\n        };\n      };\n\n      styfn.updateStyleHints = function (ele) {\n        var _p = ele._private;\n        var self = this;\n\n        if (ele.removed()) {\n          return;\n        } // set whether has pie or not; for greater efficiency\n\n\n        var hasPie = false;\n\n        if (_p.group === 'nodes') {\n          for (var i = 1; i <= self.pieBackgroundN; i++) {\n            // 1..N\n            var _size = ele.pstyle('pie-' + i + '-background-size').value;\n\n            if (_size > 0) {\n              hasPie = true;\n              break;\n            }\n          }\n        }\n\n        _p.hasPie = hasPie;\n        var transform = ele.pstyle('text-transform').strValue;\n        var content = ele.pstyle('label').strValue;\n        var srcContent = ele.pstyle('source-label').strValue;\n        var tgtContent = ele.pstyle('target-label').strValue;\n        var fStyle = ele.pstyle('font-style').strValue;\n        var size = ele.pstyle('font-size').pfValue + 'px';\n        var family = ele.pstyle('font-family').strValue; // let letiant = style['font-letiant'].strValue;\n\n        var weight = ele.pstyle('font-weight').strValue;\n        var valign = ele.pstyle('text-valign').strValue;\n        var halign = ele.pstyle('text-valign').strValue;\n        var oWidth = ele.pstyle('text-outline-width').pfValue;\n        var wrap = ele.pstyle('text-wrap').strValue;\n        var wrapW = ele.pstyle('text-max-width').pfValue;\n        var labelStyleKey = fStyle + '$' + size + '$' + family + '$' + weight + '$' + transform + '$' + valign + '$' + halign + '$' + oWidth + '$' + wrap + '$' + wrapW;\n        _p.labelStyleKey = labelStyleKey;\n        _p.sourceLabelKey = labelStyleKey + '$' + srcContent;\n        _p.targetLabelKey = labelStyleKey + '$' + tgtContent;\n        _p.labelKey = labelStyleKey + '$' + content;\n        _p.fontKey = fStyle + '$' + weight + '$' + size + '$' + family;\n        _p.styleKey = Date.now();\n      }; // apply a property to the style (for internal use)\n      // returns whether application was successful\n      //\n      // now, this function flattens the property, and here's how:\n      //\n      // for parsedProp:{ bypass: true, deleteBypass: true }\n      // no property is generated, instead the bypass property in the\n      // element's style is replaced by what's pointed to by the `bypassed`\n      // field in the bypass property (i.e. restoring the property the\n      // bypass was overriding)\n      //\n      // for parsedProp:{ mapped: truthy }\n      // the generated flattenedProp:{ mapping: prop }\n      //\n      // for parsedProp:{ bypass: true }\n      // the generated flattenedProp:{ bypassed: parsedProp }\n\n\n      styfn.applyParsedProperty = function (ele, parsedProp) {\n        var self = this;\n        var prop = parsedProp;\n        var style = ele._private.style;\n        var fieldVal = void 0,\n            flatProp = void 0;\n        var types = self.types;\n        var type = self.properties[prop.name].type;\n        var propIsBypass = prop.bypass;\n        var origProp = style[prop.name];\n        var origPropIsBypass = origProp && origProp.bypass;\n        var _p = ele._private;\n        var flatPropMapping = 'mapping';\n\n        var checkZOrder = function checkZOrder() {\n          self.checkZOrderTrigger(ele, prop.name, origProp ? origProp.value : null, prop.value);\n        }; // edges connected to compound nodes can not be haystacks\n\n\n        if (parsedProp.name === 'curve-style' && parsedProp.value === 'haystack' && ele.isEdge() && (ele.isLoop() || ele.source().isParent() || ele.target().isParent())) {\n          prop = parsedProp = this.parse(parsedProp.name, 'bezier', propIsBypass);\n        }\n\n        if (prop.delete) {\n          // delete the property and use the default value on falsey value\n          style[prop.name] = undefined;\n          checkZOrder();\n          return true;\n        }\n\n        if (prop.deleteBypassed) {\n          // delete the property that the\n          if (!origProp) {\n            checkZOrder();\n            return true; // can't delete if no prop\n          } else if (origProp.bypass) {\n            // delete bypassed\n            origProp.bypassed = undefined;\n            checkZOrder();\n            return true;\n          } else {\n            return false; // we're unsuccessful deleting the bypassed\n          }\n        } // check if we need to delete the current bypass\n\n\n        if (prop.deleteBypass) {\n          // then this property is just here to indicate we need to delete\n          if (!origProp) {\n            checkZOrder();\n            return true; // property is already not defined\n          } else if (origProp.bypass) {\n            // then replace the bypass property with the original\n            // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)\n            style[prop.name] = origProp.bypassed;\n            checkZOrder();\n            return true;\n          } else {\n            return false; // we're unsuccessful deleting the bypass\n          }\n        }\n\n        var printMappingErr = function printMappingErr() {\n          util.error('Do not assign mappings to elements without corresponding data (e.g. ele `' + ele.id() + '` for property `' + prop.name + '` with data field `' + prop.field + '`); try a `[' + prop.field + ']` selector to limit scope to elements with `' + prop.field + '` defined');\n        }; // put the property in the style objects\n\n\n        switch (prop.mapped) {\n          // flatten the property if mapped\n          case types.mapData:\n            {\n              // flatten the field (e.g. data.foo.bar)\n              var fields = prop.field.split('.');\n              var _fieldVal = _p.data;\n\n              for (var i = 0; i < fields.length && _fieldVal; i++) {\n                var field = fields[i];\n                _fieldVal = _fieldVal[field];\n              }\n\n              var percent = void 0;\n\n              if (!is.number(_fieldVal)) {\n                // then keep the mapping but assume 0% for now\n                percent = 0;\n              } else {\n                percent = (_fieldVal - prop.fieldMin) / (prop.fieldMax - prop.fieldMin);\n              } // make sure to bound percent value\n\n\n              if (percent < 0) {\n                percent = 0;\n              } else if (percent > 1) {\n                percent = 1;\n              }\n\n              if (type.color) {\n                var r1 = prop.valueMin[0];\n                var r2 = prop.valueMax[0];\n                var g1 = prop.valueMin[1];\n                var g2 = prop.valueMax[1];\n                var b1 = prop.valueMin[2];\n                var b2 = prop.valueMax[2];\n                var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];\n                var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];\n                var clr = [Math.round(r1 + (r2 - r1) * percent), Math.round(g1 + (g2 - g1) * percent), Math.round(b1 + (b2 - b1) * percent), Math.round(a1 + (a2 - a1) * percent)];\n                flatProp = {\n                  // colours are simple, so just create the flat property instead of expensive string parsing\n                  bypass: prop.bypass,\n                  // we're a bypass if the mapping property is a bypass\n                  name: prop.name,\n                  value: clr,\n                  strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'\n                };\n              } else if (type.number) {\n                var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;\n                flatProp = this.parse(prop.name, calcValue, prop.bypass, flatPropMapping);\n              } else {\n                return false; // can only map to colours and numbers\n              }\n\n              if (!flatProp) {\n                // if we can't flatten the property, then use the origProp so we still keep the mapping itself\n                flatProp = this.parse(prop.name, origProp.strValue, prop.bypass, flatPropMapping);\n              }\n\n              if (!flatProp) {\n                printMappingErr();\n              }\n\n              flatProp.mapping = prop; // keep a reference to the mapping\n\n              prop = flatProp; // the flattened (mapped) property is the one we want\n\n              break;\n            }\n          // direct mapping\n\n          case types.data:\n            {\n              // flatten the field (e.g. data.foo.bar)\n              var _fields = prop.field.split('.');\n\n              var _fieldVal2 = _p.data;\n\n              if (_fieldVal2) {\n                for (var _i = 0; _i < _fields.length; _i++) {\n                  var _field = _fields[_i];\n                  _fieldVal2 = _fieldVal2[_field];\n                }\n              }\n\n              flatProp = this.parse(prop.name, _fieldVal2, prop.bypass, flatPropMapping);\n\n              if (!flatProp) {\n                // if we can't flatten the property, then use the origProp so we still keep the mapping itself\n                var flatPropVal = origProp ? origProp.strValue : '';\n                flatProp = this.parse(prop.name, flatPropVal, prop.bypass, flatPropMapping);\n              }\n\n              if (!flatProp) {\n                printMappingErr();\n              }\n\n              flatProp.mapping = prop; // keep a reference to the mapping\n\n              prop = flatProp; // the flattened (mapped) property is the one we want\n\n              break;\n            }\n\n          case types.fn:\n            {\n              var fn = prop.value;\n              var fnRetVal = fn(ele);\n              flatProp = this.parse(prop.name, fnRetVal, prop.bypass, flatPropMapping);\n              flatProp.mapping = prop; // keep a reference to the mapping\n\n              prop = flatProp; // the flattened (mapped) property is the one we want\n\n              break;\n            }\n\n          case undefined:\n            break;\n          // just set the property\n\n          default:\n            return false;\n          // not a valid mapping\n        } // if the property is a bypass property, then link the resultant property to the original one\n\n\n        if (propIsBypass) {\n          if (origPropIsBypass) {\n            // then this bypass overrides the existing one\n            prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass\n          } else {\n            // then link the orig prop to the new bypass\n            prop.bypassed = origProp;\n          }\n\n          style[prop.name] = prop; // and set\n        } else {\n          // prop is not bypass\n          if (origPropIsBypass) {\n            // then keep the orig prop (since it's a bypass) and link to the new prop\n            origProp.bypassed = prop;\n          } else {\n            // then just replace the old prop with the new one\n            style[prop.name] = prop;\n          }\n        }\n\n        checkZOrder();\n        return true;\n      };\n\n      styfn.cleanElements = function (eles, keepBypasses) {\n        var self = this;\n        var props = self.properties;\n\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n\n          if (!keepBypasses) {\n            ele._private.style = {};\n          } else {\n            var style = ele._private.style;\n\n            for (var j = 0; j < props.length; j++) {\n              var prop = props[j];\n              var eleProp = style[prop.name];\n\n              if (eleProp) {\n                if (eleProp.bypass) {\n                  eleProp.bypassed = null;\n                } else {\n                  style[prop.name] = null;\n                }\n              }\n            }\n          }\n        }\n      }; // updates the visual style for all elements (useful for manual style modification after init)\n\n\n      styfn.update = function () {\n        var cy = this._private.cy;\n        var eles = cy.mutableElements();\n        eles.updateStyle();\n      }; // just update the functional properties (i.e. mappings) in the elements'\n      // styles (less expensive than recalculation)\n\n\n      styfn.updateMappers = function (eles) {\n        var self = this;\n        var cy = this._private.cy;\n        var updatedEles = cy.collection();\n\n        for (var i = 0; i < eles.length; i++) {\n          // for each ele\n          var ele = eles[i];\n          var style = ele._private.style;\n          var updatedEle = false;\n\n          for (var j = 0; j < self.properties.length; j++) {\n            // for each prop\n            var prop = self.properties[j];\n            var propInStyle = style[prop.name];\n\n            if (propInStyle && propInStyle.mapping) {\n              var mapping = propInStyle.mapping;\n              this.applyParsedProperty(ele, mapping); // reapply the mapping property\n\n              updatedEle = true;\n            }\n          }\n\n          if (updatedEle) {\n            this.updateStyleHints(ele);\n            updatedEles.merge(ele);\n          }\n        }\n\n        return updatedEles;\n      }; // diffProps : { name => { prev, next } }\n\n\n      styfn.updateTransitions = function (ele, diffProps, isBypass) {\n        var self = this;\n        var _p = ele._private;\n        var props = ele.pstyle('transition-property').value;\n        var duration = ele.pstyle('transition-duration').pfValue;\n        var delay = ele.pstyle('transition-delay').pfValue;\n\n        if (props.length > 0 && duration > 0) {\n          var style = {}; // build up the style to animate towards\n\n          var anyPrev = false;\n\n          for (var i = 0; i < props.length; i++) {\n            var prop = props[i];\n            var styProp = ele.pstyle(prop);\n            var diffProp = diffProps[prop];\n\n            if (!diffProp) {\n              continue;\n            }\n\n            var prevProp = diffProp.prev;\n            var fromProp = prevProp;\n            var toProp = diffProp.next != null ? diffProp.next : styProp;\n            var diff = false;\n            var initVal = void 0;\n            var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)\n\n            if (!fromProp) {\n              continue;\n            } // consider px values\n\n\n            if (is.number(fromProp.pfValue) && is.number(toProp.pfValue)) {\n              diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy\n\n              initVal = fromProp.pfValue + initDt * diff; // consider numerical values\n            } else if (is.number(fromProp.value) && is.number(toProp.value)) {\n              diff = toProp.value - fromProp.value; // nonzero is truthy\n\n              initVal = fromProp.value + initDt * diff; // consider colour values\n            } else if (is.array(fromProp.value) && is.array(toProp.value)) {\n              diff = fromProp.value[0] !== toProp.value[0] || fromProp.value[1] !== toProp.value[1] || fromProp.value[2] !== toProp.value[2];\n              initVal = fromProp.strValue;\n            } // the previous value is good for an animation only if it's different\n\n\n            if (diff) {\n              style[prop] = toProp.strValue; // to val\n\n              this.applyBypass(ele, prop, initVal); // from val\n\n              anyPrev = true;\n            }\n          } // end if props allow ani\n          // can't transition if there's nothing previous to transition from\n\n\n          if (!anyPrev) {\n            return;\n          }\n\n          _p.transitioning = true;\n          new Promise(function (resolve) {\n            if (delay > 0) {\n              ele.delayAnimation(delay).play().promise().then(resolve);\n            } else {\n              resolve();\n            }\n          }).then(function () {\n            return ele.animation({\n              style: style,\n              duration: duration,\n              easing: ele.pstyle('transition-timing-function').value,\n              queue: false\n            }).play().promise();\n          }).then(function () {\n            // if( !isBypass ){\n            self.removeBypasses(ele, props);\n            ele.emitAndNotify('style'); // }\n\n            _p.transitioning = false;\n          });\n        } else if (_p.transitioning) {\n          this.removeBypasses(ele, props);\n          ele.emitAndNotify('style');\n          _p.transitioning = false;\n        }\n      };\n\n      styfn.checkZOrderTrigger = function (ele, name, fromValue, toValue) {\n        var prop = this.properties[name];\n\n        if (prop.triggersZOrder != null && (fromValue == null || prop.triggersZOrder(fromValue, toValue))) {\n          this._private.cy.notify({\n            type: 'zorder',\n            eles: ele\n          });\n        }\n      };\n\n      module.exports = styfn;\n      /***/\n    },\n    /* 86 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var styfn = {}; // bypasses are applied to an existing style on an element, and just tacked on temporarily\n      // returns true iff application was successful for at least 1 specified property\n\n      styfn.applyBypass = function (eles, name, value, updateTransitions) {\n        var self = this;\n        var props = [];\n        var isBypass = true; // put all the properties (can specify one or many) in an array after parsing them\n\n        if (name === '*' || name === '**') {\n          // apply to all property names\n          if (value !== undefined) {\n            for (var i = 0; i < self.properties.length; i++) {\n              var prop = self.properties[i];\n              var _name = prop.name;\n              var parsedProp = this.parse(_name, value, true);\n\n              if (parsedProp) {\n                props.push(parsedProp);\n              }\n            }\n          }\n        } else if (is.string(name)) {\n          // then parse the single property\n          var _parsedProp = this.parse(name, value, true);\n\n          if (_parsedProp) {\n            props.push(_parsedProp);\n          }\n        } else if (is.plainObject(name)) {\n          // then parse each property\n          var specifiedProps = name;\n          updateTransitions = value;\n          var names = Object.keys(specifiedProps);\n\n          for (var _i = 0; _i < names.length; _i++) {\n            var _name2 = names[_i];\n            var _prop = self.properties[_name2];\n            var _value = specifiedProps[_name2];\n\n            if (_value === undefined) {\n              // try camel case name too\n              _value = specifiedProps[util.dash2camel(_name2)];\n            }\n\n            if (_value !== undefined) {\n              var _parsedProp2 = this.parse(_name2, _value, true);\n\n              if (_parsedProp2) {\n                props.push(_parsedProp2);\n              }\n            }\n          }\n        } else {\n          // can't do anything without well defined properties\n          return false;\n        } // we've failed if there are no valid properties\n\n\n        if (props.length === 0) {\n          return false;\n        } // now, apply the bypass properties on the elements\n\n\n        var ret = false; // return true if at least one succesful bypass applied\n\n        for (var _i2 = 0; _i2 < eles.length; _i2++) {\n          // for each ele\n          var ele = eles[_i2];\n          var diffProps = {};\n          var diffProp = void 0;\n\n          for (var j = 0; j < props.length; j++) {\n            // for each prop\n            var _prop2 = props[j];\n\n            if (updateTransitions) {\n              var prevProp = ele.pstyle(_prop2.name);\n              diffProp = diffProps[_prop2.name] = {\n                prev: prevProp\n              };\n            }\n\n            ret = this.applyParsedProperty(ele, _prop2) || ret;\n\n            if (updateTransitions) {\n              diffProp.next = ele.pstyle(_prop2.name);\n            }\n          } // for props\n\n\n          if (ret) {\n            this.updateStyleHints(ele);\n          }\n\n          if (updateTransitions) {\n            this.updateTransitions(ele, diffProps, isBypass);\n          }\n        } // for eles\n\n\n        return ret;\n      }; // only useful in specific cases like animation\n\n\n      styfn.overrideBypass = function (eles, name, value) {\n        name = util.camel2dash(name);\n\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n          var prop = ele._private.style[name];\n          var type = this.properties[name].type;\n          var isColor = type.color;\n          var isMulti = type.mutiple;\n\n          if (!prop || !prop.bypass) {\n            // need a bypass if one doesn't exist\n            this.applyBypass(ele, name, value);\n            continue;\n          }\n\n          var oldValue = prop.pfValue != null ? prop.pfValue : prop.value;\n          prop.value = value;\n\n          if (prop.pfValue != null) {\n            prop.pfValue = value;\n          }\n\n          if (isColor) {\n            prop.strValue = 'rgb(' + value.join(',') + ')';\n          } else if (isMulti) {\n            prop.strValue = value.join(' ');\n          } else {\n            prop.strValue = '' + value;\n          }\n\n          this.checkZOrderTrigger(ele, name, oldValue, value);\n        }\n      };\n\n      styfn.removeAllBypasses = function (eles, updateTransitions) {\n        return this.removeBypasses(eles, this.propertyNames, updateTransitions);\n      };\n\n      styfn.removeBypasses = function (eles, props, updateTransitions) {\n        var isBypass = true;\n\n        for (var j = 0; j < eles.length; j++) {\n          var ele = eles[j];\n          var diffProps = {};\n\n          for (var i = 0; i < props.length; i++) {\n            var name = props[i];\n            var prop = this.properties[name];\n            var prevProp = ele.pstyle(prop.name);\n\n            if (!prevProp || !prevProp.bypass) {\n              // if a bypass doesn't exist for the prop, nothing needs to be removed\n              continue;\n            }\n\n            var value = ''; // empty => remove bypass\n\n            var parsedProp = this.parse(name, value, true);\n            var diffProp = diffProps[prop.name] = {\n              prev: prevProp\n            };\n            this.applyParsedProperty(ele, parsedProp);\n            diffProp.next = ele.pstyle(prop.name);\n          } // for props\n\n\n          this.updateStyleHints(ele);\n\n          if (updateTransitions) {\n            this.updateTransitions(ele, diffProps, isBypass);\n          }\n        } // for eles\n\n      };\n\n      module.exports = styfn;\n      /***/\n    },\n    /* 87 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var window = __webpack_require__(3);\n\n      var styfn = {}; // gets what an em size corresponds to in pixels relative to a dom element\n\n      styfn.getEmSizeInPixels = function () {\n        var px = this.containerCss('font-size');\n\n        if (px != null) {\n          return parseFloat(px);\n        } else {\n          return 1; // for headless\n        }\n      }; // gets css property from the core container\n\n\n      styfn.containerCss = function (propName) {\n        var cy = this._private.cy;\n        var domElement = cy.container();\n\n        if (window && domElement && window.getComputedStyle) {\n          return window.getComputedStyle(domElement).getPropertyValue(propName);\n        }\n      };\n\n      module.exports = styfn;\n      /***/\n    },\n    /* 88 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var is = __webpack_require__(0);\n\n      var styfn = {}; // gets the rendered style for an element\n\n      styfn.getRenderedStyle = function (ele, prop) {\n        if (prop) {\n          return this.getStylePropertyValue(ele, prop, true);\n        } else {\n          return this.getRawStyle(ele, true);\n        }\n      }; // gets the raw style for an element\n\n\n      styfn.getRawStyle = function (ele, isRenderedVal) {\n        var self = this;\n        ele = ele[0]; // insure it's an element\n\n        if (ele) {\n          var rstyle = {};\n\n          for (var i = 0; i < self.properties.length; i++) {\n            var prop = self.properties[i];\n            var val = self.getStylePropertyValue(ele, prop.name, isRenderedVal);\n\n            if (val != null) {\n              rstyle[prop.name] = val;\n              rstyle[util.dash2camel(prop.name)] = val;\n            }\n          }\n\n          return rstyle;\n        }\n      };\n\n      styfn.getIndexedStyle = function (ele, property, subproperty, index) {\n        var pstyle = ele.pstyle(property)[subproperty][index];\n        return pstyle != null ? pstyle : ele.cy().style().getDefaultProperty(property)[subproperty][0];\n      };\n\n      styfn.getStylePropertyValue = function (ele, propName, isRenderedVal) {\n        var self = this;\n        ele = ele[0]; // insure it's an element\n\n        if (ele) {\n          var prop = self.properties[propName];\n\n          if (prop.alias) {\n            prop = prop.pointsTo;\n          }\n\n          var type = prop.type;\n          var styleProp = ele.pstyle(prop.name);\n          var zoom = ele.cy().zoom();\n\n          if (styleProp) {\n            var units = styleProp.units ? type.implicitUnits || 'px' : null;\n            var val = units ? [].concat(styleProp.pfValue).map(function (pfValue) {\n              return pfValue * (isRenderedVal ? zoom : 1) + units;\n            }).join(' ') : styleProp.strValue;\n            return val;\n          }\n        }\n      };\n\n      styfn.getAnimationStartStyle = function (ele, aniProps) {\n        var rstyle = {};\n\n        for (var i = 0; i < aniProps.length; i++) {\n          var aniProp = aniProps[i];\n          var name = aniProp.name;\n          var styleProp = ele.pstyle(name);\n\n          if (styleProp !== undefined) {\n            // then make a prop of it\n            if (is.plainObject(styleProp)) {\n              styleProp = this.parse(name, styleProp.strValue);\n            } else {\n              styleProp = this.parse(name, styleProp);\n            }\n          }\n\n          if (styleProp) {\n            rstyle[name] = styleProp;\n          }\n        }\n\n        return rstyle;\n      };\n\n      styfn.getPropsList = function (propsObj) {\n        var self = this;\n        var rstyle = [];\n        var style = propsObj;\n        var props = self.properties;\n\n        if (style) {\n          var names = Object.keys(style);\n\n          for (var i = 0; i < names.length; i++) {\n            var name = names[i];\n            var val = style[name];\n            var prop = props[name] || props[util.camel2dash(name)];\n            var styleProp = this.parse(prop.name, val);\n\n            if (styleProp) {\n              rstyle.push(styleProp);\n            }\n          }\n        }\n\n        return rstyle;\n      };\n\n      module.exports = styfn;\n      /***/\n    },\n    /* 89 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var styfn = {};\n\n      styfn.appendFromJson = function (json) {\n        var style = this;\n\n        for (var i = 0; i < json.length; i++) {\n          var context = json[i];\n          var selector = context.selector;\n          var props = context.style || context.css;\n          var names = Object.keys(props);\n          style.selector(selector); // apply selector\n\n          for (var j = 0; j < names.length; j++) {\n            var name = names[j];\n            var value = props[name];\n            style.css(name, value); // apply property\n          }\n        }\n\n        return style;\n      }; // accessible cy.style() function\n\n\n      styfn.fromJson = function (json) {\n        var style = this;\n        style.resetToDefault();\n        style.appendFromJson(json);\n        return style;\n      }; // get json from cy.style() api\n\n\n      styfn.json = function () {\n        var json = [];\n\n        for (var i = this.defaultLength; i < this.length; i++) {\n          var cxt = this[i];\n          var selector = cxt.selector;\n          var props = cxt.properties;\n          var css = {};\n\n          for (var j = 0; j < props.length; j++) {\n            var prop = props[j];\n            css[prop.name] = prop.strValue;\n          }\n\n          json.push({\n            selector: !selector ? 'core' : selector.toString(),\n            style: css\n          });\n        }\n\n        return json;\n      };\n\n      module.exports = styfn;\n      /***/\n    },\n    /* 90 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var Selector = __webpack_require__(6);\n\n      var styfn = {};\n\n      styfn.appendFromString = function (string) {\n        var self = this;\n        var style = this;\n        var remaining = '' + string;\n        var selAndBlockStr = void 0;\n        var blockRem = void 0;\n        var propAndValStr = void 0; // remove comments from the style string\n\n        remaining = remaining.replace(/[/][*](\\s|.)+?[*][/]/g, '');\n\n        function removeSelAndBlockFromRemaining() {\n          // remove the parsed selector and block from the remaining text to parse\n          if (remaining.length > selAndBlockStr.length) {\n            remaining = remaining.substr(selAndBlockStr.length);\n          } else {\n            remaining = '';\n          }\n        }\n\n        function removePropAndValFromRem() {\n          // remove the parsed property and value from the remaining block text to parse\n          if (blockRem.length > propAndValStr.length) {\n            blockRem = blockRem.substr(propAndValStr.length);\n          } else {\n            blockRem = '';\n          }\n        }\n\n        while (true) {\n          var nothingLeftToParse = remaining.match(/^\\s*$/);\n\n          if (nothingLeftToParse) {\n            break;\n          }\n\n          var selAndBlock = remaining.match(/^\\s*((?:.|\\s)+?)\\s*\\{((?:.|\\s)+?)\\}/);\n\n          if (!selAndBlock) {\n            util.error('Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining);\n            break;\n          }\n\n          selAndBlockStr = selAndBlock[0]; // parse the selector\n\n          var selectorStr = selAndBlock[1];\n\n          if (selectorStr !== 'core') {\n            var selector = new Selector(selectorStr);\n\n            if (selector._private.invalid) {\n              util.error('Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr); // skip this selector and block\n\n              removeSelAndBlockFromRemaining();\n              continue;\n            }\n          } // parse the block of properties and values\n\n\n          var blockStr = selAndBlock[2];\n          var invalidBlock = false;\n          blockRem = blockStr;\n          var props = [];\n\n          while (true) {\n            var _nothingLeftToParse = blockRem.match(/^\\s*$/);\n\n            if (_nothingLeftToParse) {\n              break;\n            }\n\n            var propAndVal = blockRem.match(/^\\s*(.+?)\\s*:\\s*(.+?)\\s*;/);\n\n            if (!propAndVal) {\n              util.error('Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr);\n              invalidBlock = true;\n              break;\n            }\n\n            propAndValStr = propAndVal[0];\n            var propStr = propAndVal[1];\n            var valStr = propAndVal[2];\n            var prop = self.properties[propStr];\n\n            if (!prop) {\n              util.error('Skipping property: Invalid property name in: ' + propAndValStr); // skip this property in the block\n\n              removePropAndValFromRem();\n              continue;\n            }\n\n            var parsedProp = style.parse(propStr, valStr);\n\n            if (!parsedProp) {\n              util.error('Skipping property: Invalid property definition in: ' + propAndValStr); // skip this property in the block\n\n              removePropAndValFromRem();\n              continue;\n            }\n\n            props.push({\n              name: propStr,\n              val: valStr\n            });\n            removePropAndValFromRem();\n          }\n\n          if (invalidBlock) {\n            removeSelAndBlockFromRemaining();\n            break;\n          } // put the parsed block in the style\n\n\n          style.selector(selectorStr);\n\n          for (var i = 0; i < props.length; i++) {\n            var _prop = props[i];\n            style.css(_prop.name, _prop.val);\n          }\n\n          removeSelAndBlockFromRemaining();\n        }\n\n        return style;\n      };\n\n      styfn.fromString = function (string) {\n        var style = this;\n        style.resetToDefault();\n        style.appendFromString(string);\n        return style;\n      };\n\n      module.exports = styfn;\n      /***/\n    },\n    /* 91 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var is = __webpack_require__(0);\n\n      var styfn = {};\n\n      (function () {\n        var number = util.regex.number;\n        var rgba = util.regex.rgbaNoBackRefs;\n        var hsla = util.regex.hslaNoBackRefs;\n        var hex3 = util.regex.hex3;\n        var hex6 = util.regex.hex6;\n\n        var data = function data(prefix) {\n          return '^' + prefix + '\\\\s*\\\\(\\\\s*([\\\\w\\\\.]+)\\\\s*\\\\)$';\n        };\n\n        var mapData = function mapData(prefix) {\n          var mapArg = number + '|\\\\w+|' + rgba + '|' + hsla + '|' + hex3 + '|' + hex6;\n          return '^' + prefix + '\\\\s*\\\\(([\\\\w\\\\.]+)\\\\s*\\\\,\\\\s*(' + number + ')\\\\s*\\\\,\\\\s*(' + number + ')\\\\s*,\\\\s*(' + mapArg + ')\\\\s*\\\\,\\\\s*(' + mapArg + ')\\\\)$';\n        };\n\n        var urlRegexes = ['^url\\\\s*\\\\(\\\\s*[\\'\"]?(.+?)[\\'\"]?\\\\s*\\\\)$', '^(none)$', '^(.+)$']; // each visual style property has a type and needs to be validated according to it\n\n        styfn.types = {\n          time: {\n            number: true,\n            min: 0,\n            units: 's|ms',\n            implicitUnits: 'ms'\n          },\n          percent: {\n            number: true,\n            min: 0,\n            max: 100,\n            units: '%',\n            implicitUnits: '%'\n          },\n          zeroOneNumber: {\n            number: true,\n            min: 0,\n            max: 1,\n            unitless: true\n          },\n          zeroOneNumbers: {\n            number: true,\n            min: 0,\n            max: 1,\n            unitless: true,\n            multiple: true\n          },\n          nOneOneNumber: {\n            number: true,\n            min: -1,\n            max: 1,\n            unitless: true\n          },\n          nonNegativeInt: {\n            number: true,\n            min: 0,\n            integer: true,\n            unitless: true\n          },\n          position: {\n            enums: ['parent', 'origin']\n          },\n          nodeSize: {\n            number: true,\n            min: 0,\n            enums: ['label']\n          },\n          number: {\n            number: true,\n            unitless: true\n          },\n          numbers: {\n            number: true,\n            unitless: true,\n            multiple: true\n          },\n          positiveNumber: {\n            number: true,\n            unitless: true,\n            min: 0,\n            strictMin: true\n          },\n          size: {\n            number: true,\n            min: 0\n          },\n          bidirectionalSize: {\n            number: true\n          },\n          // allows negative\n          bidirectionalSizes: {\n            number: true,\n            multiple: true\n          },\n          // allows negative\n          sizeMaybePercent: {\n            number: true,\n            min: 0,\n            allowPercent: true\n          },\n          paddingRelativeTo: {\n            enums: ['width', 'height', 'average', 'min', 'max']\n          },\n          bgWH: {\n            number: true,\n            min: 0,\n            allowPercent: true,\n            enums: ['auto'],\n            multiple: true\n          },\n          bgPos: {\n            number: true,\n            allowPercent: true,\n            multiple: true\n          },\n          bgRelativeTo: {\n            enums: ['inner', 'include-padding'],\n            multiple: true\n          },\n          bgRepeat: {\n            enums: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat'],\n            multiple: true\n          },\n          bgFit: {\n            enums: ['none', 'contain', 'cover'],\n            multiple: true\n          },\n          bgCrossOrigin: {\n            enums: ['anonymous', 'use-credentials'],\n            multiple: true\n          },\n          bgClip: {\n            enums: ['none', 'node']\n          },\n          color: {\n            color: true\n          },\n          bool: {\n            enums: ['yes', 'no']\n          },\n          lineStyle: {\n            enums: ['solid', 'dotted', 'dashed']\n          },\n          borderStyle: {\n            enums: ['solid', 'dotted', 'dashed', 'double']\n          },\n          curveStyle: {\n            enums: ['bezier', 'unbundled-bezier', 'haystack', 'segments']\n          },\n          fontFamily: {\n            regex: '^([\\\\w- \\\\\"]+(?:\\\\s*,\\\\s*[\\\\w- \\\\\"]+)*)$'\n          },\n          fontletiant: {\n            enums: ['small-caps', 'normal']\n          },\n          fontStyle: {\n            enums: ['italic', 'normal', 'oblique']\n          },\n          fontWeight: {\n            enums: ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900]\n          },\n          textDecoration: {\n            enums: ['none', 'underline', 'overline', 'line-through']\n          },\n          textTransform: {\n            enums: ['none', 'uppercase', 'lowercase']\n          },\n          textWrap: {\n            enums: ['none', 'wrap', 'ellipsis']\n          },\n          textBackgroundShape: {\n            enums: ['rectangle', 'roundrectangle']\n          },\n          nodeShape: {\n            enums: ['rectangle', 'roundrectangle', 'cutrectangle', 'bottomroundrectangle', 'barrel', 'ellipse', 'triangle', 'square', 'pentagon', 'hexagon', 'concavehexagon', 'heptagon', 'octagon', 'tag', 'star', 'diamond', 'vee', 'rhomboid', 'polygon']\n          },\n          compoundIncludeLabels: {\n            enums: ['include', 'exclude']\n          },\n          arrowShape: {\n            enums: ['tee', 'triangle', 'triangle-tee', 'triangle-cross', 'triangle-backcurve', 'half-triangle-overshot', 'vee', 'square', 'circle', 'diamond', 'none']\n          },\n          arrowFill: {\n            enums: ['filled', 'hollow']\n          },\n          display: {\n            enums: ['element', 'none']\n          },\n          visibility: {\n            enums: ['hidden', 'visible']\n          },\n          zCompoundDepth: {\n            enums: ['bottom', 'orphan', 'auto', 'top']\n          },\n          zIndexCompare: {\n            enums: ['auto', 'manual']\n          },\n          valign: {\n            enums: ['top', 'center', 'bottom']\n          },\n          halign: {\n            enums: ['left', 'center', 'right']\n          },\n          text: {\n            string: true\n          },\n          data: {\n            mapping: true,\n            regex: data('data')\n          },\n          layoutData: {\n            mapping: true,\n            regex: data('layoutData')\n          },\n          scratch: {\n            mapping: true,\n            regex: data('scratch')\n          },\n          mapData: {\n            mapping: true,\n            regex: mapData('mapData')\n          },\n          mapLayoutData: {\n            mapping: true,\n            regex: mapData('mapLayoutData')\n          },\n          mapScratch: {\n            mapping: true,\n            regex: mapData('mapScratch')\n          },\n          fn: {\n            mapping: true,\n            fn: true\n          },\n          url: {\n            regexes: urlRegexes,\n            singleRegexMatchValue: true\n          },\n          urls: {\n            regexes: urlRegexes,\n            singleRegexMatchValue: true,\n            multiple: true\n          },\n          propList: {\n            propList: true\n          },\n          angle: {\n            number: true,\n            units: 'deg|rad',\n            implicitUnits: 'rad'\n          },\n          textRotation: {\n            number: true,\n            units: 'deg|rad',\n            implicitUnits: 'rad',\n            enums: ['none', 'autorotate']\n          },\n          polygonPointList: {\n            number: true,\n            multiple: true,\n            evenMultiple: true,\n            min: -1,\n            max: 1,\n            unitless: true\n          },\n          edgeDistances: {\n            enums: ['intersection', 'node-position']\n          },\n          edgeEndpoint: {\n            number: true,\n            multiple: true,\n            units: '%|px|em|deg|rad',\n            implicitUnits: 'px',\n            enums: ['inside-to-node', 'outside-to-node', 'outside-to-line'],\n            singleEnum: true,\n            validate: function validate(valArr, unitsArr) {\n              switch (valArr.length) {\n                case 2:\n                  // can be % or px only\n                  return unitsArr[0] !== 'deg' && unitsArr[0] !== 'rad' && unitsArr[1] !== 'deg' && unitsArr[1] !== 'rad';\n\n                case 1:\n                  // can be enum, deg, or rad only\n                  return is.string(valArr[0]) || unitsArr[0] === 'deg' || unitsArr[0] === 'rad';\n\n                default:\n                  return false;\n              }\n            }\n          },\n          easing: {\n            regexes: ['^(spring)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*,\\\\s*(' + number + ')\\\\s*\\\\)$', '^(cubic-bezier)\\\\s*\\\\(\\\\s*(' + number + ')\\\\s*,\\\\s*(' + number + ')\\\\s*,\\\\s*(' + number + ')\\\\s*,\\\\s*(' + number + ')\\\\s*\\\\)$'],\n            enums: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine', 'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad', 'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic', 'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart', 'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint', 'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo', 'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ']\n          }\n        };\n        var zOrderDiff = {\n          zeroNonZero: function zeroNonZero(val1, val2) {\n            if (val1 === 0 && val2 !== 0) {\n              return true;\n            } else if (val1 !== 0 && val2 === 0) {\n              return true;\n            } else {\n              return false;\n            }\n          },\n          anyDiff: function anyDiff(val1, val2) {\n            return val1 !== val2;\n          }\n        };\n        var zd = zOrderDiff; // define visual style properties\n\n        var t = styfn.types;\n        var props = styfn.properties = [// main label\n        {\n          name: 'label',\n          type: t.text\n        }, {\n          name: 'text-rotation',\n          type: t.textRotation\n        }, {\n          name: 'text-margin-x',\n          type: t.bidirectionalSize\n        }, {\n          name: 'text-margin-y',\n          type: t.bidirectionalSize\n        }, // source label\n        {\n          name: 'source-label',\n          type: t.text\n        }, {\n          name: 'source-text-rotation',\n          type: t.textRotation\n        }, {\n          name: 'source-text-margin-x',\n          type: t.bidirectionalSize\n        }, {\n          name: 'source-text-margin-y',\n          type: t.bidirectionalSize\n        }, {\n          name: 'source-text-offset',\n          type: t.size\n        }, // target label\n        {\n          name: 'target-label',\n          type: t.text\n        }, {\n          name: 'target-text-rotation',\n          type: t.textRotation\n        }, {\n          name: 'target-text-margin-x',\n          type: t.bidirectionalSize\n        }, {\n          name: 'target-text-margin-y',\n          type: t.bidirectionalSize\n        }, {\n          name: 'target-text-offset',\n          type: t.size\n        }, // common label style\n        {\n          name: 'text-valign',\n          type: t.valign\n        }, {\n          name: 'text-halign',\n          type: t.halign\n        }, {\n          name: 'color',\n          type: t.color\n        }, {\n          name: 'text-outline-color',\n          type: t.color\n        }, {\n          name: 'text-outline-width',\n          type: t.size\n        }, {\n          name: 'text-outline-opacity',\n          type: t.zeroOneNumber\n        }, {\n          name: 'text-opacity',\n          type: t.zeroOneNumber\n        }, {\n          name: 'text-background-color',\n          type: t.color\n        }, {\n          name: 'text-background-opacity',\n          type: t.zeroOneNumber\n        }, {\n          name: 'text-background-padding',\n          type: t.size\n        }, {\n          name: 'text-border-opacity',\n          type: t.zeroOneNumber\n        }, {\n          name: 'text-border-color',\n          type: t.color\n        }, {\n          name: 'text-border-width',\n          type: t.size\n        }, {\n          name: 'text-border-style',\n          type: t.borderStyle\n        }, {\n          name: 'text-background-shape',\n          type: t.textBackgroundShape\n        }, // { name: 'text-decoration', type: t.textDecoration }, // not supported in canvas\n        {\n          name: 'text-transform',\n          type: t.textTransform\n        }, {\n          name: 'text-wrap',\n          type: t.textWrap\n        }, {\n          name: 'text-max-width',\n          type: t.size\n        }, {\n          name: 'text-events',\n          type: t.bool\n        }, {\n          name: 'font-family',\n          type: t.fontFamily\n        }, {\n          name: 'font-style',\n          type: t.fontStyle\n        }, // { name: 'font-letiant', type: t.fontletiant }, // not useful\n        {\n          name: 'font-weight',\n          type: t.fontWeight\n        }, {\n          name: 'font-size',\n          type: t.size\n        }, {\n          name: 'min-zoomed-font-size',\n          type: t.size\n        }, // behaviour\n        {\n          name: 'events',\n          type: t.bool\n        }, // visibility\n        {\n          name: 'display',\n          type: t.display,\n          triggersZOrder: zd.anyDiff\n        }, {\n          name: 'visibility',\n          type: t.visibility,\n          triggersZOrder: zd.anyDiff\n        }, {\n          name: 'opacity',\n          type: t.zeroOneNumber,\n          triggersZOrder: zd.zeroNonZero\n        }, {\n          name: 'z-compound-depth',\n          type: t.zCompoundDepth,\n          triggersZOrder: zd.anyDiff\n        }, {\n          name: 'z-index-compare',\n          type: t.zIndexCompare,\n          triggersZOrder: zd.anyDiff\n        }, {\n          name: 'z-index',\n          type: t.nonNegativeInt,\n          triggersZOrder: zd.anyDiff\n        }, // overlays\n        {\n          name: 'overlay-padding',\n          type: t.size\n        }, {\n          name: 'overlay-color',\n          type: t.color\n        }, {\n          name: 'overlay-opacity',\n          type: t.zeroOneNumber\n        }, // transition anis\n        {\n          name: 'transition-property',\n          type: t.propList\n        }, {\n          name: 'transition-duration',\n          type: t.time\n        }, {\n          name: 'transition-delay',\n          type: t.time\n        }, {\n          name: 'transition-timing-function',\n          type: t.easing\n        }, // node body\n        {\n          name: 'height',\n          type: t.nodeSize\n        }, {\n          name: 'width',\n          type: t.nodeSize\n        }, {\n          name: 'shape',\n          type: t.nodeShape\n        }, {\n          name: 'shape-polygon-points',\n          type: t.polygonPointList\n        }, {\n          name: 'background-color',\n          type: t.color\n        }, {\n          name: 'background-opacity',\n          type: t.zeroOneNumber\n        }, {\n          name: 'background-blacken',\n          type: t.nOneOneNumber\n        }, {\n          name: 'padding',\n          type: t.sizeMaybePercent\n        }, {\n          name: 'padding-relative-to',\n          type: t.paddingRelativeTo\n        }, // node border\n        {\n          name: 'border-color',\n          type: t.color\n        }, {\n          name: 'border-opacity',\n          type: t.zeroOneNumber\n        }, {\n          name: 'border-width',\n          type: t.size\n        }, {\n          name: 'border-style',\n          type: t.borderStyle\n        }, // node background images\n        {\n          name: 'background-image',\n          type: t.urls\n        }, {\n          name: 'background-image-crossorigin',\n          type: t.bgCrossOrigin\n        }, {\n          name: 'background-image-opacity',\n          type: t.zeroOneNumbers\n        }, {\n          name: 'background-position-x',\n          type: t.bgPos\n        }, {\n          name: 'background-position-y',\n          type: t.bgPos\n        }, {\n          name: 'background-width-relative-to',\n          type: t.bgRelativeTo\n        }, {\n          name: 'background-height-relative-to',\n          type: t.bgRelativeTo\n        }, {\n          name: 'background-repeat',\n          type: t.bgRepeat\n        }, {\n          name: 'background-fit',\n          type: t.bgFit\n        }, {\n          name: 'background-clip',\n          type: t.bgClip\n        }, {\n          name: 'background-width',\n          type: t.bgWH\n        }, {\n          name: 'background-height',\n          type: t.bgWH\n        }, // compound props\n        {\n          name: 'position',\n          type: t.position\n        }, {\n          name: 'compound-sizing-wrt-labels',\n          type: t.compoundIncludeLabels\n        }, {\n          name: 'min-width',\n          type: t.size\n        }, {\n          name: 'min-width-bias-left',\n          type: t.sizeMaybePercent\n        }, {\n          name: 'min-width-bias-right',\n          type: t.sizeMaybePercent\n        }, {\n          name: 'min-height',\n          type: t.size\n        }, {\n          name: 'min-height-bias-top',\n          type: t.sizeMaybePercent\n        }, {\n          name: 'min-height-bias-bottom',\n          type: t.sizeMaybePercent\n        }, // edge line\n        {\n          name: 'line-style',\n          type: t.lineStyle\n        }, {\n          name: 'line-color',\n          type: t.color\n        }, {\n          name: 'curve-style',\n          type: t.curveStyle\n        }, {\n          name: 'haystack-radius',\n          type: t.zeroOneNumber\n        }, {\n          name: 'source-endpoint',\n          type: t.edgeEndpoint\n        }, {\n          name: 'target-endpoint',\n          type: t.edgeEndpoint\n        }, {\n          name: 'control-point-step-size',\n          type: t.size\n        }, {\n          name: 'control-point-distances',\n          type: t.bidirectionalSizes\n        }, {\n          name: 'control-point-weights',\n          type: t.numbers\n        }, {\n          name: 'segment-distances',\n          type: t.bidirectionalSizes\n        }, {\n          name: 'segment-weights',\n          type: t.numbers\n        }, {\n          name: 'edge-distances',\n          type: t.edgeDistances\n        }, {\n          name: 'arrow-scale',\n          type: t.positiveNumber\n        }, {\n          name: 'loop-direction',\n          type: t.angle\n        }, {\n          name: 'loop-sweep',\n          type: t.angle\n        }, {\n          name: 'source-distance-from-node',\n          type: t.size\n        }, {\n          name: 'target-distance-from-node',\n          type: t.size\n        }, // ghost properties\n        {\n          name: 'ghost',\n          type: t.bool\n        }, {\n          name: 'ghost-offset-x',\n          type: t.bidirectionalSize\n        }, {\n          name: 'ghost-offset-y',\n          type: t.bidirectionalSize\n        }, {\n          name: 'ghost-opacity',\n          type: t.zeroOneNumber\n        }, // these are just for the core\n        {\n          name: 'selection-box-color',\n          type: t.color\n        }, {\n          name: 'selection-box-opacity',\n          type: t.zeroOneNumber\n        }, {\n          name: 'selection-box-border-color',\n          type: t.color\n        }, {\n          name: 'selection-box-border-width',\n          type: t.size\n        }, {\n          name: 'active-bg-color',\n          type: t.color\n        }, {\n          name: 'active-bg-opacity',\n          type: t.zeroOneNumber\n        }, {\n          name: 'active-bg-size',\n          type: t.size\n        }, {\n          name: 'outside-texture-bg-color',\n          type: t.color\n        }, {\n          name: 'outside-texture-bg-opacity',\n          type: t.zeroOneNumber\n        }]; // define aliases\n\n        var aliases = styfn.aliases = [{\n          name: 'content',\n          pointsTo: 'label'\n        }, {\n          name: 'control-point-distance',\n          pointsTo: 'control-point-distances'\n        }, {\n          name: 'control-point-weight',\n          pointsTo: 'control-point-weights'\n        }, {\n          name: 'edge-text-rotation',\n          pointsTo: 'text-rotation'\n        }, {\n          name: 'padding-left',\n          pointsTo: 'padding'\n        }, {\n          name: 'padding-right',\n          pointsTo: 'padding'\n        }, {\n          name: 'padding-top',\n          pointsTo: 'padding'\n        }, {\n          name: 'padding-bottom',\n          pointsTo: 'padding'\n        }]; // pie backgrounds for nodes\n\n        styfn.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)\n\n        props.push({\n          name: 'pie-size',\n          type: t.sizeMaybePercent\n        });\n\n        for (var i = 1; i <= styfn.pieBackgroundN; i++) {\n          props.push({\n            name: 'pie-' + i + '-background-color',\n            type: t.color\n          });\n          props.push({\n            name: 'pie-' + i + '-background-size',\n            type: t.percent\n          });\n          props.push({\n            name: 'pie-' + i + '-background-opacity',\n            type: t.zeroOneNumber\n          });\n        } // edge arrows\n\n\n        var arrowPrefixes = styfn.arrowPrefixes = ['source', 'mid-source', 'target', 'mid-target'];\n        [{\n          name: 'arrow-shape',\n          type: t.arrowShape\n        }, {\n          name: 'arrow-color',\n          type: t.color\n        }, {\n          name: 'arrow-fill',\n          type: t.arrowFill\n        }].forEach(function (prop) {\n          arrowPrefixes.forEach(function (prefix) {\n            var name = prefix + '-' + prop.name;\n            var type = prop.type;\n            props.push({\n              name: name,\n              type: type\n            });\n          });\n        }, {}); // list of property names\n\n        styfn.propertyNames = props.map(function (p) {\n          return p.name;\n        }); // allow access of properties by name ( e.g. style.properties.height )\n\n        for (var _i = 0; _i < props.length; _i++) {\n          var prop = props[_i];\n          props[prop.name] = prop; // allow lookup by name\n        } // map aliases\n\n\n        for (var _i2 = 0; _i2 < aliases.length; _i2++) {\n          var alias = aliases[_i2];\n          var pointsToProp = props[alias.pointsTo];\n          var aliasProp = {\n            name: alias.name,\n            alias: true,\n            pointsTo: pointsToProp\n          }; // add alias prop for parsing\n\n          props.push(aliasProp);\n          props[alias.name] = aliasProp; // allow lookup by name\n        }\n      })();\n\n      styfn.getDefaultProperty = function (name) {\n        return this.getDefaultProperties()[name];\n      };\n\n      styfn.getDefaultProperties = util.memoize(function () {\n        var rawProps = util.extend({\n          // common node/edge props\n          'events': 'yes',\n          'text-events': 'no',\n          'text-valign': 'top',\n          'text-halign': 'center',\n          'color': '#000',\n          'text-outline-color': '#000',\n          'text-outline-width': 0,\n          'text-outline-opacity': 1,\n          'text-opacity': 1,\n          'text-decoration': 'none',\n          'text-transform': 'none',\n          'text-wrap': 'none',\n          'text-max-width': 9999,\n          'text-background-color': '#000',\n          'text-background-opacity': 0,\n          'text-background-shape': 'rectangle',\n          'text-background-padding': 0,\n          'text-border-opacity': 0,\n          'text-border-width': 0,\n          'text-border-style': 'solid',\n          'text-border-color': '#000',\n          'font-family': 'Helvetica Neue, Helvetica, sans-serif',\n          'font-style': 'normal',\n          // 'font-letiant': fontletiant,\n          'font-weight': 'normal',\n          'font-size': 16,\n          'min-zoomed-font-size': 0,\n          'text-rotation': 'none',\n          'source-text-rotation': 'none',\n          'target-text-rotation': 'none',\n          'visibility': 'visible',\n          'display': 'element',\n          'opacity': 1,\n          'z-compound-depth': 'auto',\n          'z-index-compare': 'auto',\n          'z-index': 0,\n          'label': '',\n          'text-margin-x': 0,\n          'text-margin-y': 0,\n          'source-label': '',\n          'source-text-offset': 0,\n          'source-text-margin-x': 0,\n          'source-text-margin-y': 0,\n          'target-label': '',\n          'target-text-offset': 0,\n          'target-text-margin-x': 0,\n          'target-text-margin-y': 0,\n          'overlay-opacity': 0,\n          'overlay-color': '#000',\n          'overlay-padding': 10,\n          'transition-property': 'none',\n          'transition-duration': 0,\n          'transition-delay': 0,\n          'transition-timing-function': 'linear',\n          // node props\n          'background-blacken': 0,\n          'background-color': '#999',\n          'background-opacity': 1,\n          'background-image': 'none',\n          'background-image-crossorigin': 'anonymous',\n          'background-image-opacity': 1,\n          'background-position-x': '50%',\n          'background-position-y': '50%',\n          'background-width-relative-to': 'include-padding',\n          'background-height-relative-to': 'include-padding',\n          'background-repeat': 'no-repeat',\n          'background-fit': 'none',\n          'background-clip': 'node',\n          'background-width': 'auto',\n          'background-height': 'auto',\n          'border-color': '#000',\n          'border-opacity': 1,\n          'border-width': 0,\n          'border-style': 'solid',\n          'height': 30,\n          'width': 30,\n          'shape': 'ellipse',\n          'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',\n          // ghost props\n          'ghost': 'no',\n          'ghost-offset-y': 0,\n          'ghost-offset-x': 0,\n          'ghost-opacity': 0,\n          // compound props\n          'padding': 0,\n          'padding-relative-to': 'width',\n          'position': 'origin',\n          'compound-sizing-wrt-labels': 'include',\n          'min-width': 0,\n          'min-width-bias-left': 0,\n          'min-width-bias-right': 0,\n          'min-height': 0,\n          'min-height-bias-top': 0,\n          'min-height-bias-bottom': 0\n        }, {\n          // node pie bg\n          'pie-size': '100%'\n        }, [{\n          name: 'pie-{{i}}-background-color',\n          value: 'black'\n        }, {\n          name: 'pie-{{i}}-background-size',\n          value: '0%'\n        }, {\n          name: 'pie-{{i}}-background-opacity',\n          value: 1\n        }].reduce(function (css, prop) {\n          for (var i = 1; i <= styfn.pieBackgroundN; i++) {\n            var name = prop.name.replace('{{i}}', i);\n            var val = prop.value;\n            css[name] = val;\n          }\n\n          return css;\n        }, {}), {\n          // edge props\n          'line-style': 'solid',\n          'line-color': '#999',\n          'control-point-step-size': 40,\n          'control-point-weights': 0.5,\n          'segment-weights': 0.5,\n          'segment-distances': 20,\n          'edge-distances': 'intersection',\n          'curve-style': 'bezier',\n          'haystack-radius': 0,\n          'arrow-scale': 1,\n          'loop-direction': '-45deg',\n          'loop-sweep': '-90deg',\n          'source-distance-from-node': 0,\n          'target-distance-from-node': 0,\n          'source-endpoint': 'outside-to-node',\n          'target-endpoint': 'outside-to-node'\n        }, [{\n          name: 'arrow-shape',\n          value: 'none'\n        }, {\n          name: 'arrow-color',\n          value: '#999'\n        }, {\n          name: 'arrow-fill',\n          value: 'filled'\n        }].reduce(function (css, prop) {\n          styfn.arrowPrefixes.forEach(function (prefix) {\n            var name = prefix + '-' + prop.name;\n            var val = prop.value;\n            css[name] = val;\n          });\n          return css;\n        }, {}));\n        var parsedProps = {};\n\n        for (var i = 0; i < this.properties.length; i++) {\n          var prop = this.properties[i];\n\n          if (prop.pointsTo) {\n            continue;\n          }\n\n          var name = prop.name;\n          var val = rawProps[name];\n          var parsedProp = this.parse(name, val);\n          parsedProps[name] = parsedProp;\n        }\n\n        return parsedProps;\n      });\n\n      styfn.addDefaultStylesheet = function () {\n        this.selector('$node > node') // compound (parent) node properties\n        .css({\n          'shape': 'rectangle',\n          'padding': 10,\n          'background-color': '#eee',\n          'border-color': '#ccc',\n          'border-width': 1\n        }).selector('edge') // just edge properties\n        .css({\n          'width': 3,\n          'curve-style': 'haystack'\n        }).selector(':parent <-> node').css({\n          'curve-style': 'bezier',\n          'source-endpoint': 'outside-to-line',\n          'target-endpoint': 'outside-to-line'\n        }).selector(':selected').css({\n          'background-color': '#0169D9',\n          'line-color': '#0169D9',\n          'source-arrow-color': '#0169D9',\n          'target-arrow-color': '#0169D9',\n          'mid-source-arrow-color': '#0169D9',\n          'mid-target-arrow-color': '#0169D9'\n        }).selector('node:parent:selected').css({\n          'background-color': '#CCE1F9',\n          'border-color': '#aec8e5'\n        }).selector(':active').css({\n          'overlay-color': 'black',\n          'overlay-padding': 10,\n          'overlay-opacity': 0.25\n        }).selector('core') // just core properties\n        .css({\n          'selection-box-color': '#ddd',\n          'selection-box-opacity': 0.65,\n          'selection-box-border-color': '#aaa',\n          'selection-box-border-width': 1,\n          'active-bg-color': 'black',\n          'active-bg-opacity': 0.15,\n          'active-bg-size': 30,\n          'outside-texture-bg-color': '#000',\n          'outside-texture-bg-opacity': 0.125\n        });\n        this.defaultLength = this.length;\n      };\n\n      module.exports = styfn;\n      /***/\n    },\n    /* 92 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var is = __webpack_require__(0);\n\n      var math = __webpack_require__(2);\n\n      var styfn = {}; // a caching layer for property parsing\n\n      styfn.parse = function (name, value, propIsBypass, propIsFlat) {\n        var self = this; // function values can't be cached in all cases, and there isn't much benefit of caching them anyway\n\n        if (is.fn(value)) {\n          return self.parseImplWarn(name, value, propIsBypass, propIsFlat);\n        }\n\n        var flatKey = propIsFlat === 'mapping' || propIsFlat === true || propIsFlat === false || propIsFlat == null ? 'dontcare' : propIsFlat;\n        var argHash = [name, value, propIsBypass, flatKey].join('$');\n        var propCache = self.propCache = self.propCache || {};\n        var ret = void 0;\n\n        if (!(ret = propCache[argHash])) {\n          ret = propCache[argHash] = self.parseImplWarn(name, value, propIsBypass, propIsFlat);\n        } // - bypasses can't be shared b/c the value can be changed by animations or otherwise overridden\n        // - mappings can't be shared b/c mappings are per-element\n\n\n        if (propIsBypass || propIsFlat === 'mapping') {\n          // need a copy since props are mutated later in their lifecycles\n          ret = util.copy(ret);\n\n          if (ret) {\n            ret.value = util.copy(ret.value); // because it could be an array, e.g. colour\n          }\n        }\n\n        return ret;\n      };\n\n      styfn.parseImplWarn = function (name, value, propIsBypass, propIsFlat) {\n        var prop = this.parseImpl(name, value, propIsBypass, propIsFlat);\n\n        if (!prop && value != null) {\n          util.error('The style property `%s: %s` is invalid', name, value);\n        }\n\n        return prop;\n      }; // parse a property; return null on invalid; return parsed property otherwise\n      // fields :\n      // - name : the name of the property\n      // - value : the parsed, native-typed value of the property\n      // - strValue : a string value that represents the property value in valid css\n      // - bypass : true iff the property is a bypass property\n\n\n      styfn.parseImpl = function (name, value, propIsBypass, propIsFlat) {\n        var self = this;\n        name = util.camel2dash(name); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')\n\n        var property = self.properties[name];\n        var passedValue = value;\n        var types = self.types;\n\n        if (!property) {\n          return null;\n        } // return null on property of unknown name\n\n\n        if (value === undefined) {\n          return null;\n        } // can't assign undefined\n        // the property may be an alias\n\n\n        if (property.alias) {\n          property = property.pointsTo;\n          name = property.name;\n        }\n\n        var valueIsString = is.string(value);\n\n        if (valueIsString) {\n          // trim the value to make parsing easier\n          value = value.trim();\n        }\n\n        var type = property.type;\n\n        if (!type) {\n          return null;\n        } // no type, no luck\n        // check if bypass is null or empty string (i.e. indication to delete bypass property)\n\n\n        if (propIsBypass && (value === '' || value === null)) {\n          return {\n            name: name,\n            value: value,\n            bypass: true,\n            deleteBypass: true\n          };\n        } // check if value is a function used as a mapper\n\n\n        if (is.fn(value)) {\n          return {\n            name: name,\n            value: value,\n            strValue: 'fn',\n            mapped: types.fn,\n            bypass: propIsBypass\n          };\n        } // check if value is mapped\n\n\n        var data = void 0,\n            mapData = void 0;\n\n        if (!valueIsString || propIsFlat) {// then don't bother to do the expensive regex checks\n        } else if (data = new RegExp(types.data.regex).exec(value)) {\n          if (propIsBypass) {\n            return false;\n          } // mappers not allowed in bypass\n\n\n          var mapped = types.data;\n          return {\n            name: name,\n            value: data,\n            strValue: '' + value,\n            mapped: mapped,\n            field: data[1],\n            bypass: propIsBypass\n          };\n        } else if (mapData = new RegExp(types.mapData.regex).exec(value)) {\n          if (propIsBypass) {\n            return false;\n          } // mappers not allowed in bypass\n\n\n          if (type.multiple) {\n            return false;\n          } // impossible to map to num\n\n\n          var _mapped = types.mapData; // we can map only if the type is a colour or a number\n\n          if (!(type.color || type.number)) {\n            return false;\n          }\n\n          var valueMin = this.parse(name, mapData[4]); // parse to validate\n\n          if (!valueMin || valueMin.mapped) {\n            return false;\n          } // can't be invalid or mapped\n\n\n          var valueMax = this.parse(name, mapData[5]); // parse to validate\n\n          if (!valueMax || valueMax.mapped) {\n            return false;\n          } // can't be invalid or mapped\n          // check if valueMin and valueMax are the same\n\n\n          if (valueMin.value === valueMax.value) {\n            return false; // can't make much of a mapper without a range\n          } else if (type.color) {\n            var c1 = valueMin.value;\n            var c2 = valueMax.value;\n            var same = c1[0] === c2[0] // red\n            && c1[1] === c2[1] // green\n            && c1[2] === c2[2] // blue\n            && ( // optional alpha\n            c1[3] === c2[3] // same alpha outright\n            || (c1[3] == null || c1[3] === 1) && ( // full opacity for colour 1?\n            c2[3] == null || c2[3] === 1) // full opacity for colour 2?\n            );\n\n            if (same) {\n              return false;\n            } // can't make a mapper without a range\n\n          }\n\n          return {\n            name: name,\n            value: mapData,\n            strValue: '' + value,\n            mapped: _mapped,\n            field: mapData[1],\n            fieldMin: parseFloat(mapData[2]),\n            // min & max are numeric\n            fieldMax: parseFloat(mapData[3]),\n            valueMin: valueMin.value,\n            valueMax: valueMax.value,\n            bypass: propIsBypass\n          };\n        }\n\n        if (type.multiple && propIsFlat !== 'multiple') {\n          var vals = void 0;\n\n          if (valueIsString) {\n            vals = value.split(/\\s+/);\n          } else if (is.array(value)) {\n            vals = value;\n          } else {\n            vals = [value];\n          }\n\n          if (type.evenMultiple && vals.length % 2 !== 0) {\n            return null;\n          }\n\n          var valArr = [];\n          var unitsArr = [];\n          var pfValArr = [];\n          var hasEnum = false;\n\n          for (var i = 0; i < vals.length; i++) {\n            var p = self.parse(name, vals[i], propIsBypass, 'multiple');\n            hasEnum = hasEnum || is.string(p.value);\n            valArr.push(p.value);\n            pfValArr.push(p.pfValue != null ? p.pfValue : p.value);\n            unitsArr.push(p.units);\n          }\n\n          if (type.validate && !type.validate(valArr, unitsArr)) {\n            return null;\n          }\n\n          if (type.singleEnum && hasEnum) {\n            if (valArr.length === 1 && is.string(valArr[0])) {\n              return {\n                name: name,\n                value: valArr[0],\n                strValue: valArr[0],\n                bypass: propIsBypass\n              };\n            } else {\n              return null;\n            }\n          }\n\n          return {\n            name: name,\n            value: valArr,\n            pfValue: pfValArr,\n            strValue: valArr.map(function (val, i) {\n              return val + (unitsArr[i] || '');\n            }).join(' '),\n            bypass: propIsBypass,\n            units: unitsArr\n          };\n        } // several types also allow enums\n\n\n        var checkEnums = function checkEnums() {\n          for (var _i = 0; _i < type.enums.length; _i++) {\n            var en = type.enums[_i];\n\n            if (en === value) {\n              return {\n                name: name,\n                value: value,\n                strValue: '' + value,\n                bypass: propIsBypass\n              };\n            }\n          }\n\n          return null;\n        }; // check the type and return the appropriate object\n\n\n        if (type.number) {\n          var units = void 0;\n          var implicitUnits = 'px'; // not set => px\n\n          if (type.units) {\n            // use specified units if set\n            units = type.units;\n          }\n\n          if (type.implicitUnits) {\n            implicitUnits = type.implicitUnits;\n          }\n\n          if (!type.unitless) {\n            if (valueIsString) {\n              var unitsRegex = 'px|em' + (type.allowPercent ? '|\\\\%' : '');\n\n              if (units) {\n                unitsRegex = units;\n              } // only allow explicit units if so set\n\n\n              var match = value.match('^(' + util.regex.number + ')(' + unitsRegex + ')?' + '$');\n\n              if (match) {\n                value = match[1];\n                units = match[2] || implicitUnits;\n              }\n            } else if (!units || type.implicitUnits) {\n              units = implicitUnits; // implicitly px if unspecified\n            }\n          }\n\n          value = parseFloat(value); // if not a number and enums not allowed, then the value is invalid\n\n          if (isNaN(value) && type.enums === undefined) {\n            return null;\n          } // check if this number type also accepts special keywords in place of numbers\n          // (i.e. `left`, `auto`, etc)\n\n\n          if (isNaN(value) && type.enums !== undefined) {\n            value = passedValue;\n            return checkEnums();\n          } // check if value must be an integer\n\n\n          if (type.integer && !is.integer(value)) {\n            return null;\n          } // check value is within range\n\n\n          if (type.min !== undefined && (value < type.min || type.strictMin && value === type.min) || type.max !== undefined && (value > type.max || type.strictMax && value === type.max)) {\n            return null;\n          }\n\n          var ret = {\n            name: name,\n            value: value,\n            strValue: '' + value + (units ? units : ''),\n            units: units,\n            bypass: propIsBypass\n          }; // normalise value in pixels\n\n          if (type.unitless || units !== 'px' && units !== 'em') {\n            ret.pfValue = value;\n          } else {\n            ret.pfValue = units === 'px' || !units ? value : this.getEmSizeInPixels() * value;\n          } // normalise value in ms\n\n\n          if (units === 'ms' || units === 's') {\n            ret.pfValue = units === 'ms' ? value : 1000 * value;\n          } // normalise value in rad\n\n\n          if (units === 'deg' || units === 'rad') {\n            ret.pfValue = units === 'rad' ? value : math.deg2rad(value);\n          } // normalize value in %\n\n\n          if (units === '%') {\n            ret.pfValue = value / 100;\n          }\n\n          return ret;\n        } else if (type.propList) {\n          var props = [];\n          var propsStr = '' + value;\n\n          if (propsStr === 'none') {// leave empty\n          } else {\n            // go over each prop\n            var propsSplit = propsStr.split(',');\n\n            for (var _i2 = 0; _i2 < propsSplit.length; _i2++) {\n              var propName = propsSplit[_i2].trim();\n\n              if (self.properties[propName]) {\n                props.push(propName);\n              }\n            }\n\n            if (props.length === 0) {\n              return null;\n            }\n          }\n\n          return {\n            name: name,\n            value: props,\n            strValue: props.length === 0 ? 'none' : props.join(', '),\n            bypass: propIsBypass\n          };\n        } else if (type.color) {\n          var tuple = util.color2tuple(value);\n\n          if (!tuple) {\n            return null;\n          }\n\n          return {\n            name: name,\n            value: tuple,\n            pfValue: tuple,\n            strValue: '' + value,\n            bypass: propIsBypass\n          };\n        } else if (type.regex || type.regexes) {\n          // first check enums\n          if (type.enums) {\n            var enumProp = checkEnums();\n\n            if (enumProp) {\n              return enumProp;\n            }\n          }\n\n          var regexes = type.regexes ? type.regexes : [type.regex];\n\n          for (var _i3 = 0; _i3 < regexes.length; _i3++) {\n            var regex = new RegExp(regexes[_i3]); // make a regex from the type string\n\n            var m = regex.exec(value);\n\n            if (m) {\n              // regex matches\n              return {\n                name: name,\n                value: type.singleRegexMatchValue ? m[1] : m,\n                strValue: '' + value,\n                bypass: propIsBypass\n              };\n            }\n          }\n\n          return null; // didn't match any\n        } else if (type.string) {\n          // just return\n          return {\n            name: name,\n            value: '' + value,\n            strValue: '' + value,\n            bypass: propIsBypass\n          };\n        } else if (type.enums) {\n          // check enums last because it's a combo type in others\n          return checkEnums();\n        } else {\n          return null; // not a type we can handle\n        }\n      };\n\n      module.exports = styfn;\n      /***/\n    },\n    /* 93 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var window = __webpack_require__(3);\n\n      var math = __webpack_require__(2);\n\n      var corefn = {\n        autolock: function autolock(bool) {\n          if (bool !== undefined) {\n            this._private.autolock = bool ? true : false;\n          } else {\n            return this._private.autolock;\n          }\n\n          return this; // chaining\n        },\n        autoungrabify: function autoungrabify(bool) {\n          if (bool !== undefined) {\n            this._private.autoungrabify = bool ? true : false;\n          } else {\n            return this._private.autoungrabify;\n          }\n\n          return this; // chaining\n        },\n        autounselectify: function autounselectify(bool) {\n          if (bool !== undefined) {\n            this._private.autounselectify = bool ? true : false;\n          } else {\n            return this._private.autounselectify;\n          }\n\n          return this; // chaining\n        },\n        panningEnabled: function panningEnabled(bool) {\n          if (bool !== undefined) {\n            this._private.panningEnabled = bool ? true : false;\n          } else {\n            return this._private.panningEnabled;\n          }\n\n          return this; // chaining\n        },\n        userPanningEnabled: function userPanningEnabled(bool) {\n          if (bool !== undefined) {\n            this._private.userPanningEnabled = bool ? true : false;\n          } else {\n            return this._private.userPanningEnabled;\n          }\n\n          return this; // chaining\n        },\n        zoomingEnabled: function zoomingEnabled(bool) {\n          if (bool !== undefined) {\n            this._private.zoomingEnabled = bool ? true : false;\n          } else {\n            return this._private.zoomingEnabled;\n          }\n\n          return this; // chaining\n        },\n        userZoomingEnabled: function userZoomingEnabled(bool) {\n          if (bool !== undefined) {\n            this._private.userZoomingEnabled = bool ? true : false;\n          } else {\n            return this._private.userZoomingEnabled;\n          }\n\n          return this; // chaining\n        },\n        boxSelectionEnabled: function boxSelectionEnabled(bool) {\n          if (bool !== undefined) {\n            this._private.boxSelectionEnabled = bool ? true : false;\n          } else {\n            return this._private.boxSelectionEnabled;\n          }\n\n          return this; // chaining\n        },\n        pan: function pan() {\n          var args = arguments;\n          var pan = this._private.pan;\n          var dim = void 0,\n              val = void 0,\n              dims = void 0,\n              x = void 0,\n              y = void 0;\n\n          switch (args.length) {\n            case 0:\n              // .pan()\n              return pan;\n\n            case 1:\n              if (is.string(args[0])) {\n                // .pan('x')\n                dim = args[0];\n                return pan[dim];\n              } else if (is.plainObject(args[0])) {\n                // .pan({ x: 0, y: 100 })\n                if (!this._private.panningEnabled) {\n                  return this;\n                }\n\n                dims = args[0];\n                x = dims.x;\n                y = dims.y;\n\n                if (is.number(x)) {\n                  pan.x = x;\n                }\n\n                if (is.number(y)) {\n                  pan.y = y;\n                }\n\n                this.emit('pan viewport');\n              }\n\n              break;\n\n            case 2:\n              // .pan('x', 100)\n              if (!this._private.panningEnabled) {\n                return this;\n              }\n\n              dim = args[0];\n              val = args[1];\n\n              if ((dim === 'x' || dim === 'y') && is.number(val)) {\n                pan[dim] = val;\n              }\n\n              this.emit('pan viewport');\n              break;\n\n            default:\n              break;\n            // invalid\n          }\n\n          this.notify({\n            // notify the renderer that the viewport changed\n            type: 'viewport'\n          });\n          return this; // chaining\n        },\n        panBy: function panBy(arg0, arg1) {\n          var args = arguments;\n          var pan = this._private.pan;\n          var dim = void 0,\n              val = void 0,\n              dims = void 0,\n              x = void 0,\n              y = void 0;\n\n          if (!this._private.panningEnabled) {\n            return this;\n          }\n\n          switch (args.length) {\n            case 1:\n              if (is.plainObject(arg0)) {\n                // .panBy({ x: 0, y: 100 })\n                dims = args[0];\n                x = dims.x;\n                y = dims.y;\n\n                if (is.number(x)) {\n                  pan.x += x;\n                }\n\n                if (is.number(y)) {\n                  pan.y += y;\n                }\n\n                this.emit('pan viewport');\n              }\n\n              break;\n\n            case 2:\n              // .panBy('x', 100)\n              dim = arg0;\n              val = arg1;\n\n              if ((dim === 'x' || dim === 'y') && is.number(val)) {\n                pan[dim] += val;\n              }\n\n              this.emit('pan viewport');\n              break;\n\n            default:\n              break;\n            // invalid\n          }\n\n          this.notify({\n            // notify the renderer that the viewport changed\n            type: 'viewport'\n          });\n          return this; // chaining\n        },\n        fit: function fit(elements, padding) {\n          var viewportState = this.getFitViewport(elements, padding);\n\n          if (viewportState) {\n            var _p = this._private;\n            _p.zoom = viewportState.zoom;\n            _p.pan = viewportState.pan;\n            this.emit('pan zoom viewport');\n            this.notify({\n              // notify the renderer that the viewport changed\n              type: 'viewport'\n            });\n          }\n\n          return this; // chaining\n        },\n        getFitViewport: function getFitViewport(elements, padding) {\n          if (is.number(elements) && padding === undefined) {\n            // elements is optional\n            padding = elements;\n            elements = undefined;\n          }\n\n          if (!this._private.panningEnabled || !this._private.zoomingEnabled) {\n            return;\n          }\n\n          var bb = void 0;\n\n          if (is.string(elements)) {\n            var sel = elements;\n            elements = this.$(sel);\n          } else if (is.boundingBox(elements)) {\n            // assume bb\n            var bbe = elements;\n            bb = {\n              x1: bbe.x1,\n              y1: bbe.y1,\n              x2: bbe.x2,\n              y2: bbe.y2\n            };\n            bb.w = bb.x2 - bb.x1;\n            bb.h = bb.y2 - bb.y1;\n          } else if (!is.elementOrCollection(elements)) {\n            elements = this.mutableElements();\n          }\n\n          if (is.elementOrCollection(elements) && elements.empty()) {\n            return;\n          } // can't fit to nothing\n\n\n          bb = bb || elements.boundingBox();\n          var w = this.width();\n          var h = this.height();\n          var zoom = void 0;\n          padding = is.number(padding) ? padding : 0;\n\n          if (!isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) && bb.w > 0 && bb.h > 0) {\n            zoom = Math.min((w - 2 * padding) / bb.w, (h - 2 * padding) / bb.h); // crop zoom\n\n            zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;\n            zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;\n            var pan = {\n              // now pan to middle\n              x: (w - zoom * (bb.x1 + bb.x2)) / 2,\n              y: (h - zoom * (bb.y1 + bb.y2)) / 2\n            };\n            return {\n              zoom: zoom,\n              pan: pan\n            };\n          }\n\n          return;\n        },\n        minZoom: function minZoom(zoom) {\n          if (zoom === undefined) {\n            return this._private.minZoom;\n          } else if (is.number(zoom)) {\n            this._private.minZoom = zoom;\n          }\n\n          return this;\n        },\n        maxZoom: function maxZoom(zoom) {\n          if (zoom === undefined) {\n            return this._private.maxZoom;\n          } else if (is.number(zoom)) {\n            this._private.maxZoom = zoom;\n          }\n\n          return this;\n        },\n        getZoomedViewport: function getZoomedViewport(params) {\n          var _p = this._private;\n          var currentPan = _p.pan;\n          var currentZoom = _p.zoom;\n          var pos = void 0; // in rendered px\n\n          var zoom = void 0;\n          var bail = false;\n\n          if (!_p.zoomingEnabled) {\n            // zooming disabled\n            bail = true;\n          }\n\n          if (is.number(params)) {\n            // then set the zoom\n            zoom = params;\n          } else if (is.plainObject(params)) {\n            // then zoom about a point\n            zoom = params.level;\n\n            if (params.position != null) {\n              pos = math.modelToRenderedPosition(params.position, currentZoom, currentPan);\n            } else if (params.renderedPosition != null) {\n              pos = params.renderedPosition;\n            }\n\n            if (pos != null && !_p.panningEnabled) {\n              // panning disabled\n              bail = true;\n            }\n          } // crop zoom\n\n\n          zoom = zoom > _p.maxZoom ? _p.maxZoom : zoom;\n          zoom = zoom < _p.minZoom ? _p.minZoom : zoom; // can't zoom with invalid params\n\n          if (bail || !is.number(zoom) || zoom === currentZoom || pos != null && (!is.number(pos.x) || !is.number(pos.y))) {\n            return null;\n          }\n\n          if (pos != null) {\n            // set zoom about position\n            var pan1 = currentPan;\n            var zoom1 = currentZoom;\n            var zoom2 = zoom;\n            var pan2 = {\n              x: -zoom2 / zoom1 * (pos.x - pan1.x) + pos.x,\n              y: -zoom2 / zoom1 * (pos.y - pan1.y) + pos.y\n            };\n            return {\n              zoomed: true,\n              panned: true,\n              zoom: zoom2,\n              pan: pan2\n            };\n          } else {\n            // just set the zoom\n            return {\n              zoomed: true,\n              panned: false,\n              zoom: zoom,\n              pan: currentPan\n            };\n          }\n        },\n        zoom: function zoom(params) {\n          if (params === undefined) {\n            // get\n            return this._private.zoom;\n          } else {\n            // set\n            var vp = this.getZoomedViewport(params);\n            var _p = this._private;\n\n            if (vp == null || !vp.zoomed) {\n              return this;\n            }\n\n            _p.zoom = vp.zoom;\n\n            if (vp.panned) {\n              _p.pan.x = vp.pan.x;\n              _p.pan.y = vp.pan.y;\n            }\n\n            this.emit('zoom' + (vp.panned ? ' pan' : '') + ' viewport');\n            this.notify({\n              // notify the renderer that the viewport changed\n              type: 'viewport'\n            });\n            return this; // chaining\n          }\n        },\n        viewport: function viewport(opts) {\n          var _p = this._private;\n          var zoomDefd = true;\n          var panDefd = true;\n          var events = []; // to trigger\n\n          var zoomFailed = false;\n          var panFailed = false;\n\n          if (!opts) {\n            return this;\n          }\n\n          if (!is.number(opts.zoom)) {\n            zoomDefd = false;\n          }\n\n          if (!is.plainObject(opts.pan)) {\n            panDefd = false;\n          }\n\n          if (!zoomDefd && !panDefd) {\n            return this;\n          }\n\n          if (zoomDefd) {\n            var z = opts.zoom;\n\n            if (z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled) {\n              zoomFailed = true;\n            } else {\n              _p.zoom = z;\n              events.push('zoom');\n            }\n          }\n\n          if (panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled) {\n            var p = opts.pan;\n\n            if (is.number(p.x)) {\n              _p.pan.x = p.x;\n              panFailed = false;\n            }\n\n            if (is.number(p.y)) {\n              _p.pan.y = p.y;\n              panFailed = false;\n            }\n\n            if (!panFailed) {\n              events.push('pan');\n            }\n          }\n\n          if (events.length > 0) {\n            events.push('viewport');\n            this.emit(events.join(' '));\n            this.notify({\n              type: 'viewport'\n            });\n          }\n\n          return this; // chaining\n        },\n        center: function center(elements) {\n          var pan = this.getCenterPan(elements);\n\n          if (pan) {\n            this._private.pan = pan;\n            this.emit('pan viewport');\n            this.notify({\n              // notify the renderer that the viewport changed\n              type: 'viewport'\n            });\n          }\n\n          return this; // chaining\n        },\n        getCenterPan: function getCenterPan(elements, zoom) {\n          if (!this._private.panningEnabled) {\n            return;\n          }\n\n          if (is.string(elements)) {\n            var selector = elements;\n            elements = this.mutableElements().filter(selector);\n          } else if (!is.elementOrCollection(elements)) {\n            elements = this.mutableElements();\n          }\n\n          if (elements.length === 0) {\n            return;\n          } // can't centre pan to nothing\n\n\n          var bb = elements.boundingBox();\n          var w = this.width();\n          var h = this.height();\n          zoom = zoom === undefined ? this._private.zoom : zoom;\n          var pan = {\n            // middle\n            x: (w - zoom * (bb.x1 + bb.x2)) / 2,\n            y: (h - zoom * (bb.y1 + bb.y2)) / 2\n          };\n          return pan;\n        },\n        reset: function reset() {\n          if (!this._private.panningEnabled || !this._private.zoomingEnabled) {\n            return this;\n          }\n\n          this.viewport({\n            pan: {\n              x: 0,\n              y: 0\n            },\n            zoom: 1\n          });\n          return this; // chaining\n        },\n        invalidateSize: function invalidateSize() {\n          this._private.sizeCache = null;\n        },\n        size: function size() {\n          var _p = this._private;\n          var container = _p.container;\n          return _p.sizeCache = _p.sizeCache || (container ? function () {\n            var style = window.getComputedStyle(container);\n\n            var val = function val(name) {\n              return parseFloat(style.getPropertyValue(name));\n            };\n\n            return {\n              width: container.clientWidth - val('padding-left') - val('padding-right'),\n              height: container.clientHeight - val('padding-top') - val('padding-bottom')\n            };\n          }() : {\n            // fallback if no container (not 0 b/c can be used for dividing etc)\n            width: 1,\n            height: 1\n          });\n        },\n        width: function width() {\n          return this.size().width;\n        },\n        height: function height() {\n          return this.size().height;\n        },\n        extent: function extent() {\n          var pan = this._private.pan;\n          var zoom = this._private.zoom;\n          var rb = this.renderedExtent();\n          var b = {\n            x1: (rb.x1 - pan.x) / zoom,\n            x2: (rb.x2 - pan.x) / zoom,\n            y1: (rb.y1 - pan.y) / zoom,\n            y2: (rb.y2 - pan.y) / zoom\n          };\n          b.w = b.x2 - b.x1;\n          b.h = b.y2 - b.y1;\n          return b;\n        },\n        renderedExtent: function renderedExtent() {\n          var width = this.width();\n          var height = this.height();\n          return {\n            x1: 0,\n            y1: 0,\n            x2: width,\n            y2: height,\n            w: width,\n            h: height\n          };\n        }\n      }; // aliases\n\n      corefn.centre = corefn.center; // backwards compatibility\n\n      corefn.autolockNodes = corefn.autolock;\n      corefn.autoungrabifyNodes = corefn.autoungrabify;\n      module.exports = corefn;\n      /***/\n    },\n    /* 94 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var define = __webpack_require__(4);\n\n      var Collection = __webpack_require__(7);\n\n      var Core = __webpack_require__(12);\n\n      var incExts = __webpack_require__(95);\n\n      var is = __webpack_require__(0);\n\n      var Emitter = __webpack_require__(11); // registered extensions to cytoscape, indexed by name\n\n\n      var extensions = {}; // registered modules for extensions, indexed by name\n\n      var modules = {};\n\n      function setExtension(type, name, registrant) {\n        var ext = registrant;\n\n        var overrideErr = function overrideErr(field) {\n          util.error('Can not register `' + name + '` for `' + type + '` since `' + field + '` already exists in the prototype and can not be overridden');\n        };\n\n        if (type === 'core') {\n          if (Core.prototype[name]) {\n            return overrideErr(name);\n          } else {\n            Core.prototype[name] = registrant;\n          }\n        } else if (type === 'collection') {\n          if (Collection.prototype[name]) {\n            return overrideErr(name);\n          } else {\n            Collection.prototype[name] = registrant;\n          }\n        } else if (type === 'layout') {\n          // fill in missing layout functions in the prototype\n          var Layout = function Layout(options) {\n            this.options = options;\n            registrant.call(this, options); // make sure layout has _private for use w/ std apis like .on()\n\n            if (!is.plainObject(this._private)) {\n              this._private = {};\n            }\n\n            this._private.cy = options.cy;\n            this._private.listeners = [];\n            this.createEmitter();\n          };\n\n          var layoutProto = Layout.prototype = Object.create(registrant.prototype);\n          var optLayoutFns = [];\n\n          for (var i = 0; i < optLayoutFns.length; i++) {\n            var fnName = optLayoutFns[i];\n\n            layoutProto[fnName] = layoutProto[fnName] || function () {\n              return this;\n            };\n          } // either .start() or .run() is defined, so autogen the other\n\n\n          if (layoutProto.start && !layoutProto.run) {\n            layoutProto.run = function () {\n              this.start();\n              return this;\n            };\n          } else if (!layoutProto.start && layoutProto.run) {\n            layoutProto.start = function () {\n              this.run();\n              return this;\n            };\n          }\n\n          var regStop = registrant.prototype.stop;\n\n          layoutProto.stop = function () {\n            var opts = this.options;\n\n            if (opts && opts.animate) {\n              var anis = this.animations;\n\n              if (anis) {\n                for (var _i = 0; _i < anis.length; _i++) {\n                  anis[_i].stop();\n                }\n              }\n            }\n\n            if (regStop) {\n              regStop.call(this);\n            } else {\n              this.emit('layoutstop');\n            }\n\n            return this;\n          };\n\n          if (!layoutProto.destroy) {\n            layoutProto.destroy = function () {\n              return this;\n            };\n          }\n\n          layoutProto.cy = function () {\n            return this._private.cy;\n          };\n\n          var getCy = function getCy(layout) {\n            return layout._private.cy;\n          };\n\n          util.assign(layoutProto, {\n            createEmitter: function createEmitter() {\n              this._private.emitter = new Emitter({\n                eventFields: function eventFields(layout) {\n                  return {\n                    layout: layout,\n                    cy: getCy(layout),\n                    target: layout\n                  };\n                },\n                bubble: function bubble() {\n                  return true;\n                },\n                parent: function parent(layout) {\n                  return getCy(layout);\n                },\n                context: this\n              });\n              return this;\n            },\n            emitter: function emitter() {\n              return this._private.emitter;\n            },\n            on: function on(evt, cb) {\n              this.emitter().on(evt, cb);\n              return this;\n            },\n            one: function one(evt, cb) {\n              this.emitter().one(evt, cb);\n              return this;\n            },\n            once: function once(evt, cb) {\n              this.emitter().one(evt, cb);\n              return this;\n            },\n            removeListener: function removeListener(evt, cb) {\n              this.emitter().removeListener(evt, cb);\n              return this;\n            },\n            emit: function emit(evt, params) {\n              this.emitter().emit(evt, params);\n              return this;\n            }\n          });\n          define.eventAliasesOn(layoutProto);\n          ext = Layout; // replace with our wrapped layout\n        } else if (type === 'renderer' && name !== 'null' && name !== 'base') {\n          // user registered renderers inherit from base\n          var BaseRenderer = getExtension('renderer', 'base');\n          var bProto = BaseRenderer.prototype;\n          var RegistrantRenderer = registrant;\n          var rProto = registrant.prototype;\n\n          var Renderer = function Renderer() {\n            BaseRenderer.apply(this, arguments);\n            RegistrantRenderer.apply(this, arguments);\n          };\n\n          var proto = Renderer.prototype;\n\n          for (var pName in bProto) {\n            var pVal = bProto[pName];\n            var existsInR = rProto[pName] != null;\n\n            if (existsInR) {\n              return overrideErr(pName);\n            }\n\n            proto[pName] = pVal; // take impl from base\n          }\n\n          for (var _pName in rProto) {\n            proto[_pName] = rProto[_pName]; // take impl from registrant\n          }\n\n          bProto.clientFunctions.forEach(function (name) {\n            proto[name] = proto[name] || function () {\n              util.error('Renderer does not implement `renderer.' + name + '()` on its prototype');\n            };\n          });\n          ext = Renderer;\n        }\n\n        return util.setMap({\n          map: extensions,\n          keys: [type, name],\n          value: ext\n        });\n      }\n\n      function getExtension(type, name) {\n        return util.getMap({\n          map: extensions,\n          keys: [type, name]\n        });\n      }\n\n      function setModule(type, name, moduleType, moduleName, registrant) {\n        return util.setMap({\n          map: modules,\n          keys: [type, name, moduleType, moduleName],\n          value: registrant\n        });\n      }\n\n      function getModule(type, name, moduleType, moduleName) {\n        return util.getMap({\n          map: modules,\n          keys: [type, name, moduleType, moduleName]\n        });\n      }\n\n      var extension = function extension() {\n        // e.g. extension('renderer', 'svg')\n        if (arguments.length === 2) {\n          return getExtension.apply(null, arguments);\n        } // e.g. extension('renderer', 'svg', { ... })\n        else if (arguments.length === 3) {\n            return setExtension.apply(null, arguments);\n          } // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')\n          else if (arguments.length === 4) {\n              return getModule.apply(null, arguments);\n            } // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })\n            else if (arguments.length === 5) {\n                return setModule.apply(null, arguments);\n              } else {\n                util.error('Invalid extension access syntax');\n              }\n      }; // allows a core instance to access extensions internally\n\n\n      Core.prototype.extension = extension; // included extensions\n\n      incExts.forEach(function (group) {\n        group.extensions.forEach(function (ext) {\n          setExtension(group.type, ext.name, ext.impl);\n        });\n      });\n      module.exports = extension;\n      /***/\n    },\n    /* 95 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      module.exports = [{\n        type: 'layout',\n        extensions: __webpack_require__(96)\n      }, {\n        type: 'renderer',\n        extensions: __webpack_require__(105)\n      }];\n      /***/\n    },\n    /* 96 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      module.exports = [{\n        name: 'breadthfirst',\n        impl: __webpack_require__(97)\n      }, {\n        name: 'circle',\n        impl: __webpack_require__(98)\n      }, {\n        name: 'concentric',\n        impl: __webpack_require__(99)\n      }, {\n        name: 'cose',\n        impl: __webpack_require__(100)\n      }, {\n        name: 'grid',\n        impl: __webpack_require__(101)\n      }, {\n        name: 'null',\n        impl: __webpack_require__(102)\n      }, {\n        name: 'preset',\n        impl: __webpack_require__(103)\n      }, {\n        name: 'random',\n        impl: __webpack_require__(104)\n      }];\n      /***/\n    },\n    /* 97 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var math = __webpack_require__(2);\n\n      var is = __webpack_require__(0);\n\n      var defaults = {\n        fit: true,\n        // whether to fit the viewport to the graph\n        directed: false,\n        // whether the tree is directed downwards (or edges can point in any direction if false)\n        padding: 30,\n        // padding on fit\n        circle: false,\n        // put depths in concentric circles if true, put depths top down if false\n        spacingFactor: 1.75,\n        // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)\n        boundingBox: undefined,\n        // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n        avoidOverlap: true,\n        // prevents node overlap, may overflow boundingBox if not enough space\n        nodeDimensionsIncludeLabels: false,\n        // Excludes the label when calculating node bounding boxes for the layout algorithm\n        roots: undefined,\n        // the roots of the trees\n        maximalAdjustments: 0,\n        // how many times to try to position the nodes in a maximal way (i.e. no backtracking)\n        animate: false,\n        // whether to transition the node positions\n        animationDuration: 500,\n        // duration of animation in ms if enabled\n        animationEasing: undefined,\n        // easing of animation if enabled,\n        animateFilter: function animateFilter(node, i) {\n          return true;\n        },\n        // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n        ready: undefined,\n        // callback on layoutready\n        stop: undefined,\n        // callback on layoutstop\n        transform: function transform(node, position) {\n          return position;\n        } // transform a given node position. Useful for changing flow direction in discrete layouts\n\n      };\n\n      function BreadthFirstLayout(options) {\n        this.options = util.extend({}, defaults, options);\n      }\n\n      BreadthFirstLayout.prototype.run = function () {\n        var params = this.options;\n        var options = params;\n        var cy = params.cy;\n        var eles = options.eles;\n        var nodes = eles.nodes().not(':parent');\n        var graph = eles;\n        var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {\n          x1: 0,\n          y1: 0,\n          w: cy.width(),\n          h: cy.height()\n        });\n        var roots = void 0;\n\n        if (is.elementOrCollection(options.roots)) {\n          roots = options.roots;\n        } else if (is.array(options.roots)) {\n          var rootsArray = [];\n\n          for (var i = 0; i < options.roots.length; i++) {\n            var id = options.roots[i];\n            var ele = cy.getElementById(id);\n            rootsArray.push(ele);\n          }\n\n          roots = cy.collection(rootsArray);\n        } else if (is.string(options.roots)) {\n          roots = cy.$(options.roots);\n        } else {\n          if (options.directed) {\n            roots = nodes.roots();\n          } else {\n            var components = [];\n            var unhandledNodes = nodes;\n\n            var _loop = function _loop() {\n              var currComp = cy.collection();\n              eles.bfs({\n                roots: unhandledNodes[0],\n                visit: function visit(node, edge, pNode, i, depth) {\n                  currComp = currComp.add(node);\n                },\n                directed: false\n              });\n              unhandledNodes = unhandledNodes.not(currComp);\n              components.push(currComp);\n            };\n\n            while (unhandledNodes.length > 0) {\n              _loop();\n            }\n\n            roots = cy.collection();\n\n            var _loop2 = function _loop2(_i) {\n              var comp = components[_i];\n              var maxDegree = comp.maxDegree(false);\n              var compRoots = comp.filter(function (ele) {\n                return ele.degree(false) === maxDegree;\n              });\n              roots = roots.add(compRoots);\n            };\n\n            for (var _i = 0; _i < components.length; _i++) {\n              _loop2(_i);\n            }\n          }\n        }\n\n        var depths = [];\n        var foundByBfs = {};\n        var id2depth = {};\n        var prevNode = {};\n        var prevEdge = {};\n        var successors = {}; // find the depths of the nodes\n\n        graph.bfs({\n          roots: roots,\n          directed: options.directed,\n          visit: function visit(node, edge, pNode, i, depth) {\n            var ele = node[0];\n            var id = ele.id();\n\n            if (!depths[depth]) {\n              depths[depth] = [];\n            }\n\n            depths[depth].push(ele);\n            foundByBfs[id] = true;\n            id2depth[id] = depth;\n            prevNode[id] = pNode;\n            prevEdge[id] = edge;\n\n            if (pNode) {\n              var prevId = pNode.id();\n              var succ = successors[prevId] = successors[prevId] || [];\n              succ.push(node);\n            }\n          }\n        }); // check for nodes not found by bfs\n\n        var orphanNodes = [];\n\n        for (var _i2 = 0; _i2 < nodes.length; _i2++) {\n          var _ele = nodes[_i2];\n\n          if (foundByBfs[_ele.id()]) {\n            continue;\n          } else {\n            orphanNodes.push(_ele);\n          }\n        } // assign orphan nodes a depth from their neighborhood\n\n\n        var maxChecks = orphanNodes.length * 3;\n        var checks = 0;\n\n        while (orphanNodes.length !== 0 && checks < maxChecks) {\n          var node = orphanNodes.shift();\n          var neighbors = node.neighborhood().nodes();\n          var assignedDepth = false;\n\n          for (var _i3 = 0; _i3 < neighbors.length; _i3++) {\n            var depth = id2depth[neighbors[_i3].id()];\n\n            if (depth !== undefined) {\n              depths[depth].push(node);\n              assignedDepth = true;\n              break;\n            }\n          }\n\n          if (!assignedDepth) {\n            orphanNodes.push(node);\n          }\n\n          checks++;\n        } // assign orphan nodes that are still left to the depth of their subgraph\n\n\n        while (orphanNodes.length !== 0) {\n          var _node = orphanNodes.shift(); //let subgraph = graph.bfs( node ).path;\n\n\n          var _assignedDepth = false; // for( let i = 0; i < subgraph.length; i++ ){\n          //   let depth = id2depth[ subgraph[i].id() ];\n          //   if( depth !== undefined ){\n          //     depths[depth].push( node );\n          //     assignedDepth = true;\n          //     break;\n          //   }\n          // }\n\n          if (!_assignedDepth) {\n            // worst case if the graph really isn't tree friendly, then just dump it in 0\n            if (depths.length === 0) {\n              depths.push([]);\n            }\n\n            depths[0].push(_node);\n          }\n        } // assign the nodes a depth and index\n\n\n        var assignDepthsToEles = function assignDepthsToEles() {\n          for (var _i4 = 0; _i4 < depths.length; _i4++) {\n            var _eles = depths[_i4];\n\n            for (var j = 0; j < _eles.length; j++) {\n              var _ele2 = _eles[j];\n\n              if (_ele2 == null) {\n                _eles.splice(j, 1);\n\n                j--;\n                continue;\n              }\n\n              _ele2._private.scratch.breadthfirst = {\n                depth: _i4,\n                index: j\n              };\n            }\n          }\n        };\n\n        assignDepthsToEles();\n\n        var intersectsDepth = function intersectsDepth(node) {\n          // returns true if has edges pointing in from a higher depth\n          var edges = node.connectedEdges(function (ele) {\n            return ele.data('target') === node.id();\n          });\n          var thisInfo = node._private.scratch.breadthfirst;\n          var highestDepthOfOther = 0;\n          var highestOther = void 0;\n\n          for (var _i5 = 0; _i5 < edges.length; _i5++) {\n            var edge = edges[_i5];\n            var otherNode = edge.source()[0];\n            var otherInfo = otherNode._private.scratch.breadthfirst;\n\n            if (thisInfo.depth <= otherInfo.depth && highestDepthOfOther < otherInfo.depth) {\n              highestDepthOfOther = otherInfo.depth;\n              highestOther = otherNode;\n            }\n          }\n\n          return highestOther;\n        }; // make maximal if so set by adjusting depths\n\n\n        for (var adj = 0; adj < options.maximalAdjustments; adj++) {\n          var nDepths = depths.length;\n          var elesToMove = [];\n\n          for (var _i6 = 0; _i6 < nDepths; _i6++) {\n            var _depth = depths[_i6];\n            var nDepth = _depth.length;\n\n            for (var j = 0; j < nDepth; j++) {\n              var _ele3 = _depth[j];\n              var info = _ele3._private.scratch.breadthfirst;\n              var intEle = intersectsDepth(_ele3);\n\n              if (intEle) {\n                info.intEle = intEle;\n                elesToMove.push(_ele3);\n              }\n            }\n          }\n\n          for (var _i7 = 0; _i7 < elesToMove.length; _i7++) {\n            var _ele4 = elesToMove[_i7];\n            var _info = _ele4._private.scratch.breadthfirst;\n            var _intEle = _info.intEle;\n            var intInfo = _intEle._private.scratch.breadthfirst;\n            depths[_info.depth][_info.index] = null; // remove from old depth & index (create hole to be cleaned)\n            // add to end of new depth\n\n            var newDepth = intInfo.depth + 1;\n\n            while (newDepth > depths.length - 1) {\n              depths.push([]);\n            }\n\n            depths[newDepth].push(_ele4);\n            _info.depth = newDepth;\n            _info.index = depths[newDepth].length - 1;\n          }\n\n          assignDepthsToEles();\n        } // find min distance we need to leave between nodes\n\n\n        var minDistance = 0;\n\n        if (options.avoidOverlap) {\n          for (var _i8 = 0; _i8 < nodes.length; _i8++) {\n            var n = nodes[_i8];\n            var nbb = n.layoutDimensions(options);\n            var w = nbb.w;\n            var h = nbb.h;\n            minDistance = Math.max(minDistance, w, h);\n          }\n        } // get the weighted percent for an element based on its connectivity to other levels\n\n\n        var cachedWeightedPercent = {};\n\n        var getWeightedPercent = function getWeightedPercent(ele) {\n          if (cachedWeightedPercent[ele.id()]) {\n            return cachedWeightedPercent[ele.id()];\n          }\n\n          var eleDepth = ele._private.scratch.breadthfirst.depth;\n          var neighbors = ele.neighborhood().nodes().not(':parent').intersection(nodes);\n          var percent = 0;\n          var samples = 0;\n\n          for (var _i9 = 0; _i9 < neighbors.length; _i9++) {\n            var neighbor = neighbors[_i9];\n            var bf = neighbor._private.scratch.breadthfirst;\n            var index = bf.index;\n            var _depth2 = bf.depth;\n            var _nDepth = depths[_depth2].length;\n\n            if (eleDepth > _depth2 || eleDepth === 0) {\n              // only get influenced by elements above\n              percent += index / _nDepth;\n              samples++;\n            }\n          }\n\n          samples = Math.max(1, samples);\n          percent = percent / samples;\n\n          if (samples === 0) {\n            // so lone nodes have a \"don't care\" state in sorting\n            percent = undefined;\n          }\n\n          cachedWeightedPercent[ele.id()] = percent;\n          return percent;\n        }; // rearrange the indices in each depth level based on connectivity\n\n\n        var sortFn = function sortFn(a, b) {\n          var apct = getWeightedPercent(a);\n          var bpct = getWeightedPercent(b);\n          return apct - bpct;\n        };\n\n        for (var times = 0; times < 3; times++) {\n          // do it a few times b/c the depths are dynamic and we want a more stable result\n          for (var _i10 = 0; _i10 < depths.length; _i10++) {\n            depths[_i10] = depths[_i10].sort(sortFn);\n          }\n\n          assignDepthsToEles(); // and update\n        }\n\n        var biggestDepthSize = 0;\n\n        for (var _i11 = 0; _i11 < depths.length; _i11++) {\n          biggestDepthSize = Math.max(depths[_i11].length, biggestDepthSize);\n        }\n\n        var center = {\n          x: bb.x1 + bb.w / 2,\n          y: bb.x1 + bb.h / 2\n        };\n\n        var getPosition = function getPosition(ele, isBottomDepth) {\n          var info = ele._private.scratch.breadthfirst;\n          var depth = info.depth;\n          var index = info.index;\n          var depthSize = depths[depth].length;\n          var distanceX = Math.max(bb.w / (depthSize + 1), minDistance);\n          var distanceY = Math.max(bb.h / (depths.length + 1), minDistance);\n          var radiusStepSize = Math.min(bb.w / 2 / depths.length, bb.h / 2 / depths.length);\n          radiusStepSize = Math.max(radiusStepSize, minDistance);\n\n          if (!options.circle) {\n            var epos = {\n              x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,\n              y: (depth + 1) * distanceY\n            };\n\n            if (isBottomDepth) {\n              return epos;\n            } // let succs = successors[ ele.id() ];\n            // if( succs ){\n            //   epos.x = 0;\n            //\n            //   for( let i = 0 ; i < succs.length; i++ ){\n            //     let spos = pos[ succs[i].id() ];\n            //\n            //     epos.x += spos.x;\n            //   }\n            //\n            //   epos.x /= succs.length;\n            // } else {\n            //   //debugger;\n            // }\n\n\n            return epos;\n          } else {\n            if (options.circle) {\n              var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);\n              var theta = 2 * Math.PI / depths[depth].length * index;\n\n              if (depth === 0 && depths[0].length === 1) {\n                radius = 1;\n              }\n\n              return {\n                x: center.x + radius * Math.cos(theta),\n                y: center.y + radius * Math.sin(theta)\n              };\n            } else {\n              return {\n                x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,\n                y: (depth + 1) * distanceY\n              };\n            }\n          }\n        }; // get positions in reverse depth order\n\n\n        var pos = {};\n\n        for (var _i12 = depths.length - 1; _i12 >= 0; _i12--) {\n          var _depth3 = depths[_i12];\n\n          for (var _j = 0; _j < _depth3.length; _j++) {\n            var _node2 = _depth3[_j];\n            pos[_node2.id()] = getPosition(_node2, _i12 === depths.length - 1);\n          }\n        }\n\n        nodes.layoutPositions(this, options, function (node) {\n          return pos[node.id()];\n        });\n        return this; // chaining\n      };\n\n      module.exports = BreadthFirstLayout;\n      /***/\n    },\n    /* 98 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var math = __webpack_require__(2);\n\n      var is = __webpack_require__(0);\n\n      var defaults = {\n        fit: true,\n        // whether to fit the viewport to the graph\n        padding: 30,\n        // the padding on fit\n        boundingBox: undefined,\n        // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n        avoidOverlap: true,\n        // prevents node overlap, may overflow boundingBox and radius if not enough space\n        nodeDimensionsIncludeLabels: false,\n        // Excludes the label when calculating node bounding boxes for the layout algorithm\n        spacingFactor: undefined,\n        // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n        radius: undefined,\n        // the radius of the circle\n        startAngle: 3 / 2 * Math.PI,\n        // where nodes start in radians\n        sweep: undefined,\n        // how many radians should be between the first and last node (defaults to full circle)\n        clockwise: true,\n        // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)\n        sort: undefined,\n        // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }\n        animate: false,\n        // whether to transition the node positions\n        animationDuration: 500,\n        // duration of animation in ms if enabled\n        animationEasing: undefined,\n        // easing of animation if enabled\n        animateFilter: function animateFilter(node, i) {\n          return true;\n        },\n        // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n        ready: undefined,\n        // callback on layoutready\n        stop: undefined,\n        // callback on layoutstop\n        transform: function transform(node, position) {\n          return position;\n        } // transform a given node position. Useful for changing flow direction in discrete layouts \n\n      };\n\n      function CircleLayout(options) {\n        this.options = util.extend({}, defaults, options);\n      }\n\n      CircleLayout.prototype.run = function () {\n        var params = this.options;\n        var options = params;\n        var cy = params.cy;\n        var eles = options.eles;\n        var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;\n        var nodes = eles.nodes().not(':parent');\n\n        if (options.sort) {\n          nodes = nodes.sort(options.sort);\n        }\n\n        var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {\n          x1: 0,\n          y1: 0,\n          w: cy.width(),\n          h: cy.height()\n        });\n        var center = {\n          x: bb.x1 + bb.w / 2,\n          y: bb.y1 + bb.h / 2\n        };\n        var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / nodes.length : options.sweep;\n        var dTheta = sweep / Math.max(1, nodes.length - 1);\n        var r = void 0;\n        var minDistance = 0;\n\n        for (var i = 0; i < nodes.length; i++) {\n          var n = nodes[i];\n          var nbb = n.layoutDimensions(options);\n          var w = nbb.w;\n          var h = nbb.h;\n          minDistance = Math.max(minDistance, w, h);\n        }\n\n        if (is.number(options.radius)) {\n          r = options.radius;\n        } else if (nodes.length <= 1) {\n          r = 0;\n        } else {\n          r = Math.min(bb.h, bb.w) / 2 - minDistance;\n        } // calculate the radius\n\n\n        if (nodes.length > 1 && options.avoidOverlap) {\n          // but only if more than one node (can't overlap)\n          minDistance *= 1.75; // just to have some nice spacing\n\n          var dcos = Math.cos(dTheta) - Math.cos(0);\n          var dsin = Math.sin(dTheta) - Math.sin(0);\n          var rMin = Math.sqrt(minDistance * minDistance / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping\n\n          r = Math.max(rMin, r);\n        }\n\n        var getPos = function getPos(ele, i) {\n          var theta = options.startAngle + i * dTheta * (clockwise ? 1 : -1);\n          var rx = r * Math.cos(theta);\n          var ry = r * Math.sin(theta);\n          var pos = {\n            x: center.x + rx,\n            y: center.y + ry\n          };\n          return pos;\n        };\n\n        nodes.layoutPositions(this, options, getPos);\n        return this; // chaining\n      };\n\n      module.exports = CircleLayout;\n      /***/\n    },\n    /* 99 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var math = __webpack_require__(2);\n\n      var defaults = {\n        fit: true,\n        // whether to fit the viewport to the graph\n        padding: 30,\n        // the padding on fit\n        startAngle: 3 / 2 * Math.PI,\n        // where nodes start in radians\n        sweep: undefined,\n        // how many radians should be between the first and last node (defaults to full circle)\n        clockwise: true,\n        // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)\n        equidistant: false,\n        // whether levels have an equal radial distance betwen them, may cause bounding box overflow\n        minNodeSpacing: 10,\n        // min spacing between outside of nodes (used for radius adjustment)\n        boundingBox: undefined,\n        // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n        avoidOverlap: true,\n        // prevents node overlap, may overflow boundingBox if not enough space\n        nodeDimensionsIncludeLabels: false,\n        // Excludes the label when calculating node bounding boxes for the layout algorithm\n        height: undefined,\n        // height of layout area (overrides container height)\n        width: undefined,\n        // width of layout area (overrides container width)\n        spacingFactor: undefined,\n        // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n        concentric: function concentric(node) {\n          // returns numeric value for each node, placing higher nodes in levels towards the centre\n          return node.degree();\n        },\n        levelWidth: function levelWidth(nodes) {\n          // the letiation of concentric values in each level\n          return nodes.maxDegree() / 4;\n        },\n        animate: false,\n        // whether to transition the node positions\n        animationDuration: 500,\n        // duration of animation in ms if enabled\n        animationEasing: undefined,\n        // easing of animation if enabled\n        animateFilter: function animateFilter(node, i) {\n          return true;\n        },\n        // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n        ready: undefined,\n        // callback on layoutready\n        stop: undefined,\n        // callback on layoutstop\n        transform: function transform(node, position) {\n          return position;\n        } // transform a given node position. Useful for changing flow direction in discrete layouts \n\n      };\n\n      function ConcentricLayout(options) {\n        this.options = util.extend({}, defaults, options);\n      }\n\n      ConcentricLayout.prototype.run = function () {\n        var params = this.options;\n        var options = params;\n        var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;\n        var cy = params.cy;\n        var eles = options.eles;\n        var nodes = eles.nodes().not(':parent');\n        var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {\n          x1: 0,\n          y1: 0,\n          w: cy.width(),\n          h: cy.height()\n        });\n        var center = {\n          x: bb.x1 + bb.w / 2,\n          y: bb.y1 + bb.h / 2\n        };\n        var nodeValues = []; // { node, value }\n\n        var theta = options.startAngle;\n        var maxNodeSize = 0;\n\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          var value = void 0; // calculate the node value\n\n          value = options.concentric(node);\n          nodeValues.push({\n            value: value,\n            node: node\n          }); // for style mapping\n\n          node._private.scratch.concentric = value;\n        } // in case we used the `concentric` in style\n\n\n        nodes.updateStyle(); // calculate max size now based on potentially updated mappers\n\n        for (var _i = 0; _i < nodes.length; _i++) {\n          var _node = nodes[_i];\n\n          var nbb = _node.layoutDimensions(options);\n\n          maxNodeSize = Math.max(maxNodeSize, nbb.w, nbb.h);\n        } // sort node values in descreasing order\n\n\n        nodeValues.sort(function (a, b) {\n          return b.value - a.value;\n        });\n        var levelWidth = options.levelWidth(nodes); // put the values into levels\n\n        var levels = [[]];\n        var currentLevel = levels[0];\n\n        for (var _i2 = 0; _i2 < nodeValues.length; _i2++) {\n          var val = nodeValues[_i2];\n\n          if (currentLevel.length > 0) {\n            var diff = Math.abs(currentLevel[0].value - val.value);\n\n            if (diff >= levelWidth) {\n              currentLevel = [];\n              levels.push(currentLevel);\n            }\n          }\n\n          currentLevel.push(val);\n        } // create positions from levels\n\n\n        var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes\n\n        if (!options.avoidOverlap) {\n          // then strictly constrain to bb\n          var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;\n          var maxR = Math.min(bb.w, bb.h) / 2 - minDist;\n          var rStep = maxR / (levels.length + firstLvlHasMulti ? 1 : 0);\n          minDist = Math.min(minDist, rStep);\n        } // find the metrics for each level\n\n\n        var r = 0;\n\n        for (var _i3 = 0; _i3 < levels.length; _i3++) {\n          var level = levels[_i3];\n          var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.length : options.sweep;\n          var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1); // calculate the radius\n\n          if (level.length > 1 && options.avoidOverlap) {\n            // but only if more than one node (can't overlap)\n            var dcos = Math.cos(dTheta) - Math.cos(0);\n            var dsin = Math.sin(dTheta) - Math.sin(0);\n            var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping\n\n            r = Math.max(rMin, r);\n          }\n\n          level.r = r;\n          r += minDist;\n        }\n\n        if (options.equidistant) {\n          var rDeltaMax = 0;\n          var _r = 0;\n\n          for (var _i4 = 0; _i4 < levels.length; _i4++) {\n            var _level = levels[_i4];\n            var rDelta = _level.r - _r;\n            rDeltaMax = Math.max(rDeltaMax, rDelta);\n          }\n\n          _r = 0;\n\n          for (var _i5 = 0; _i5 < levels.length; _i5++) {\n            var _level2 = levels[_i5];\n\n            if (_i5 === 0) {\n              _r = _level2.r;\n            }\n\n            _level2.r = _r;\n            _r += rDeltaMax;\n          }\n        } // calculate the node positions\n\n\n        var pos = {}; // id => position\n\n        for (var _i6 = 0; _i6 < levels.length; _i6++) {\n          var _level3 = levels[_i6];\n          var _dTheta = _level3.dTheta;\n          var _r2 = _level3.r;\n\n          for (var j = 0; j < _level3.length; j++) {\n            var _val = _level3[j];\n\n            var _theta = options.startAngle + (clockwise ? 1 : -1) * _dTheta * j;\n\n            var p = {\n              x: center.x + _r2 * Math.cos(_theta),\n              y: center.y + _r2 * Math.sin(_theta)\n            };\n            pos[_val.node.id()] = p;\n          }\n        } // position the nodes\n\n\n        nodes.layoutPositions(this, options, function (ele) {\n          var id = ele.id();\n          return pos[id];\n        });\n        return this; // chaining\n      };\n\n      module.exports = ConcentricLayout;\n      /***/\n    },\n    /* 100 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /*\n      The CoSE layout was written by Gerardo Huck.\n      https://www.linkedin.com/in/gerardohuck/\n      \n      Based on the following article:\n      http://dl.acm.org/citation.cfm?id=1498047\n      \n      Modifications tracked on Github.\n      */\n\n      var util = __webpack_require__(1);\n\n      var math = __webpack_require__(2);\n\n      var is = __webpack_require__(0);\n\n      var Promise = __webpack_require__(5);\n\n      var DEBUG;\n      /**\n       * @brief :  default layout options\n       */\n\n      var defaults = {\n        // Called on `layoutready`\n        ready: function ready() {},\n        // Called on `layoutstop`\n        stop: function stop() {},\n        // Whether to animate while running the layout\n        // true : Animate continuously as the layout is running\n        // false : Just show the end result\n        // 'end' : Animate with the end result, from the initial positions to the end positions\n        animate: true,\n        // Easing of the animation for animate:'end'\n        animationEasing: undefined,\n        // The duration of the animation for animate:'end'\n        animationDuration: undefined,\n        // A function that determines whether the node should be animated\n        // All nodes animated by default on animate enabled\n        // Non-animated nodes are positioned immediately when the layout starts\n        animateFilter: function animateFilter(node, i) {\n          return true;\n        },\n        // The layout animates only after this many milliseconds for animate:true\n        // (prevents flashing on fast runs)\n        animationThreshold: 250,\n        // Number of iterations between consecutive screen positions update\n        // (0 -> only updated on the end)\n        refresh: 20,\n        // Whether to fit the network view after when done\n        fit: true,\n        // Padding on fit\n        padding: 30,\n        // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n        boundingBox: undefined,\n        // Excludes the label when calculating node bounding boxes for the layout algorithm\n        nodeDimensionsIncludeLabels: false,\n        // Randomize the initial positions of the nodes (true) or use existing positions (false)\n        randomize: false,\n        // Extra spacing between components in non-compound graphs\n        componentSpacing: 40,\n        // Node repulsion (non overlapping) multiplier\n        nodeRepulsion: function nodeRepulsion(node) {\n          return 2048;\n        },\n        // Node repulsion (overlapping) multiplier\n        nodeOverlap: 4,\n        // Ideal edge (non nested) length\n        idealEdgeLength: function idealEdgeLength(edge) {\n          return 32;\n        },\n        // Divisor to compute edge forces\n        edgeElasticity: function edgeElasticity(edge) {\n          return 32;\n        },\n        // Nesting factor (multiplier) to compute ideal edge length for nested edges\n        nestingFactor: 1.2,\n        // Gravity force (constant)\n        gravity: 1,\n        // Maximum number of iterations to perform\n        numIter: 1000,\n        // Initial temperature (maximum node displacement)\n        initialTemp: 1000,\n        // Cooling factor (how the temperature is reduced between consecutive iterations\n        coolingFactor: 0.99,\n        // Lower temperature threshold (below this point the layout will end)\n        minTemp: 1.0,\n        // Pass a reference to weaver to use threads for calculations\n        weaver: false\n      };\n      /**\n       * @brief       : constructor\n       * @arg options : object containing layout options\n       */\n\n      function CoseLayout(options) {\n        this.options = util.extend({}, defaults, options);\n        this.options.layout = this;\n      }\n      /**\n       * @brief : runs the layout\n       */\n\n\n      CoseLayout.prototype.run = function () {\n        var options = this.options;\n        var cy = options.cy;\n        var layout = this;\n        var thread = this.thread;\n        var Thread = options.weaver ? options.weaver.Thread : null;\n        var falseThread = {\n          // use false thread as polyfill\n          listeners: [],\n          on: function on(e, cb) {\n            this.listeners.push({\n              event: e,\n              callback: cb\n            });\n            return this;\n          },\n          trigger: function trigger(e) {\n            if (is.string(e)) {\n              e = {\n                type: e\n              };\n            }\n\n            var matchesEvent = function matchesEvent(l) {\n              return l.event === e.type;\n            };\n\n            var trigger = function trigger(l) {\n              l.callback(e);\n            };\n\n            this.listeners.filter(matchesEvent).forEach(trigger);\n            return this;\n          },\n          pass: function pass(data) {\n            this.pass = data;\n            return this;\n          },\n          run: function run(cb) {\n            var pass = this.pass;\n            return new Promise(function (resolve) {\n              resolve(cb(pass));\n            });\n          },\n          stop: function stop() {\n            return this;\n          },\n          stopped: function stopped() {\n            return true;\n          }\n        };\n\n        function broadcast(message) {\n          // for false thread\n          var e = {\n            type: 'message',\n            message: message\n          };\n          falseThread.trigger(e);\n        }\n\n        if (!thread || thread.stopped()) {\n          thread = this.thread = Thread ? new Thread() : falseThread;\n        }\n\n        layout.stopped = false;\n\n        if (options.animate === true || options.animate === false) {\n          layout.emit({\n            type: 'layoutstart',\n            layout: layout\n          });\n        } // Set DEBUG - Global variable\n\n\n        if (true === options.debug) {\n          DEBUG = true;\n        } else {\n          DEBUG = false;\n        } // Initialize layout info\n\n\n        var layoutInfo = createLayoutInfo(cy, layout, options); // Show LayoutInfo contents if debugging\n\n        if (DEBUG) {\n          printLayoutInfo(layoutInfo);\n        } // If required, randomize node positions\n\n\n        if (options.randomize) {\n          randomizePositions(layoutInfo, cy);\n        }\n\n        var startTime = Date.now();\n        var refreshRequested = false;\n\n        var refresh = function refresh(rOpts) {\n          rOpts = rOpts || {};\n\n          if (refreshRequested && !rOpts.next) {\n            return;\n          }\n\n          if (!rOpts.force && Date.now() - startTime < options.animationThreshold) {\n            return;\n          }\n\n          refreshRequested = true;\n          util.requestAnimationFrame(function () {\n            refreshPositions(layoutInfo, cy, options); // Fit the graph if necessary\n\n            if (true === options.fit) {\n              cy.fit(options.padding);\n            }\n\n            refreshRequested = false;\n\n            if (rOpts.next) {\n              rOpts.next();\n            }\n          });\n        };\n\n        thread.on('message', function (e) {\n          var layoutNodes = e.message;\n          layoutInfo.layoutNodes = layoutNodes;\n          refresh();\n        });\n        thread.pass({\n          layoutInfo: layoutInfo,\n          options: {\n            animate: options.animate,\n            refresh: options.refresh,\n            componentSpacing: options.componentSpacing,\n            nodeOverlap: options.nodeOverlap,\n            nestingFactor: options.nestingFactor,\n            gravity: options.gravity,\n            numIter: options.numIter,\n            initialTemp: options.initialTemp,\n            coolingFactor: options.coolingFactor,\n            minTemp: options.minTemp\n          }\n        }).run(function (pass) {\n          var layoutInfo = pass.layoutInfo;\n          var options = pass.options;\n          var stopped = false;\n          /**\n           * @brief          : Performs one iteration of the physical simulation\n           * @arg layoutInfo : LayoutInfo object already initialized\n           * @arg cy         : Cytoscape object\n           * @arg options    : Layout options\n           */\n\n          var step = function step(layoutInfo, options, _step) {\n            // var s = \"\\n\\n###############################\";\n            // s += \"\\nSTEP: \" + step;\n            // s += \"\\n###############################\\n\";\n            // logDebug(s);\n            // Calculate node repulsions\n            calculateNodeForces(layoutInfo, options); // Calculate edge forces\n\n            calculateEdgeForces(layoutInfo, options); // Calculate gravity forces\n\n            calculateGravityForces(layoutInfo, options); // Propagate forces from parent to child\n\n            propagateForces(layoutInfo, options); // Update positions based on calculated forces\n\n            updatePositions(layoutInfo, options);\n          };\n          /**\n           * @brief : Computes the node repulsion forces\n           */\n\n\n          var calculateNodeForces = function calculateNodeForces(layoutInfo, options) {\n            // Go through each of the graphs in graphSet\n            // Nodes only repel each other if they belong to the same graph\n            // var s = 'calculateNodeForces';\n            // logDebug(s);\n            for (var i = 0; i < layoutInfo.graphSet.length; i++) {\n              var graph = layoutInfo.graphSet[i];\n              var numNodes = graph.length; // s = \"Set: \" + graph.toString();\n              // logDebug(s);\n              // Now get all the pairs of nodes\n              // Only get each pair once, (A, B) = (B, A)\n\n              for (var j = 0; j < numNodes; j++) {\n                var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];\n\n                for (var k = j + 1; k < numNodes; k++) {\n                  var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];\n                  nodeRepulsion(node1, node2, layoutInfo, options);\n                }\n              }\n            }\n          };\n\n          var randomDistance = function randomDistance(max) {\n            return -max + 2 * max * Math.random();\n          };\n          /**\n           * @brief : Compute the node repulsion forces between a pair of nodes\n           */\n\n\n          var nodeRepulsion = function nodeRepulsion(node1, node2, layoutInfo, options) {\n            // var s = \"Node repulsion. Node1: \" + node1.id + \" Node2: \" + node2.id;\n            var cmptId1 = node1.cmptId;\n            var cmptId2 = node2.cmptId;\n\n            if (cmptId1 !== cmptId2 && !layoutInfo.isCompound) {\n              return;\n            } // Get direction of line connecting both node centers\n\n\n            var directionX = node2.positionX - node1.positionX;\n            var directionY = node2.positionY - node1.positionY;\n            var maxRandDist = 1; // s += \"\\ndirectionX: \" + directionX + \", directionY: \" + directionY;\n            // If both centers are the same, apply a random force\n\n            if (0 === directionX && 0 === directionY) {\n              directionX = randomDistance(maxRandDist);\n              directionY = randomDistance(maxRandDist);\n            }\n\n            var overlap = nodesOverlap(node1, node2, directionX, directionY);\n\n            if (overlap > 0) {\n              // s += \"\\nNodes DO overlap.\";\n              // s += \"\\nOverlap: \" + overlap;\n              // If nodes overlap, repulsion force is proportional\n              // to the overlap\n              var force = options.nodeOverlap * overlap; // Compute the module and components of the force vector\n\n              var distance = Math.sqrt(directionX * directionX + directionY * directionY); // s += \"\\nDistance: \" + distance;\n\n              var forceX = force * directionX / distance;\n              var forceY = force * directionY / distance;\n            } else {\n              // s += \"\\nNodes do NOT overlap.\";\n              // If there's no overlap, force is inversely proportional\n              // to squared distance\n              // Get clipping points for both nodes\n              var point1 = findClippingPoint(node1, directionX, directionY);\n              var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY); // Use clipping points to compute distance\n\n              var distanceX = point2.x - point1.x;\n              var distanceY = point2.y - point1.y;\n              var distanceSqr = distanceX * distanceX + distanceY * distanceY;\n              var distance = Math.sqrt(distanceSqr); // s += \"\\nDistance: \" + distance;\n              // Compute the module and components of the force vector\n\n              var force = (node1.nodeRepulsion + node2.nodeRepulsion) / distanceSqr;\n              var forceX = force * distanceX / distance;\n              var forceY = force * distanceY / distance;\n            } // Apply force\n\n\n            if (!node1.isLocked) {\n              node1.offsetX -= forceX;\n              node1.offsetY -= forceY;\n            }\n\n            if (!node2.isLocked) {\n              node2.offsetX += forceX;\n              node2.offsetY += forceY;\n            } // s += \"\\nForceX: \" + forceX + \" ForceY: \" + forceY;\n            // logDebug(s);\n\n\n            return;\n          };\n          /**\n           * @brief  : Determines whether two nodes overlap or not\n           * @return : Amount of overlapping (0 => no overlap)\n           */\n\n\n          var nodesOverlap = function nodesOverlap(node1, node2, dX, dY) {\n            if (dX > 0) {\n              var overlapX = node1.maxX - node2.minX;\n            } else {\n              var overlapX = node2.maxX - node1.minX;\n            }\n\n            if (dY > 0) {\n              var overlapY = node1.maxY - node2.minY;\n            } else {\n              var overlapY = node2.maxY - node1.minY;\n            }\n\n            if (overlapX >= 0 && overlapY >= 0) {\n              return Math.sqrt(overlapX * overlapX + overlapY * overlapY);\n            } else {\n              return 0;\n            }\n          };\n          /**\n           * @brief : Finds the point in which an edge (direction dX, dY) intersects\n           *          the rectangular bounding box of it's source/target node\n           */\n\n\n          var findClippingPoint = function findClippingPoint(node, dX, dY) {\n            // Shorcuts\n            var X = node.positionX;\n            var Y = node.positionY;\n            var H = node.height || 1;\n            var W = node.width || 1;\n            var dirSlope = dY / dX;\n            var nodeSlope = H / W; // var s = 'Computing clipping point of node ' + node.id +\n            //   \" . Height:  \" + H + \", Width: \" + W +\n            //   \"\\nDirection \" + dX + \", \" + dY;\n            //\n            // Compute intersection\n\n            var res = {}; // Case: Vertical direction (up)\n\n            if (0 === dX && 0 < dY) {\n              res.x = X; // s += \"\\nUp direction\";\n\n              res.y = Y + H / 2;\n              return res;\n            } // Case: Vertical direction (down)\n\n\n            if (0 === dX && 0 > dY) {\n              res.x = X;\n              res.y = Y + H / 2; // s += \"\\nDown direction\";\n\n              return res;\n            } // Case: Intersects the right border\n\n\n            if (0 < dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {\n              res.x = X + W / 2;\n              res.y = Y + W * dY / 2 / dX; // s += \"\\nRightborder\";\n\n              return res;\n            } // Case: Intersects the left border\n\n\n            if (0 > dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {\n              res.x = X - W / 2;\n              res.y = Y - W * dY / 2 / dX; // s += \"\\nLeftborder\";\n\n              return res;\n            } // Case: Intersects the top border\n\n\n            if (0 < dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {\n              res.x = X + H * dX / 2 / dY;\n              res.y = Y + H / 2; // s += \"\\nTop border\";\n\n              return res;\n            } // Case: Intersects the bottom border\n\n\n            if (0 > dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {\n              res.x = X - H * dX / 2 / dY;\n              res.y = Y - H / 2; // s += \"\\nBottom border\";\n\n              return res;\n            } // s += \"\\nClipping point found at \" + res.x + \", \" + res.y;\n            // logDebug(s);\n\n\n            return res;\n          };\n          /**\n           * @brief : Calculates all edge forces\n           */\n\n\n          var calculateEdgeForces = function calculateEdgeForces(layoutInfo, options) {\n            // Iterate over all edges\n            for (var i = 0; i < layoutInfo.edgeSize; i++) {\n              // Get edge, source & target nodes\n              var edge = layoutInfo.layoutEdges[i];\n              var sourceIx = layoutInfo.idToIndex[edge.sourceId];\n              var source = layoutInfo.layoutNodes[sourceIx];\n              var targetIx = layoutInfo.idToIndex[edge.targetId];\n              var target = layoutInfo.layoutNodes[targetIx]; // Get direction of line connecting both node centers\n\n              var directionX = target.positionX - source.positionX;\n              var directionY = target.positionY - source.positionY; // If both centers are the same, do nothing.\n              // A random force has already been applied as node repulsion\n\n              if (0 === directionX && 0 === directionY) {\n                continue;\n              } // Get clipping points for both nodes\n\n\n              var point1 = findClippingPoint(source, directionX, directionY);\n              var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);\n              var lx = point2.x - point1.x;\n              var ly = point2.y - point1.y;\n              var l = Math.sqrt(lx * lx + ly * ly);\n              var force = Math.pow(edge.idealLength - l, 2) / edge.elasticity;\n\n              if (0 !== l) {\n                var forceX = force * lx / l;\n                var forceY = force * ly / l;\n              } else {\n                var forceX = 0;\n                var forceY = 0;\n              } // Add this force to target and source nodes\n\n\n              if (!source.isLocked) {\n                source.offsetX += forceX;\n                source.offsetY += forceY;\n              }\n\n              if (!target.isLocked) {\n                target.offsetX -= forceX;\n                target.offsetY -= forceY;\n              } // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;\n              // s += \"\\nDistance: \" + l + \" Force: (\" + forceX + \", \" + forceY + \")\";\n              // logDebug(s);\n\n            }\n          };\n          /**\n           * @brief : Computes gravity forces for all nodes\n           */\n\n\n          var calculateGravityForces = function calculateGravityForces(layoutInfo, options) {\n            var distThreshold = 1; // var s = 'calculateGravityForces';\n            // logDebug(s);\n\n            for (var i = 0; i < layoutInfo.graphSet.length; i++) {\n              var graph = layoutInfo.graphSet[i];\n              var numNodes = graph.length; // s = \"Set: \" + graph.toString();\n              // logDebug(s);\n              // Compute graph center\n\n              if (0 === i) {\n                var centerX = layoutInfo.clientHeight / 2;\n                var centerY = layoutInfo.clientWidth / 2;\n              } else {\n                // Get Parent node for this graph, and use its position as center\n                var temp = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];\n                var parent = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];\n                var centerX = parent.positionX;\n                var centerY = parent.positionY;\n              } // s = \"Center found at: \" + centerX + \", \" + centerY;\n              // logDebug(s);\n              // Apply force to all nodes in graph\n\n\n              for (var j = 0; j < numNodes; j++) {\n                var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]]; // s = \"Node: \" + node.id;\n\n                if (node.isLocked) {\n                  continue;\n                }\n\n                var dx = centerX - node.positionX;\n                var dy = centerY - node.positionY;\n                var d = Math.sqrt(dx * dx + dy * dy);\n\n                if (d > distThreshold) {\n                  var fx = options.gravity * dx / d;\n                  var fy = options.gravity * dy / d;\n                  node.offsetX += fx;\n                  node.offsetY += fy; // s += \": Applied force: \" + fx + \", \" + fy;\n                } else {} // s += \": skypped since it's too close to center\";\n                // logDebug(s);\n\n              }\n            }\n          };\n          /**\n           * @brief          : This function propagates the existing offsets from\n           *                   parent nodes to its descendents.\n           * @arg layoutInfo : layoutInfo Object\n           * @arg cy         : cytoscape Object\n           * @arg options    : Layout options\n           */\n\n\n          var propagateForces = function propagateForces(layoutInfo, options) {\n            // Inline implementation of a queue, used for traversing the graph in BFS order\n            var queue = [];\n            var start = 0; // Points to the start the queue\n\n            var end = -1; // Points to the end of the queue\n            // logDebug('propagateForces');\n            // Start by visiting the nodes in the root graph\n\n            queue.push.apply(queue, layoutInfo.graphSet[0]);\n            end += layoutInfo.graphSet[0].length; // Traverse the graph, level by level,\n\n            while (start <= end) {\n              // Get the node to visit and remove it from queue\n              var nodeId = queue[start++];\n              var nodeIndex = layoutInfo.idToIndex[nodeId];\n              var node = layoutInfo.layoutNodes[nodeIndex];\n              var children = node.children; // We only need to process the node if it's compound\n\n              if (0 < children.length && !node.isLocked) {\n                var offX = node.offsetX;\n                var offY = node.offsetY; // var s = \"Propagating offset from parent node : \" + node.id +\n                //   \". OffsetX: \" + offX + \". OffsetY: \" + offY;\n                // s += \"\\n Children: \" + children.toString();\n                // logDebug(s);\n\n                for (var i = 0; i < children.length; i++) {\n                  var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i]]]; // Propagate offset\n\n                  childNode.offsetX += offX;\n                  childNode.offsetY += offY; // Add children to queue to be visited\n\n                  queue[++end] = children[i];\n                } // Reset parent offsets\n\n\n                node.offsetX = 0;\n                node.offsetY = 0;\n              }\n            }\n          };\n          /**\n           * @brief : Updates the layout model positions, based on\n           *          the accumulated forces\n           */\n\n\n          var updatePositions = function updatePositions(layoutInfo, options) {\n            // var s = 'Updating positions';\n            // logDebug(s);\n            // Reset boundaries for compound nodes\n            for (var i = 0; i < layoutInfo.nodeSize; i++) {\n              var n = layoutInfo.layoutNodes[i];\n\n              if (0 < n.children.length) {\n                // logDebug(\"Resetting boundaries of compound node: \" + n.id);\n                n.maxX = undefined;\n                n.minX = undefined;\n                n.maxY = undefined;\n                n.minY = undefined;\n              }\n            }\n\n            for (var i = 0; i < layoutInfo.nodeSize; i++) {\n              var n = layoutInfo.layoutNodes[i];\n\n              if (0 < n.children.length || n.isLocked) {\n                // No need to set compound or locked node position\n                // logDebug(\"Skipping position update of node: \" + n.id);\n                continue;\n              } // s = \"Node: \" + n.id + \" Previous position: (\" +\n              // n.positionX + \", \" + n.positionY + \").\";\n              // Limit displacement in order to improve stability\n\n\n              var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);\n              n.positionX += tempForce.x;\n              n.positionY += tempForce.y;\n              n.offsetX = 0;\n              n.offsetY = 0;\n              n.minX = n.positionX - n.width;\n              n.maxX = n.positionX + n.width;\n              n.minY = n.positionY - n.height;\n              n.maxY = n.positionY + n.height; // s += \" New Position: (\" + n.positionX + \", \" + n.positionY + \").\";\n              // logDebug(s);\n              // Update ancestry boudaries\n\n              updateAncestryBoundaries(n, layoutInfo);\n            } // Update size, position of compund nodes\n\n\n            for (var i = 0; i < layoutInfo.nodeSize; i++) {\n              var n = layoutInfo.layoutNodes[i];\n\n              if (0 < n.children.length && !n.isLocked) {\n                n.positionX = (n.maxX + n.minX) / 2;\n                n.positionY = (n.maxY + n.minY) / 2;\n                n.width = n.maxX - n.minX;\n                n.height = n.maxY - n.minY; // s = \"Updating position, size of compound node \" + n.id;\n                // s += \"\\nPositionX: \" + n.positionX + \", PositionY: \" + n.positionY;\n                // s += \"\\nWidth: \" + n.width + \", Height: \" + n.height;\n                // logDebug(s);\n              }\n            }\n          };\n          /**\n           * @brief : Limits a force (forceX, forceY) to be not\n           *          greater (in modulo) than max.\n           8          Preserves force direction.\n           */\n\n\n          var limitForce = function limitForce(forceX, forceY, max) {\n            // var s = \"Limiting force: (\" + forceX + \", \" + forceY + \"). Max: \" + max;\n            var force = Math.sqrt(forceX * forceX + forceY * forceY);\n\n            if (force > max) {\n              var res = {\n                x: max * forceX / force,\n                y: max * forceY / force\n              };\n            } else {\n              var res = {\n                x: forceX,\n                y: forceY\n              };\n            } // s += \".\\nResult: (\" + res.x + \", \" + res.y + \")\";\n            // logDebug(s);\n\n\n            return res;\n          };\n          /**\n           * @brief : Function used for keeping track of compound node\n           *          sizes, since they should bound all their subnodes.\n           */\n\n\n          var updateAncestryBoundaries = function updateAncestryBoundaries(node, layoutInfo) {\n            // var s = \"Propagating new position/size of node \" + node.id;\n            var parentId = node.parentId;\n\n            if (null == parentId) {\n              // If there's no parent, we are done\n              // s += \". No parent node.\";\n              // logDebug(s);\n              return;\n            } // Get Parent Node\n\n\n            var p = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];\n            var flag = false; // MaxX\n\n            if (null == p.maxX || node.maxX + p.padRight > p.maxX) {\n              p.maxX = node.maxX + p.padRight;\n              flag = true; // s += \"\\nNew maxX for parent node \" + p.id + \": \" + p.maxX;\n            } // MinX\n\n\n            if (null == p.minX || node.minX - p.padLeft < p.minX) {\n              p.minX = node.minX - p.padLeft;\n              flag = true; // s += \"\\nNew minX for parent node \" + p.id + \": \" + p.minX;\n            } // MaxY\n\n\n            if (null == p.maxY || node.maxY + p.padBottom > p.maxY) {\n              p.maxY = node.maxY + p.padBottom;\n              flag = true; // s += \"\\nNew maxY for parent node \" + p.id + \": \" + p.maxY;\n            } // MinY\n\n\n            if (null == p.minY || node.minY - p.padTop < p.minY) {\n              p.minY = node.minY - p.padTop;\n              flag = true; // s += \"\\nNew minY for parent node \" + p.id + \": \" + p.minY;\n            } // If updated boundaries, propagate changes upward\n\n\n            if (flag) {\n              // logDebug(s);\n              return updateAncestryBoundaries(p, layoutInfo);\n            } // s += \". No changes in boundaries/position of parent node \" + p.id;\n            // logDebug(s);\n\n\n            return;\n          };\n\n          var separateComponents = function separateComponents(layutInfo, options) {\n            var nodes = layoutInfo.layoutNodes;\n            var components = [];\n\n            for (var i = 0; i < nodes.length; i++) {\n              var node = nodes[i];\n              var cid = node.cmptId;\n              var component = components[cid] = components[cid] || [];\n              component.push(node);\n            }\n\n            var totalA = 0;\n\n            for (var i = 0; i < components.length; i++) {\n              var c = components[i];\n\n              if (!c) {\n                continue;\n              }\n\n              c.x1 = Infinity;\n              c.x2 = -Infinity;\n              c.y1 = Infinity;\n              c.y2 = -Infinity;\n\n              for (var j = 0; j < c.length; j++) {\n                var n = c[j];\n                c.x1 = Math.min(c.x1, n.positionX - n.width / 2);\n                c.x2 = Math.max(c.x2, n.positionX + n.width / 2);\n                c.y1 = Math.min(c.y1, n.positionY - n.height / 2);\n                c.y2 = Math.max(c.y2, n.positionY + n.height / 2);\n              }\n\n              c.w = c.x2 - c.x1;\n              c.h = c.y2 - c.y1;\n              totalA += c.w * c.h;\n            }\n\n            components.sort(function (c1, c2) {\n              return c2.w * c2.h - c1.w * c1.h;\n            });\n            var x = 0;\n            var y = 0;\n            var usedW = 0;\n            var rowH = 0;\n            var maxRowW = Math.sqrt(totalA) * layoutInfo.clientWidth / layoutInfo.clientHeight;\n\n            for (var i = 0; i < components.length; i++) {\n              var c = components[i];\n\n              if (!c) {\n                continue;\n              }\n\n              for (var j = 0; j < c.length; j++) {\n                var n = c[j];\n\n                if (!n.isLocked) {\n                  n.positionX += x;\n                  n.positionY += y;\n                }\n              }\n\n              x += c.w + options.componentSpacing;\n              usedW += c.w + options.componentSpacing;\n              rowH = Math.max(rowH, c.h);\n\n              if (usedW > maxRowW) {\n                y += rowH + options.componentSpacing;\n                x = 0;\n                usedW = 0;\n                rowH = 0;\n              }\n            }\n          };\n\n          var mainLoop = function mainLoop(i) {\n            if (stopped) {\n              // logDebug(\"Layout manually stopped. Stopping computation in step \" + i);\n              return false;\n            } // Do one step in the phisical simulation\n\n\n            step(layoutInfo, options, i); // Update temperature\n\n            layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor; // logDebug(\"New temperature: \" + layoutInfo.temperature);\n\n            if (layoutInfo.temperature < options.minTemp) {\n              // logDebug(\"Temperature drop below minimum threshold. Stopping computation in step \" + i);\n              return false;\n            }\n\n            return true;\n          };\n\n          var i = 0;\n          var loopRet;\n\n          do {\n            var f = 0;\n\n            while (f < options.refresh && i < options.numIter) {\n              var loopRet = mainLoop(i);\n\n              if (!loopRet) {\n                break;\n              }\n\n              f++;\n              i++;\n            }\n\n            if (options.animate === true) {\n              broadcast(layoutInfo.layoutNodes); // eslint-disable-line no-undef\n            }\n          } while (loopRet && i + 1 < options.numIter);\n\n          separateComponents(layoutInfo, options);\n          return layoutInfo;\n        }).then(function (layoutInfoUpdated) {\n          layoutInfo.layoutNodes = layoutInfoUpdated.layoutNodes; // get the positions\n\n          thread.stop();\n          done();\n        });\n\n        var done = function done() {\n          if (options.animate === true || options.animate === false) {\n            refresh({\n              force: true,\n              next: function next() {\n                // Layout has finished\n                layout.one('layoutstop', options.stop);\n                layout.emit({\n                  type: 'layoutstop',\n                  layout: layout\n                });\n              }\n            });\n          } else {\n            options.eles.nodes().layoutPositions(layout, options, function (node) {\n              var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];\n              return {\n                x: lnode.positionX,\n                y: lnode.positionY\n              };\n            });\n          }\n        };\n\n        return this; // chaining\n      };\n      /**\n       * @brief : called on continuous layouts to stop them before they finish\n       */\n\n\n      CoseLayout.prototype.stop = function () {\n        this.stopped = true;\n\n        if (this.thread) {\n          this.thread.stop();\n        }\n\n        this.emit('layoutstop');\n        return this; // chaining\n      };\n\n      CoseLayout.prototype.destroy = function () {\n        if (this.thread) {\n          this.thread.stop();\n        }\n\n        return this; // chaining\n      };\n      /**\n       * @brief     : Creates an object which is contains all the data\n       *              used in the layout process\n       * @arg cy    : cytoscape.js object\n       * @return    : layoutInfo object initialized\n       */\n\n\n      var createLayoutInfo = function createLayoutInfo(cy, layout, options) {\n        // Shortcut\n        var edges = options.eles.edges();\n        var nodes = options.eles.nodes();\n        var layoutInfo = {\n          isCompound: cy.hasCompoundNodes(),\n          layoutNodes: [],\n          idToIndex: {},\n          nodeSize: nodes.size(),\n          graphSet: [],\n          indexToGraph: [],\n          layoutEdges: [],\n          edgeSize: edges.size(),\n          temperature: options.initialTemp,\n          clientWidth: cy.width(),\n          clientHeight: cy.width(),\n          boundingBox: math.makeBoundingBox(options.boundingBox ? options.boundingBox : {\n            x1: 0,\n            y1: 0,\n            w: cy.width(),\n            h: cy.height()\n          })\n        };\n        var components = options.eles.components();\n        var id2cmptId = {};\n\n        for (var i = 0; i < components.length; i++) {\n          var component = components[i];\n\n          for (var j = 0; j < component.length; j++) {\n            var node = component[j];\n            id2cmptId[node.id()] = i;\n          }\n        } // Iterate over all nodes, creating layout nodes\n\n\n        for (var i = 0; i < layoutInfo.nodeSize; i++) {\n          var n = nodes[i];\n          var nbb = n.layoutDimensions(options);\n          var tempNode = {};\n          tempNode.isLocked = n.locked();\n          tempNode.id = n.data('id');\n          tempNode.parentId = n.data('parent');\n          tempNode.cmptId = id2cmptId[n.id()];\n          tempNode.children = [];\n          tempNode.positionX = n.position('x');\n          tempNode.positionY = n.position('y');\n          tempNode.offsetX = 0;\n          tempNode.offsetY = 0;\n          tempNode.height = nbb.w;\n          tempNode.width = nbb.h;\n          tempNode.maxX = tempNode.positionX + tempNode.width / 2;\n          tempNode.minX = tempNode.positionX - tempNode.width / 2;\n          tempNode.maxY = tempNode.positionY + tempNode.height / 2;\n          tempNode.minY = tempNode.positionY - tempNode.height / 2;\n          tempNode.padLeft = parseFloat(n.style('padding'));\n          tempNode.padRight = parseFloat(n.style('padding'));\n          tempNode.padTop = parseFloat(n.style('padding'));\n          tempNode.padBottom = parseFloat(n.style('padding')); // forces\n\n          tempNode.nodeRepulsion = is.fn(options.nodeRepulsion) ? options.nodeRepulsion(n) : options.nodeRepulsion; // Add new node\n\n          layoutInfo.layoutNodes.push(tempNode); // Add entry to id-index map\n\n          layoutInfo.idToIndex[tempNode.id] = i;\n        } // Inline implementation of a queue, used for traversing the graph in BFS order\n\n\n        var queue = [];\n        var start = 0; // Points to the start the queue\n\n        var end = -1; // Points to the end of the queue\n\n        var tempGraph = []; // Second pass to add child information and\n        // initialize queue for hierarchical traversal\n\n        for (var i = 0; i < layoutInfo.nodeSize; i++) {\n          var n = layoutInfo.layoutNodes[i];\n          var p_id = n.parentId; // Check if node n has a parent node\n\n          if (null != p_id) {\n            // Add node Id to parent's list of children\n            layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);\n          } else {\n            // If a node doesn't have a parent, then it's in the root graph\n            queue[++end] = n.id;\n            tempGraph.push(n.id);\n          }\n        } // Add root graph to graphSet\n\n\n        layoutInfo.graphSet.push(tempGraph); // Traverse the graph, level by level,\n\n        while (start <= end) {\n          // Get the node to visit and remove it from queue\n          var node_id = queue[start++];\n          var node_ix = layoutInfo.idToIndex[node_id];\n          var node = layoutInfo.layoutNodes[node_ix];\n          var children = node.children;\n\n          if (children.length > 0) {\n            // Add children nodes as a new graph to graph set\n            layoutInfo.graphSet.push(children); // Add children to que queue to be visited\n\n            for (var i = 0; i < children.length; i++) {\n              queue[++end] = children[i];\n            }\n          }\n        } // Create indexToGraph map\n\n\n        for (var i = 0; i < layoutInfo.graphSet.length; i++) {\n          var graph = layoutInfo.graphSet[i];\n\n          for (var j = 0; j < graph.length; j++) {\n            var index = layoutInfo.idToIndex[graph[j]];\n            layoutInfo.indexToGraph[index] = i;\n          }\n        } // Iterate over all edges, creating Layout Edges\n\n\n        for (var i = 0; i < layoutInfo.edgeSize; i++) {\n          var e = edges[i];\n          var tempEdge = {};\n          tempEdge.id = e.data('id');\n          tempEdge.sourceId = e.data('source');\n          tempEdge.targetId = e.data('target'); // Compute ideal length\n\n          var idealLength = is.fn(options.idealEdgeLength) ? options.idealEdgeLength(e) : options.idealEdgeLength;\n          var elasticity = is.fn(options.edgeElasticity) ? options.edgeElasticity(e) : options.edgeElasticity; // Check if it's an inter graph edge\n\n          var sourceIx = layoutInfo.idToIndex[tempEdge.sourceId];\n          var targetIx = layoutInfo.idToIndex[tempEdge.targetId];\n          var sourceGraph = layoutInfo.indexToGraph[sourceIx];\n          var targetGraph = layoutInfo.indexToGraph[targetIx];\n\n          if (sourceGraph != targetGraph) {\n            // Find lowest common graph ancestor\n            var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo); // Compute sum of node depths, relative to lca graph\n\n            var lcaGraph = layoutInfo.graphSet[lca];\n            var depth = 0; // Source depth\n\n            var tempNode = layoutInfo.layoutNodes[sourceIx];\n\n            while (-1 === lcaGraph.indexOf(tempNode.id)) {\n              tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];\n              depth++;\n            } // Target depth\n\n\n            tempNode = layoutInfo.layoutNodes[targetIx];\n\n            while (-1 === lcaGraph.indexOf(tempNode.id)) {\n              tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];\n              depth++;\n            } // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +\n            //  \". Index: \" + lca + \" Contents: \" + lcaGraph.toString() +\n            //  \". Depth: \" + depth);\n            // Update idealLength\n\n\n            idealLength *= depth * options.nestingFactor;\n          }\n\n          tempEdge.idealLength = idealLength;\n          tempEdge.elasticity = elasticity;\n          layoutInfo.layoutEdges.push(tempEdge);\n        } // Finally, return layoutInfo object\n\n\n        return layoutInfo;\n      };\n      /**\n       * @brief : This function finds the index of the lowest common\n       *          graph ancestor between 2 nodes in the subtree\n       *          (from the graph hierarchy induced tree) whose\n       *          root is graphIx\n       *\n       * @arg node1: node1's ID\n       * @arg node2: node2's ID\n       * @arg layoutInfo: layoutInfo object\n       *\n       */\n\n\n      var findLCA = function findLCA(node1, node2, layoutInfo) {\n        // Find their common ancester, starting from the root graph\n        var res = findLCA_aux(node1, node2, 0, layoutInfo);\n\n        if (2 > res.count) {\n          // If aux function couldn't find the common ancester,\n          // then it is the root graph\n          return 0;\n        } else {\n          return res.graph;\n        }\n      };\n      /**\n       * @brief          : Auxiliary function used for LCA computation\n       *\n       * @arg node1      : node1's ID\n       * @arg node2      : node2's ID\n       * @arg graphIx    : subgraph index\n       * @arg layoutInfo : layoutInfo object\n       *\n       * @return         : object of the form {count: X, graph: Y}, where:\n       *                   X is the number of ancesters (max: 2) found in\n       *                   graphIx (and it's subgraphs),\n       *                   Y is the graph index of the lowest graph containing\n       *                   all X nodes\n       */\n\n\n      var findLCA_aux = function findLCA_aux(node1, node2, graphIx, layoutInfo) {\n        var graph = layoutInfo.graphSet[graphIx]; // If both nodes belongs to graphIx\n\n        if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {\n          return {\n            count: 2,\n            graph: graphIx\n          };\n        } // Make recursive calls for all subgraphs\n\n\n        var c = 0;\n\n        for (var i = 0; i < graph.length; i++) {\n          var nodeId = graph[i];\n          var nodeIx = layoutInfo.idToIndex[nodeId];\n          var children = layoutInfo.layoutNodes[nodeIx].children; // If the node has no child, skip it\n\n          if (0 === children.length) {\n            continue;\n          }\n\n          var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];\n          var result = findLCA_aux(node1, node2, childGraphIx, layoutInfo);\n\n          if (0 === result.count) {\n            // Neither node1 nor node2 are present in this subgraph\n            continue;\n          } else if (1 === result.count) {\n            // One of (node1, node2) is present in this subgraph\n            c++;\n\n            if (2 === c) {\n              // We've already found both nodes, no need to keep searching\n              break;\n            }\n          } else {\n            // Both nodes are present in this subgraph\n            return result;\n          }\n        }\n\n        return {\n          count: c,\n          graph: graphIx\n        };\n      };\n      /**\n       * @brief: printsLayoutInfo into js console\n       *         Only used for debbuging\n       */\n\n\n      var printLayoutInfo = function printLayoutInfo(layoutInfo) {\n        /* eslint-disable */\n        if (!DEBUG) {\n          return;\n        }\n\n        console.debug('layoutNodes:');\n\n        for (var i = 0; i < layoutInfo.nodeSize; i++) {\n          var n = layoutInfo.layoutNodes[i];\n          var s = '\\nindex: ' + i + '\\nId: ' + n.id + '\\nChildren: ' + n.children.toString() + '\\nparentId: ' + n.parentId + '\\npositionX: ' + n.positionX + '\\npositionY: ' + n.positionY + '\\nOffsetX: ' + n.offsetX + '\\nOffsetY: ' + n.offsetY + '\\npadLeft: ' + n.padLeft + '\\npadRight: ' + n.padRight + '\\npadTop: ' + n.padTop + '\\npadBottom: ' + n.padBottom;\n          console.debug(s);\n        }\n\n        console.debug('idToIndex');\n\n        for (var i in layoutInfo.idToIndex) {\n          console.debug('Id: ' + i + '\\nIndex: ' + layoutInfo.idToIndex[i]);\n        }\n\n        console.debug('Graph Set');\n        var set = layoutInfo.graphSet;\n\n        for (var i = 0; i < set.length; i++) {\n          console.debug('Set : ' + i + ': ' + set[i].toString());\n        }\n\n        var s = 'IndexToGraph';\n\n        for (var i = 0; i < layoutInfo.indexToGraph.length; i++) {\n          s += '\\nIndex : ' + i + ' Graph: ' + layoutInfo.indexToGraph[i];\n        }\n\n        console.debug(s);\n        s = 'Layout Edges';\n\n        for (var i = 0; i < layoutInfo.layoutEdges.length; i++) {\n          var e = layoutInfo.layoutEdges[i];\n          s += '\\nEdge Index: ' + i + ' ID: ' + e.id + ' SouceID: ' + e.sourceId + ' TargetId: ' + e.targetId + ' Ideal Length: ' + e.idealLength;\n        }\n\n        console.debug(s);\n        s = 'nodeSize: ' + layoutInfo.nodeSize;\n        s += '\\nedgeSize: ' + layoutInfo.edgeSize;\n        s += '\\ntemperature: ' + layoutInfo.temperature;\n        console.debug(s);\n        return;\n        /* eslint-enable */\n      };\n      /**\n       * @brief : Randomizes the position of all nodes\n       */\n\n\n      var randomizePositions = function randomizePositions(layoutInfo, cy) {\n        var width = layoutInfo.clientWidth;\n        var height = layoutInfo.clientHeight;\n\n        for (var i = 0; i < layoutInfo.nodeSize; i++) {\n          var n = layoutInfo.layoutNodes[i]; // No need to randomize compound nodes or locked nodes\n\n          if (0 === n.children.length && !n.isLocked) {\n            n.positionX = Math.random() * width;\n            n.positionY = Math.random() * height;\n          }\n        }\n      };\n      /**\n       * @brief          : Updates the positions of nodes in the network\n       * @arg layoutInfo : LayoutInfo object\n       * @arg cy         : Cytoscape object\n       * @arg options    : Layout options\n       */\n\n\n      var refreshPositions = function refreshPositions(layoutInfo, cy, options) {\n        // var s = 'Refreshing positions';\n        // logDebug(s);\n        var layout = options.layout;\n        var nodes = options.eles.nodes();\n        var bb = layoutInfo.boundingBox;\n        var coseBB = {\n          x1: Infinity,\n          x2: -Infinity,\n          y1: Infinity,\n          y2: -Infinity\n        };\n\n        if (options.boundingBox) {\n          nodes.forEach(function (node) {\n            var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];\n            coseBB.x1 = Math.min(coseBB.x1, lnode.positionX);\n            coseBB.x2 = Math.max(coseBB.x2, lnode.positionX);\n            coseBB.y1 = Math.min(coseBB.y1, lnode.positionY);\n            coseBB.y2 = Math.max(coseBB.y2, lnode.positionY);\n          });\n          coseBB.w = coseBB.x2 - coseBB.x1;\n          coseBB.h = coseBB.y2 - coseBB.y1;\n        }\n\n        nodes.positions(function (ele, i) {\n          var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data('id')]]; // s = \"Node: \" + lnode.id + \". Refreshed position: (\" +\n          // lnode.positionX + \", \" + lnode.positionY + \").\";\n          // logDebug(s);\n\n          if (options.boundingBox) {\n            // then add extra bounding box constraint\n            var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;\n            var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;\n            return {\n              x: bb.x1 + pctX * bb.w,\n              y: bb.y1 + pctY * bb.h\n            };\n          } else {\n            return {\n              x: lnode.positionX,\n              y: lnode.positionY\n            };\n          }\n        }); // Trigger layoutReady only on first call\n\n        if (true !== layoutInfo.ready) {\n          // s = 'Triggering layoutready';\n          // logDebug(s);\n          layoutInfo.ready = true;\n          layout.one('layoutready', options.ready);\n          layout.emit({\n            type: 'layoutready',\n            layout: this\n          });\n        }\n      };\n      /**\n       * @brief : Logs a debug message in JS console, if DEBUG is ON\n       */\n      // var logDebug = function(text) {\n      //   if (DEBUG) {\n      //     console.debug(text);\n      //   }\n      // };\n\n\n      module.exports = CoseLayout;\n      /***/\n    },\n    /* 101 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var math = __webpack_require__(2);\n\n      var defaults = {\n        fit: true,\n        // whether to fit the viewport to the graph\n        padding: 30,\n        // padding used on fit\n        boundingBox: undefined,\n        // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n        avoidOverlap: true,\n        // prevents node overlap, may overflow boundingBox if not enough space\n        avoidOverlapPadding: 10,\n        // extra spacing around nodes when avoidOverlap: true\n        nodeDimensionsIncludeLabels: false,\n        // Excludes the label when calculating node bounding boxes for the layout algorithm\n        spacingFactor: undefined,\n        // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n        condense: false,\n        // uses all available space on false, uses minimal space on true\n        rows: undefined,\n        // force num of rows in the grid\n        cols: undefined,\n        // force num of columns in the grid\n        position: function position(node) {},\n        // returns { row, col } for element\n        sort: undefined,\n        // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }\n        animate: false,\n        // whether to transition the node positions\n        animationDuration: 500,\n        // duration of animation in ms if enabled\n        animationEasing: undefined,\n        // easing of animation if enabled\n        animateFilter: function animateFilter(node, i) {\n          return true;\n        },\n        // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n        ready: undefined,\n        // callback on layoutready\n        stop: undefined,\n        // callback on layoutstop\n        transform: function transform(node, position) {\n          return position;\n        } // transform a given node position. Useful for changing flow direction in discrete layouts \n\n      };\n\n      function GridLayout(options) {\n        this.options = util.extend({}, defaults, options);\n      }\n\n      GridLayout.prototype.run = function () {\n        var params = this.options;\n        var options = params;\n        var cy = params.cy;\n        var eles = options.eles;\n        var nodes = eles.nodes().not(':parent');\n\n        if (options.sort) {\n          nodes = nodes.sort(options.sort);\n        }\n\n        var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {\n          x1: 0,\n          y1: 0,\n          w: cy.width(),\n          h: cy.height()\n        });\n\n        if (bb.h === 0 || bb.w === 0) {\n          nodes.layoutPositions(this, options, function (ele) {\n            return {\n              x: bb.x1,\n              y: bb.y1\n            };\n          });\n        } else {\n          // width/height * splits^2 = cells where splits is number of times to split width\n          var cells = nodes.size();\n          var splits = Math.sqrt(cells * bb.h / bb.w);\n          var rows = Math.round(splits);\n          var cols = Math.round(bb.w / bb.h * splits);\n\n          var small = function small(val) {\n            if (val == null) {\n              return Math.min(rows, cols);\n            } else {\n              var min = Math.min(rows, cols);\n\n              if (min == rows) {\n                rows = val;\n              } else {\n                cols = val;\n              }\n            }\n          };\n\n          var large = function large(val) {\n            if (val == null) {\n              return Math.max(rows, cols);\n            } else {\n              var max = Math.max(rows, cols);\n\n              if (max == rows) {\n                rows = val;\n              } else {\n                cols = val;\n              }\n            }\n          };\n\n          var oRows = options.rows;\n          var oCols = options.cols != null ? options.cols : options.columns; // if rows or columns were set in options, use those values\n\n          if (oRows != null && oCols != null) {\n            rows = oRows;\n            cols = oCols;\n          } else if (oRows != null && oCols == null) {\n            rows = oRows;\n            cols = Math.ceil(cells / rows);\n          } else if (oRows == null && oCols != null) {\n            cols = oCols;\n            rows = Math.ceil(cells / cols);\n          } // otherwise use the automatic values and adjust accordingly\n          // if rounding was up, see if we can reduce rows or columns\n          else if (cols * rows > cells) {\n              var sm = small();\n              var lg = large(); // reducing the small side takes away the most cells, so try it first\n\n              if ((sm - 1) * lg >= cells) {\n                small(sm - 1);\n              } else if ((lg - 1) * sm >= cells) {\n                large(lg - 1);\n              }\n            } else {\n              // if rounding was too low, add rows or columns\n              while (cols * rows < cells) {\n                var _sm = small();\n\n                var _lg = large(); // try to add to larger side first (adds less in multiplication)\n\n\n                if ((_lg + 1) * _sm >= cells) {\n                  large(_lg + 1);\n                } else {\n                  small(_sm + 1);\n                }\n              }\n            }\n\n          var cellWidth = bb.w / cols;\n          var cellHeight = bb.h / rows;\n\n          if (options.condense) {\n            cellWidth = 0;\n            cellHeight = 0;\n          }\n\n          if (options.avoidOverlap) {\n            for (var i = 0; i < nodes.length; i++) {\n              var node = nodes[i];\n              var pos = node._private.position;\n\n              if (pos.x == null || pos.y == null) {\n                // for bb\n                pos.x = 0;\n                pos.y = 0;\n              }\n\n              var nbb = node.layoutDimensions(options);\n              var p = options.avoidOverlapPadding;\n              var w = nbb.w + p;\n              var h = nbb.h + p;\n              cellWidth = Math.max(cellWidth, w);\n              cellHeight = Math.max(cellHeight, h);\n            }\n          }\n\n          var cellUsed = {}; // e.g. 'c-0-2' => true\n\n          var used = function used(row, col) {\n            return cellUsed['c-' + row + '-' + col] ? true : false;\n          };\n\n          var use = function use(row, col) {\n            cellUsed['c-' + row + '-' + col] = true;\n          }; // to keep track of current cell position\n\n\n          var row = 0;\n          var col = 0;\n\n          var moveToNextCell = function moveToNextCell() {\n            col++;\n\n            if (col >= cols) {\n              col = 0;\n              row++;\n            }\n          }; // get a cache of all the manual positions\n\n\n          var id2manPos = {};\n\n          for (var _i = 0; _i < nodes.length; _i++) {\n            var _node = nodes[_i];\n            var rcPos = options.position(_node);\n\n            if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {\n              // must have at least row or col def'd\n              var _pos = {\n                row: rcPos.row,\n                col: rcPos.col\n              };\n\n              if (_pos.col === undefined) {\n                // find unused col\n                _pos.col = 0;\n\n                while (used(_pos.row, _pos.col)) {\n                  _pos.col++;\n                }\n              } else if (_pos.row === undefined) {\n                // find unused row\n                _pos.row = 0;\n\n                while (used(_pos.row, _pos.col)) {\n                  _pos.row++;\n                }\n              }\n\n              id2manPos[_node.id()] = _pos;\n              use(_pos.row, _pos.col);\n            }\n          }\n\n          var getPos = function getPos(element, i) {\n            var x = void 0,\n                y = void 0;\n\n            if (element.locked() || element.isParent()) {\n              return false;\n            } // see if we have a manual position set\n\n\n            var rcPos = id2manPos[element.id()];\n\n            if (rcPos) {\n              x = rcPos.col * cellWidth + cellWidth / 2 + bb.x1;\n              y = rcPos.row * cellHeight + cellHeight / 2 + bb.y1;\n            } else {\n              // otherwise set automatically\n              while (used(row, col)) {\n                moveToNextCell();\n              }\n\n              x = col * cellWidth + cellWidth / 2 + bb.x1;\n              y = row * cellHeight + cellHeight / 2 + bb.y1;\n              use(row, col);\n              moveToNextCell();\n            }\n\n            return {\n              x: x,\n              y: y\n            };\n          };\n\n          nodes.layoutPositions(this, options, getPos);\n        }\n\n        return this; // chaining\n      };\n\n      module.exports = GridLayout;\n      /***/\n    },\n    /* 102 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1); // default layout options\n\n\n      var defaults = {\n        ready: function ready() {},\n        // on layoutready\n        stop: function stop() {} // on layoutstop\n\n      }; // constructor\n      // options : object containing layout options\n\n      function NullLayout(options) {\n        this.options = util.extend({}, defaults, options);\n      } // runs the layout\n\n\n      NullLayout.prototype.run = function () {\n        var options = this.options;\n        var eles = options.eles; // elements to consider in the layout\n\n        var layout = this; // cy is automatically populated for us in the constructor\n\n        var cy = options.cy; // jshint ignore:line\n\n        layout.emit('layoutstart'); // puts all nodes at (0, 0)\n\n        eles.nodes().positions(function () {\n          return {\n            x: 0,\n            y: 0\n          };\n        }); // trigger layoutready when each node has had its position set at least once\n\n        layout.one('layoutready', options.ready);\n        layout.emit('layoutready'); // trigger layoutstop when the layout stops (e.g. finishes)\n\n        layout.one('layoutstop', options.stop);\n        layout.emit('layoutstop');\n        return this; // chaining\n      }; // called on continuous layouts to stop them before they finish\n\n\n      NullLayout.prototype.stop = function () {\n        return this; // chaining\n      };\n\n      module.exports = NullLayout;\n      /***/\n    },\n    /* 103 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var is = __webpack_require__(0);\n\n      var defaults = {\n        positions: undefined,\n        // map of (node id) => (position obj); or function(node){ return somPos; }\n        zoom: undefined,\n        // the zoom level to set (prob want fit = false if set)\n        pan: undefined,\n        // the pan level to set (prob want fit = false if set)\n        fit: true,\n        // whether to fit to viewport\n        padding: 30,\n        // padding on fit\n        animate: false,\n        // whether to transition the node positions\n        animationDuration: 500,\n        // duration of animation in ms if enabled\n        animationEasing: undefined,\n        // easing of animation if enabled\n        animateFilter: function animateFilter(node, i) {\n          return true;\n        },\n        // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n        ready: undefined,\n        // callback on layoutready\n        stop: undefined,\n        // callback on layoutstop\n        transform: function transform(node, position) {\n          return position;\n        } // transform a given node position. Useful for changing flow direction in discrete layouts \n\n      };\n\n      function PresetLayout(options) {\n        this.options = util.extend({}, defaults, options);\n      }\n\n      PresetLayout.prototype.run = function () {\n        var options = this.options;\n        var eles = options.eles;\n        var nodes = eles.nodes();\n        var posIsFn = is.fn(options.positions);\n\n        function getPosition(node) {\n          if (options.positions == null) {\n            return null;\n          }\n\n          if (posIsFn) {\n            return options.positions(node);\n          }\n\n          var pos = options.positions[node._private.data.id];\n\n          if (pos == null) {\n            return null;\n          }\n\n          return pos;\n        }\n\n        nodes.layoutPositions(this, options, function (node, i) {\n          var position = getPosition(node);\n\n          if (node.locked() || position == null) {\n            return false;\n          }\n\n          return position;\n        });\n        return this; // chaining\n      };\n\n      module.exports = PresetLayout;\n      /***/\n    },\n    /* 104 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var math = __webpack_require__(2);\n\n      var defaults = {\n        fit: true,\n        // whether to fit to viewport\n        padding: 30,\n        // fit padding\n        boundingBox: undefined,\n        // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n        animate: false,\n        // whether to transition the node positions\n        animationDuration: 500,\n        // duration of animation in ms if enabled\n        animationEasing: undefined,\n        // easing of animation if enabled\n        animateFilter: function animateFilter(node, i) {\n          return true;\n        },\n        // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n        ready: undefined,\n        // callback on layoutready\n        stop: undefined,\n        // callback on layoutstop\n        transform: function transform(node, position) {\n          return position;\n        } // transform a given node position. Useful for changing flow direction in discrete layouts \n\n      };\n\n      function RandomLayout(options) {\n        this.options = util.extend({}, defaults, options);\n      }\n\n      RandomLayout.prototype.run = function () {\n        var options = this.options;\n        var cy = options.cy;\n        var eles = options.eles;\n        var nodes = eles.nodes().not(':parent');\n        var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {\n          x1: 0,\n          y1: 0,\n          w: cy.width(),\n          h: cy.height()\n        });\n\n        var getPos = function getPos(node, i) {\n          return {\n            x: bb.x1 + Math.round(Math.random() * bb.w),\n            y: bb.y1 + Math.round(Math.random() * bb.h)\n          };\n        };\n\n        nodes.layoutPositions(this, options, getPos);\n        return this; // chaining\n      };\n\n      module.exports = RandomLayout;\n      /***/\n    },\n    /* 105 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      module.exports = [{\n        name: 'null',\n        impl: __webpack_require__(106)\n      }, {\n        name: 'base',\n        impl: __webpack_require__(107)\n      }, {\n        name: 'canvas',\n        impl: __webpack_require__(123)\n      }];\n      /***/\n    },\n    /* 106 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function NullRenderer(options) {\n        this.options = options;\n        this.notifications = 0; // for testing\n      }\n\n      var noop = function noop() {};\n\n      NullRenderer.prototype = {\n        recalculateRenderedStyle: noop,\n        notify: function notify() {\n          this.notifications++;\n        },\n        init: noop\n      };\n      module.exports = NullRenderer;\n      /***/\n    },\n    /* 107 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var window = __webpack_require__(3);\n\n      var BaseRenderer = function BaseRenderer(options) {\n        this.init(options);\n      };\n\n      var BR = BaseRenderer;\n      var BRp = BR.prototype;\n      BRp.clientFunctions = ['redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl'];\n\n      BRp.init = function (options) {\n        var r = this;\n        r.options = options;\n        r.cy = options.cy;\n        var ctr = r.container = options.cy.container(); // prepend a stylesheet in the head such that\n\n        if (window) {\n          var document = window.document;\n          var head = document.head;\n          var stylesheetId = '__________cytoscape_stylesheet';\n          var className = '__________cytoscape_container';\n          var stylesheetAlreadyExists = document.getElementById(stylesheetId) != null;\n\n          if (ctr.className.indexOf(className) < 0) {\n            ctr.className = (ctr.className || '') + ' ' + className;\n          }\n\n          if (!stylesheetAlreadyExists) {\n            var stylesheet = document.createElement('style');\n            stylesheet.id = stylesheetId;\n            stylesheet.innerHTML = '.' + className + ' { position: relative; }';\n            head.insertBefore(stylesheet, head.children[0]); // first so lowest priority\n          }\n\n          var computedStyle = window.getComputedStyle(ctr);\n          var position = computedStyle.getPropertyValue('position');\n\n          if (position === 'static') {\n            util.error('A Cytoscape container has style position:static and so can not use UI extensions properly');\n          }\n        }\n\n        r.selection = [undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag\n\n        r.bezierProjPcts = [0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95]; //--Pointer-related data\n\n        r.hoverData = {\n          down: null,\n          last: null,\n          downTime: null,\n          triggerMode: null,\n          dragging: false,\n          initialPan: [null, null],\n          capture: false\n        };\n        r.dragData = {\n          possibleDragElements: []\n        };\n        r.touchData = {\n          start: null,\n          capture: false,\n          // These 3 fields related to tap, taphold events\n          startPosition: [null, null, null, null, null, null],\n          singleTouchStartTime: null,\n          singleTouchMoved: true,\n          now: [null, null, null, null, null, null],\n          earlier: [null, null, null, null, null, null]\n        };\n        r.redraws = 0;\n        r.showFps = options.showFps;\n        r.debug = options.debug;\n        r.hideEdgesOnViewport = options.hideEdgesOnViewport;\n        r.hideLabelsOnViewport = options.hideLabelsOnViewport;\n        r.textureOnViewport = options.textureOnViewport;\n        r.wheelSensitivity = options.wheelSensitivity;\n        r.motionBlurEnabled = options.motionBlur; // on by default\n\n        r.forcedPixelRatio = options.pixelRatio;\n        r.motionBlur = options.motionBlur; // for initial kick off\n\n        r.motionBlurOpacity = options.motionBlurOpacity;\n        r.motionBlurTransparency = 1 - r.motionBlurOpacity;\n        r.motionBlurPxRatio = 1;\n        r.mbPxRBlurry = 1; //0.8;\n\n        r.minMbLowQualFrames = 4;\n        r.fullQualityMb = false;\n        r.clearedForMotionBlur = [];\n        r.desktopTapThreshold = options.desktopTapThreshold;\n        r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;\n        r.touchTapThreshold = options.touchTapThreshold;\n        r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;\n        r.tapholdDuration = 500;\n        r.bindings = [];\n        r.beforeRenderCallbacks = [];\n        r.beforeRenderPriorities = {\n          // higher priority execs before lower one\n          animations: 400,\n          eleCalcs: 300,\n          eleTxrDeq: 200,\n          lyrTxrDeq: 100\n        };\n        r.registerNodeShapes();\n        r.registerArrowShapes();\n        r.registerCalculationListeners();\n      };\n\n      BRp.notify = function (params) {\n        var types;\n        var r = this; // the renderer can't be notified after it's destroyed\n\n        if (this.destroyed) {\n          return;\n        }\n\n        if (is.array(params.type)) {\n          types = params.type;\n        } else {\n          types = [params.type];\n        }\n\n        var has = {};\n\n        for (var i = 0; i < types.length; i++) {\n          var type = types[i];\n          has[type] = true;\n        } // for\n\n\n        if (has['init']) {\n          r.load();\n          return;\n        }\n\n        if (has['destroy']) {\n          r.destroy();\n          return;\n        }\n\n        if (has['add'] || has['remove'] || has['load'] || has['zorder']) {\n          r.invalidateCachedZSortedEles();\n        }\n\n        if (has['viewport']) {\n          r.redrawHint('select', true);\n        }\n\n        if (has['load'] || has['resize']) {\n          r.invalidateContainerClientCoordsCache();\n          r.matchCanvasSize(r.container);\n        }\n\n        r.redrawHint('eles', true);\n        r.redrawHint('drag', true);\n        this.startRenderLoop();\n        this.redraw();\n      };\n\n      BRp.destroy = function () {\n        var r = this;\n        r.destroyed = true;\n        r.cy.stopAnimationLoop();\n\n        for (var i = 0; i < r.bindings.length; i++) {\n          var binding = r.bindings[i];\n          var b = binding;\n          var tgt = b.target;\n          (tgt.off || tgt.removeEventListener).apply(tgt, b.args);\n        }\n\n        r.bindings = [];\n        r.beforeRenderCallbacks = [];\n        r.onUpdateEleCalcsFns = [];\n\n        if (r.removeObserver) {\n          r.removeObserver.disconnect();\n        }\n\n        if (r.styleObserver) {\n          r.styleObserver.disconnect();\n        }\n\n        if (r.labelCalcDiv) {\n          try {\n            document.body.removeChild(r.labelCalcDiv); // eslint-disable-line no-undef\n          } catch (e) {// ie10 issue #1014\n          }\n        }\n      };\n\n      [__webpack_require__(108), __webpack_require__(109), __webpack_require__(119), __webpack_require__(120), __webpack_require__(121), __webpack_require__(122)].forEach(function (props) {\n        util.extend(BRp, props);\n      });\n      module.exports = BR;\n      /***/\n    },\n    /* 108 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var math = __webpack_require__(2);\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var BRp = {};\n      BRp.arrowShapeWidth = 0.3;\n\n      BRp.registerArrowShapes = function () {\n        var arrowShapes = this.arrowShapes = {};\n        var renderer = this; // Contract for arrow shapes:\n        // 0, 0 is arrow tip\n        // (0, 1) is direction towards node\n        // (1, 0) is right\n        //\n        // functional api:\n        // collide: check x, y in shape\n        // roughCollide: called before collide, no false negatives\n        // draw: draw\n        // spacing: dist(arrowTip, nodeBoundary)\n        // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip\n\n        var bbCollide = function bbCollide(x, y, size, angle, translation, edgeWidth, padding) {\n          var x1 = translation.x - size / 2 - padding;\n          var x2 = translation.x + size / 2 + padding;\n          var y1 = translation.y - size / 2 - padding;\n          var y2 = translation.y + size / 2 + padding;\n          var inside = x1 <= x && x <= x2 && y1 <= y && y <= y2;\n          return inside;\n        };\n\n        var transform = function transform(x, y, size, angle, translation) {\n          var xRotated = x * Math.cos(angle) - y * Math.sin(angle);\n          var yRotated = x * Math.sin(angle) + y * Math.cos(angle);\n          var xScaled = xRotated * size;\n          var yScaled = yRotated * size;\n          var xTranslated = xScaled + translation.x;\n          var yTranslated = yScaled + translation.y;\n          return {\n            x: xTranslated,\n            y: yTranslated\n          };\n        };\n\n        var transformPoints = function transformPoints(pts, size, angle, translation) {\n          var retPts = [];\n\n          for (var i = 0; i < pts.length; i += 2) {\n            var x = pts[i];\n            var y = pts[i + 1];\n            retPts.push(transform(x, y, size, angle, translation));\n          }\n\n          return retPts;\n        };\n\n        var pointsToArr = function pointsToArr(pts) {\n          var ret = [];\n\n          for (var i = 0; i < pts.length; i++) {\n            var p = pts[i];\n            ret.push(p.x, p.y);\n          }\n\n          return ret;\n        };\n\n        var standardGap = function standardGap(edge) {\n          return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').pfValue * 2;\n        };\n\n        var defineArrowShape = function defineArrowShape(name, defn) {\n          if (is.string(defn)) {\n            defn = arrowShapes[defn];\n          }\n\n          arrowShapes[name] = util.extend({\n            name: name,\n            points: [-0.15, -0.3, 0.15, -0.3, 0.15, 0.3, -0.15, 0.3],\n            collide: function collide(x, y, size, angle, translation, padding) {\n              var points = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));\n              var inside = math.pointInsidePolygonPoints(x, y, points);\n              return inside;\n            },\n            roughCollide: bbCollide,\n            draw: function draw(context, size, angle, translation) {\n              var points = transformPoints(this.points, size, angle, translation);\n              renderer.arrowShapeImpl('polygon')(context, points);\n            },\n            spacing: function spacing(edge) {\n              return 0;\n            },\n            gap: standardGap\n          }, defn);\n        };\n\n        defineArrowShape('none', {\n          collide: util.falsify,\n          roughCollide: util.falsify,\n          draw: util.noop,\n          spacing: util.zeroify,\n          gap: util.zeroify\n        });\n        defineArrowShape('triangle', {\n          points: [-0.15, -0.3, 0, 0, 0.15, -0.3]\n        });\n        defineArrowShape('arrow', 'triangle');\n        defineArrowShape('triangle-backcurve', {\n          points: arrowShapes['triangle'].points,\n          controlPoint: [0, -0.15],\n          roughCollide: bbCollide,\n          draw: function draw(context, size, angle, translation, edgeWidth) {\n            var ptsTrans = transformPoints(this.points, size, angle, translation);\n            var ctrlPt = this.controlPoint;\n            var ctrlPtTrans = transform(ctrlPt[0], ctrlPt[1], size, angle, translation);\n            renderer.arrowShapeImpl(this.name)(context, ptsTrans, ctrlPtTrans);\n          },\n          gap: function gap(edge) {\n            return standardGap(edge) * 0.8;\n          }\n        });\n        defineArrowShape('triangle-tee', {\n          points: [-0.15, -0.3, 0, 0, 0.15, -0.3, -0.15, -0.3],\n          pointsTee: [-0.15, -0.4, -0.15, -0.5, 0.15, -0.5, 0.15, -0.4],\n          collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {\n            var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));\n            var teePts = pointsToArr(transformPoints(this.pointsTee, size + 2 * padding, angle, translation));\n            var inside = math.pointInsidePolygonPoints(x, y, triPts) || math.pointInsidePolygonPoints(x, y, teePts);\n            return inside;\n          },\n          draw: function draw(context, size, angle, translation, edgeWidth) {\n            var triPts = transformPoints(this.points, size, angle, translation);\n            var teePts = transformPoints(this.pointsTee, size, angle, translation);\n            renderer.arrowShapeImpl(this.name)(context, triPts, teePts);\n          }\n        });\n        defineArrowShape('triangle-cross', {\n          points: [-0.15, -0.3, 0, 0, 0.15, -0.3, -0.15, -0.3],\n          baseCrossLinePts: [-0.15, -0.4, // first half of the rectangle\n          -0.15, -0.4, 0.15, -0.4, // second half of the rectangle\n          0.15, -0.4],\n          crossLinePts: function crossLinePts(size, edgeWidth) {\n            // shift points so that the distance between the cross points matches edge width\n            var p = this.baseCrossLinePts.slice();\n            var shiftFactor = edgeWidth / size;\n            var y0 = 3;\n            var y1 = 5;\n            p[y0] = p[y0] - shiftFactor;\n            p[y1] = p[y1] - shiftFactor;\n            return p;\n          },\n          collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {\n            var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));\n            var teePts = pointsToArr(transformPoints(this.crossLinePts(size, edgeWidth), size + 2 * padding, angle, translation));\n            var inside = math.pointInsidePolygonPoints(x, y, triPts) || math.pointInsidePolygonPoints(x, y, teePts);\n            return inside;\n          },\n          draw: function draw(context, size, angle, translation, edgeWidth) {\n            var triPts = transformPoints(this.points, size, angle, translation);\n            var crossLinePts = transformPoints(this.crossLinePts(size, edgeWidth), size, angle, translation);\n            renderer.arrowShapeImpl(this.name)(context, triPts, crossLinePts);\n          }\n        });\n        defineArrowShape('vee', {\n          points: [-0.15, -0.3, 0, 0, 0.15, -0.3, 0, -0.15],\n          gap: function gap(edge) {\n            return standardGap(edge) * 0.525;\n          }\n        });\n        defineArrowShape('circle', {\n          radius: 0.15,\n          collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {\n            var t = translation;\n            var inside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);\n            return inside;\n          },\n          draw: function draw(context, size, angle, translation, edgeWidth) {\n            renderer.arrowShapeImpl(this.name)(context, translation.x, translation.y, this.radius * size);\n          },\n          spacing: function spacing(edge) {\n            return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;\n          }\n        });\n        defineArrowShape('tee', {\n          points: [-0.15, 0, -0.15, -0.1, 0.15, -0.1, 0.15, 0],\n          spacing: function spacing(edge) {\n            return 1;\n          },\n          gap: function gap(edge) {\n            return 1;\n          }\n        });\n        defineArrowShape('square', {\n          points: [-0.15, 0.00, 0.15, 0.00, 0.15, -0.3, -0.15, -0.3]\n        });\n        defineArrowShape('diamond', {\n          points: [-0.15, -0.15, 0, -0.3, 0.15, -0.15, 0, 0],\n          gap: function gap(edge) {\n            return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;\n          }\n        });\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 109 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var BRp = {};\n      [__webpack_require__(110), __webpack_require__(111), __webpack_require__(112), __webpack_require__(113), __webpack_require__(114), __webpack_require__(115), __webpack_require__(116), __webpack_require__(117), __webpack_require__(118)].forEach(function (props) {\n        util.extend(BRp, props);\n      });\n      module.exports = BRp;\n      /***/\n    },\n    /* 110 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var window = __webpack_require__(3);\n\n      var math = __webpack_require__(2);\n\n      var util = __webpack_require__(1);\n\n      var window = __webpack_require__(3);\n\n      var BRp = {}; // Project mouse\n\n      BRp.projectIntoViewport = function (clientX, clientY) {\n        var cy = this.cy;\n        var offsets = this.findContainerClientCoords();\n        var offsetLeft = offsets[0];\n        var offsetTop = offsets[1];\n        var scale = offsets[4];\n        var pan = cy.pan();\n        var zoom = cy.zoom();\n        var x = ((clientX - offsetLeft) / scale - pan.x) / zoom;\n        var y = ((clientY - offsetTop) / scale - pan.y) / zoom;\n        return [x, y];\n      };\n\n      BRp.findContainerClientCoords = function () {\n        if (this.containerBB) {\n          return this.containerBB;\n        }\n\n        var container = this.container;\n        var rect = container.getBoundingClientRect();\n        var style = window.getComputedStyle(container);\n\n        var styleValue = function styleValue(name) {\n          return parseFloat(style.getPropertyValue(name));\n        };\n\n        var padding = {\n          left: styleValue('padding-left'),\n          right: styleValue('padding-right'),\n          top: styleValue('padding-top'),\n          bottom: styleValue('padding-bottom')\n        };\n        var border = {\n          left: styleValue('border-left-width'),\n          right: styleValue('border-right-width'),\n          top: styleValue('border-top-width'),\n          bottom: styleValue('border-bottom-width')\n        };\n        var clientWidth = container.clientWidth;\n        var clientHeight = container.clientHeight;\n        var paddingHor = padding.left + padding.right;\n        var paddingVer = padding.top + padding.bottom;\n        var borderHor = border.left + border.right;\n        var borderVer = border.top + border.bottom;\n        var scale = rect.width / (clientWidth + borderHor);\n        var unscaledW = clientWidth - paddingHor;\n        var unscaledH = clientHeight - paddingVer;\n        var scaledW = rect.width - (paddingHor + borderHor) * scale;\n        var scaledH = rect.height - (paddingVer + borderVer) * scale;\n        var left = rect.left + padding.left + border.left;\n        var top = rect.top + padding.top + border.top;\n        return this.containerBB = [left, top, unscaledW, unscaledH, scale];\n      };\n\n      BRp.invalidateContainerClientCoordsCache = function () {\n        this.containerBB = null;\n      };\n\n      BRp.findNearestElement = function (x, y, interactiveElementsOnly, isTouch) {\n        return this.findNearestElements(x, y, interactiveElementsOnly, isTouch)[0];\n      };\n\n      BRp.findNearestElements = function (x, y, interactiveElementsOnly, isTouch) {\n        var self = this;\n        var r = this;\n        var eles = r.getCachedZSortedEles();\n        var near = []; // 1 node max, 1 edge max\n\n        var zoom = r.cy.zoom();\n        var hasCompounds = r.cy.hasCompoundNodes();\n        var edgeThreshold = (isTouch ? 24 : 8) / zoom;\n        var nodeThreshold = (isTouch ? 8 : 2) / zoom;\n        var labelThreshold = (isTouch ? 8 : 2) / zoom;\n        var minSqDist = Infinity;\n        var nearEdge;\n        var nearNode;\n\n        if (interactiveElementsOnly) {\n          eles = eles.interactive;\n        }\n\n        function addEle(ele, sqDist) {\n          if (ele.isNode()) {\n            if (nearNode) {\n              return; // can't replace node\n            } else {\n              nearNode = ele;\n              near.push(ele);\n            }\n          }\n\n          if (ele.isEdge() && (sqDist == null || sqDist < minSqDist)) {\n            if (nearEdge) {\n              // then replace existing edge\n              // can replace only if same z-index\n              if (nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value && nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value) {\n                for (var i = 0; i < near.length; i++) {\n                  if (near[i].isEdge()) {\n                    near[i] = ele;\n                    nearEdge = ele;\n                    minSqDist = sqDist != null ? sqDist : minSqDist;\n                    break;\n                  }\n                }\n              }\n            } else {\n              near.push(ele);\n              nearEdge = ele;\n              minSqDist = sqDist != null ? sqDist : minSqDist;\n            }\n          }\n        }\n\n        function checkNode(node) {\n          var width = node.outerWidth() + 2 * nodeThreshold;\n          var height = node.outerHeight() + 2 * nodeThreshold;\n          var hw = width / 2;\n          var hh = height / 2;\n          var pos = node.position();\n\n          if (pos.x - hw <= x && x <= pos.x + hw // bb check x\n          && pos.y - hh <= y && y <= pos.y + hh // bb check y\n          ) {\n              var shape = r.nodeShapes[self.getNodeShape(node)];\n\n              if (shape.checkPoint(x, y, 0, width, height, pos.x, pos.y)) {\n                addEle(node, 0);\n                return true;\n              }\n            }\n        }\n\n        function checkEdge(edge) {\n          var _p = edge._private;\n          var rs = _p.rscratch;\n          var styleWidth = edge.pstyle('width').pfValue;\n          var scale = edge.pstyle('arrow-scale').value;\n          var width = styleWidth / 2 + edgeThreshold; // more like a distance radius from centre\n\n          var widthSq = width * width;\n          var width2 = width * 2;\n          var src = _p.source;\n          var tgt = _p.target;\n          var inEdgeBB = false;\n          var sqDist;\n\n          if (rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack') {\n            var pts = rs.allpts;\n\n            for (var i = 0; i + 3 < pts.length; i += 2) {\n              if ((inEdgeBB = math.inLineVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], width2)) && widthSq > (sqDist = math.sqdistToFiniteLine(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3]))) {\n                addEle(edge, sqDist);\n                return true;\n              }\n            }\n          } else if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {\n            var pts = rs.allpts;\n\n            for (var i = 0; i + 5 < rs.allpts.length; i += 4) {\n              if ((inEdgeBB = math.inBezierVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5], width2)) && widthSq > (sqDist = math.sqdistToQuadraticBezier(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5]))) {\n                addEle(edge, sqDist);\n                return true;\n              }\n            }\n          } // if we're close to the edge but didn't hit it, maybe we hit its arrows\n\n\n          var src = src || _p.source;\n          var tgt = tgt || _p.target;\n          var arSize = self.getArrowWidth(styleWidth, scale);\n          var arrows = [{\n            name: 'source',\n            x: rs.arrowStartX,\n            y: rs.arrowStartY,\n            angle: rs.srcArrowAngle\n          }, {\n            name: 'target',\n            x: rs.arrowEndX,\n            y: rs.arrowEndY,\n            angle: rs.tgtArrowAngle\n          }, {\n            name: 'mid-source',\n            x: rs.midX,\n            y: rs.midY,\n            angle: rs.midsrcArrowAngle\n          }, {\n            name: 'mid-target',\n            x: rs.midX,\n            y: rs.midY,\n            angle: rs.midtgtArrowAngle\n          }];\n\n          for (var i = 0; i < arrows.length; i++) {\n            var ar = arrows[i];\n            var shape = r.arrowShapes[edge.pstyle(ar.name + '-arrow-shape').value];\n            var edgeWidth = edge.pstyle('width').pfValue;\n\n            if (shape.roughCollide(x, y, arSize, ar.angle, {\n              x: ar.x,\n              y: ar.y\n            }, edgeWidth, edgeThreshold) && shape.collide(x, y, arSize, ar.angle, {\n              x: ar.x,\n              y: ar.y\n            }, edgeWidth, edgeThreshold)) {\n              addEle(edge);\n              return true;\n            }\n          } // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)\n\n\n          if (hasCompounds && near.length > 0) {\n            checkNode(src);\n            checkNode(tgt);\n          }\n        }\n\n        function preprop(obj, name, pre) {\n          return util.getPrefixedProperty(obj, name, pre);\n        }\n\n        function checkLabel(ele, prefix) {\n          var _p = ele._private;\n          var th = labelThreshold;\n          var prefixDash;\n\n          if (prefix) {\n            prefixDash = prefix + '-';\n          } else {\n            prefixDash = '';\n          }\n\n          var text = ele.pstyle(prefixDash + 'label').value;\n          var eventsEnabled = ele.pstyle('text-events').strValue === 'yes';\n\n          if (!eventsEnabled || !text) {\n            return;\n          }\n\n          var rstyle = _p.rstyle;\n          var bw = ele.pstyle('text-border-width').pfValue;\n          var pw = ele.pstyle('text-background-padding').pfValue;\n          var lw = preprop(rstyle, 'labelWidth', prefix) + bw + 2 * th + 2 * pw;\n          var lh = preprop(rstyle, 'labelHeight', prefix) + bw + 2 * th + 2 * pw;\n          var lx = preprop(rstyle, 'labelX', prefix);\n          var ly = preprop(rstyle, 'labelY', prefix);\n          var theta = preprop(_p.rscratch, 'labelAngle', prefix);\n          var lx1 = lx - lw / 2;\n          var lx2 = lx + lw / 2;\n          var ly1 = ly - lh / 2;\n          var ly2 = ly + lh / 2;\n\n          if (theta) {\n            var cos = Math.cos(theta);\n            var sin = Math.sin(theta);\n\n            var rotate = function rotate(x, y) {\n              x = x - lx;\n              y = y - ly;\n              return {\n                x: x * cos - y * sin + lx,\n                y: x * sin + y * cos + ly\n              };\n            };\n\n            var px1y1 = rotate(lx1, ly1);\n            var px1y2 = rotate(lx1, ly2);\n            var px2y1 = rotate(lx2, ly1);\n            var px2y2 = rotate(lx2, ly2);\n            var points = [px1y1.x, px1y1.y, px2y1.x, px2y1.y, px2y2.x, px2y2.y, px1y2.x, px1y2.y];\n\n            if (math.pointInsidePolygonPoints(x, y, points)) {\n              addEle(ele);\n              return true;\n            }\n          } else {\n            // do a cheaper bb check\n            var bb = {\n              w: lw,\n              h: lh,\n              x1: lx1,\n              x2: lx2,\n              y1: ly1,\n              y2: ly2\n            };\n\n            if (math.inBoundingBox(bb, x, y)) {\n              addEle(ele);\n              return true;\n            }\n          }\n        }\n\n        for (var i = eles.length - 1; i >= 0; i--) {\n          // reverse order for precedence\n          var ele = eles[i];\n\n          if (ele.isNode()) {\n            checkNode(ele) || checkLabel(ele);\n          } else {\n            // then edge\n            checkEdge(ele) || checkLabel(ele) || checkLabel(ele, 'source') || checkLabel(ele, 'target');\n          }\n        }\n\n        return near;\n      }; // 'Give me everything from this box'\n\n\n      BRp.getAllInBox = function (x1, y1, x2, y2) {\n        var eles = this.getCachedZSortedEles().interactive;\n        var box = [];\n        var x1c = Math.min(x1, x2);\n        var x2c = Math.max(x1, x2);\n        var y1c = Math.min(y1, y2);\n        var y2c = Math.max(y1, y2);\n        x1 = x1c;\n        x2 = x2c;\n        y1 = y1c;\n        y2 = y2c;\n        var boxBb = math.makeBoundingBox({\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2\n        });\n\n        for (var e = 0; e < eles.length; e++) {\n          var ele = eles[e];\n\n          if (ele.isNode()) {\n            var node = ele;\n            var nodeBb = node.boundingBox({\n              includeNodes: true,\n              includeEdges: false,\n              includeLabels: false\n            });\n\n            if (math.boundingBoxesIntersect(boxBb, nodeBb) && !math.boundingBoxInBoundingBox(nodeBb, boxBb)) {\n              box.push(node);\n            }\n          } else {\n            var edge = ele;\n            var _p = edge._private;\n            var rs = _p.rscratch;\n\n            if (rs.startX != null && rs.startY != null && !math.inBoundingBox(boxBb, rs.startX, rs.startY)) {\n              continue;\n            }\n\n            if (rs.endX != null && rs.endY != null && !math.inBoundingBox(boxBb, rs.endX, rs.endY)) {\n              continue;\n            }\n\n            if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack') {\n              var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;\n              var allInside = true;\n\n              for (var i = 0; i < pts.length; i++) {\n                if (!math.pointInBoundingBox(boxBb, pts[i])) {\n                  allInside = false;\n                  break;\n                }\n              }\n\n              if (allInside) {\n                box.push(edge);\n              }\n            } else if (rs.edgeType === 'haystack' || rs.edgeType === 'straight') {\n              box.push(edge);\n            }\n          }\n        }\n\n        return box;\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 111 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var math = __webpack_require__(2);\n\n      var BRp = {};\n\n      BRp.calculateArrowAngles = function (edge) {\n        var rs = edge._private.rscratch;\n        var isHaystack = rs.edgeType === 'haystack';\n        var isBezier = rs.edgeType === 'bezier';\n        var isMultibezier = rs.edgeType === 'multibezier';\n        var isSegments = rs.edgeType === 'segments';\n        var isCompound = rs.edgeType === 'compound';\n        var isSelf = rs.edgeType === 'self'; // Displacement gives direction for arrowhead orientation\n\n        var dispX, dispY;\n        var startX, startY, endX, endY, midX, midY;\n\n        if (isHaystack) {\n          startX = rs.haystackPts[0];\n          startY = rs.haystackPts[1];\n          endX = rs.haystackPts[2];\n          endY = rs.haystackPts[3];\n        } else {\n          startX = rs.arrowStartX;\n          startY = rs.arrowStartY;\n          endX = rs.arrowEndX;\n          endY = rs.arrowEndY;\n        }\n\n        midX = rs.midX;\n        midY = rs.midY; // source\n        //\n\n        if (isSegments) {\n          dispX = startX - rs.segpts[0];\n          dispY = startY - rs.segpts[1];\n        } else if (isMultibezier || isCompound || isSelf || isBezier) {\n          var pts = rs.allpts;\n          var bX = math.qbezierAt(pts[0], pts[2], pts[4], 0.1);\n          var bY = math.qbezierAt(pts[1], pts[3], pts[5], 0.1);\n          dispX = startX - bX;\n          dispY = startY - bY;\n        } else {\n          dispX = startX - midX;\n          dispY = startY - midY;\n        }\n\n        rs.srcArrowAngle = math.getAngleFromDisp(dispX, dispY); // mid target\n        //\n\n        var midX = rs.midX;\n        var midY = rs.midY;\n\n        if (isHaystack) {\n          midX = (startX + endX) / 2;\n          midY = (startY + endY) / 2;\n        }\n\n        dispX = endX - startX;\n        dispY = endY - startY;\n\n        if (isSegments) {\n          var pts = rs.allpts;\n\n          if (pts.length / 2 % 2 === 0) {\n            var i2 = pts.length / 2;\n            var i1 = i2 - 2;\n            dispX = pts[i2] - pts[i1];\n            dispY = pts[i2 + 1] - pts[i1 + 1];\n          } else {\n            var i2 = pts.length / 2 - 1;\n            var i1 = i2 - 2;\n            var i3 = i2 + 2;\n            dispX = pts[i2] - pts[i1];\n            dispY = pts[i2 + 1] - pts[i1 + 1];\n          }\n        } else if (isMultibezier || isCompound || isSelf) {\n          var pts = rs.allpts;\n          var cpts = rs.ctrlpts;\n          var bp0x, bp0y;\n          var bp1x, bp1y;\n\n          if (cpts.length / 2 % 2 === 0) {\n            var p0 = pts.length / 2 - 1; // startpt\n\n            var ic = p0 + 2;\n            var p1 = ic + 2;\n            bp0x = math.qbezierAt(pts[p0], pts[ic], pts[p1], 0.0);\n            bp0y = math.qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0);\n            bp1x = math.qbezierAt(pts[p0], pts[ic], pts[p1], 0.0001);\n            bp1y = math.qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0001);\n          } else {\n            var ic = pts.length / 2 - 1; // ctrpt\n\n            var p0 = ic - 2; // startpt\n\n            var p1 = ic + 2; // endpt\n\n            bp0x = math.qbezierAt(pts[p0], pts[ic], pts[p1], 0.4999);\n            bp0y = math.qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.4999);\n            bp1x = math.qbezierAt(pts[p0], pts[ic], pts[p1], 0.5);\n            bp1y = math.qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.5);\n          }\n\n          dispX = bp1x - bp0x;\n          dispY = bp1y - bp0y;\n        }\n\n        rs.midtgtArrowAngle = math.getAngleFromDisp(dispX, dispY);\n        rs.midDispX = dispX;\n        rs.midDispY = dispY; // mid source\n        //\n\n        dispX *= -1;\n        dispY *= -1;\n\n        if (isSegments) {\n          var pts = rs.allpts;\n\n          if (pts.length / 2 % 2 === 0) {// already ok\n          } else {\n            var i2 = pts.length / 2 - 1;\n            var i3 = i2 + 2;\n            dispX = -(pts[i3] - pts[i2]);\n            dispY = -(pts[i3 + 1] - pts[i2 + 1]);\n          }\n        }\n\n        rs.midsrcArrowAngle = math.getAngleFromDisp(dispX, dispY); // target\n        //\n\n        if (isSegments) {\n          dispX = endX - rs.segpts[rs.segpts.length - 2];\n          dispY = endY - rs.segpts[rs.segpts.length - 1];\n        } else if (isMultibezier || isCompound || isSelf || isBezier) {\n          var pts = rs.allpts;\n          var l = pts.length;\n          var bX = math.qbezierAt(pts[l - 6], pts[l - 4], pts[l - 2], 0.9);\n          var bY = math.qbezierAt(pts[l - 5], pts[l - 3], pts[l - 1], 0.9);\n          dispX = endX - bX;\n          dispY = endY - bY;\n        } else {\n          dispX = endX - midX;\n          dispY = endY - midY;\n        }\n\n        rs.tgtArrowAngle = math.getAngleFromDisp(dispX, dispY);\n      };\n\n      BRp.getArrowWidth = BRp.getArrowHeight = function (edgeWidth, scale) {\n        var cache = this.arrowWidthCache = this.arrowWidthCache || {};\n        var cachedVal = cache[edgeWidth + ', ' + scale];\n\n        if (cachedVal) {\n          return cachedVal;\n        }\n\n        cachedVal = Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29) * scale;\n        cache[edgeWidth + ', ' + scale] = cachedVal;\n        return cachedVal;\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 112 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var math = __webpack_require__(2);\n\n      var is = __webpack_require__(0);\n\n      var BRp = {};\n\n      BRp.findEdgeControlPoints = function (edges) {\n        if (!edges || edges.length === 0) {\n          return;\n        }\n\n        var r = this;\n        var cy = r.cy;\n        var hasCompounds = cy.hasCompoundNodes();\n        var hashTable = {};\n        var pairIds = [];\n        var haystackEdges = []; // create a table of edge (src, tgt) => list of edges between them\n\n        var pairId;\n\n        for (var i = 0; i < edges.length; i++) {\n          var edge = edges[i];\n          var _p = edge._private;\n          var data = _p.data;\n          var curveStyle = edge.pstyle('curve-style').value;\n          var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments';\n          var edgeIsBezier = curveStyle === 'unbundled-bezier' || curveStyle === 'bezier'; // ignore edges who are not to be displayed\n          // they shouldn't take up space\n\n          if (edge.pstyle('display').value === 'none') {\n            continue;\n          }\n\n          if (curveStyle === 'haystack') {\n            haystackEdges.push(edge);\n            continue;\n          }\n\n          var srcId = data.source;\n          var tgtId = data.target;\n          pairId = srcId > tgtId ? tgtId + '$-$' + srcId : srcId + '$-$' + tgtId;\n\n          if (edgeIsUnbundled) {\n            pairId = 'unbundled' + '$-$' + data.id;\n          }\n\n          var tableEntry = hashTable[pairId];\n\n          if (tableEntry == null) {\n            tableEntry = hashTable[pairId] = [];\n            pairIds.push(pairId);\n          }\n\n          tableEntry.push(edge);\n\n          if (edgeIsUnbundled) {\n            tableEntry.hasUnbundled = true;\n          }\n\n          if (edgeIsBezier) {\n            tableEntry.hasBezier = true;\n          }\n        }\n\n        var src, tgt, srcPos, tgtPos, srcW, srcH, tgtW, tgtH, srcShape, tgtShape;\n        var vectorNormInverse;\n        var badBezier; // for each pair (src, tgt), create the ctrl pts\n        // Nested for loop is OK; total number of iterations for both loops = edgeCount\n\n        for (var p = 0; p < pairIds.length; p++) {\n          pairId = pairIds[p];\n          var pairEdges = hashTable[pairId]; // for each pair id, the edges should be sorted by index\n\n          pairEdges.sort(function (edge1, edge2) {\n            return edge1.poolIndex() - edge2.poolIndex();\n          });\n          src = pairEdges[0]._private.source;\n          tgt = pairEdges[0]._private.target; // make sure src/tgt distinction is consistent for bundled edges\n\n          if (!pairEdges.hasUnbundled && src.id() > tgt.id()) {\n            var temp = src;\n            src = tgt;\n            tgt = temp;\n          }\n\n          srcPos = src.position();\n          tgtPos = tgt.position();\n          srcW = src.outerWidth();\n          srcH = src.outerHeight();\n          tgtW = tgt.outerWidth();\n          tgtH = tgt.outerHeight();\n          srcShape = r.nodeShapes[this.getNodeShape(src)];\n          tgtShape = r.nodeShapes[this.getNodeShape(tgt)];\n          badBezier = false;\n          var edge;\n          var edge_p;\n          var rs;\n          var dirCounts = {\n            'north': 0,\n            'west': 0,\n            'south': 0,\n            'east': 0,\n            'northwest': 0,\n            'southwest': 0,\n            'northeast': 0,\n            'southeast': 0\n          };\n          var srcX2 = srcPos.x;\n          var srcY2 = srcPos.y;\n          var srcW2 = srcW;\n          var srcH2 = srcH;\n          var tgtX2 = tgtPos.x;\n          var tgtY2 = tgtPos.y;\n          var tgtW2 = tgtW;\n          var tgtH2 = tgtH;\n          var numEdges2 = pairEdges.length;\n\n          for (var i = 0; i < pairEdges.length; i++) {\n            edge = pairEdges[i];\n            edge_p = edge._private;\n            rs = edge_p.rscratch;\n            var edgeIndex1 = rs.lastEdgeIndex;\n            var edgeIndex2 = i;\n            var numEdges1 = rs.lastNumEdges;\n            var curveStyle = edge.pstyle('curve-style').value;\n            var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments'; // whether the normalised pair order is the reverse of the edge's src-tgt order\n\n            var edgeIsSwapped = src.id() !== edge.source().id();\n            var ctrlptDists = edge.pstyle('control-point-distances');\n            var loopDir = edge.pstyle('loop-direction').pfValue;\n            var loopSwp = edge.pstyle('loop-sweep').pfValue;\n            var ctrlptWs = edge.pstyle('control-point-weights');\n            var bezierN = ctrlptDists && ctrlptWs ? Math.min(ctrlptDists.value.length, ctrlptWs.value.length) : 1;\n            var stepSize = edge.pstyle('control-point-step-size').pfValue;\n            var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;\n            var ctrlptWeight = ctrlptWs.value[0];\n            var edgeDistances = edge.pstyle('edge-distances').value;\n            var srcDistFNode = edge.pstyle('source-distance-from-node').pfValue;\n            var tgtDistFNode = edge.pstyle('target-distance-from-node').pfValue;\n            var segmentWs = edge.pstyle('segment-weights');\n            var segmentDs = edge.pstyle('segment-distances');\n            var segmentsN = Math.min(segmentWs.pfValue.length, segmentDs.pfValue.length);\n            var srcEndpt = edge.pstyle('source-endpoint').value;\n            var tgtEndpt = edge.pstyle('target-endpoint').value;\n            var srcArrShape = edge.pstyle('source-arrow-shape').value;\n            var tgtArrShape = edge.pstyle('target-arrow-shape').value;\n            var arrowScale = edge.pstyle('arrow-scale').value;\n            var lineWidth = edge.pstyle('width').pfValue;\n            var srcX1 = rs.lastSrcCtlPtX;\n            var srcY1 = rs.lastSrcCtlPtY;\n            var srcW1 = rs.lastSrcCtlPtW;\n            var srcH1 = rs.lastSrcCtlPtH;\n            var tgtX1 = rs.lastTgtCtlPtX;\n            var tgtY1 = rs.lastTgtCtlPtY;\n            var tgtW1 = rs.lastTgtCtlPtW;\n            var tgtH1 = rs.lastTgtCtlPtH;\n            var curveStyle1 = rs.lastCurveStyle;\n            var curveStyle2 = curveStyle;\n            var ctrlptDists1 = rs.lastCtrlptDists;\n            var ctrlptDists2 = ctrlptDists ? ctrlptDists.strValue : null;\n            var ctrlptWs1 = rs.lastCtrlptWs;\n            var ctrlptWs2 = ctrlptWs.strValue;\n            var segmentWs1 = rs.lastSegmentWs;\n            var segmentWs2 = segmentWs.strValue;\n            var segmentDs1 = rs.lastSegmentDs;\n            var segmentDs2 = segmentDs.strValue;\n            var stepSize1 = rs.lastStepSize;\n            var stepSize2 = stepSize;\n            var loopDir1 = rs.lastLoopDir;\n            var loopDir2 = loopDir;\n            var loopSwp1 = rs.lastLoopSwp;\n            var loopSwp2 = loopSwp;\n            var edgeDistances1 = rs.lastEdgeDistances;\n            var edgeDistances2 = edgeDistances;\n            var srcDistFNode1 = rs.lastSrcDistFNode;\n            var srcDistFNode2 = srcDistFNode;\n            var tgtDistFNode1 = rs.lastTgtDistFNode;\n            var tgtDistFNode2 = tgtDistFNode;\n            var srcEndpt1 = rs.lastSrcEndpt;\n            var srcEndpt2 = srcEndpt;\n            var tgtEndpt1 = rs.lastTgtEndpt;\n            var tgtEndpt2 = tgtEndpt;\n            var srcArr1 = rs.lastSrcArr;\n            var srcArr2 = srcArrShape;\n            var tgtArr1 = rs.lastTgtArr;\n            var tgtArr2 = tgtArrShape;\n            var lineW1 = rs.lastLineW;\n            var lineW2 = lineWidth;\n            var arrScl1 = rs.lastArrScl;\n            var arrScl2 = arrowScale;\n\n            if (badBezier) {\n              rs.badBezier = true;\n            } else {\n              rs.badBezier = false;\n            }\n\n            var ptCacheHit;\n\n            if (srcX1 === srcX2 && srcY1 === srcY2 && srcW1 === srcW2 && srcH1 === srcH2 && tgtX1 === tgtX2 && tgtY1 === tgtY2 && tgtW1 === tgtW2 && tgtH1 === tgtH2 && curveStyle1 === curveStyle2 && ctrlptDists1 === ctrlptDists2 && ctrlptWs1 === ctrlptWs2 && segmentWs1 === segmentWs2 && segmentDs1 === segmentDs2 && stepSize1 === stepSize2 && loopDir1 === loopDir2 && loopSwp1 === loopSwp2 && edgeDistances1 === edgeDistances2 && srcDistFNode1 === srcDistFNode2 && tgtDistFNode1 === tgtDistFNode2 && srcEndpt1 === srcEndpt2 && tgtEndpt1 === tgtEndpt2 && srcArr1 === srcArr2 && tgtArr1 === tgtArr2 && lineW1 === lineW2 && arrScl1 === arrScl2 && (edgeIndex1 === edgeIndex2 && numEdges1 === numEdges2 || edgeIsUnbundled)) {\n              ptCacheHit = true; // then the control points haven't changed and we can skip calculating them\n            } else {\n              ptCacheHit = false;\n              rs.lastSrcCtlPtX = srcX2;\n              rs.lastSrcCtlPtY = srcY2;\n              rs.lastSrcCtlPtW = srcW2;\n              rs.lastSrcCtlPtH = srcH2;\n              rs.lastTgtCtlPtX = tgtX2;\n              rs.lastTgtCtlPtY = tgtY2;\n              rs.lastTgtCtlPtW = tgtW2;\n              rs.lastTgtCtlPtH = tgtH2;\n              rs.lastEdgeIndex = edgeIndex2;\n              rs.lastNumEdges = numEdges2;\n              rs.lastCurveStyle = curveStyle2;\n              rs.lastCtrlptDists = ctrlptDists2;\n              rs.lastCtrlptWs = ctrlptWs2;\n              rs.lastSegmentDs = segmentDs2;\n              rs.lastSegmentWs = segmentWs2;\n              rs.lastStepSize = stepSize2;\n              rs.lastLoopDir = loopDir2;\n              rs.lastLoopSwp = loopSwp2;\n              rs.lastEdgeDistances = edgeDistances2;\n              rs.lastSrcDistFNode = srcDistFNode2;\n              rs.lastTgtDistFNode = tgtDistFNode2;\n              rs.lastSrcEndpt = srcEndpt2;\n              rs.lastTgtEndpt = tgtEndpt2;\n              rs.lastSrcArr = srcArr2;\n              rs.lastTgtArr = tgtArr2;\n              rs.lastLineW = lineW2;\n              rs.lastArrScl = arrScl2;\n            }\n\n            if (!ptCacheHit) {\n              if (!pairEdges.calculatedIntersection && src !== tgt && (pairEdges.hasBezier || pairEdges.hasUnbundled)) {\n                pairEdges.calculatedIntersection = true; // pt outside src shape to calc distance/displacement from src to tgt\n\n                var srcOutside = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, tgtPos.x, tgtPos.y, 0);\n                pairEdges.srcIntn = srcOutside; // pt outside tgt shape to calc distance/displacement from src to tgt\n\n                var tgtOutside = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, srcPos.x, srcPos.y, 0);\n                pairEdges.tgtIntn = tgtOutside;\n                var midptSrcPts = {\n                  x1: srcOutside[0],\n                  x2: tgtOutside[0],\n                  y1: srcOutside[1],\n                  y2: tgtOutside[1]\n                };\n                var posPts = {\n                  x1: srcPos.x,\n                  x2: tgtPos.x,\n                  y1: srcPos.y,\n                  y2: tgtPos.y\n                };\n                var dy = tgtOutside[1] - srcOutside[1];\n                var dx = tgtOutside[0] - srcOutside[0];\n                var l = Math.sqrt(dx * dx + dy * dy);\n                var vector = {\n                  x: dx,\n                  y: dy\n                };\n                var vectorNorm = {\n                  x: vector.x / l,\n                  y: vector.y / l\n                };\n                vectorNormInverse = {\n                  x: -vectorNorm.y,\n                  y: vectorNorm.x\n                }; // if node shapes overlap, then no ctrl pts to draw\n\n                if (tgtShape.checkPoint(srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y) && srcShape.checkPoint(tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y)) {\n                  vectorNormInverse = {};\n                  badBezier = true;\n                }\n              }\n\n              if (!edgeIsSwapped) {\n                rs.srcIntn = pairEdges.srcIntn;\n                rs.tgtIntn = pairEdges.tgtIntn;\n              } else {\n                // ensure that the per-edge cached value for intersections are correct for swapped bundled edges\n                rs.srcIntn = pairEdges.tgtIntn;\n                rs.tgtIntn = pairEdges.srcIntn;\n              }\n\n              if (src === tgt) {\n                // Self-edge\n                rs.edgeType = 'self';\n                var j = i;\n                var loopDist = stepSize;\n\n                if (edgeIsUnbundled) {\n                  j = 0;\n                  loopDist = ctrlptDist;\n                }\n\n                var loopAngle = loopDir - Math.PI / 2;\n                var outAngle = loopAngle - loopSwp / 2;\n                var inAngle = loopAngle + loopSwp / 2; // increase by step size for overlapping loops, keyed on direction and sweep values\n\n                var dc = String(loopDir + '_' + loopSwp);\n                j = dirCounts[dc] === undefined ? dirCounts[dc] = 0 : ++dirCounts[dc];\n                rs.ctrlpts = [srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j / 3 + 1)];\n              } else if (hasCompounds && (src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild()) && (src.parents().anySame(tgt) || tgt.parents().anySame(src))) {\n                // Compound edge\n                rs.edgeType = 'compound'; // because the line approximation doesn't apply for compound beziers\n                // (loop/self edges are already elided b/c of cheap src==tgt check)\n\n                rs.badBezier = false;\n                var j = i;\n                var loopDist = stepSize;\n\n                if (edgeIsUnbundled) {\n                  j = 0;\n                  loopDist = ctrlptDist;\n                }\n\n                var loopW = 50;\n                var loopaPos = {\n                  x: srcPos.x - srcW / 2,\n                  y: srcPos.y - srcH / 2\n                };\n                var loopbPos = {\n                  x: tgtPos.x - tgtW / 2,\n                  y: tgtPos.y - tgtH / 2\n                };\n                var loopPos = {\n                  x: Math.min(loopaPos.x, loopbPos.x),\n                  y: Math.min(loopaPos.y, loopbPos.y)\n                }; // avoids cases with impossible beziers\n\n                var minCompoundStretch = 0.5;\n                var compoundStretchA = Math.max(minCompoundStretch, Math.log(srcW * 0.01));\n                var compoundStretchB = Math.max(minCompoundStretch, Math.log(tgtW * 0.01));\n                rs.ctrlpts = [loopPos.x, loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchA, loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchB, loopPos.y];\n              } else if (curveStyle === 'segments') {\n                // Segments (multiple straight lines)\n                rs.edgeType = 'segments';\n                rs.segpts = [];\n\n                for (var s = 0; s < segmentsN; s++) {\n                  var w = segmentWs.pfValue[s];\n                  var d = segmentDs.pfValue[s];\n                  var w1 = 1 - w;\n                  var w2 = w;\n                  var midptPts = edgeDistances === 'node-position' ? posPts : midptSrcPts;\n                  var adjustedMidpt = {\n                    x: midptPts.x1 * w1 + midptPts.x2 * w2,\n                    y: midptPts.y1 * w1 + midptPts.y2 * w2\n                  };\n                  rs.segpts.push(adjustedMidpt.x + vectorNormInverse.x * d, adjustedMidpt.y + vectorNormInverse.y * d);\n                } // Straight edge\n\n              } else if (pairEdges.length % 2 === 1 && i === Math.floor(pairEdges.length / 2) && !edgeIsUnbundled) {\n                rs.edgeType = 'straight';\n              } else {\n                // (Multi)bezier\n                var multi = edgeIsUnbundled;\n                rs.edgeType = multi ? 'multibezier' : 'bezier';\n                rs.ctrlpts = [];\n\n                for (var b = 0; b < bezierN; b++) {\n                  var normctrlptDist = (0.5 - pairEdges.length / 2 + i) * stepSize;\n                  var manctrlptDist;\n                  var sign = math.signum(normctrlptDist);\n\n                  if (multi) {\n                    ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b] : stepSize; // fall back on step size\n\n                    ctrlptWeight = ctrlptWs.value[b];\n                  }\n\n                  if (edgeIsUnbundled) {\n                    // multi or single unbundled\n                    manctrlptDist = ctrlptDist;\n                  } else {\n                    manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;\n                  }\n\n                  var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;\n                  var w1 = 1 - ctrlptWeight;\n                  var w2 = ctrlptWeight;\n\n                  if (edgeIsSwapped) {\n                    var temp = w1;\n                    w1 = w2;\n                    w2 = temp;\n                  }\n\n                  var midptPts = edgeDistances === 'node-position' ? posPts : midptSrcPts;\n                  var adjustedMidpt = {\n                    x: midptPts.x1 * w1 + midptPts.x2 * w2,\n                    y: midptPts.y1 * w1 + midptPts.y2 * w2\n                  };\n                  rs.ctrlpts.push(adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint, adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint);\n                }\n              } // find endpts for edge\n\n\n              this.findEndpoints(edge);\n              var badStart = !is.number(rs.startX) || !is.number(rs.startY);\n              var badAStart = !is.number(rs.arrowStartX) || !is.number(rs.arrowStartY);\n              var badEnd = !is.number(rs.endX) || !is.number(rs.endY);\n              var badAEnd = !is.number(rs.arrowEndX) || !is.number(rs.arrowEndY);\n              var minCpADistFactor = 3;\n              var arrowW = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;\n              var minCpADist = minCpADistFactor * arrowW;\n\n              if (rs.edgeType === 'bezier') {\n                var startACpDist = math.dist({\n                  x: rs.ctrlpts[0],\n                  y: rs.ctrlpts[1]\n                }, {\n                  x: rs.startX,\n                  y: rs.startY\n                });\n                var closeStartACp = startACpDist < minCpADist;\n                var endACpDist = math.dist({\n                  x: rs.ctrlpts[0],\n                  y: rs.ctrlpts[1]\n                }, {\n                  x: rs.endX,\n                  y: rs.endY\n                });\n                var closeEndACp = endACpDist < minCpADist;\n                var overlapping = false;\n\n                if (badStart || badAStart || closeStartACp) {\n                  overlapping = true; // project control point along line from src centre to outside the src shape\n                  // (otherwise intersection will yield nothing)\n\n                  var cpD = {\n                    // delta\n                    x: rs.ctrlpts[0] - srcPos.x,\n                    y: rs.ctrlpts[1] - srcPos.y\n                  };\n                  var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line\n\n                  var cpM = {\n                    // normalised delta\n                    x: cpD.x / cpL,\n                    y: cpD.y / cpL\n                  };\n                  var radius = Math.max(srcW, srcH);\n                  var cpProj = {\n                    // *2 radius guarantees outside shape\n                    x: rs.ctrlpts[0] + cpM.x * 2 * radius,\n                    y: rs.ctrlpts[1] + cpM.y * 2 * radius\n                  };\n                  var srcCtrlPtIntn = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, cpProj.x, cpProj.y, 0);\n\n                  if (closeStartACp) {\n                    rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);\n                    rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);\n                  } else {\n                    rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;\n                    rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;\n                  }\n                }\n\n                if (badEnd || badAEnd || closeEndACp) {\n                  overlapping = true; // project control point along line from tgt centre to outside the tgt shape\n                  // (otherwise intersection will yield nothing)\n\n                  var cpD = {\n                    // delta\n                    x: rs.ctrlpts[0] - tgtPos.x,\n                    y: rs.ctrlpts[1] - tgtPos.y\n                  };\n                  var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line\n\n                  var cpM = {\n                    // normalised delta\n                    x: cpD.x / cpL,\n                    y: cpD.y / cpL\n                  };\n                  var radius = Math.max(srcW, srcH);\n                  var cpProj = {\n                    // *2 radius guarantees outside shape\n                    x: rs.ctrlpts[0] + cpM.x * 2 * radius,\n                    y: rs.ctrlpts[1] + cpM.y * 2 * radius\n                  };\n                  var tgtCtrlPtIntn = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, cpProj.x, cpProj.y, 0);\n\n                  if (closeEndACp) {\n                    rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - endACpDist);\n                    rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - endACpDist);\n                  } else {\n                    rs.ctrlpts[0] = tgtCtrlPtIntn[0] + cpM.x * minCpADist;\n                    rs.ctrlpts[1] = tgtCtrlPtIntn[1] + cpM.y * minCpADist;\n                  }\n                }\n\n                if (overlapping) {\n                  // recalc endpts\n                  this.findEndpoints(edge);\n                }\n              }\n\n              if (rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {\n                rs.allpts = [];\n                rs.allpts.push(rs.startX, rs.startY);\n\n                for (var b = 0; b + 1 < rs.ctrlpts.length; b += 2) {\n                  // ctrl pt itself\n                  rs.allpts.push(rs.ctrlpts[b], rs.ctrlpts[b + 1]); // the midpt between ctrlpts as intermediate destination pts\n\n                  if (b + 3 < rs.ctrlpts.length) {\n                    rs.allpts.push((rs.ctrlpts[b] + rs.ctrlpts[b + 2]) / 2, (rs.ctrlpts[b + 1] + rs.ctrlpts[b + 3]) / 2);\n                  }\n                }\n\n                rs.allpts.push(rs.endX, rs.endY);\n                var m, mt;\n\n                if (rs.ctrlpts.length / 2 % 2 === 0) {\n                  m = rs.allpts.length / 2 - 1;\n                  rs.midX = rs.allpts[m];\n                  rs.midY = rs.allpts[m + 1];\n                } else {\n                  m = rs.allpts.length / 2 - 3;\n                  mt = 0.5;\n                  rs.midX = math.qbezierAt(rs.allpts[m], rs.allpts[m + 2], rs.allpts[m + 4], mt);\n                  rs.midY = math.qbezierAt(rs.allpts[m + 1], rs.allpts[m + 3], rs.allpts[m + 5], mt);\n                }\n              } else if (rs.edgeType === 'straight') {\n                // need to calc these after endpts\n                rs.allpts = [rs.startX, rs.startY, rs.endX, rs.endY]; // default midpt for labels etc\n\n                rs.midX = (rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX) / 4;\n                rs.midY = (rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY) / 4;\n              } else if (rs.edgeType === 'segments') {\n                rs.allpts = [];\n                rs.allpts.push(rs.startX, rs.startY);\n                rs.allpts.push.apply(rs.allpts, rs.segpts);\n                rs.allpts.push(rs.endX, rs.endY);\n\n                if (rs.segpts.length % 4 === 0) {\n                  var i2 = rs.segpts.length / 2;\n                  var i1 = i2 - 2;\n                  rs.midX = (rs.segpts[i1] + rs.segpts[i2]) / 2;\n                  rs.midY = (rs.segpts[i1 + 1] + rs.segpts[i2 + 1]) / 2;\n                } else {\n                  var i1 = rs.segpts.length / 2 - 1;\n                  rs.midX = rs.segpts[i1];\n                  rs.midY = rs.segpts[i1 + 1];\n                }\n              }\n\n              this.storeEdgeProjections(edge);\n              this.calculateArrowAngles(edge);\n            } // if point cache miss\n\n\n            this.recalculateEdgeLabelProjections(edge);\n            this.calculateLabelAngles(edge);\n          } // for pair edges\n\n        } // for pair ids\n\n\n        for (var i = 0; i < haystackEdges.length; i++) {\n          var edge = haystackEdges[i];\n          var _p = edge._private;\n          var rscratch = _p.rscratch;\n          var rs = rscratch;\n\n          if (!rscratch.haystack) {\n            var angle = Math.random() * 2 * Math.PI;\n            rscratch.source = {\n              x: Math.cos(angle),\n              y: Math.sin(angle)\n            };\n            var angle = Math.random() * 2 * Math.PI;\n            rscratch.target = {\n              x: Math.cos(angle),\n              y: Math.sin(angle)\n            };\n          }\n\n          var src = _p.source;\n          var tgt = _p.target;\n          var srcPos = src.position();\n          var tgtPos = tgt.position();\n          var srcW = src.width();\n          var tgtW = tgt.width();\n          var srcH = src.height();\n          var tgtH = tgt.height();\n          var radius = edge.pstyle('haystack-radius').value;\n          var halfRadius = radius / 2; // b/c have to half width/height\n\n          rs.haystackPts = rs.allpts = [rs.source.x * srcW * halfRadius + srcPos.x, rs.source.y * srcH * halfRadius + srcPos.y, rs.target.x * tgtW * halfRadius + tgtPos.x, rs.target.y * tgtH * halfRadius + tgtPos.y];\n          rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;\n          rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2; // always override as haystack in case set to different type previously\n\n          rscratch.edgeType = rscratch.lastCurveStyle = 'haystack';\n          rscratch.haystack = true;\n          this.storeEdgeProjections(edge);\n          this.calculateArrowAngles(edge);\n          this.recalculateEdgeLabelProjections(edge);\n          this.calculateLabelAngles(edge);\n        }\n      };\n\n      function getPts(pts) {\n        var retPts = [];\n\n        if (pts == null) {\n          return;\n        }\n\n        for (var i = 0; i < pts.length; i += 2) {\n          var x = pts[i];\n          var y = pts[i + 1];\n          retPts.push({\n            x: x,\n            y: y\n          });\n        }\n\n        return retPts;\n      }\n\n      BRp.getSegmentPoints = function (edge) {\n        var rs = edge[0]._private.rscratch;\n        var type = rs.edgeType;\n\n        if (type === 'segments') {\n          return getPts(rs.segpts);\n        }\n      };\n\n      BRp.getControlPoints = function (edge) {\n        var rs = edge[0]._private.rscratch;\n        var type = rs.edgeType;\n\n        if (type === 'bezier' || type === 'multibezier' || type === 'self' || type === 'compound') {\n          return getPts(rs.ctrlpts);\n        }\n      };\n\n      BRp.getEdgeMidpoint = function (edge) {\n        var rs = edge[0]._private.rscratch;\n        return {\n          x: rs.midX,\n          y: rs.midY\n        };\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 113 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var math = __webpack_require__(2);\n\n      var is = __webpack_require__(0);\n\n      var BRp = {};\n\n      BRp.manualEndptToPx = function (node, prop) {\n        var r = this;\n        var npos = node.position();\n        var w = node.outerWidth();\n        var h = node.outerHeight();\n\n        if (prop.value.length === 2) {\n          var p = [prop.pfValue[0], prop.pfValue[1]];\n\n          if (prop.units[0] === '%') {\n            p[0] = p[0] * w;\n          }\n\n          if (prop.units[1] === '%') {\n            p[1] = p[1] * h;\n          }\n\n          p[0] += npos.x;\n          p[1] += npos.y;\n          return p;\n        } else {\n          var angle = prop.pfValue[0];\n          angle = -Math.PI / 2 + angle; // start at 12 o'clock\n\n          var l = 2 * Math.max(w, h);\n          var _p = [npos.x + Math.cos(angle) * l, npos.y + Math.sin(angle) * l];\n          return r.nodeShapes[this.getNodeShape(node)].intersectLine(npos.x, npos.y, w, h, _p[0], _p[1], 0);\n        }\n      };\n\n      BRp.findEndpoints = function (edge) {\n        var r = this;\n        var intersect = void 0;\n        var source = edge.source()[0];\n        var target = edge.target()[0];\n        var srcPos = source.position();\n        var tgtPos = target.position();\n        var tgtArShape = edge.pstyle('target-arrow-shape').value;\n        var srcArShape = edge.pstyle('source-arrow-shape').value;\n        var tgtDist = edge.pstyle('target-distance-from-node').pfValue;\n        var srcDist = edge.pstyle('source-distance-from-node').pfValue;\n        var rs = edge._private.rscratch;\n        var et = rs.edgeType;\n        var self = et === 'self' || et === 'compound';\n        var bezier = et === 'bezier' || et === 'multibezier' || self;\n        var multi = et !== 'bezier';\n        var lines = et === 'straight' || et === 'segments';\n        var segments = et === 'segments';\n        var hasEndpts = bezier || multi || lines;\n        var srcManEndpt = edge.pstyle('source-endpoint');\n        var srcManEndptVal = self ? 'outside-to-node' : srcManEndpt.value;\n        var tgtManEndpt = edge.pstyle('target-endpoint');\n        var tgtManEndptVal = self ? 'outside-to-node' : tgtManEndpt.value;\n        rs.srcManEndpt = srcManEndpt;\n        rs.tgtManEndpt = tgtManEndpt;\n        var p1 = void 0; // last known point of edge on target side\n\n        var p2 = void 0; // last known point of edge on source side\n\n        var p1_i = void 0; // point to intersect with target shape\n\n        var p2_i = void 0; // point to intersect with source shape\n\n        if (bezier) {\n          var cpStart = [rs.ctrlpts[0], rs.ctrlpts[1]];\n          var cpEnd = multi ? [rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1]] : cpStart;\n          p1 = cpEnd;\n          p2 = cpStart;\n        } else if (lines) {\n          var srcArrowFromPt = !segments ? [tgtPos.x, tgtPos.y] : rs.segpts.slice(0, 2);\n          var tgtArrowFromPt = !segments ? [srcPos.x, srcPos.y] : rs.segpts.slice(rs.segpts.length - 2);\n          p1 = tgtArrowFromPt;\n          p2 = srcArrowFromPt;\n        }\n\n        if (tgtManEndptVal === 'inside-to-node') {\n          intersect = [tgtPos.x, tgtPos.y];\n        } else if (tgtManEndpt.units) {\n          intersect = this.manualEndptToPx(target, tgtManEndpt);\n        } else if (tgtManEndptVal === 'outside-to-line') {\n          intersect = rs.tgtIntn; // use cached value from ctrlpt calc\n        } else {\n          if (tgtManEndptVal === 'outside-to-node') {\n            p1_i = p1;\n          } else if (tgtManEndptVal === 'outside-to-line') {\n            p1_i = [srcPos.x, srcPos.y];\n          }\n\n          intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(tgtPos.x, tgtPos.y, target.outerWidth(), target.outerHeight(), p1_i[0], p1_i[1], 0);\n        }\n\n        var arrowEnd = math.shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].spacing(edge) + tgtDist);\n        var edgeEnd = math.shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].gap(edge) + tgtDist);\n        rs.endX = edgeEnd[0];\n        rs.endY = edgeEnd[1];\n        rs.arrowEndX = arrowEnd[0];\n        rs.arrowEndY = arrowEnd[1];\n\n        if (srcManEndptVal === 'inside-to-node') {\n          intersect = [srcPos.x, srcPos.y];\n        } else if (srcManEndpt.units) {\n          intersect = this.manualEndptToPx(source, srcManEndpt);\n        } else if (srcManEndptVal === 'outside-to-line') {\n          intersect = rs.srcIntn; // use cached value from ctrlpt calc\n        } else {\n          if (srcManEndptVal === 'outside-to-node') {\n            p2_i = p2;\n          } else if (srcManEndptVal === 'outside-to-line') {\n            p2_i = [tgtPos.x, tgtPos.y];\n          }\n\n          intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(srcPos.x, srcPos.y, source.outerWidth(), source.outerHeight(), p2_i[0], p2_i[1], 0);\n        }\n\n        var arrowStart = math.shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].spacing(edge) + srcDist);\n        var edgeStart = math.shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].gap(edge) + srcDist);\n        rs.startX = edgeStart[0];\n        rs.startY = edgeStart[1];\n        rs.arrowStartX = arrowStart[0];\n        rs.arrowStartY = arrowStart[1];\n\n        if (hasEndpts) {\n          if (!is.number(rs.startX) || !is.number(rs.startY) || !is.number(rs.endX) || !is.number(rs.endY)) {\n            rs.badLine = true;\n          } else {\n            rs.badLine = false;\n          }\n        }\n      };\n\n      BRp.getSourceEndpoint = function (edge) {\n        var rs = edge[0]._private.rscratch;\n\n        switch (rs.edgeType) {\n          case 'haystack':\n            return {\n              x: rs.haystackPts[0],\n              y: rs.haystackPts[1]\n            };\n\n          default:\n            return {\n              x: rs.arrowStartX,\n              y: rs.arrowStartY\n            };\n        }\n      };\n\n      BRp.getTargetEndpoint = function (edge) {\n        var rs = edge[0]._private.rscratch;\n\n        switch (rs.edgeType) {\n          case 'haystack':\n            return {\n              x: rs.haystackPts[2],\n              y: rs.haystackPts[3]\n            };\n\n          default:\n            return {\n              x: rs.arrowEndX,\n              y: rs.arrowEndY\n            };\n        }\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 114 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var math = __webpack_require__(2);\n\n      var BRp = {};\n\n      function pushBezierPts(r, edge, pts) {\n        var qbezierAt = function qbezierAt(p1, p2, p3, t) {\n          return math.qbezierAt(p1, p2, p3, t);\n        };\n\n        var _p = edge._private;\n        var bpts = _p.rstyle.bezierPts;\n\n        for (var i = 0; i < r.bezierProjPcts.length; i++) {\n          var p = r.bezierProjPcts[i];\n          bpts.push({\n            x: qbezierAt(pts[0], pts[2], pts[4], p),\n            y: qbezierAt(pts[1], pts[3], pts[5], p)\n          });\n        }\n      }\n\n      BRp.storeEdgeProjections = function (edge) {\n        var _p = edge._private;\n        var rs = _p.rscratch;\n        var et = rs.edgeType; // clear the cached points state\n\n        _p.rstyle.bezierPts = null;\n        _p.rstyle.linePts = null;\n        _p.rstyle.haystackPts = null;\n\n        if (et === 'multibezier' || et === 'bezier' || et === 'self' || et === 'compound') {\n          var bpts = _p.rstyle.bezierPts = []; // jshint ignore:line\n\n          for (var i = 0; i + 5 < rs.allpts.length; i += 4) {\n            pushBezierPts(this, edge, rs.allpts.slice(i, i + 6));\n          }\n        } else if (et === 'segments') {\n          var lpts = _p.rstyle.linePts = [];\n\n          for (var i = 0; i + 1 < rs.allpts.length; i += 2) {\n            lpts.push({\n              x: rs.allpts[i],\n              y: rs.allpts[i + 1]\n            });\n          }\n        } else if (et === 'haystack') {\n          var hpts = rs.haystackPts;\n          _p.rstyle.haystackPts = [{\n            x: hpts[0],\n            y: hpts[1]\n          }, {\n            x: hpts[2],\n            y: hpts[3]\n          }];\n        }\n\n        _p.rstyle.arrowWidth = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;\n      };\n\n      BRp.recalculateEdgeProjections = function (edges) {\n        this.findEdgeControlPoints(edges);\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 115 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var math = __webpack_require__(2);\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var BRp = {};\n\n      BRp.recalculateNodeLabelProjection = function (node) {\n        var content = node.pstyle('label').strValue;\n\n        if (is.emptyString(content)) {\n          return;\n        }\n\n        var textX, textY;\n        var _p = node._private;\n        var nodeWidth = node.width();\n        var nodeHeight = node.height();\n        var padding = node.padding();\n        var nodePos = node.position();\n        var textHalign = node.pstyle('text-halign').strValue;\n        var textValign = node.pstyle('text-valign').strValue;\n        var rs = _p.rscratch;\n        var rstyle = _p.rstyle;\n\n        switch (textHalign) {\n          case 'left':\n            textX = nodePos.x - nodeWidth / 2 - padding;\n            break;\n\n          case 'right':\n            textX = nodePos.x + nodeWidth / 2 + padding;\n            break;\n\n          default:\n            // e.g. center\n            textX = nodePos.x;\n        }\n\n        switch (textValign) {\n          case 'top':\n            textY = nodePos.y - nodeHeight / 2 - padding;\n            break;\n\n          case 'bottom':\n            textY = nodePos.y + nodeHeight / 2 + padding;\n            break;\n\n          default:\n            // e.g. middle\n            textY = nodePos.y;\n        }\n\n        rs.labelX = textX;\n        rs.labelY = textY;\n        rstyle.labelX = textX;\n        rstyle.labelY = textY;\n        this.applyLabelDimensions(node);\n      };\n\n      var lineAngleFromDelta = function lineAngleFromDelta(dx, dy) {\n        var angle = Math.atan(dy / dx);\n\n        if (dx === 0 && angle < 0) {\n          angle = angle * -1;\n        }\n\n        return angle;\n      };\n\n      var lineAngle = function lineAngle(p0, p1) {\n        var dx = p1.x - p0.x;\n        var dy = p1.y - p0.y;\n        return lineAngleFromDelta(dx, dy);\n      };\n\n      var bezierAngle = function bezierAngle(p0, p1, p2, t) {\n        var t0 = math.bound(0, t - 0.001, 1);\n        var t1 = math.bound(0, t + 0.001, 1);\n        var lp0 = math.qbezierPtAt(p0, p1, p2, t0);\n        var lp1 = math.qbezierPtAt(p0, p1, p2, t1);\n        return lineAngle(lp0, lp1);\n      };\n\n      BRp.recalculateEdgeLabelProjections = function (edge) {\n        var p;\n        var _p = edge._private;\n        var rs = _p.rscratch;\n        var r = this;\n        var content = {\n          mid: edge.pstyle('label').strValue,\n          source: edge.pstyle('source-label').strValue,\n          target: edge.pstyle('target-label').strValue\n        };\n\n        if (content.mid || content.source || content.target) {// then we have to calculate...\n        } else {\n            return; // no labels => no calcs\n          } // add center point to style so bounding box calculations can use it\n        //\n\n\n        p = {\n          x: rs.midX,\n          y: rs.midY\n        };\n\n        var setRs = function setRs(propName, prefix, value) {\n          util.setPrefixedProperty(_p.rscratch, propName, prefix, value);\n          util.setPrefixedProperty(_p.rstyle, propName, prefix, value);\n        };\n\n        setRs('labelX', null, p.x);\n        setRs('labelY', null, p.y);\n        var midAngle = lineAngleFromDelta(rs.midDispX, rs.midDispY);\n        setRs('labelAutoAngle', null, midAngle);\n\n        var createControlPointInfo = function createControlPointInfo() {\n          if (createControlPointInfo.cache) {\n            return createControlPointInfo.cache;\n          } // use cache so only 1x per edge\n\n\n          var ctrlpts = []; // store each ctrlpt info init\n\n          for (var i = 0; i + 5 < rs.allpts.length; i += 4) {\n            var p0 = {\n              x: rs.allpts[i],\n              y: rs.allpts[i + 1]\n            };\n            var p1 = {\n              x: rs.allpts[i + 2],\n              y: rs.allpts[i + 3]\n            }; // ctrlpt\n\n            var p2 = {\n              x: rs.allpts[i + 4],\n              y: rs.allpts[i + 5]\n            };\n            ctrlpts.push({\n              p0: p0,\n              p1: p1,\n              p2: p2,\n              startDist: 0,\n              length: 0,\n              segments: []\n            });\n          }\n\n          var bpts = _p.rstyle.bezierPts;\n          var nProjs = r.bezierProjPcts.length;\n\n          function addSegment(cp, p0, p1, t0, t1) {\n            var length = math.dist(p0, p1);\n            var prevSegment = cp.segments[cp.segments.length - 1];\n            var segment = {\n              p0: p0,\n              p1: p1,\n              t0: t0,\n              t1: t1,\n              startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,\n              length: length\n            };\n            cp.segments.push(segment);\n            cp.length += length;\n          } // update each ctrlpt with segment info\n\n\n          for (var i = 0; i < ctrlpts.length; i++) {\n            var cp = ctrlpts[i];\n            var prevCp = ctrlpts[i - 1];\n\n            if (prevCp) {\n              cp.startDist = prevCp.startDist + prevCp.length;\n            }\n\n            addSegment(cp, cp.p0, bpts[i * nProjs], 0, r.bezierProjPcts[0]); // first\n\n            for (var j = 0; j < nProjs - 1; j++) {\n              addSegment(cp, bpts[i * nProjs + j], bpts[i * nProjs + j + 1], r.bezierProjPcts[j], r.bezierProjPcts[j + 1]);\n            }\n\n            addSegment(cp, bpts[i * nProjs + nProjs - 1], cp.p2, r.bezierProjPcts[nProjs - 1], 1); // last\n          }\n\n          return createControlPointInfo.cache = ctrlpts;\n        };\n\n        var calculateEndProjection = function calculateEndProjection(prefix) {\n          var angle;\n          var isSrc = prefix === 'source';\n\n          if (!content[prefix]) {\n            return;\n          }\n\n          var offset = edge.pstyle(prefix + '-text-offset').pfValue;\n\n          switch (rs.edgeType) {\n            case 'self':\n            case 'compound':\n            case 'bezier':\n            case 'multibezier':\n              var cps = createControlPointInfo();\n              var selected;\n              var startDist = 0;\n              var totalDist = 0; // find the segment we're on\n\n              for (var i = 0; i < cps.length; i++) {\n                var cp = cps[isSrc ? i : cps.length - 1 - i];\n\n                for (var j = 0; j < cp.segments.length; j++) {\n                  var seg = cp.segments[isSrc ? j : cp.segments.length - 1 - j];\n                  var lastSeg = i === cps.length - 1 && j === cp.segments.length - 1;\n                  startDist = totalDist;\n                  totalDist += seg.length;\n\n                  if (totalDist >= offset || lastSeg) {\n                    selected = {\n                      cp: cp,\n                      segment: seg\n                    };\n                    break;\n                  }\n                }\n\n                if (selected) {\n                  break;\n                }\n              }\n\n              var cp = selected.cp;\n              var seg = selected.segment;\n              var tSegment = (offset - startDist) / seg.length;\n              var segDt = seg.t1 - seg.t0;\n              var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;\n              t = math.bound(0, t, 1);\n              p = math.qbezierPtAt(cp.p0, cp.p1, cp.p2, t);\n              angle = bezierAngle(cp.p0, cp.p1, cp.p2, t, p);\n              break;\n\n            case 'straight':\n            case 'segments':\n            case 'haystack':\n              var d = 0,\n                  di,\n                  d0;\n              var p0, p1;\n              var l = rs.allpts.length;\n\n              for (var i = 0; i + 3 < l; i += 2) {\n                if (isSrc) {\n                  p0 = {\n                    x: rs.allpts[i],\n                    y: rs.allpts[i + 1]\n                  };\n                  p1 = {\n                    x: rs.allpts[i + 2],\n                    y: rs.allpts[i + 3]\n                  };\n                } else {\n                  p0 = {\n                    x: rs.allpts[l - 2 - i],\n                    y: rs.allpts[l - 1 - i]\n                  };\n                  p1 = {\n                    x: rs.allpts[l - 4 - i],\n                    y: rs.allpts[l - 3 - i]\n                  };\n                }\n\n                di = math.dist(p0, p1);\n                d0 = d;\n                d += di;\n\n                if (d >= offset) {\n                  break;\n                }\n              }\n\n              var pD = offset - d0;\n              var t = pD / di;\n              t = math.bound(0, t, 1);\n              p = math.lineAt(p0, p1, t);\n              angle = lineAngle(p0, p1);\n              break;\n          }\n\n          setRs('labelX', prefix, p.x);\n          setRs('labelY', prefix, p.y);\n          setRs('labelAutoAngle', prefix, angle);\n        };\n\n        calculateEndProjection('source');\n        calculateEndProjection('target');\n        this.applyLabelDimensions(edge);\n      };\n\n      BRp.applyLabelDimensions = function (ele) {\n        this.applyPrefixedLabelDimensions(ele);\n\n        if (ele.isEdge()) {\n          this.applyPrefixedLabelDimensions(ele, 'source');\n          this.applyPrefixedLabelDimensions(ele, 'target');\n        }\n      };\n\n      BRp.applyPrefixedLabelDimensions = function (ele, prefix) {\n        var _p = ele._private;\n        var text = this.getLabelText(ele, prefix);\n        var labelDims = this.calculateLabelDimensions(ele, text);\n        util.setPrefixedProperty(_p.rstyle, 'labelWidth', prefix, labelDims.width);\n        util.setPrefixedProperty(_p.rscratch, 'labelWidth', prefix, labelDims.width);\n        util.setPrefixedProperty(_p.rstyle, 'labelHeight', prefix, labelDims.height);\n        util.setPrefixedProperty(_p.rscratch, 'labelHeight', prefix, labelDims.height);\n      };\n\n      BRp.getLabelText = function (ele, prefix) {\n        var _p = ele._private;\n        var pfd = prefix ? prefix + '-' : '';\n        var text = ele.pstyle(pfd + 'label').strValue;\n        var textTransform = ele.pstyle('text-transform').value;\n\n        var rscratch = function rscratch(propName, value) {\n          if (value) {\n            util.setPrefixedProperty(_p.rscratch, propName, prefix, value);\n            return value;\n          } else {\n            return util.getPrefixedProperty(_p.rscratch, propName, prefix);\n          }\n        }; // for empty text, skip all processing\n\n\n        if (!text) {\n          return '';\n        }\n\n        if (textTransform == 'none') {// passthrough\n        } else if (textTransform == 'uppercase') {\n          text = text.toUpperCase();\n        } else if (textTransform == 'lowercase') {\n          text = text.toLowerCase();\n        }\n\n        var wrapStyle = ele.pstyle('text-wrap').value;\n\n        if (wrapStyle === 'wrap') {\n          //console.log('wrap');\n          var labelKey = rscratch('labelKey'); // save recalc if the label is the same as before\n\n          if (labelKey && rscratch('labelWrapKey') === labelKey) {\n            // console.log('wrap cache hit');\n            return rscratch('labelWrapCachedText');\n          } // console.log('wrap cache miss');\n\n\n          var lines = text.split('\\n');\n          var maxW = ele.pstyle('text-max-width').pfValue;\n          var wrappedLines = [];\n\n          for (var l = 0; l < lines.length; l++) {\n            var line = lines[l];\n            var lineDims = this.calculateLabelDimensions(ele, line, 'line=' + line);\n            var lineW = lineDims.width;\n\n            if (lineW > maxW) {\n              // line is too long\n              var words = line.split(/\\s+/); // NB: assume collapsed whitespace into single space\n\n              var subline = '';\n\n              for (var w = 0; w < words.length; w++) {\n                var word = words[w];\n                var testLine = subline.length === 0 ? word : subline + ' ' + word;\n                var testDims = this.calculateLabelDimensions(ele, testLine, 'testLine=' + testLine);\n                var testW = testDims.width;\n\n                if (testW <= maxW) {\n                  // word fits on current line\n                  subline += word + ' ';\n                } else {\n                  // word starts new line\n                  wrappedLines.push(subline);\n                  subline = word + ' ';\n                }\n              } // if there's remaining text, put it in a wrapped line\n\n\n              if (!subline.match(/^\\s+$/)) {\n                wrappedLines.push(subline);\n              }\n            } else {\n              // line is already short enough\n              wrappedLines.push(line);\n            }\n          } // for\n\n\n          rscratch('labelWrapCachedLines', wrappedLines);\n          text = rscratch('labelWrapCachedText', wrappedLines.join('\\n'));\n          rscratch('labelWrapKey', labelKey); // console.log(text)\n        } else if (wrapStyle === 'ellipsis') {\n          var maxW = ele.pstyle('text-max-width').pfValue;\n          var ellipsized = '';\n          var ellipsis = '\\u2026';\n          var incLastCh = false;\n\n          for (var i = 0; i < text.length; i++) {\n            var widthWithNextCh = this.calculateLabelDimensions(ele, ellipsized + text[i] + ellipsis).width;\n\n            if (widthWithNextCh > maxW) {\n              break;\n            }\n\n            ellipsized += text[i];\n\n            if (i === text.length - 1) {\n              incLastCh = true;\n            }\n          }\n\n          if (!incLastCh) {\n            ellipsized += ellipsis;\n          }\n\n          return ellipsized;\n        } // if ellipsize\n\n\n        return text;\n      };\n\n      BRp.calculateLabelDimensions = function (ele, text, extraKey) {\n        var r = this;\n        var cacheKey = ele._private.labelStyleKey + '$@$' + text;\n\n        if (extraKey) {\n          cacheKey += '$@$' + extraKey;\n        }\n\n        var cache = r.labelDimCache || (r.labelDimCache = {});\n\n        if (cache[cacheKey]) {\n          return cache[cacheKey];\n        }\n\n        var sizeMult = 1; // increase the scale to increase accuracy w.r.t. zoomed text\n\n        var fStyle = ele.pstyle('font-style').strValue;\n        var size = sizeMult * ele.pstyle('font-size').pfValue + 'px';\n        var family = ele.pstyle('font-family').strValue;\n        var weight = ele.pstyle('font-weight').strValue;\n        var div = this.labelCalcDiv;\n\n        if (!div) {\n          div = this.labelCalcDiv = document.createElement('div'); // eslint-disable-line no-undef\n\n          document.body.appendChild(div); // eslint-disable-line no-undef\n        }\n\n        var ds = div.style; // from ele style\n\n        ds.fontFamily = family;\n        ds.fontStyle = fStyle;\n        ds.fontSize = size;\n        ds.fontWeight = weight; // forced style\n\n        ds.position = 'absolute';\n        ds.left = '-9999px';\n        ds.top = '-9999px';\n        ds.zIndex = '-1';\n        ds.visibility = 'hidden';\n        ds.pointerEvents = 'none';\n        ds.padding = '0';\n        ds.lineHeight = '1';\n\n        if (ele.pstyle('text-wrap').value === 'wrap') {\n          ds.whiteSpace = 'pre'; // so newlines are taken into account\n        } else {\n          ds.whiteSpace = 'normal';\n        } // put label content in div\n\n\n        div.textContent = text;\n        cache[cacheKey] = {\n          width: Math.ceil(div.clientWidth / sizeMult),\n          height: Math.ceil(div.clientHeight / sizeMult)\n        };\n        return cache[cacheKey];\n      };\n\n      BRp.calculateLabelAngles = function (ele) {\n        var _p = ele._private;\n        var rs = _p.rscratch;\n        var isEdge = ele.isEdge();\n        var rot = ele.pstyle('text-rotation');\n        var rotStr = rot.strValue;\n\n        if (rotStr === 'none') {\n          rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = 0;\n        } else if (isEdge && rotStr === 'autorotate') {\n          rs.labelAngle = rs.labelAutoAngle;\n          rs.sourceLabelAngle = rs.sourceLabelAutoAngle;\n          rs.targetLabelAngle = rs.targetLabelAutoAngle;\n        } else if (rotStr === 'autorotate') {\n          rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = 0;\n        } else {\n          rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = rot.pfValue;\n        }\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 116 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var BRp = {};\n\n      BRp.getNodeShape = function (node) {\n        var r = this;\n        var shape = node.pstyle('shape').value;\n\n        if (node.isParent()) {\n          if (shape === 'rectangle' || shape === 'roundrectangle' || shape === 'cutrectangle' || shape === 'barrel') {\n            return shape;\n          } else {\n            return 'rectangle';\n          }\n        }\n\n        if (shape === 'polygon') {\n          var points = node.pstyle('shape-polygon-points').value;\n          return r.nodeShapes.makePolygon(points).name;\n        }\n\n        return shape;\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 117 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var BRp = {};\n\n      BRp.registerCalculationListeners = function () {\n        var cy = this.cy;\n        var elesToUpdate = cy.collection();\n        var r = this;\n\n        var enqueue = function enqueue(eles, e) {\n          var dirtyStyleCaches = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n          elesToUpdate.merge(eles);\n\n          for (var i = 0; i < eles.length; i++) {\n            var ele = eles[i];\n            var _p = ele._private;\n            var rstyle = _p.rstyle;\n\n            if (dirtyStyleCaches) {\n              rstyle.clean = false;\n              _p.bbCache = null;\n            }\n\n            var evts = rstyle.dirtyEvents = rstyle.dirtyEvents || {\n              length: 0\n            };\n\n            if (!evts[e.type]) {\n              evts[e.type] = true;\n              evts.length++;\n            }\n          }\n        };\n\n        r.binder(cy) // nodes\n        .on('position.* style.* free.* bounds.*', 'node', function onDirtyModNode(e) {\n          var node = e.target;\n          enqueue(node, e);\n          enqueue(node.connectedEdges(), e);\n        }).on('add.*', 'node', function onDirtyAddNode(e) {\n          var ele = e.target;\n          enqueue(ele, e);\n        }).on('background.*', 'node', function onDirtyBgNode(e) {\n          var ele = e.target;\n          enqueue(ele, e, false);\n        }) // edges\n        .on('add.* style.*', 'edge', function onDirtyEdge(e) {\n          var edge = e.target;\n          enqueue(edge, e);\n          enqueue(edge.parallelEdges(), e);\n        }).on('remove.*', 'edge', function onDirtyRemoveEdge(e) {\n          var edge = e.target;\n          var pEdges = edge.parallelEdges();\n\n          for (var i = 0; i < pEdges.length; i++) {\n            var pEdge = pEdges[i];\n\n            if (!pEdge.removed()) {\n              enqueue(pEdge, e);\n            }\n          }\n        }) // manual dirtying\n        .on('dirty.*', 'node', function onDirtyEle(e) {\n          var ele = e.target;\n          enqueue(ele, e);\n        });\n\n        var updateEleCalcs = function updateEleCalcs(willDraw) {\n          if (willDraw) {\n            var fns = r.onUpdateEleCalcsFns;\n\n            if (fns) {\n              for (var i = 0; i < fns.length; i++) {\n                var fn = fns[i];\n                fn(willDraw, elesToUpdate);\n              }\n            }\n\n            r.recalculateRenderedStyle(elesToUpdate, false);\n\n            for (var i = 0; i < elesToUpdate.length; i++) {\n              elesToUpdate[i]._private.rstyle.dirtyEvents = null;\n            }\n\n            elesToUpdate = cy.collection();\n          }\n        };\n\n        r.beforeRender(updateEleCalcs, r.beforeRenderPriorities.eleCalcs);\n      };\n\n      BRp.onUpdateEleCalcs = function (fn) {\n        var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];\n        fns.push(fn);\n      };\n\n      BRp.recalculateRenderedStyle = function (eles, useCache) {\n        var edges = [];\n        var nodes = []; // the renderer can't be used for calcs when destroyed, e.g. ele.boundingBox()\n\n        if (this.destroyed) {\n          return;\n        } // use cache by default for perf\n\n\n        if (useCache === undefined) {\n          useCache = true;\n        }\n\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n          var _p = ele._private;\n          var rstyle = _p.rstyle; // only update if dirty and in graph\n\n          if (useCache && rstyle.clean || ele.removed()) {\n            continue;\n          } // only update if not display: none\n\n\n          if (ele.pstyle('display').value === 'none') {\n            continue;\n          }\n\n          if (_p.group === 'nodes') {\n            nodes.push(ele);\n          } else {\n            // edges\n            edges.push(ele);\n          }\n\n          rstyle.clean = true; // rstyle.dirtyEvents = null;\n        } // update node data from projections\n\n\n        for (var i = 0; i < nodes.length; i++) {\n          var ele = nodes[i];\n          var _p = ele._private;\n          var rstyle = _p.rstyle;\n          var pos = ele.position();\n          this.recalculateNodeLabelProjection(ele);\n          rstyle.nodeX = pos.x;\n          rstyle.nodeY = pos.y;\n          rstyle.nodeW = ele.pstyle('width').pfValue;\n          rstyle.nodeH = ele.pstyle('height').pfValue;\n        }\n\n        this.recalculateEdgeProjections(edges); // update edge data from projections\n\n        for (var i = 0; i < edges.length; i++) {\n          var ele = edges[i];\n          var _p = ele._private;\n          var rstyle = _p.rstyle;\n          var rs = _p.rscratch;\n          this.recalculateEdgeLabelProjections(ele); // update rstyle positions\n\n          rstyle.srcX = rs.arrowStartX;\n          rstyle.srcY = rs.arrowStartY;\n          rstyle.tgtX = rs.arrowEndX;\n          rstyle.tgtY = rs.arrowEndY;\n          rstyle.midX = rs.midX;\n          rstyle.midY = rs.midY;\n          rstyle.labelAngle = rs.labelAngle;\n          rstyle.sourceLabelAngle = rs.sourceLabelAngle;\n          rstyle.targetLabelAngle = rs.targetLabelAngle;\n        }\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 118 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var zIndexSort = __webpack_require__(17);\n\n      var BRp = {};\n\n      BRp.updateCachedGrabbedEles = function () {\n        var eles = this.cachedZSortedEles;\n\n        if (!eles) {\n          // just let this be recalculated on the next z sort tick\n          return;\n        }\n\n        eles.drag = [];\n        eles.nondrag = [];\n        var grabTargets = [];\n\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n          var rs = ele._private.rscratch;\n\n          if (ele.grabbed() && !ele.isParent()) {\n            grabTargets.push(ele);\n          } else if (rs.inDragLayer) {\n            eles.drag.push(ele);\n          } else {\n            eles.nondrag.push(ele);\n          }\n        } // put the grab target nodes last so it's on top of its neighbourhood\n\n\n        for (var i = 0; i < grabTargets.length; i++) {\n          var ele = grabTargets[i];\n          eles.drag.push(ele);\n        }\n      };\n\n      BRp.invalidateCachedZSortedEles = function () {\n        this.cachedZSortedEles = null;\n      };\n\n      BRp.getCachedZSortedEles = function (forceRecalc) {\n        if (forceRecalc || !this.cachedZSortedEles) {\n          //console.time('cachezorder')\n          var eles = this.cy.mutableElements().toArray();\n          eles.sort(zIndexSort);\n          eles.interactive = eles.filter(function (ele) {\n            return ele.interactive();\n          });\n          this.cachedZSortedEles = eles;\n          this.updateCachedGrabbedEles();\n        } else {\n          eles = this.cachedZSortedEles;\n        }\n\n        return eles;\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 119 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var BRp = {};\n\n      BRp.getCachedImage = function (url, crossOrigin, onLoad) {\n        var r = this;\n        var imageCache = r.imageCache = r.imageCache || {};\n        var cache = imageCache[url];\n\n        if (cache) {\n          if (!cache.image.complete) {\n            cache.image.addEventListener('load', onLoad);\n          }\n\n          return cache.image;\n        } else {\n          cache = imageCache[url] = imageCache[url] || {};\n          var image = cache.image = new Image(); // eslint-disable-line no-undef\n\n          image.addEventListener('load', onLoad);\n          image.addEventListener('error', function () {\n            image.error = true;\n          }); // #1582 safari doesn't load data uris with crossOrigin properly\n          // https://bugs.webkit.org/show_bug.cgi?id=123978\n\n          var dataUriPrefix = 'data:';\n          var isDataUri = url.substring(0, dataUriPrefix.length).toLowerCase() === dataUriPrefix;\n\n          if (!isDataUri) {\n            image.crossOrigin = crossOrigin; // prevent tainted canvas\n          }\n\n          image.src = url;\n          return image;\n        }\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 120 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var math = __webpack_require__(2);\n\n      var Event = __webpack_require__(16);\n\n      var BRp = {};\n\n      BRp.registerBinding = function (target, event, handler, useCapture) {\n        var args = Array.prototype.slice.apply(arguments, [1]); // copy\n\n        var b = this.binder(target);\n        return b.on.apply(b, args);\n      };\n\n      BRp.binder = function (tgt) {\n        var r = this;\n        var tgtIsDom = tgt === window || tgt === document || tgt === document.body || is.domElement(tgt);\n\n        if (r.supportsPassiveEvents == null) {\n          // from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\n          var supportsPassive = false;\n\n          try {\n            var opts = Object.defineProperty({}, 'passive', {\n              get: function get() {\n                supportsPassive = true;\n              }\n            });\n            window.addEventListener('test', null, opts);\n          } catch (err) {}\n\n          r.supportsPassiveEvents = supportsPassive;\n        }\n\n        var on = function on(event, handler, useCapture) {\n          var args = Array.prototype.slice.call(arguments);\n\n          if (tgtIsDom && r.supportsPassiveEvents) {\n            // replace useCapture w/ opts obj\n            args[2] = {\n              capture: useCapture != null ? useCapture : false,\n              passive: false,\n              once: false\n            };\n          }\n\n          r.bindings.push({\n            target: tgt,\n            args: args\n          });\n          (tgt.addEventListener || tgt.on).apply(tgt, args);\n          return this;\n        };\n\n        return {\n          on: on,\n          addEventListener: on,\n          addListener: on,\n          bind: on\n        };\n      };\n\n      BRp.nodeIsDraggable = function (node) {\n        return node && node.isNode() && !node.locked() && node.grabbable();\n      };\n\n      BRp.nodeIsGrabbable = function (node) {\n        return this.nodeIsDraggable(node) && node.interactive();\n      };\n\n      BRp.load = function () {\n        var r = this;\n\n        var triggerEvents = function triggerEvents(target, names, e, props) {\n          if (target == null) {\n            target = r.cy;\n          }\n\n          for (var i = 0; i < names.length; i++) {\n            var name = names[i];\n            target.emit(util.extend({\n              originalEvent: e,\n              type: name\n            }, props));\n          }\n        };\n\n        var isMultSelKeyDown = function isMultSelKeyDown(e) {\n          return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey\n        };\n\n        var allowPanningPassthrough = function allowPanningPassthrough(down, downs) {\n          var allowPassthrough = true;\n\n          if (r.cy.hasCompoundNodes() && down && down.isEdge()) {\n            // a compound node below the edge => no passthrough panning\n            for (var i = 0; downs && i < downs.length; i++) {\n              var down = downs[i];\n\n              if (down.isNode() && down.isParent()) {\n                allowPassthrough = false;\n                break;\n              }\n            }\n          } else {\n            allowPassthrough = true;\n          }\n\n          return allowPassthrough;\n        };\n\n        var getDragListIds = function getDragListIds(opts) {\n          var listHasId;\n\n          if (opts.addToList && r.cy.hasCompoundNodes()) {\n            // only needed for compound graphs\n            if (!opts.addToList.hasId) {\n              // build ids lookup if doesn't already exist\n              opts.addToList.hasId = {};\n\n              for (var i = 0; i < opts.addToList.length; i++) {\n                var ele = opts.addToList[i];\n                opts.addToList.hasId[ele.id()] = true;\n              }\n            }\n\n            listHasId = opts.addToList.hasId;\n          }\n\n          return listHasId || {};\n        };\n\n        var setGrabbed = function setGrabbed(ele) {\n          ele[0]._private.grabbed = true;\n        };\n\n        var setFreed = function setFreed(ele) {\n          ele[0]._private.grabbed = false;\n        };\n\n        var setInDragLayer = function setInDragLayer(ele) {\n          ele[0]._private.rscratch.inDragLayer = true;\n        };\n\n        var setOutDragLayer = function setOutDragLayer(ele) {\n          ele[0]._private.rscratch.inDragLayer = false;\n        };\n\n        var setGrabTarget = function setGrabTarget(ele) {\n          ele[0]._private.rscratch.isGrabTarget = true;\n        };\n\n        var removeGrabTarget = function removeGrabTarget(ele) {\n          ele[0]._private.rscratch.isGrabTarget = false;\n        };\n\n        var addToDragList = function addToDragList(ele, opts) {\n          var listHasId = getDragListIds(opts);\n\n          if (!listHasId[ele.id()]) {\n            opts.addToList.push(ele);\n            listHasId[ele.id()] = true;\n            setGrabbed(ele);\n          }\n        }; // helper function to determine which child nodes and inner edges\n        // of a compound node to be dragged as well as the grabbed and selected nodes\n\n\n        var addDescendantsToDrag = function addDescendantsToDrag(node, opts) {\n          if (!node.cy().hasCompoundNodes()) {\n            return;\n          }\n\n          if (opts.inDragLayer == null && opts.addToList == null) {\n            return;\n          } // nothing to do\n\n\n          var innerNodes = node.descendants();\n\n          if (opts.inDragLayer) {\n            innerNodes.forEach(setInDragLayer);\n            innerNodes.connectedEdges().forEach(setInDragLayer);\n          }\n\n          if (opts.addToList) {\n            innerNodes.forEach(function (ele) {\n              addToDragList(ele, opts);\n            });\n          }\n        }; // adds the given nodes and its neighbourhood to the drag layer\n\n\n        var addNodesToDrag = function addNodesToDrag(nodes, opts) {\n          opts = opts || {};\n          var hasCompoundNodes = nodes.cy().hasCompoundNodes();\n\n          if (opts.inDragLayer) {\n            nodes.forEach(setInDragLayer);\n            nodes.neighborhood().stdFilter(function (ele) {\n              return !hasCompoundNodes || ele.isEdge();\n            }).forEach(setInDragLayer);\n          }\n\n          if (opts.addToList) {\n            nodes.forEach(function (ele) {\n              addToDragList(ele, opts);\n            });\n          }\n\n          addDescendantsToDrag(nodes, opts); // always add to drag\n          // also add nodes and edges related to the topmost ancestor\n\n          updateAncestorsInDragLayer(nodes, {\n            inDragLayer: opts.inDragLayer\n          });\n          r.updateCachedGrabbedEles();\n        };\n\n        var addNodeToDrag = addNodesToDrag;\n\n        var freeDraggedElements = function freeDraggedElements(grabbedEles) {\n          if (!grabbedEles) {\n            return;\n          }\n\n          grabbedEles.hasId = {}; // clear the id list\n          // just go over all elements rather than doing a bunch of (possibly expensive) traversals\n\n          r.getCachedZSortedEles().forEach(function (ele) {\n            setFreed(ele);\n            setOutDragLayer(ele);\n            removeGrabTarget(ele);\n          });\n          r.updateCachedGrabbedEles();\n        }; // helper function to determine which ancestor nodes and edges should go\n        // to the drag layer (or should be removed from drag layer).\n\n\n        var updateAncestorsInDragLayer = function updateAncestorsInDragLayer(node, opts) {\n          if (opts.inDragLayer == null && opts.addToList == null) {\n            return;\n          } // nothing to do\n\n\n          if (!node.cy().hasCompoundNodes()) {\n            return;\n          } // find top-level parent\n\n\n          var parent = node.ancestors().orphans(); // no parent node: no nodes to add to the drag layer\n\n          if (parent.same(node)) {\n            return;\n          }\n\n          var nodes = parent.descendants().spawnSelf().merge(parent).unmerge(node).unmerge(node.descendants());\n          var edges = nodes.connectedEdges();\n\n          if (opts.inDragLayer) {\n            edges.forEach(setInDragLayer);\n            nodes.forEach(setInDragLayer);\n          }\n\n          if (opts.addToList) {\n            nodes.forEach(function (ele) {\n              addToDragList(ele, opts);\n            });\n          }\n        };\n\n        var blurActiveDomElement = function blurActiveDomElement() {\n          if (document.activeElement != null && document.activeElement.blur != null) {\n            document.activeElement.blur();\n          }\n        };\n\n        var haveMutationsApi = typeof MutationObserver !== 'undefined'; // watch for when the cy container is removed from the dom\n\n        if (haveMutationsApi) {\n          r.removeObserver = new MutationObserver(function (mutns) {\n            // eslint-disable-line no-undef\n            for (var i = 0; i < mutns.length; i++) {\n              var mutn = mutns[i];\n              var rNodes = mutn.removedNodes;\n\n              if (rNodes) {\n                for (var j = 0; j < rNodes.length; j++) {\n                  var rNode = rNodes[j];\n\n                  if (rNode === r.container) {\n                    r.destroy();\n                    break;\n                  }\n                }\n              }\n            }\n          });\n\n          if (r.container.parentNode) {\n            r.removeObserver.observe(r.container.parentNode, {\n              childList: true\n            });\n          }\n        } else {\n          r.registerBinding(r.container, 'DOMNodeRemoved', function (e) {\n            r.destroy();\n          });\n        }\n\n        var onResize = util.debounce(function () {\n          r.cy.resize();\n        }, 100);\n\n        if (haveMutationsApi) {\n          r.styleObserver = new MutationObserver(onResize); // eslint-disable-line no-undef\n\n          r.styleObserver.observe(r.container, {\n            attributes: true\n          });\n        } // auto resize\n\n\n        r.registerBinding(window, 'resize', onResize); // eslint-disable-line no-undef\n\n        var forEachUp = function forEachUp(domEle, fn) {\n          while (domEle != null) {\n            fn(domEle);\n            domEle = domEle.parentNode;\n          }\n        };\n\n        var invalidateCoords = function invalidateCoords() {\n          r.invalidateContainerClientCoordsCache();\n        };\n\n        forEachUp(r.container, function (domEle) {\n          r.registerBinding(domEle, 'transitionend', invalidateCoords);\n          r.registerBinding(domEle, 'animationend', invalidateCoords);\n          r.registerBinding(domEle, 'scroll', invalidateCoords);\n        }); // stop right click menu from appearing on cy\n\n        r.registerBinding(r.container, 'contextmenu', function (e) {\n          e.preventDefault();\n        });\n\n        var inBoxSelection = function inBoxSelection() {\n          return r.selection[4] !== 0;\n        };\n\n        var eventInContainer = function eventInContainer(e) {\n          // save cycles if mouse events aren't to be captured\n          var containerPageCoords = r.findContainerClientCoords();\n          var x = containerPageCoords[0];\n          var y = containerPageCoords[1];\n          var width = containerPageCoords[2];\n          var height = containerPageCoords[3];\n          var positions = e.touches ? e.touches : [e];\n          var atLeastOnePosInside = false;\n\n          for (var i = 0; i < positions.length; i++) {\n            var p = positions[i];\n\n            if (x <= p.clientX && p.clientX <= x + width && y <= p.clientY && p.clientY <= y + height) {\n              atLeastOnePosInside = true;\n              break;\n            }\n          }\n\n          if (!atLeastOnePosInside) {\n            return false;\n          }\n\n          var container = r.container;\n          var target = e.target;\n          var tParent = target.parentNode;\n          var containerIsTarget = false;\n\n          while (tParent) {\n            if (tParent === container) {\n              containerIsTarget = true;\n              break;\n            }\n\n            tParent = tParent.parentNode;\n          }\n\n          if (!containerIsTarget) {\n            return false;\n          } // if target is outisde cy container, then this event is not for us\n\n\n          return true;\n        }; // Primary key\n\n\n        r.registerBinding(r.container, 'mousedown', function mousedownHandler(e) {\n          if (!eventInContainer(e)) {\n            return;\n          }\n\n          e.preventDefault();\n          blurActiveDomElement();\n          r.hoverData.capture = true;\n          r.hoverData.which = e.which;\n          var cy = r.cy;\n          var gpos = [e.clientX, e.clientY];\n          var pos = r.projectIntoViewport(gpos[0], gpos[1]);\n          var select = r.selection;\n          var nears = r.findNearestElements(pos[0], pos[1], true, false);\n          var near = nears[0];\n          var draggedElements = r.dragData.possibleDragElements;\n          r.hoverData.mdownPos = pos;\n          r.hoverData.mdownGPos = gpos;\n\n          var checkForTaphold = function checkForTaphold() {\n            r.hoverData.tapholdCancelled = false;\n            clearTimeout(r.hoverData.tapholdTimeout);\n            r.hoverData.tapholdTimeout = setTimeout(function () {\n              if (r.hoverData.tapholdCancelled) {\n                return;\n              } else {\n                var ele = r.hoverData.down;\n\n                if (ele) {\n                  ele.emit({\n                    originalEvent: e,\n                    type: 'taphold',\n                    position: {\n                      x: pos[0],\n                      y: pos[1]\n                    }\n                  });\n                } else {\n                  cy.emit({\n                    originalEvent: e,\n                    type: 'taphold',\n                    position: {\n                      x: pos[0],\n                      y: pos[1]\n                    }\n                  });\n                }\n              }\n            }, r.tapholdDuration);\n          }; // Right click button\n\n\n          if (e.which == 3) {\n            r.hoverData.cxtStarted = true;\n            var cxtEvt = {\n              originalEvent: e,\n              type: 'cxttapstart',\n              position: {\n                x: pos[0],\n                y: pos[1]\n              }\n            };\n\n            if (near) {\n              near.activate();\n              near.emit(cxtEvt);\n              r.hoverData.down = near;\n            } else {\n              cy.emit(cxtEvt);\n            }\n\n            r.hoverData.downTime = new Date().getTime();\n            r.hoverData.cxtDragged = false; // Primary button\n          } else if (e.which == 1) {\n            if (near) {\n              near.activate();\n            } // Element dragging\n\n\n            {\n              // If something is under the cursor and it is draggable, prepare to grab it\n              if (near != null) {\n                if (r.nodeIsGrabbable(near)) {\n                  var makeEvent = function makeEvent(type) {\n                    return {\n                      originalEvent: e,\n                      type: type,\n                      position: {\n                        x: pos[0],\n                        y: pos[1]\n                      }\n                    };\n                  };\n\n                  var triggerGrab = function triggerGrab(ele) {\n                    ele.emit(makeEvent('grab'));\n                  };\n\n                  setGrabTarget(near);\n\n                  if (!near.selected()) {\n                    draggedElements = r.dragData.possibleDragElements = [];\n                    addNodeToDrag(near, {\n                      addToList: draggedElements\n                    });\n                    near.emit(makeEvent('grabon')).emit(makeEvent('grab'));\n                  } else {\n                    draggedElements = r.dragData.possibleDragElements = [];\n                    var selectedNodes = cy.$(function (ele) {\n                      return ele.isNode() && ele.selected() && r.nodeIsGrabbable(ele);\n                    });\n                    addNodesToDrag(selectedNodes, {\n                      addToList: draggedElements\n                    });\n                    near.emit(makeEvent('grabon'));\n                    selectedNodes.forEach(triggerGrab);\n                  }\n\n                  r.redrawHint('eles', true);\n                  r.redrawHint('drag', true);\n                }\n              }\n\n              r.hoverData.down = near;\n              r.hoverData.downs = nears;\n              r.hoverData.downTime = new Date().getTime();\n            }\n            triggerEvents(near, ['mousedown', 'tapstart', 'vmousedown'], e, {\n              position: {\n                x: pos[0],\n                y: pos[1]\n              }\n            });\n\n            if (near == null) {\n              select[4] = 1;\n              r.data.bgActivePosistion = {\n                x: pos[0],\n                y: pos[1]\n              };\n              r.redrawHint('select', true);\n              r.redraw();\n            } else if (near.isEdge()) {\n              select[4] = 1; // for future pan\n            }\n\n            checkForTaphold();\n          } // Initialize selection box coordinates\n\n\n          select[0] = select[2] = pos[0];\n          select[1] = select[3] = pos[1];\n        }, false);\n        r.registerBinding(window, 'mousemove', function mousemoveHandler(e) {\n          // eslint-disable-line no-undef\n          var capture = r.hoverData.capture;\n\n          if (!capture && !eventInContainer(e)) {\n            return;\n          }\n\n          var preventDefault = false;\n          var cy = r.cy;\n          var zoom = cy.zoom();\n          var gpos = [e.clientX, e.clientY];\n          var pos = r.projectIntoViewport(gpos[0], gpos[1]);\n          var mdownPos = r.hoverData.mdownPos;\n          var mdownGPos = r.hoverData.mdownGPos;\n          var select = r.selection;\n          var near = null;\n\n          if (!r.hoverData.draggingEles && !r.hoverData.dragging && !r.hoverData.selecting) {\n            near = r.findNearestElement(pos[0], pos[1], true, false);\n          }\n\n          var last = r.hoverData.last;\n          var down = r.hoverData.down;\n          var disp = [pos[0] - select[2], pos[1] - select[3]];\n          var draggedElements = r.dragData.possibleDragElements;\n          var isOverThresholdDrag;\n\n          if (mdownGPos) {\n            var dx = gpos[0] - mdownGPos[0];\n            var dx2 = dx * dx;\n            var dy = gpos[1] - mdownGPos[1];\n            var dy2 = dy * dy;\n            var dist2 = dx2 + dy2;\n            r.hoverData.isOverThresholdDrag = isOverThresholdDrag = dist2 >= r.desktopTapThreshold2;\n          }\n\n          var multSelKeyDown = isMultSelKeyDown(e);\n\n          if (isOverThresholdDrag) {\n            r.hoverData.tapholdCancelled = true;\n          }\n\n          var updateDragDelta = function updateDragDelta() {\n            var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];\n\n            if (dragDelta.length === 0) {\n              dragDelta.push(disp[0]);\n              dragDelta.push(disp[1]);\n            } else {\n              dragDelta[0] += disp[0];\n              dragDelta[1] += disp[1];\n            }\n          };\n\n          preventDefault = true;\n          triggerEvents(near, ['mousemove', 'vmousemove', 'tapdrag'], e, {\n            position: {\n              x: pos[0],\n              y: pos[1]\n            }\n          });\n\n          var goIntoBoxMode = function goIntoBoxMode() {\n            r.data.bgActivePosistion = undefined;\n\n            if (!r.hoverData.selecting) {\n              cy.emit('boxstart');\n            }\n\n            select[4] = 1;\n            r.hoverData.selecting = true;\n            r.redrawHint('select', true);\n            r.redraw();\n          }; // trigger context drag if rmouse down\n\n\n          if (r.hoverData.which === 3) {\n            // but only if over threshold\n            if (isOverThresholdDrag) {\n              var cxtEvt = {\n                originalEvent: e,\n                type: 'cxtdrag',\n                position: {\n                  x: pos[0],\n                  y: pos[1]\n                }\n              };\n\n              if (down) {\n                down.emit(cxtEvt);\n              } else {\n                cy.emit(cxtEvt);\n              }\n\n              r.hoverData.cxtDragged = true;\n\n              if (!r.hoverData.cxtOver || near !== r.hoverData.cxtOver) {\n                if (r.hoverData.cxtOver) {\n                  r.hoverData.cxtOver.emit({\n                    originalEvent: e,\n                    type: 'cxtdragout',\n                    position: {\n                      x: pos[0],\n                      y: pos[1]\n                    }\n                  });\n                }\n\n                r.hoverData.cxtOver = near;\n\n                if (near) {\n                  near.emit({\n                    originalEvent: e,\n                    type: 'cxtdragover',\n                    position: {\n                      x: pos[0],\n                      y: pos[1]\n                    }\n                  });\n                }\n              }\n            } // Check if we are drag panning the entire graph\n\n          } else if (r.hoverData.dragging) {\n            preventDefault = true;\n\n            if (cy.panningEnabled() && cy.userPanningEnabled()) {\n              var deltaP;\n\n              if (r.hoverData.justStartedPan) {\n                var mdPos = r.hoverData.mdownPos;\n                deltaP = {\n                  x: (pos[0] - mdPos[0]) * zoom,\n                  y: (pos[1] - mdPos[1]) * zoom\n                };\n                r.hoverData.justStartedPan = false;\n              } else {\n                deltaP = {\n                  x: disp[0] * zoom,\n                  y: disp[1] * zoom\n                };\n              }\n\n              cy.panBy(deltaP);\n              r.hoverData.dragged = true;\n            } // Needs reproject due to pan changing viewport\n\n\n            pos = r.projectIntoViewport(e.clientX, e.clientY); // Checks primary button down & out of time & mouse not moved much\n          } else if (select[4] == 1 && (down == null || down.isEdge())) {\n            if (isOverThresholdDrag) {\n              if (!r.hoverData.dragging && cy.boxSelectionEnabled() && (multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled())) {\n                goIntoBoxMode();\n              } else if (!r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled()) {\n                var allowPassthrough = allowPanningPassthrough(down, r.hoverData.downs);\n\n                if (allowPassthrough) {\n                  r.hoverData.dragging = true;\n                  r.hoverData.justStartedPan = true;\n                  select[4] = 0;\n                  r.data.bgActivePosistion = math.array2point(mdownPos);\n                  r.redrawHint('select', true);\n                  r.redraw();\n                }\n              }\n\n              if (down && down.isEdge() && down.active()) {\n                down.unactivate();\n              }\n            }\n          } else {\n            if (down && down.isEdge() && down.active()) {\n              down.unactivate();\n            }\n\n            if ((!down || !down.grabbed()) && near != last) {\n              if (last) {\n                triggerEvents(last, ['mouseout', 'tapdragout'], e, {\n                  position: {\n                    x: pos[0],\n                    y: pos[1]\n                  }\n                });\n              }\n\n              if (near) {\n                triggerEvents(near, ['mouseover', 'tapdragover'], e, {\n                  position: {\n                    x: pos[0],\n                    y: pos[1]\n                  }\n                });\n              }\n\n              r.hoverData.last = near;\n            }\n\n            if (down) {\n              if (isOverThresholdDrag) {\n                // then we can take action\n                if (cy.boxSelectionEnabled() && multSelKeyDown) {\n                  // then selection overrides\n                  if (down && down.grabbed()) {\n                    freeDraggedElements(draggedElements);\n                    down.emit('free');\n                  }\n\n                  goIntoBoxMode();\n                } else if (down && down.grabbed() && r.nodeIsDraggable(down)) {\n                  // drag node\n                  var justStartedDrag = !r.dragData.didDrag;\n\n                  if (justStartedDrag) {\n                    r.redrawHint('eles', true);\n                  }\n\n                  r.dragData.didDrag = true; // indicate that we actually did drag the node\n\n                  var toTrigger = []; // now, add the elements to the drag layer if not done already\n\n                  if (!r.hoverData.draggingEles) {\n                    addNodesToDrag(cy.collection(draggedElements), {\n                      inDragLayer: true\n                    });\n                  }\n\n                  for (var i = 0; i < draggedElements.length; i++) {\n                    var dEle = draggedElements[i]; // Locked nodes not draggable, as well as non-visible nodes\n\n                    if (r.nodeIsDraggable(dEle) && dEle.grabbed()) {\n                      var dPos = dEle.position();\n                      toTrigger.push(dEle);\n\n                      if (is.number(disp[0]) && is.number(disp[1])) {\n                        dPos.x += disp[0];\n                        dPos.y += disp[1];\n\n                        if (justStartedDrag) {\n                          var dragDelta = r.hoverData.dragDelta;\n\n                          if (dragDelta && is.number(dragDelta[0]) && is.number(dragDelta[1])) {\n                            dPos.x += dragDelta[0];\n                            dPos.y += dragDelta[1];\n                          }\n                        }\n                      }\n                    }\n                  }\n\n                  r.hoverData.draggingEles = true;\n                  var tcol = cy.collection(toTrigger);\n                  tcol.dirtyCompoundBoundsCache();\n                  tcol.emit('position drag');\n                  r.redrawHint('drag', true);\n                  r.redraw();\n                }\n              } else {\n                // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant\n                updateDragDelta();\n              }\n            } // prevent the dragging from triggering text selection on the page\n\n\n            preventDefault = true;\n          }\n\n          select[2] = pos[0];\n          select[3] = pos[1];\n\n          if (preventDefault) {\n            if (e.stopPropagation) e.stopPropagation();\n            if (e.preventDefault) e.preventDefault();\n            return false;\n          }\n        }, false);\n        r.registerBinding(window, 'mouseup', function mouseupHandler(e) {\n          // eslint-disable-line no-undef\n          var capture = r.hoverData.capture;\n\n          if (!capture) {\n            return;\n          }\n\n          r.hoverData.capture = false;\n          var cy = r.cy;\n          var pos = r.projectIntoViewport(e.clientX, e.clientY);\n          var select = r.selection;\n          var near = r.findNearestElement(pos[0], pos[1], true, false);\n          var draggedElements = r.dragData.possibleDragElements;\n          var down = r.hoverData.down;\n          var multSelKeyDown = isMultSelKeyDown(e);\n\n          if (r.data.bgActivePosistion) {\n            r.redrawHint('select', true);\n            r.redraw();\n          }\n\n          r.hoverData.tapholdCancelled = true;\n          r.data.bgActivePosistion = undefined; // not active bg now\n\n          if (down) {\n            down.unactivate();\n          }\n\n          if (r.hoverData.which === 3) {\n            var cxtEvt = {\n              originalEvent: e,\n              type: 'cxttapend',\n              position: {\n                x: pos[0],\n                y: pos[1]\n              }\n            };\n\n            if (down) {\n              down.emit(cxtEvt);\n            } else {\n              cy.emit(cxtEvt);\n            }\n\n            if (!r.hoverData.cxtDragged) {\n              var cxtTap = {\n                originalEvent: e,\n                type: 'cxttap',\n                position: {\n                  x: pos[0],\n                  y: pos[1]\n                }\n              };\n\n              if (down) {\n                down.emit(cxtTap);\n              } else {\n                cy.emit(cxtTap);\n              }\n            }\n\n            r.hoverData.cxtDragged = false;\n            r.hoverData.which = null;\n          } else if (r.hoverData.which === 1) {\n            // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something\n            if (down == null && // not mousedown on node\n            !r.dragData.didDrag // didn't move the node around\n            && !r.hoverData.selecting // not box selection\n            && !r.hoverData.dragged // didn't pan\n            && !isMultSelKeyDown(e)) {\n              cy.$(function (ele) {\n                return ele.selected();\n              }).unselect();\n\n              if (draggedElements.length > 0) {\n                r.redrawHint('eles', true);\n              }\n\n              r.dragData.possibleDragElements = draggedElements = [];\n            }\n\n            triggerEvents(near, ['mouseup', 'tapend', 'vmouseup'], e, {\n              position: {\n                x: pos[0],\n                y: pos[1]\n              }\n            });\n\n            if (!r.dragData.didDrag // didn't move a node around\n            && !r.hoverData.dragged // didn't pan\n            && !r.hoverData.selecting // not box selection\n            && !r.hoverData.isOverThresholdDrag // didn't move too much\n            ) {\n                triggerEvents(down, ['click', 'tap', 'vclick'], e, {\n                  position: {\n                    x: pos[0],\n                    y: pos[1]\n                  }\n                });\n              } // Single selection\n\n\n            if (near == down && !r.dragData.didDrag && !r.hoverData.selecting) {\n              if (near != null && near._private.selectable) {\n                if (r.hoverData.dragging) {// if panning, don't change selection state\n                } else if (cy.selectionType() === 'additive' || multSelKeyDown) {\n                  if (near.selected()) {\n                    near.unselect();\n                  } else {\n                    near.select();\n                  }\n                } else {\n                  if (!multSelKeyDown) {\n                    cy.$(':selected').unmerge(near).unselect();\n                    near.select();\n                  }\n                }\n\n                r.redrawHint('eles', true);\n              }\n            }\n\n            if (r.hoverData.selecting) {\n              var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));\n              r.redrawHint('select', true);\n\n              if (box.length > 0) {\n                r.redrawHint('eles', true);\n              }\n\n              cy.emit('boxend');\n\n              var eleWouldBeSelected = function eleWouldBeSelected(ele) {\n                return ele.selectable() && !ele.selected();\n              };\n\n              if (cy.selectionType() === 'additive') {\n                box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');\n              } else {\n                if (!multSelKeyDown) {\n                  cy.$(':selected').unmerge(box).unselect();\n                }\n\n                box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');\n              } // always need redraw in case eles unselectable\n\n\n              r.redraw();\n            } // Cancel drag pan\n\n\n            if (r.hoverData.dragging) {\n              r.hoverData.dragging = false;\n              r.redrawHint('select', true);\n              r.redrawHint('eles', true);\n              r.redraw();\n            }\n\n            if (!select[4]) {\n              r.redrawHint('drag', true);\n              r.redrawHint('eles', true);\n              var downWasGrabbed = down && down.grabbed();\n              freeDraggedElements(draggedElements);\n\n              if (downWasGrabbed) {\n                down.emit('free');\n              }\n            }\n          } // else not right mouse\n\n\n          select[4] = 0;\n          r.hoverData.down = null;\n          r.hoverData.cxtStarted = false;\n          r.hoverData.draggingEles = false;\n          r.hoverData.selecting = false;\n          r.hoverData.isOverThresholdDrag = false;\n          r.dragData.didDrag = false;\n          r.hoverData.dragged = false;\n          r.hoverData.dragDelta = [];\n          r.hoverData.mdownPos = null;\n          r.hoverData.mdownGPos = null;\n        }, false);\n\n        var wheelHandler = function wheelHandler(e) {\n          if (r.scrollingPage) {\n            return;\n          } // while scrolling, ignore wheel-to-zoom\n\n\n          var cy = r.cy;\n          var pos = r.projectIntoViewport(e.clientX, e.clientY);\n          var rpos = [pos[0] * cy.zoom() + cy.pan().x, pos[1] * cy.zoom() + cy.pan().y];\n\n          if (r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection()) {\n            // if pan dragging or cxt dragging, wheel movements make no zoom\n            e.preventDefault();\n            return;\n          }\n\n          if (cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled()) {\n            e.preventDefault();\n            r.data.wheelZooming = true;\n            clearTimeout(r.data.wheelTimeout);\n            r.data.wheelTimeout = setTimeout(function () {\n              r.data.wheelZooming = false;\n              r.redrawHint('eles', true);\n              r.redraw();\n            }, 150);\n            var diff;\n\n            if (e.deltaY != null) {\n              diff = e.deltaY / -250;\n            } else if (e.wheelDeltaY != null) {\n              diff = e.wheelDeltaY / 1000;\n            } else {\n              diff = e.wheelDelta / 1000;\n            }\n\n            diff = diff * r.wheelSensitivity;\n            var needsWheelFix = e.deltaMode === 1;\n\n            if (needsWheelFix) {\n              // fixes slow wheel events on ff/linux and ff/windows\n              diff *= 33;\n            }\n\n            cy.zoom({\n              level: cy.zoom() * Math.pow(10, diff),\n              renderedPosition: {\n                x: rpos[0],\n                y: rpos[1]\n              }\n            });\n          }\n        }; // Functions to help with whether mouse wheel should trigger zooming\n        // --\n\n\n        r.registerBinding(r.container, 'wheel', wheelHandler, true); // disable nonstandard wheel events\n        // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);\n        // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);\n        // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox\n\n        r.registerBinding(window, 'scroll', function scrollHandler(e) {\n          // eslint-disable-line no-undef\n          r.scrollingPage = true;\n          clearTimeout(r.scrollingPageTimeout);\n          r.scrollingPageTimeout = setTimeout(function () {\n            r.scrollingPage = false;\n          }, 250);\n        }, true); // Functions to help with handling mouseout/mouseover on the Cytoscape container\n        // Handle mouseout on Cytoscape container\n\n        r.registerBinding(r.container, 'mouseout', function mouseOutHandler(e) {\n          var pos = r.projectIntoViewport(e.clientX, e.clientY);\n          r.cy.emit({\n            originalEvent: e,\n            type: 'mouseout',\n            position: {\n              x: pos[0],\n              y: pos[1]\n            }\n          });\n        }, false);\n        r.registerBinding(r.container, 'mouseover', function mouseOverHandler(e) {\n          var pos = r.projectIntoViewport(e.clientX, e.clientY);\n          r.cy.emit({\n            originalEvent: e,\n            type: 'mouseover',\n            position: {\n              x: pos[0],\n              y: pos[1]\n            }\n          });\n        }, false);\n        var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom\n\n        var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom\n\n        var center1, modelCenter1; // center point on start pinch to zoom\n\n        var offsetLeft, offsetTop;\n        var containerWidth, containerHeight;\n        var twoFingersStartInside;\n\n        var distance = function distance(x1, y1, x2, y2) {\n          return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        };\n\n        var distanceSq = function distanceSq(x1, y1, x2, y2) {\n          return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n        };\n\n        var touchstartHandler;\n        r.registerBinding(r.container, 'touchstart', touchstartHandler = function touchstartHandler(e) {\n          if (!eventInContainer(e)) {\n            return;\n          }\n\n          blurActiveDomElement();\n          r.touchData.capture = true;\n          r.data.bgActivePosistion = undefined;\n          var cy = r.cy;\n          var now = r.touchData.now;\n          var earlier = r.touchData.earlier;\n\n          if (e.touches[0]) {\n            var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);\n            now[0] = pos[0];\n            now[1] = pos[1];\n          }\n\n          if (e.touches[1]) {\n            var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);\n            now[2] = pos[0];\n            now[3] = pos[1];\n          }\n\n          if (e.touches[2]) {\n            var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);\n            now[4] = pos[0];\n            now[5] = pos[1];\n          } // record starting points for pinch-to-zoom\n\n\n          if (e.touches[1]) {\n            freeDraggedElements(r.dragData.touchDragEles);\n            var offsets = r.findContainerClientCoords();\n            offsetLeft = offsets[0];\n            offsetTop = offsets[1];\n            containerWidth = offsets[2];\n            containerHeight = offsets[3];\n            f1x1 = e.touches[0].clientX - offsetLeft;\n            f1y1 = e.touches[0].clientY - offsetTop;\n            f2x1 = e.touches[1].clientX - offsetLeft;\n            f2y1 = e.touches[1].clientY - offsetTop;\n            twoFingersStartInside = 0 <= f1x1 && f1x1 <= containerWidth && 0 <= f2x1 && f2x1 <= containerWidth && 0 <= f1y1 && f1y1 <= containerHeight && 0 <= f2y1 && f2y1 <= containerHeight;\n            var pan = cy.pan();\n            var zoom = cy.zoom();\n            distance1 = distance(f1x1, f1y1, f2x1, f2y1);\n            distance1Sq = distanceSq(f1x1, f1y1, f2x1, f2y1);\n            center1 = [(f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2];\n            modelCenter1 = [(center1[0] - pan.x) / zoom, (center1[1] - pan.y) / zoom]; // consider context tap\n\n            var cxtDistThreshold = 200;\n            var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;\n\n            if (distance1Sq < cxtDistThresholdSq && !e.touches[2]) {\n              var near1 = r.findNearestElement(now[0], now[1], true, true);\n              var near2 = r.findNearestElement(now[2], now[3], true, true);\n\n              if (near1 && near1.isNode()) {\n                near1.activate().emit({\n                  originalEvent: e,\n                  type: 'cxttapstart',\n                  position: {\n                    x: now[0],\n                    y: now[1]\n                  }\n                });\n                r.touchData.start = near1;\n              } else if (near2 && near2.isNode()) {\n                near2.activate().emit({\n                  originalEvent: e,\n                  type: 'cxttapstart',\n                  position: {\n                    x: now[0],\n                    y: now[1]\n                  }\n                });\n                r.touchData.start = near2;\n              } else {\n                cy.emit({\n                  originalEvent: e,\n                  type: 'cxttapstart',\n                  position: {\n                    x: now[0],\n                    y: now[1]\n                  }\n                });\n              }\n\n              if (r.touchData.start) {\n                r.touchData.start._private.grabbed = false;\n              }\n\n              r.touchData.cxt = true;\n              r.touchData.cxtDragged = false;\n              r.data.bgActivePosistion = undefined;\n              r.redraw();\n              return;\n            }\n          }\n\n          if (e.touches[2]) {// ignore\n          } else if (e.touches[1]) {// ignore\n          } else if (e.touches[0]) {\n            var nears = r.findNearestElements(now[0], now[1], true, true);\n            var near = nears[0];\n\n            if (near != null) {\n              near.activate();\n              r.touchData.start = near;\n              r.touchData.starts = nears;\n\n              if (r.nodeIsGrabbable(near)) {\n                var draggedEles = r.dragData.touchDragEles = [];\n                var selectedNodes = null;\n                r.redrawHint('eles', true);\n                r.redrawHint('drag', true);\n\n                if (near.selected()) {\n                  // reset drag elements, since near will be added again\n                  selectedNodes = cy.$(function (ele) {\n                    return ele.selected() && r.nodeIsGrabbable(ele);\n                  });\n                  addNodesToDrag(selectedNodes, {\n                    addToList: draggedEles\n                  });\n                } else {\n                  addNodeToDrag(near, {\n                    addToList: draggedEles\n                  });\n                }\n\n                setGrabTarget(near);\n\n                var makeEvent = function makeEvent(type) {\n                  return {\n                    originalEvent: e,\n                    type: type,\n                    position: {\n                      x: now[0],\n                      y: now[1]\n                    }\n                  };\n                };\n\n                near.emit(makeEvent('grabon'));\n\n                if (selectedNodes) {\n                  selectedNodes.forEach(function (n) {\n                    n.emit(makeEvent('grab'));\n                  });\n                } else {\n                  near.emit(makeEvent('grab'));\n                }\n              }\n            }\n\n            triggerEvents(near, ['touchstart', 'tapstart', 'vmousedown'], e, {\n              position: {\n                x: now[0],\n                y: now[1]\n              }\n            });\n\n            if (near == null) {\n              r.data.bgActivePosistion = {\n                x: pos[0],\n                y: pos[1]\n              };\n              r.redrawHint('select', true);\n              r.redraw();\n            } // Tap, taphold\n            // -----\n\n\n            r.touchData.singleTouchMoved = false;\n            r.touchData.singleTouchStartTime = +new Date();\n            clearTimeout(r.touchData.tapholdTimeout);\n            r.touchData.tapholdTimeout = setTimeout(function () {\n              if (r.touchData.singleTouchMoved === false && !r.pinching // if pinching, then taphold unselect shouldn't take effect\n              && !r.touchData.selecting // box selection shouldn't allow taphold through\n              ) {\n                  triggerEvents(r.touchData.start, ['taphold'], e, {\n                    position: {\n                      x: now[0],\n                      y: now[1]\n                    }\n                  });\n\n                  if (!r.touchData.start) {\n                    cy.$(':selected').unselect();\n                  }\n                }\n            }, r.tapholdDuration);\n          }\n\n          if (e.touches.length >= 1) {\n            var sPos = r.touchData.startPosition = [];\n\n            for (var i = 0; i < now.length; i++) {\n              sPos[i] = earlier[i] = now[i];\n            }\n\n            var touch0 = e.touches[0];\n            r.touchData.startGPosition = [touch0.clientX, touch0.clientY];\n          }\n        }, false);\n        var touchmoveHandler;\n        r.registerBinding(window, 'touchmove', touchmoveHandler = function touchmoveHandler(e) {\n          // eslint-disable-line no-undef\n          var capture = r.touchData.capture;\n\n          if (!capture && !eventInContainer(e)) {\n            return;\n          }\n\n          var select = r.selection;\n          var cy = r.cy;\n          var now = r.touchData.now;\n          var earlier = r.touchData.earlier;\n          var zoom = cy.zoom();\n\n          if (e.touches[0]) {\n            var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);\n            now[0] = pos[0];\n            now[1] = pos[1];\n          }\n\n          if (e.touches[1]) {\n            var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);\n            now[2] = pos[0];\n            now[3] = pos[1];\n          }\n\n          if (e.touches[2]) {\n            var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);\n            now[4] = pos[0];\n            now[5] = pos[1];\n          }\n\n          var startGPos = r.touchData.startGPosition;\n          var isOverThresholdDrag;\n\n          if (capture && e.touches[0] && startGPos) {\n            var disp = [];\n\n            for (var j = 0; j < now.length; j++) {\n              disp[j] = now[j] - earlier[j];\n            }\n\n            var dx = e.touches[0].clientX - startGPos[0];\n            var dx2 = dx * dx;\n            var dy = e.touches[0].clientY - startGPos[1];\n            var dy2 = dy * dy;\n            var dist2 = dx2 + dy2;\n            isOverThresholdDrag = dist2 >= r.touchTapThreshold2;\n          } // context swipe cancelling\n\n\n          if (capture && r.touchData.cxt) {\n            e.preventDefault();\n            var f1x2 = e.touches[0].clientX - offsetLeft,\n                f1y2 = e.touches[0].clientY - offsetTop;\n            var f2x2 = e.touches[1].clientX - offsetLeft,\n                f2y2 = e.touches[1].clientY - offsetTop; // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );\n\n            var distance2Sq = distanceSq(f1x2, f1y2, f2x2, f2y2);\n            var factorSq = distance2Sq / distance1Sq;\n            var distThreshold = 150;\n            var distThresholdSq = distThreshold * distThreshold;\n            var factorThreshold = 1.5;\n            var factorThresholdSq = factorThreshold * factorThreshold; // cancel ctx gestures if the distance b/t the fingers increases\n\n            if (factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq) {\n              r.touchData.cxt = false;\n              r.data.bgActivePosistion = undefined;\n              r.redrawHint('select', true);\n              var cxtEvt = {\n                originalEvent: e,\n                type: 'cxttapend',\n                position: {\n                  x: now[0],\n                  y: now[1]\n                }\n              };\n\n              if (r.touchData.start) {\n                r.touchData.start.unactivate().emit(cxtEvt);\n                r.touchData.start = null;\n              } else {\n                cy.emit(cxtEvt);\n              }\n            }\n          } // context swipe\n\n\n          if (capture && r.touchData.cxt) {\n            var cxtEvt = {\n              originalEvent: e,\n              type: 'cxtdrag',\n              position: {\n                x: now[0],\n                y: now[1]\n              }\n            };\n            r.data.bgActivePosistion = undefined;\n            r.redrawHint('select', true);\n\n            if (r.touchData.start) {\n              r.touchData.start.emit(cxtEvt);\n            } else {\n              cy.emit(cxtEvt);\n            }\n\n            if (r.touchData.start) {\n              r.touchData.start._private.grabbed = false;\n            }\n\n            r.touchData.cxtDragged = true;\n            var near = r.findNearestElement(now[0], now[1], true, true);\n\n            if (!r.touchData.cxtOver || near !== r.touchData.cxtOver) {\n              if (r.touchData.cxtOver) {\n                r.touchData.cxtOver.emit({\n                  originalEvent: e,\n                  type: 'cxtdragout',\n                  position: {\n                    x: now[0],\n                    y: now[1]\n                  }\n                });\n              }\n\n              r.touchData.cxtOver = near;\n\n              if (near) {\n                near.emit({\n                  originalEvent: e,\n                  type: 'cxtdragover',\n                  position: {\n                    x: now[0],\n                    y: now[1]\n                  }\n                });\n              }\n            } // box selection\n\n          } else if (capture && e.touches[2] && cy.boxSelectionEnabled()) {\n            e.preventDefault();\n            r.data.bgActivePosistion = undefined;\n            this.lastThreeTouch = +new Date();\n\n            if (!r.touchData.selecting) {\n              cy.emit('boxstart');\n            }\n\n            r.touchData.selecting = true;\n            r.redrawHint('select', true);\n\n            if (!select || select.length === 0 || select[0] === undefined) {\n              select[0] = (now[0] + now[2] + now[4]) / 3;\n              select[1] = (now[1] + now[3] + now[5]) / 3;\n              select[2] = (now[0] + now[2] + now[4]) / 3 + 1;\n              select[3] = (now[1] + now[3] + now[5]) / 3 + 1;\n            } else {\n              select[2] = (now[0] + now[2] + now[4]) / 3;\n              select[3] = (now[1] + now[3] + now[5]) / 3;\n            }\n\n            select[4] = 1;\n            r.touchData.selecting = true;\n            r.redraw(); // pinch to zoom\n          } else if (capture && e.touches[1] && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled()) {\n            // two fingers => pinch to zoom\n            e.preventDefault();\n            r.data.bgActivePosistion = undefined;\n            r.redrawHint('select', true);\n            var draggedEles = r.dragData.touchDragEles;\n\n            if (draggedEles) {\n              r.redrawHint('drag', true);\n\n              for (var i = 0; i < draggedEles.length; i++) {\n                var de_p = draggedEles[i]._private;\n                de_p.grabbed = false;\n                de_p.rscratch.inDragLayer = false;\n              }\n            } // (x2, y2) for fingers 1 and 2\n\n\n            var f1x2 = e.touches[0].clientX - offsetLeft,\n                f1y2 = e.touches[0].clientY - offsetTop;\n            var f2x2 = e.touches[1].clientX - offsetLeft,\n                f2y2 = e.touches[1].clientY - offsetTop;\n            var distance2 = distance(f1x2, f1y2, f2x2, f2y2); // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );\n            // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );\n\n            var factor = distance2 / distance1;\n\n            if (twoFingersStartInside) {\n              // delta finger1\n              var df1x = f1x2 - f1x1;\n              var df1y = f1y2 - f1y1; // delta finger 2\n\n              var df2x = f2x2 - f2x1;\n              var df2y = f2y2 - f2y1; // translation is the normalised vector of the two fingers movement\n              // i.e. so pinching cancels out and moving together pans\n\n              var tx = (df1x + df2x) / 2;\n              var ty = (df1y + df2y) / 2; // adjust factor by the speed multiplier\n              // var speed = 1.5;\n              // if( factor > 1 ){\n              //   factor = (factor - 1) * speed + 1;\n              // } else {\n              //   factor = 1 - (1 - factor) * speed;\n              // }\n              // now calculate the zoom\n\n              var zoom1 = cy.zoom();\n              var zoom2 = zoom1 * factor;\n              var pan1 = cy.pan(); // the model center point converted to the current rendered pos\n\n              var ctrx = modelCenter1[0] * zoom1 + pan1.x;\n              var ctry = modelCenter1[1] * zoom1 + pan1.y;\n              var pan2 = {\n                x: -zoom2 / zoom1 * (ctrx - pan1.x - tx) + ctrx,\n                y: -zoom2 / zoom1 * (ctry - pan1.y - ty) + ctry\n              }; // remove dragged eles\n\n              if (r.touchData.start && r.touchData.start.active()) {\n                var draggedEles = r.dragData.touchDragEles;\n                freeDraggedElements(draggedEles);\n                r.redrawHint('drag', true);\n                r.redrawHint('eles', true);\n                r.touchData.start.unactivate().emit('free');\n              }\n\n              cy.viewport({\n                zoom: zoom2,\n                pan: pan2,\n                cancelOnFailedZoom: true\n              });\n              distance1 = distance2;\n              f1x1 = f1x2;\n              f1y1 = f1y2;\n              f2x1 = f2x2;\n              f2y1 = f2y2;\n              r.pinching = true;\n            } // Re-project\n\n\n            if (e.touches[0]) {\n              var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);\n              now[0] = pos[0];\n              now[1] = pos[1];\n            }\n\n            if (e.touches[1]) {\n              var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);\n              now[2] = pos[0];\n              now[3] = pos[1];\n            }\n\n            if (e.touches[2]) {\n              var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);\n              now[4] = pos[0];\n              now[5] = pos[1];\n            }\n          } else if (e.touches[0]) {\n            var start = r.touchData.start;\n            var last = r.touchData.last;\n            var near;\n\n            if (!r.hoverData.draggingEles && !r.swipePanning) {\n              near = r.findNearestElement(now[0], now[1], true, true);\n            }\n\n            if (capture && start != null) {\n              e.preventDefault();\n            } // dragging nodes\n\n\n            if (capture && start != null && r.nodeIsDraggable(start)) {\n              if (isOverThresholdDrag) {\n                // then dragging can happen\n                var draggedEles = r.dragData.touchDragEles;\n                var justStartedDrag = !r.dragData.didDrag;\n\n                if (justStartedDrag) {\n                  addNodesToDrag(cy.collection(draggedEles), {\n                    inDragLayer: true\n                  });\n                }\n\n                for (var k = 0; k < draggedEles.length; k++) {\n                  var draggedEle = draggedEles[k];\n\n                  if (r.nodeIsDraggable(draggedEle) && draggedEle.grabbed()) {\n                    r.dragData.didDrag = true;\n                    var dPos = draggedEle.position();\n\n                    if (is.number(disp[0]) && is.number(disp[1])) {\n                      dPos.x += disp[0];\n                      dPos.y += disp[1];\n                    }\n\n                    if (justStartedDrag) {\n                      r.redrawHint('eles', true);\n                      var dragDelta = r.touchData.dragDelta;\n\n                      if (dragDelta && is.number(dragDelta[0]) && is.number(dragDelta[1])) {\n                        dPos.x += dragDelta[0];\n                        dPos.y += dragDelta[1];\n                      }\n                    }\n                  }\n                }\n\n                var tcol = cy.collection(draggedEles);\n                tcol.dirtyCompoundBoundsCache();\n                tcol.emit('position drag');\n                r.hoverData.draggingEles = true;\n                r.redrawHint('drag', true);\n\n                if (r.touchData.startPosition[0] == earlier[0] && r.touchData.startPosition[1] == earlier[1]) {\n                  r.redrawHint('eles', true);\n                }\n\n                r.redraw();\n              } else {\n                // otherise keep track of drag delta for later\n                var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];\n\n                if (dragDelta.length === 0) {\n                  dragDelta.push(disp[0]);\n                  dragDelta.push(disp[1]);\n                } else {\n                  dragDelta[0] += disp[0];\n                  dragDelta[1] += disp[1];\n                }\n              }\n            } // touchmove\n\n\n            {\n              triggerEvents(start || near, ['touchmove', 'tapdrag', 'vmousemove'], e, {\n                position: {\n                  x: now[0],\n                  y: now[1]\n                }\n              });\n\n              if ((!start || !start.grabbed()) && near != last) {\n                if (last) {\n                  last.emit({\n                    originalEvent: e,\n                    type: 'tapdragout',\n                    position: {\n                      x: now[0],\n                      y: now[1]\n                    }\n                  });\n                }\n\n                if (near) {\n                  near.emit({\n                    originalEvent: e,\n                    type: 'tapdragover',\n                    position: {\n                      x: now[0],\n                      y: now[1]\n                    }\n                  });\n                }\n              }\n\n              r.touchData.last = near;\n            } // check to cancel taphold\n\n            if (capture) {\n              for (var i = 0; i < now.length; i++) {\n                if (now[i] && r.touchData.startPosition[i] && isOverThresholdDrag) {\n                  r.touchData.singleTouchMoved = true;\n                }\n              }\n            } // panning\n\n\n            if (capture && (start == null || start.isEdge()) && cy.panningEnabled() && cy.userPanningEnabled()) {\n              var allowPassthrough = allowPanningPassthrough(start, r.touchData.starts);\n\n              if (allowPassthrough) {\n                e.preventDefault();\n\n                if (r.swipePanning) {\n                  cy.panBy({\n                    x: disp[0] * zoom,\n                    y: disp[1] * zoom\n                  });\n                } else if (isOverThresholdDrag) {\n                  r.swipePanning = true;\n                  cy.panBy({\n                    x: dx * zoom,\n                    y: dy * zoom\n                  });\n\n                  if (start) {\n                    start.unactivate();\n\n                    if (!r.data.bgActivePosistion) {\n                      r.data.bgActivePosistion = math.array2point(r.touchData.startPosition);\n                    }\n\n                    r.redrawHint('select', true);\n                    r.touchData.start = null;\n                  }\n                }\n              } // Re-project\n\n\n              var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);\n              now[0] = pos[0];\n              now[1] = pos[1];\n            }\n          }\n\n          for (var j = 0; j < now.length; j++) {\n            earlier[j] = now[j];\n          } //r.redraw();\n          // the active bg indicator should be removed when making a swipe that is neither for dragging nodes or panning\n\n\n          if (capture && e.touches.length > 0 && !r.hoverData.draggingEles && !r.swipePanning && r.data.bgActivePosistion != null) {\n            r.data.bgActivePosistion = undefined;\n            r.redrawHint('select', true);\n            r.redraw();\n          }\n        }, false);\n        var touchcancelHandler;\n        r.registerBinding(window, 'touchcancel', touchcancelHandler = function touchcancelHandler(e) {\n          // eslint-disable-line no-undef\n          var start = r.touchData.start;\n          r.touchData.capture = false;\n\n          if (start) {\n            start.unactivate();\n          }\n        });\n        var touchendHandler;\n        r.registerBinding(window, 'touchend', touchendHandler = function touchendHandler(e) {\n          // eslint-disable-line no-undef\n          var start = r.touchData.start;\n          var capture = r.touchData.capture;\n\n          if (capture) {\n            if (e.touches.length === 0) {\n              r.touchData.capture = false;\n            }\n\n            e.preventDefault();\n          } else {\n            return;\n          }\n\n          var select = r.selection;\n          r.swipePanning = false;\n          r.hoverData.draggingEles = false;\n          var cy = r.cy;\n          var zoom = cy.zoom();\n          var now = r.touchData.now;\n          var earlier = r.touchData.earlier;\n\n          if (e.touches[0]) {\n            var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);\n            now[0] = pos[0];\n            now[1] = pos[1];\n          }\n\n          if (e.touches[1]) {\n            var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);\n            now[2] = pos[0];\n            now[3] = pos[1];\n          }\n\n          if (e.touches[2]) {\n            var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);\n            now[4] = pos[0];\n            now[5] = pos[1];\n          }\n\n          if (start) {\n            start.unactivate();\n          }\n\n          var ctxTapend;\n\n          if (r.touchData.cxt) {\n            ctxTapend = {\n              originalEvent: e,\n              type: 'cxttapend',\n              position: {\n                x: now[0],\n                y: now[1]\n              }\n            };\n\n            if (start) {\n              start.emit(ctxTapend);\n            } else {\n              cy.emit(ctxTapend);\n            }\n\n            if (!r.touchData.cxtDragged) {\n              var ctxTap = {\n                originalEvent: e,\n                type: 'cxttap',\n                position: {\n                  x: now[0],\n                  y: now[1]\n                }\n              };\n\n              if (start) {\n                start.emit(ctxTap);\n              } else {\n                cy.emit(ctxTap);\n              }\n            }\n\n            if (r.touchData.start) {\n              r.touchData.start._private.grabbed = false;\n            }\n\n            r.touchData.cxt = false;\n            r.touchData.start = null;\n            r.redraw();\n            return;\n          } // no more box selection if we don't have three fingers\n\n\n          if (!e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting) {\n            r.touchData.selecting = false;\n            var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));\n            select[0] = undefined;\n            select[1] = undefined;\n            select[2] = undefined;\n            select[3] = undefined;\n            select[4] = 0;\n            r.redrawHint('select', true);\n            cy.emit('boxend');\n\n            var eleWouldBeSelected = function eleWouldBeSelected(ele) {\n              return ele.selectable() && !ele.selected();\n            };\n\n            box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');\n\n            if (box.nonempty()) {\n              r.redrawHint('eles', true);\n            }\n\n            r.redraw();\n          }\n\n          if (start != null) {\n            start.unactivate();\n          }\n\n          if (e.touches[2]) {\n            r.data.bgActivePosistion = undefined;\n            r.redrawHint('select', true);\n          } else if (e.touches[1]) {// ignore\n          } else if (e.touches[0]) {// ignore\n            // Last touch released\n          } else if (!e.touches[0]) {\n            r.data.bgActivePosistion = undefined;\n            r.redrawHint('select', true);\n            var draggedEles = r.dragData.touchDragEles;\n\n            if (start != null) {\n              var startWasGrabbed = start._private.grabbed;\n              freeDraggedElements(draggedEles);\n              r.redrawHint('drag', true);\n              r.redrawHint('eles', true);\n\n              if (startWasGrabbed) {\n                start.emit('free');\n              }\n\n              triggerEvents(start, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {\n                position: {\n                  x: now[0],\n                  y: now[1]\n                }\n              });\n              start.unactivate();\n              r.touchData.start = null;\n            } else {\n              var near = r.findNearestElement(now[0], now[1], true, true);\n              triggerEvents(near, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {\n                position: {\n                  x: now[0],\n                  y: now[1]\n                }\n              });\n            }\n\n            var dx = r.touchData.startPosition[0] - now[0];\n            var dx2 = dx * dx;\n            var dy = r.touchData.startPosition[1] - now[1];\n            var dy2 = dy * dy;\n            var dist2 = dx2 + dy2;\n            var rdist2 = dist2 * zoom * zoom; // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance\n\n            if (start != null && !r.dragData.didDrag // didn't drag nodes around\n            && start._private.selectable && rdist2 < r.touchTapThreshold2 && !r.pinching // pinch to zoom should not affect selection\n            ) {\n                if (cy.selectionType() === 'single') {\n                  cy.$(':selected').unmerge(start).unselect();\n                  start.select();\n                } else {\n                  if (start.selected()) {\n                    start.unselect();\n                  } else {\n                    start.select();\n                  }\n                }\n\n                r.redrawHint('eles', true);\n              } // Tap event, roughly same as mouse click event for touch\n\n\n            if (!r.touchData.singleTouchMoved) {\n              triggerEvents(start, ['tap', 'vclick'], e, {\n                position: {\n                  x: now[0],\n                  y: now[1]\n                }\n              });\n            }\n\n            r.touchData.singleTouchMoved = true;\n          }\n\n          for (var j = 0; j < now.length; j++) {\n            earlier[j] = now[j];\n          }\n\n          r.dragData.didDrag = false; // reset for next mousedown\n\n          if (e.touches.length === 0) {\n            r.touchData.dragDelta = [];\n            r.touchData.startPosition = null;\n            r.touchData.startGPosition = null;\n          }\n\n          if (e.touches.length < 2) {\n            r.pinching = false;\n            r.redrawHint('eles', true);\n            r.redraw();\n          } //r.redraw();\n\n        }, false); // fallback compatibility layer for ms pointer events\n\n        if (typeof TouchEvent === 'undefined') {\n          var pointers = [];\n\n          var makeTouch = function makeTouch(e) {\n            return {\n              clientX: e.clientX,\n              clientY: e.clientY,\n              force: 1,\n              identifier: e.pointerId,\n              pageX: e.pageX,\n              pageY: e.pageY,\n              radiusX: e.width / 2,\n              radiusY: e.height / 2,\n              screenX: e.screenX,\n              screenY: e.screenY,\n              target: e.target\n            };\n          };\n\n          var makePointer = function makePointer(e) {\n            return {\n              event: e,\n              touch: makeTouch(e)\n            };\n          };\n\n          var addPointer = function addPointer(e) {\n            pointers.push(makePointer(e));\n          };\n\n          var removePointer = function removePointer(e) {\n            for (var i = 0; i < pointers.length; i++) {\n              var p = pointers[i];\n\n              if (p.event.pointerId === e.pointerId) {\n                pointers.splice(i, 1);\n                return;\n              }\n            }\n          };\n\n          var updatePointer = function updatePointer(e) {\n            var p = pointers.filter(function (p) {\n              return p.event.pointerId === e.pointerId;\n            })[0];\n            p.event = e;\n            p.touch = makeTouch(e);\n          };\n\n          var addTouchesToEvent = function addTouchesToEvent(e) {\n            e.touches = pointers.map(function (p) {\n              return p.touch;\n            });\n          };\n\n          var pointerIsMouse = function pointerIsMouse(e) {\n            return e.pointerType === 'mouse' || e.pointerType === 4;\n          };\n\n          r.registerBinding(r.container, 'pointerdown', function (e) {\n            if (pointerIsMouse(e)) {\n              return;\n            } // mouse already handled\n\n\n            e.preventDefault();\n            addPointer(e);\n            addTouchesToEvent(e);\n            touchstartHandler(e);\n          });\n          r.registerBinding(r.container, 'pointerup', function (e) {\n            if (pointerIsMouse(e)) {\n              return;\n            } // mouse already handled\n\n\n            removePointer(e);\n            addTouchesToEvent(e);\n            touchendHandler(e);\n          });\n          r.registerBinding(r.container, 'pointercancel', function (e) {\n            if (pointerIsMouse(e)) {\n              return;\n            } // mouse already handled\n\n\n            removePointer(e);\n            addTouchesToEvent(e);\n            touchcancelHandler(e);\n          });\n          r.registerBinding(r.container, 'pointermove', function (e) {\n            if (pointerIsMouse(e)) {\n              return;\n            } // mouse already handled\n\n\n            e.preventDefault();\n            updatePointer(e);\n            addTouchesToEvent(e);\n            touchmoveHandler(e);\n          });\n        }\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 121 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var math = __webpack_require__(2);\n\n      var BRp = {};\n\n      BRp.generatePolygon = function (name, points) {\n        return this.nodeShapes[name] = {\n          renderer: this,\n          name: name,\n          points: points,\n          draw: function draw(context, centerX, centerY, width, height) {\n            this.renderer.nodeShapeImpl('polygon', context, centerX, centerY, width, height, this.points);\n          },\n          intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {\n            return math.polygonIntersectLine(x, y, this.points, nodeX, nodeY, width / 2, height / 2, padding);\n          },\n          checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {\n            return math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height, [0, -1], padding);\n          }\n        };\n      };\n\n      BRp.generateEllipse = function () {\n        return this.nodeShapes['ellipse'] = {\n          renderer: this,\n          name: 'ellipse',\n          draw: function draw(context, centerX, centerY, width, height) {\n            this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);\n          },\n          intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {\n            return math.intersectLineEllipse(x, y, nodeX, nodeY, width / 2 + padding, height / 2 + padding);\n          },\n          checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {\n            return math.checkInEllipse(x, y, width, height, centerX, centerY, padding);\n          }\n        };\n      };\n\n      BRp.generateRoundRectangle = function () {\n        return this.nodeShapes['roundrectangle'] = {\n          renderer: this,\n          name: 'roundrectangle',\n          points: math.generateUnitNgonPointsFitToSquare(4, 0),\n          draw: function draw(context, centerX, centerY, width, height) {\n            this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);\n          },\n          intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {\n            return math.roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);\n          },\n          checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {\n            var cornerRadius = math.getRoundRectangleRadius(width, height);\n            var diam = cornerRadius * 2; // Check hBox\n\n            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {\n              return true;\n            } // Check vBox\n\n\n            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {\n              return true;\n            } // Check top left quarter circle\n\n\n            if (math.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {\n              return true;\n            } // Check top right quarter circle\n\n\n            if (math.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {\n              return true;\n            } // Check bottom right quarter circle\n\n\n            if (math.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n              return true;\n            } // Check bottom left quarter circle\n\n\n            if (math.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n              return true;\n            }\n\n            return false;\n          }\n        };\n      };\n\n      BRp.generateCutRectangle = function () {\n        return this.nodeShapes['cutrectangle'] = {\n          renderer: this,\n          name: 'cutrectangle',\n          cornerLength: math.getCutRectangleCornerLength(),\n          points: math.generateUnitNgonPointsFitToSquare(4, 0),\n          draw: function draw(context, centerX, centerY, width, height) {\n            this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);\n          },\n          generateCutTrianglePts: function generateCutTrianglePts(width, height, centerX, centerY) {\n            var cl = this.cornerLength;\n            var hh = height / 2;\n            var hw = width / 2;\n            var xBegin = centerX - hw;\n            var xEnd = centerX + hw;\n            var yBegin = centerY - hh;\n            var yEnd = centerY + hh; // points are in clockwise order, inner (imaginary) triangle pt on [4, 5]\n\n            return {\n              topLeft: [xBegin, yBegin + cl, xBegin + cl, yBegin, xBegin + cl, yBegin + cl],\n              topRight: [xEnd - cl, yBegin, xEnd, yBegin + cl, xEnd - cl, yBegin + cl],\n              bottomRight: [xEnd, yEnd - cl, xEnd - cl, yEnd, xEnd - cl, yEnd - cl],\n              bottomLeft: [xBegin + cl, yEnd, xBegin, yEnd - cl, xBegin + cl, yEnd - cl]\n            };\n          },\n          intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {\n            var cPts = this.generateCutTrianglePts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);\n            var pts = [].concat.apply([], [cPts.topLeft.splice(0, 4), cPts.topRight.splice(0, 4), cPts.bottomRight.splice(0, 4), cPts.bottomLeft.splice(0, 4)]);\n            return math.polygonIntersectLine(x, y, pts, nodeX, nodeY);\n          },\n          checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {\n            // Check hBox\n            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * this.cornerLength, [0, -1], padding)) {\n              return true;\n            } // Check vBox\n\n\n            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * this.cornerLength, height, [0, -1], padding)) {\n              return true;\n            }\n\n            var cutTrianglePts = this.generateCutTrianglePts(width, height, centerX, centerY);\n            return math.pointInsidePolygonPoints(x, y, cutTrianglePts.topLeft) || math.pointInsidePolygonPoints(x, y, cutTrianglePts.topRight) || math.pointInsidePolygonPoints(x, y, cutTrianglePts.bottomRight) || math.pointInsidePolygonPoints(x, y, cutTrianglePts.bottomLeft);\n          }\n        };\n      };\n\n      BRp.generateBarrel = function () {\n        return this.nodeShapes['barrel'] = {\n          renderer: this,\n          name: 'barrel',\n          points: math.generateUnitNgonPointsFitToSquare(4, 0),\n          draw: function draw(context, centerX, centerY, width, height) {\n            this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);\n          },\n          intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {\n            // use two fixed t values for the bezier curve approximation\n            var t0 = 0.15;\n            var t1 = 0.5;\n            var t2 = 0.85;\n            var bPts = this.generateBarrelBezierPts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);\n\n            var approximateBarrelCurvePts = function approximateBarrelCurvePts(pts) {\n              // approximate curve pts based on the two t values\n              var m0 = math.qbezierPtAt({\n                x: pts[0],\n                y: pts[1]\n              }, {\n                x: pts[2],\n                y: pts[3]\n              }, {\n                x: pts[4],\n                y: pts[5]\n              }, t0);\n              var m1 = math.qbezierPtAt({\n                x: pts[0],\n                y: pts[1]\n              }, {\n                x: pts[2],\n                y: pts[3]\n              }, {\n                x: pts[4],\n                y: pts[5]\n              }, t1);\n              var m2 = math.qbezierPtAt({\n                x: pts[0],\n                y: pts[1]\n              }, {\n                x: pts[2],\n                y: pts[3]\n              }, {\n                x: pts[4],\n                y: pts[5]\n              }, t2);\n              return [pts[0], pts[1], m0.x, m0.y, m1.x, m1.y, m2.x, m2.y, pts[4], pts[5]];\n            };\n\n            var pts = [].concat(approximateBarrelCurvePts(bPts.topLeft), approximateBarrelCurvePts(bPts.topRight), approximateBarrelCurvePts(bPts.bottomRight), approximateBarrelCurvePts(bPts.bottomLeft));\n            return math.polygonIntersectLine(x, y, pts, nodeX, nodeY);\n          },\n          generateBarrelBezierPts: function generateBarrelBezierPts(width, height, centerX, centerY) {\n            var hh = height / 2;\n            var hw = width / 2;\n            var xBegin = centerX - hw;\n            var xEnd = centerX + hw;\n            var yBegin = centerY - hh;\n            var yEnd = centerY + hh;\n            var curveConstants = math.getBarrelCurveConstants(width, height);\n            var hOffset = curveConstants.heightOffset;\n            var wOffset = curveConstants.widthOffset;\n            var ctrlPtXOffset = curveConstants.ctrlPtOffsetPct * width; // points are in clockwise order, inner (imaginary) control pt on [4, 5]\n\n            var pts = {\n              topLeft: [xBegin, yBegin + hOffset, xBegin + ctrlPtXOffset, yBegin, xBegin + wOffset, yBegin],\n              topRight: [xEnd - wOffset, yBegin, xEnd - ctrlPtXOffset, yBegin, xEnd, yBegin + hOffset],\n              bottomRight: [xEnd, yEnd - hOffset, xEnd - ctrlPtXOffset, yEnd, xEnd - wOffset, yEnd],\n              bottomLeft: [xBegin + wOffset, yEnd, xBegin + ctrlPtXOffset, yEnd, xBegin, yEnd - hOffset]\n            };\n            pts.topLeft.isTop = true;\n            pts.topRight.isTop = true;\n            pts.bottomLeft.isBottom = true;\n            pts.bottomRight.isBottom = true;\n            return pts;\n          },\n          checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {\n            var curveConstants = math.getBarrelCurveConstants(width, height);\n            var hOffset = curveConstants.heightOffset;\n            var wOffset = curveConstants.widthOffset; // Check hBox\n\n            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * hOffset, [0, -1], padding)) {\n              return true;\n            } // Check vBox\n\n\n            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * wOffset, height, [0, -1], padding)) {\n              return true;\n            }\n\n            var barrelCurvePts = this.generateBarrelBezierPts(width, height, centerX, centerY);\n\n            var getCurveT = function getCurveT(x, y, curvePts) {\n              var x0 = curvePts[4];\n              var x1 = curvePts[2];\n              var x2 = curvePts[0];\n              var y0 = curvePts[5]; // var y1 = curvePts[ 3 ];\n\n              var y2 = curvePts[1];\n              var xMin = Math.min(x0, x2);\n              var xMax = Math.max(x0, x2);\n              var yMin = Math.min(y0, y2);\n              var yMax = Math.max(y0, y2);\n\n              if (xMin <= x && x <= xMax && yMin <= y && y <= yMax) {\n                var coeff = math.bezierPtsToQuadCoeff(x0, x1, x2);\n                var roots = math.solveQuadratic(coeff[0], coeff[1], coeff[2], x);\n                var validRoots = roots.filter(function (r) {\n                  return 0 <= r && r <= 1;\n                });\n\n                if (validRoots.length > 0) {\n                  return validRoots[0];\n                }\n              }\n\n              return null;\n            };\n\n            var curveRegions = Object.keys(barrelCurvePts);\n\n            for (var i = 0; i < curveRegions.length; i++) {\n              var corner = curveRegions[i];\n              var cornerPts = barrelCurvePts[corner];\n              var t = getCurveT(x, y, cornerPts);\n\n              if (t == null) {\n                continue;\n              }\n\n              var y0 = cornerPts[5];\n              var y1 = cornerPts[3];\n              var y2 = cornerPts[1];\n              var bezY = math.qbezierAt(y0, y1, y2, t);\n\n              if (cornerPts.isTop && bezY <= y) {\n                return true;\n              }\n\n              if (cornerPts.isBottom && y <= bezY) {\n                return true;\n              }\n            }\n\n            return false;\n          }\n        };\n      };\n\n      BRp.generateBottomRoundrectangle = function () {\n        return this.nodeShapes['bottomroundrectangle'] = {\n          renderer: this,\n          name: 'bottomroundrectangle',\n          points: math.generateUnitNgonPointsFitToSquare(4, 0),\n          draw: function draw(context, centerX, centerY, width, height) {\n            this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);\n          },\n          intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {\n            var topStartX = nodeX - (width / 2 + padding);\n            var topStartY = nodeY - (height / 2 + padding);\n            var topEndY = topStartY;\n            var topEndX = nodeX + (width / 2 + padding);\n            var topIntersections = math.finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);\n\n            if (topIntersections.length > 0) {\n              return topIntersections;\n            }\n\n            return math.roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);\n          },\n          checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {\n            var cornerRadius = math.getRoundRectangleRadius(width, height);\n            var diam = 2 * cornerRadius; // Check hBox\n\n            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {\n              return true;\n            } // Check vBox\n\n\n            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {\n              return true;\n            } // check non-rounded top side\n\n\n            var outerWidth = width / 2 + 2 * padding;\n            var outerHeight = height / 2 + 2 * padding;\n            var points = [centerX - outerWidth, centerY - outerHeight, centerX - outerWidth, centerY, centerX + outerWidth, centerY, centerX + outerWidth, centerY - outerHeight];\n\n            if (math.pointInsidePolygonPoints(x, y, points)) {\n              return true;\n            } // Check bottom right quarter circle\n\n\n            if (math.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n              return true;\n            } // Check bottom left quarter circle\n\n\n            if (math.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n              return true;\n            }\n\n            return false;\n          }\n        };\n      };\n\n      BRp.registerNodeShapes = function () {\n        var nodeShapes = this.nodeShapes = {};\n        var renderer = this;\n        this.generateEllipse();\n        this.generatePolygon('triangle', math.generateUnitNgonPointsFitToSquare(3, 0));\n        this.generatePolygon('rectangle', math.generateUnitNgonPointsFitToSquare(4, 0));\n        nodeShapes['square'] = nodeShapes['rectangle'];\n        this.generateRoundRectangle();\n        this.generateCutRectangle();\n        this.generateBarrel();\n        this.generateBottomRoundrectangle();\n        this.generatePolygon('diamond', [0, 1, 1, 0, 0, -1, -1, 0]);\n        this.generatePolygon('pentagon', math.generateUnitNgonPointsFitToSquare(5, 0));\n        this.generatePolygon('hexagon', math.generateUnitNgonPointsFitToSquare(6, 0));\n        this.generatePolygon('heptagon', math.generateUnitNgonPointsFitToSquare(7, 0));\n        this.generatePolygon('octagon', math.generateUnitNgonPointsFitToSquare(8, 0));\n        var star5Points = new Array(20);\n        {\n          var outerPoints = math.generateUnitNgonPoints(5, 0);\n          var innerPoints = math.generateUnitNgonPoints(5, Math.PI / 5); // Outer radius is 1; inner radius of star is smaller\n\n          var innerRadius = 0.5 * (3 - Math.sqrt(5));\n          innerRadius *= 1.57;\n\n          for (var i = 0; i < innerPoints.length / 2; i++) {\n            innerPoints[i * 2] *= innerRadius;\n            innerPoints[i * 2 + 1] *= innerRadius;\n          }\n\n          for (var i = 0; i < 20 / 4; i++) {\n            star5Points[i * 4] = outerPoints[i * 2];\n            star5Points[i * 4 + 1] = outerPoints[i * 2 + 1];\n            star5Points[i * 4 + 2] = innerPoints[i * 2];\n            star5Points[i * 4 + 3] = innerPoints[i * 2 + 1];\n          }\n        }\n        star5Points = math.fitPolygonToSquare(star5Points);\n        this.generatePolygon('star', star5Points);\n        this.generatePolygon('vee', [-1, -1, 0, -0.333, 1, -1, 0, 1]);\n        this.generatePolygon('rhomboid', [-1, -1, 0.333, -1, 1, 1, -0.333, 1]);\n        this.generatePolygon('concavehexagon', [-1, -0.95, -0.75, 0, -1, 0.95, 1, 0.95, 0.75, 0, 1, -0.95]);\n        this.generatePolygon('tag', [-1, -1, 0.25, -1, 1, 0, 0.25, 1, -1, 1]);\n\n        nodeShapes.makePolygon = function (points) {\n          // use caching on user-specified polygons so they are as fast as native shapes\n          var key = points.join('$');\n          var name = 'polygon-' + key;\n          var shape;\n\n          if (shape = this[name]) {\n            // got cached shape\n            return shape;\n          } // create and cache new shape\n\n\n          return renderer.generatePolygon(name, points);\n        };\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 122 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var BRp = {};\n\n      BRp.timeToRender = function () {\n        return this.redrawTotalTime / this.redrawCount;\n      };\n\n      BRp.redraw = function (options) {\n        options = options || util.staticEmptyObject();\n        var r = this;\n\n        if (r.averageRedrawTime === undefined) {\n          r.averageRedrawTime = 0;\n        }\n\n        if (r.lastRedrawTime === undefined) {\n          r.lastRedrawTime = 0;\n        }\n\n        if (r.lastDrawTime === undefined) {\n          r.lastDrawTime = 0;\n        }\n\n        r.requestedFrame = true;\n        r.renderOptions = options;\n      };\n\n      BRp.beforeRender = function (fn, priority) {\n        // the renderer can't add tick callbacks when destroyed\n        if (this.destroyed) {\n          return;\n        }\n\n        priority = priority || 0;\n        var cbs = this.beforeRenderCallbacks;\n        cbs.push({\n          fn: fn,\n          priority: priority\n        }); // higher priority callbacks executed first\n\n        cbs.sort(function (a, b) {\n          return b.priority - a.priority;\n        });\n      };\n\n      var beforeRenderCallbacks = function beforeRenderCallbacks(r, willDraw, startTime) {\n        var cbs = r.beforeRenderCallbacks;\n\n        for (var i = 0; i < cbs.length; i++) {\n          cbs[i].fn(willDraw, startTime);\n        }\n      };\n\n      BRp.startRenderLoop = function () {\n        var r = this;\n\n        if (r.renderLoopStarted) {\n          return;\n        } else {\n          r.renderLoopStarted = true;\n        }\n\n        var renderFn = function renderFn(requestTime) {\n          if (r.destroyed) {\n            return;\n          }\n\n          if (r.requestedFrame && !r.skipFrame) {\n            beforeRenderCallbacks(r, true, requestTime);\n            var startTime = util.performanceNow();\n            r.render(r.renderOptions);\n            var endTime = r.lastDrawTime = util.performanceNow();\n\n            if (r.averageRedrawTime === undefined) {\n              r.averageRedrawTime = endTime - startTime;\n            }\n\n            if (r.redrawCount === undefined) {\n              r.redrawCount = 0;\n            }\n\n            r.redrawCount++;\n\n            if (r.redrawTotalTime === undefined) {\n              r.redrawTotalTime = 0;\n            }\n\n            var duration = endTime - startTime;\n            r.redrawTotalTime += duration;\n            r.lastRedrawTime = duration; // use a weighted average with a bias from the previous average so we don't spike so easily\n\n            r.averageRedrawTime = r.averageRedrawTime / 2 + duration / 2;\n            r.requestedFrame = false;\n          } else {\n            beforeRenderCallbacks(r, false, requestTime);\n          }\n\n          r.skipFrame = false;\n          util.requestAnimationFrame(renderFn);\n        };\n\n        util.requestAnimationFrame(renderFn);\n      };\n\n      module.exports = BRp;\n      /***/\n    },\n    /* 123 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /*\n      The canvas renderer was written by Yue Dong.\n      \n      Modifications tracked on Github.\n      */\n\n      var util = __webpack_require__(1);\n\n      var is = __webpack_require__(0);\n\n      var ElementTextureCache = __webpack_require__(124);\n\n      var LayeredTextureCache = __webpack_require__(125);\n\n      var CR = CanvasRenderer;\n      var CRp = CanvasRenderer.prototype;\n      CRp.CANVAS_LAYERS = 3; //\n\n      CRp.SELECT_BOX = 0;\n      CRp.DRAG = 1;\n      CRp.NODE = 2;\n      CRp.BUFFER_COUNT = 3; //\n\n      CRp.TEXTURE_BUFFER = 0;\n      CRp.MOTIONBLUR_BUFFER_NODE = 1;\n      CRp.MOTIONBLUR_BUFFER_DRAG = 2;\n\n      function CanvasRenderer(options) {\n        var r = this;\n        r.data = {\n          canvases: new Array(CRp.CANVAS_LAYERS),\n          contexts: new Array(CRp.CANVAS_LAYERS),\n          canvasNeedsRedraw: new Array(CRp.CANVAS_LAYERS),\n          bufferCanvases: new Array(CRp.BUFFER_COUNT),\n          bufferContexts: new Array(CRp.CANVAS_LAYERS)\n        };\n        var tapHlOff = '-webkit-tap-highlight-color: rgba(0,0,0,0);';\n        r.data.canvasContainer = document.createElement('div'); // eslint-disable-line no-undef\n\n        var containerStyle = r.data.canvasContainer.style;\n        r.data.canvasContainer.setAttribute('style', tapHlOff);\n        containerStyle.position = 'relative';\n        containerStyle.zIndex = '0';\n        containerStyle.overflow = 'hidden';\n        var container = options.cy.container();\n        container.appendChild(r.data.canvasContainer);\n\n        if ((container.getAttribute('style') || '').indexOf(tapHlOff) < 0) {\n          container.setAttribute('style', (container.getAttribute('style') || '') + tapHlOff);\n        }\n\n        for (var i = 0; i < CRp.CANVAS_LAYERS; i++) {\n          var canvas = r.data.canvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef\n\n          r.data.contexts[i] = canvas.getContext('2d');\n          canvas.setAttribute('style', '-webkit-user-select: none; -moz-user-select: -moz-none; user-select: none; -webkit-tap-highlight-color: rgba(0,0,0,0); outline-style: none;' + (is.ms() ? ' -ms-touch-action: none; touch-action: none; ' : ''));\n          canvas.style.position = 'absolute';\n          canvas.setAttribute('data-id', 'layer' + i);\n          canvas.style.zIndex = String(CRp.CANVAS_LAYERS - i);\n          r.data.canvasContainer.appendChild(canvas);\n          r.data.canvasNeedsRedraw[i] = false;\n        }\n\n        r.data.topCanvas = r.data.canvases[0];\n        r.data.canvases[CRp.NODE].setAttribute('data-id', 'layer' + CRp.NODE + '-node');\n        r.data.canvases[CRp.SELECT_BOX].setAttribute('data-id', 'layer' + CRp.SELECT_BOX + '-selectbox');\n        r.data.canvases[CRp.DRAG].setAttribute('data-id', 'layer' + CRp.DRAG + '-drag');\n\n        for (var i = 0; i < CRp.BUFFER_COUNT; i++) {\n          r.data.bufferCanvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef\n\n          r.data.bufferContexts[i] = r.data.bufferCanvases[i].getContext('2d');\n          r.data.bufferCanvases[i].style.position = 'absolute';\n          r.data.bufferCanvases[i].setAttribute('data-id', 'buffer' + i);\n          r.data.bufferCanvases[i].style.zIndex = String(-i - 1);\n          r.data.bufferCanvases[i].style.visibility = 'hidden'; //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);\n        }\n\n        r.pathsEnabled = true;\n        r.data.eleTxrCache = new ElementTextureCache(r);\n        r.data.lyrTxrCache = new LayeredTextureCache(r, r.data.eleTxrCache);\n        r.onUpdateEleCalcs(function invalidateTextureCaches(willDraw, eles) {\n          for (var i = 0; i < eles.length; i++) {\n            var ele = eles[i];\n            var rs = ele._private.rstyle;\n            var de = rs.dirtyEvents;\n\n            if (ele.isNode() && de && de.length === 1 && de['position']) {// then keep cached ele texture\n            } else {\n              r.data.eleTxrCache.invalidateElement(ele); // NB this block of code should not be ported to 3.3 (unstable branch).\n              // - This check is unneccesary in 3.3 as caches will be stored without respect to opacity.\n              // - This fix may result in lowered performance for compound graphs.\n              // - Ref : Opacity of child node is not updated for certain zoom levels after parent opacity is overriden #2078\n\n              if (ele.isParent() && de['style']) {\n                var op1 = rs.prevParentOpacity;\n                var op2 = ele.pstyle('opacity').pfValue;\n                rs.prevParentOpacity = op2;\n\n                if (op1 !== op2) {\n                  var descs = ele.descendants();\n\n                  for (var j = 0; j < descs.length; j++) {\n                    r.data.eleTxrCache.invalidateElement(descs[j]);\n                  }\n                }\n              }\n            }\n          }\n\n          if (eles.length > 0) {\n            r.data.lyrTxrCache.invalidateElements(eles);\n          }\n        });\n      }\n\n      CRp.redrawHint = function (group, bool) {\n        var r = this;\n\n        switch (group) {\n          case 'eles':\n            r.data.canvasNeedsRedraw[CRp.NODE] = bool;\n            break;\n\n          case 'drag':\n            r.data.canvasNeedsRedraw[CRp.DRAG] = bool;\n            break;\n\n          case 'select':\n            r.data.canvasNeedsRedraw[CRp.SELECT_BOX] = bool;\n            break;\n        }\n      }; // whether to use Path2D caching for drawing\n\n\n      var pathsImpld = typeof Path2D !== 'undefined';\n\n      CRp.path2dEnabled = function (on) {\n        if (on === undefined) {\n          return this.pathsEnabled;\n        }\n\n        this.pathsEnabled = on ? true : false;\n      };\n\n      CRp.usePaths = function () {\n        return pathsImpld && this.pathsEnabled;\n      };\n\n      [__webpack_require__(126), __webpack_require__(127), __webpack_require__(128), __webpack_require__(129), __webpack_require__(130), __webpack_require__(131), __webpack_require__(132), __webpack_require__(133), __webpack_require__(134), __webpack_require__(135)].forEach(function (props) {\n        util.extend(CRp, props);\n      });\n      module.exports = CR;\n      /***/\n    },\n    /* 124 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var math = __webpack_require__(2);\n\n      var util = __webpack_require__(1);\n\n      var Heap = __webpack_require__(9);\n\n      var defs = __webpack_require__(19);\n\n      var minTxrH = 25; // the size of the texture cache for small height eles (special case)\n\n      var txrStepH = 50; // the min size of the regular cache, and the size it increases with each step up\n\n      var minLvl = -4; // when scaling smaller than that we don't need to re-render\n\n      var maxLvl = 2; // when larger than this scale just render directly (caching is not helpful)\n\n      var maxZoom = 3.99; // beyond this zoom level, layered textures are not used\n\n      var eleTxrSpacing = 8; // spacing between elements on textures to avoid blitting overlaps\n\n      var defTxrWidth = 1024; // default/minimum texture width\n\n      var maxTxrW = 1024; // the maximum width of a texture\n\n      var maxTxrH = 1024; // the maximum height of a texture\n\n      var minUtility = 0.5; // if usage of texture is less than this, it is retired\n\n      var maxFullness = 0.8; // fullness of texture after which queue removal is checked\n\n      var maxFullnessChecks = 10; // dequeued after this many checks\n\n      var allowEdgeTxrCaching = false; // whether edges can be cached as textures (TODO maybe better on if webgl supported?)\n\n      var allowParentTxrCaching = false; // whether parent nodes can be cached as textures (TODO maybe better on if webgl supported?)\n\n      var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame\n\n      var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time\n\n      var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing\n\n      var deqFastCost = 0.9; // % of frame time to be used when >60fps\n\n      var deqRedrawThreshold = 100; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile\n\n      var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch\n\n      var getTxrReasons = {\n        dequeue: 'dequeue',\n        downscale: 'downscale',\n        highQuality: 'highQuality'\n      };\n\n      var ElementTextureCache = function ElementTextureCache(renderer) {\n        var self = this;\n        self.renderer = renderer;\n        self.onDequeues = [];\n        self.setupDequeueing();\n      };\n\n      var ETCp = ElementTextureCache.prototype;\n      ETCp.reasons = getTxrReasons; // the list of textures in which new subtextures for elements can be placed\n\n      ETCp.getTextureQueue = function (txrH) {\n        var self = this;\n        self.eleImgCaches = self.eleImgCaches || {};\n        return self.eleImgCaches[txrH] = self.eleImgCaches[txrH] || [];\n      }; // the list of usused textures which can be recycled (in use in texture queue)\n\n\n      ETCp.getRetiredTextureQueue = function (txrH) {\n        var self = this;\n        var rtxtrQs = self.eleImgCaches.retired = self.eleImgCaches.retired || {};\n        var rtxtrQ = rtxtrQs[txrH] = rtxtrQs[txrH] || [];\n        return rtxtrQ;\n      }; // queue of element draw requests at different scale levels\n\n\n      ETCp.getElementQueue = function () {\n        var self = this;\n        var q = self.eleCacheQueue = self.eleCacheQueue || new Heap(function (a, b) {\n          return b.reqs - a.reqs;\n        });\n        return q;\n      }; // queue of element draw requests at different scale levels (element id lookup)\n\n\n      ETCp.getElementIdToQueue = function () {\n        var self = this;\n        var id2q = self.eleIdToCacheQueue = self.eleIdToCacheQueue || {};\n        return id2q;\n      };\n\n      ETCp.getElement = function (ele, bb, pxRatio, lvl, reason) {\n        var self = this;\n        var r = this.renderer;\n        var rs = ele._private.rscratch;\n        var zoom = r.cy.zoom();\n\n        if (bb.w === 0 || bb.h === 0 || !ele.visible()) {\n          return null;\n        }\n\n        if (lvl == null) {\n          lvl = Math.ceil(math.log2(zoom * pxRatio));\n        }\n\n        if (lvl < minLvl) {\n          lvl = minLvl;\n        } else if (zoom >= maxZoom || lvl > maxLvl) {\n          return null;\n        }\n\n        var scale = Math.pow(2, lvl);\n        var eleScaledH = bb.h * scale;\n        var eleScaledW = bb.w * scale;\n        var caches = rs.imgCaches = rs.imgCaches || {};\n        var eleCache = caches[lvl];\n\n        if (eleCache) {\n          return eleCache;\n        }\n\n        var txrH; // which texture height this ele belongs to\n\n        if (eleScaledH <= minTxrH) {\n          txrH = minTxrH;\n        } else if (eleScaledH <= txrStepH) {\n          txrH = txrStepH;\n        } else {\n          txrH = Math.ceil(eleScaledH / txrStepH) * txrStepH;\n        }\n\n        if (eleScaledH > maxTxrH || eleScaledW > maxTxrW || !allowEdgeTxrCaching && ele.isEdge() || !allowParentTxrCaching && ele.isParent()) {\n          return null; // caching large elements is not efficient\n        }\n\n        var txrQ = self.getTextureQueue(txrH); // first try the second last one in case it has space at the end\n\n        var txr = txrQ[txrQ.length - 2];\n\n        var addNewTxr = function addNewTxr() {\n          return self.recycleTexture(txrH, eleScaledW) || self.addTexture(txrH, eleScaledW);\n        }; // try the last one if there is no second last one\n\n\n        if (!txr) {\n          txr = txrQ[txrQ.length - 1];\n        } // if the last one doesn't exist, we need a first one\n\n\n        if (!txr) {\n          txr = addNewTxr();\n        } // if there's no room in the current texture, we need a new one\n\n\n        if (txr.width - txr.usedWidth < eleScaledW) {\n          txr = addNewTxr();\n        }\n\n        var scaledLabelShown = r.eleTextBiggerThanMin(ele, scale);\n\n        var scalableFrom = function scalableFrom(otherCache) {\n          return otherCache && otherCache.scaledLabelShown === scaledLabelShown;\n        };\n\n        var deqing = reason && reason === getTxrReasons.dequeue;\n        var highQualityReq = reason && reason === getTxrReasons.highQuality;\n        var downscaleReq = reason && reason === getTxrReasons.downscale;\n        var higherCache; // the nearest cache with a higher level\n\n        for (var l = lvl + 1; l <= maxLvl; l++) {\n          var c = caches[l];\n\n          if (c) {\n            higherCache = c;\n            break;\n          }\n        }\n\n        var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;\n\n        var downscale = function downscale() {\n          txr.context.drawImage(oneUpCache.texture.canvas, oneUpCache.x, 0, oneUpCache.width, oneUpCache.height, txr.usedWidth, 0, eleScaledW, eleScaledH);\n        }; // reset ele area in texture\n\n\n        txr.context.setTransform(1, 0, 0, 1, 0, 0);\n        txr.context.clearRect(txr.usedWidth, 0, eleScaledW, txrH);\n\n        if (scalableFrom(oneUpCache)) {\n          // then we can relatively cheaply rescale the existing image w/o rerendering\n          downscale();\n        } else if (scalableFrom(higherCache)) {\n          // then use the higher cache for now and queue the next level down\n          // to cheaply scale towards the smaller level\n          if (highQualityReq) {\n            for (var l = higherCache.level; l > lvl; l--) {\n              oneUpCache = self.getElement(ele, bb, pxRatio, l, getTxrReasons.downscale);\n            }\n\n            downscale();\n          } else {\n            self.queueElement(ele, higherCache.level - 1);\n            return higherCache;\n          }\n        } else {\n          var lowerCache; // the nearest cache with a lower level\n\n          if (!deqing && !highQualityReq && !downscaleReq) {\n            for (var l = lvl - 1; l >= minLvl; l--) {\n              var c = caches[l];\n\n              if (c) {\n                lowerCache = c;\n                break;\n              }\n            }\n          }\n\n          if (scalableFrom(lowerCache)) {\n            // then use the lower quality cache for now and queue the better one for later\n            self.queueElement(ele, lvl);\n            return lowerCache;\n          }\n\n          txr.context.translate(txr.usedWidth, 0);\n          txr.context.scale(scale, scale);\n          r.drawElement(txr.context, ele, bb, scaledLabelShown);\n          txr.context.scale(1 / scale, 1 / scale);\n          txr.context.translate(-txr.usedWidth, 0);\n        }\n\n        eleCache = caches[lvl] = {\n          ele: ele,\n          x: txr.usedWidth,\n          texture: txr,\n          level: lvl,\n          scale: scale,\n          width: eleScaledW,\n          height: eleScaledH,\n          scaledLabelShown: scaledLabelShown\n        };\n        txr.usedWidth += Math.ceil(eleScaledW + eleTxrSpacing);\n        txr.eleCaches.push(eleCache);\n        self.checkTextureFullness(txr);\n        return eleCache;\n      };\n\n      ETCp.invalidateElement = function (ele) {\n        var self = this;\n        var caches = ele._private.rscratch.imgCaches;\n\n        if (caches) {\n          for (var lvl = minLvl; lvl <= maxLvl; lvl++) {\n            var cache = caches[lvl];\n\n            if (cache) {\n              var txr = cache.texture; // remove space from the texture it belongs to\n\n              txr.invalidatedWidth += cache.width; // remove refs with the element\n\n              caches[lvl] = null;\n              util.removeFromArray(txr.eleCaches, cache); // remove from queue since the old req was for the old state\n\n              self.removeFromQueue(ele); // might have to remove the entire texture if it's not efficiently using its space\n\n              self.checkTextureUtility(txr);\n            }\n          }\n        }\n      };\n\n      ETCp.checkTextureUtility = function (txr) {\n        // invalidate all entries in the cache if the cache size is small\n        if (txr.invalidatedWidth >= minUtility * txr.width) {\n          this.retireTexture(txr);\n        }\n      };\n\n      ETCp.checkTextureFullness = function (txr) {\n        // if texture has been mostly filled and passed over several times, remove\n        // it from the queue so we don't need to waste time looking at it to put new things\n        var self = this;\n        var txrQ = self.getTextureQueue(txr.height);\n\n        if (txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks) {\n          util.removeFromArray(txrQ, txr);\n        } else {\n          txr.fullnessChecks++;\n        }\n      };\n\n      ETCp.retireTexture = function (txr) {\n        var self = this;\n        var txrH = txr.height;\n        var txrQ = self.getTextureQueue(txrH); // retire the texture from the active / searchable queue:\n\n        util.removeFromArray(txrQ, txr);\n        txr.retired = true; // remove the refs from the eles to the caches:\n\n        var eleCaches = txr.eleCaches;\n\n        for (var i = 0; i < eleCaches.length; i++) {\n          var eleCache = eleCaches[i];\n          var ele = eleCache.ele;\n          var lvl = eleCache.level;\n          var imgCaches = ele._private.rscratch.imgCaches;\n\n          if (imgCaches) {\n            imgCaches[lvl] = null;\n          }\n        }\n\n        util.clearArray(eleCaches); // add the texture to a retired queue so it can be recycled in future:\n\n        var rtxtrQ = self.getRetiredTextureQueue(txrH);\n        rtxtrQ.push(txr);\n      };\n\n      ETCp.addTexture = function (txrH, minW) {\n        var self = this;\n        var txrQ = self.getTextureQueue(txrH);\n        var txr = {};\n        txrQ.push(txr);\n        txr.eleCaches = [];\n        txr.height = txrH;\n        txr.width = Math.max(defTxrWidth, minW);\n        txr.usedWidth = 0;\n        txr.invalidatedWidth = 0;\n        txr.fullnessChecks = 0;\n        txr.canvas = document.createElement('canvas'); // eslint-disable-line no-undef\n\n        txr.canvas.width = txr.width;\n        txr.canvas.height = txr.height;\n        txr.context = txr.canvas.getContext('2d');\n        return txr;\n      };\n\n      ETCp.recycleTexture = function (txrH, minW) {\n        var self = this;\n        var txrQ = self.getTextureQueue(txrH);\n        var rtxtrQ = self.getRetiredTextureQueue(txrH);\n\n        for (var i = 0; i < rtxtrQ.length; i++) {\n          var txr = rtxtrQ[i];\n\n          if (txr.width >= minW) {\n            txr.retired = false;\n            txr.usedWidth = 0;\n            txr.invalidatedWidth = 0;\n            txr.fullnessChecks = 0;\n            util.clearArray(txr.eleCaches);\n            txr.context.setTransform(1, 0, 0, 1, 0, 0);\n            txr.context.clearRect(0, 0, txr.width, txr.height);\n            util.removeFromArray(rtxtrQ, txr);\n            txrQ.push(txr);\n            return txr;\n          }\n        }\n      };\n\n      ETCp.queueElement = function (ele, lvl) {\n        var self = this;\n        var q = self.getElementQueue();\n        var id2q = self.getElementIdToQueue();\n        var id = ele.id();\n        var existingReq = id2q[id];\n\n        if (existingReq) {\n          // use the max lvl b/c in between lvls are cheap to make\n          existingReq.level = Math.max(existingReq.level, lvl);\n          existingReq.reqs++;\n          q.updateItem(existingReq);\n        } else {\n          var req = {\n            ele: ele,\n            level: lvl,\n            reqs: 1\n          };\n          q.push(req);\n          id2q[id] = req;\n        }\n      };\n\n      ETCp.dequeue = function (pxRatio\n      /*, extent*/\n      ) {\n        var self = this;\n        var q = self.getElementQueue();\n        var id2q = self.getElementIdToQueue();\n        var dequeued = [];\n\n        for (var i = 0; i < maxDeqSize; i++) {\n          if (q.size() > 0) {\n            var req = q.pop();\n            var ele = req.ele;\n            var caches = ele._private.rscratch.imgCaches; // dequeueing isn't necessary when an existing cache exists\n\n            if (caches[req.level] != null) {\n              continue;\n            }\n\n            id2q[ele.id()] = null;\n            dequeued.push(req);\n            var bb = ele.boundingBox();\n            self.getElement(ele, bb, pxRatio, req.level, getTxrReasons.dequeue);\n          } else {\n            break;\n          }\n        }\n\n        return dequeued;\n      };\n\n      ETCp.removeFromQueue = function (ele) {\n        var self = this;\n        var q = self.getElementQueue();\n        var id2q = self.getElementIdToQueue();\n        var req = id2q[ele.id()];\n\n        if (req != null) {\n          // bring to front of queue\n          req.reqs = util.MAX_INT;\n          q.updateItem(req);\n          q.pop(); // remove from queue\n\n          id2q[ele.id()] = null; // remove from lookup map\n        }\n      };\n\n      ETCp.onDequeue = function (fn) {\n        this.onDequeues.push(fn);\n      };\n\n      ETCp.offDequeue = function (fn) {\n        util.removeFromArray(this.onDequeues, fn);\n      };\n\n      ETCp.setupDequeueing = defs.setupDequeueing({\n        deqRedrawThreshold: deqRedrawThreshold,\n        deqCost: deqCost,\n        deqAvgCost: deqAvgCost,\n        deqNoDrawCost: deqNoDrawCost,\n        deqFastCost: deqFastCost,\n        deq: function deq(self, pxRatio, extent) {\n          return self.dequeue(pxRatio, extent);\n        },\n        onDeqd: function onDeqd(self, deqd) {\n          for (var i = 0; i < self.onDequeues.length; i++) {\n            var fn = self.onDequeues[i];\n            fn(deqd);\n          }\n        },\n        shouldRedraw: function shouldRedraw(self, deqd, pxRatio, extent) {\n          for (var i = 0; i < deqd.length; i++) {\n            var bb = deqd[i].ele.boundingBox();\n\n            if (math.boundingBoxesIntersect(bb, extent)) {\n              return true;\n            }\n          }\n\n          return false;\n        },\n        priority: function priority(self) {\n          return self.renderer.beforeRenderPriorities.eleTxrDeq;\n        }\n      });\n      module.exports = ElementTextureCache;\n      /***/\n    },\n    /* 125 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var math = __webpack_require__(2);\n\n      var Heap = __webpack_require__(9);\n\n      var is = __webpack_require__(0);\n\n      var defs = __webpack_require__(19);\n\n      var defNumLayers = 1; // default number of layers to use\n\n      var minLvl = -4; // when scaling smaller than that we don't need to re-render\n\n      var maxLvl = 2; // when larger than this scale just render directly (caching is not helpful)\n\n      var maxZoom = 3.99; // beyond this zoom level, layered textures are not used\n\n      var deqRedrawThreshold = 50; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile\n\n      var refineEleDebounceTime = 50; // time to debounce sharper ele texture updates\n\n      var disableEleImgSmoothing = true; // when drawing eles on layers from an ele cache ; crisper and more performant when true\n\n      var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame\n\n      var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time\n\n      var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing\n\n      var deqFastCost = 0.9; // % of frame time to be used when >60fps\n\n      var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch\n\n      var invalidThreshold = 250; // time threshold for disabling b/c of invalidations\n\n      var maxLayerArea = 4000 * 4000; // layers can't be bigger than this\n\n      var alwaysQueue = true; // never draw all the layers in a level on a frame; draw directly until all dequeued\n\n      var useHighQualityEleTxrReqs = true; // whether to use high quality ele txr requests (generally faster and cheaper in the longterm)\n\n      var useEleTxrCaching = true; // whether to use individual ele texture caching underneath this cache\n      // var log = function(){ console.log.apply( console, arguments ); };\n\n      var LayeredTextureCache = function LayeredTextureCache(renderer, eleTxrCache) {\n        var self = this;\n        var r = self.renderer = renderer;\n        self.layersByLevel = {}; // e.g. 2 => [ layer1, layer2, ..., layerN ]\n\n        self.firstGet = true;\n        self.lastInvalidationTime = util.performanceNow() - 2 * invalidThreshold;\n        self.skipping = false;\n        r.beforeRender(function (willDraw, now) {\n          if (now - self.lastInvalidationTime <= invalidThreshold) {\n            self.skipping = true;\n          } else {\n            self.skipping = false;\n          }\n        });\n\n        var qSort = function qSort(a, b) {\n          return b.reqs - a.reqs;\n        };\n\n        self.layersQueue = new Heap(qSort);\n        self.eleTxrCache = eleTxrCache;\n        self.setupEleCacheInvalidation();\n        self.setupDequeueing();\n      };\n\n      var LTCp = LayeredTextureCache.prototype;\n      var layerIdPool = 0;\n      var MAX_INT = Math.pow(2, 53) - 1;\n\n      LTCp.makeLayer = function (bb, lvl) {\n        var scale = Math.pow(2, lvl);\n        var w = Math.ceil(bb.w * scale);\n        var h = Math.ceil(bb.h * scale);\n        var canvas = document.createElement('canvas'); // eslint-disable-line no-undef\n\n        canvas.width = w;\n        canvas.height = h;\n        var layer = {\n          id: layerIdPool = ++layerIdPool % MAX_INT,\n          bb: bb,\n          level: lvl,\n          width: w,\n          height: h,\n          canvas: canvas,\n          context: canvas.getContext('2d'),\n          eles: [],\n          elesQueue: [],\n          reqs: 0\n        }; // log('make layer %s with w %s and h %s and lvl %s', layer.id, layer.width, layer.height, layer.level);\n\n        var cxt = layer.context;\n        var dx = -layer.bb.x1;\n        var dy = -layer.bb.y1; // do the transform on creation to save cycles (it's the same for all eles)\n\n        cxt.scale(scale, scale);\n        cxt.translate(dx, dy);\n        return layer;\n      };\n\n      LTCp.getLayers = function (eles, pxRatio, lvl) {\n        var self = this;\n        var r = self.renderer;\n        var cy = r.cy;\n        var zoom = cy.zoom();\n        var firstGet = self.firstGet;\n        self.firstGet = false; // log('--\\nget layers with %s eles', eles.length);\n        //log eles.map(function(ele){ return ele.id() }) );\n\n        if (lvl == null) {\n          lvl = Math.ceil(math.log2(zoom * pxRatio));\n\n          if (lvl < minLvl) {\n            lvl = minLvl;\n          } else if (zoom >= maxZoom || lvl > maxLvl) {\n            return null;\n          }\n        }\n\n        self.validateLayersElesOrdering(lvl, eles);\n        var layersByLvl = self.layersByLevel;\n        var scale = Math.pow(2, lvl);\n        var layers = layersByLvl[lvl] = layersByLvl[lvl] || [];\n        var bb;\n        var lvlComplete = self.levelIsComplete(lvl, eles);\n        var tmpLayers;\n\n        var checkTempLevels = function checkTempLevels() {\n          var canUseAsTmpLvl = function canUseAsTmpLvl(l) {\n            self.validateLayersElesOrdering(l, eles);\n\n            if (self.levelIsComplete(l, eles)) {\n              tmpLayers = layersByLvl[l];\n              return true;\n            }\n          };\n\n          var checkLvls = function checkLvls(dir) {\n            if (tmpLayers) {\n              return;\n            }\n\n            for (var l = lvl + dir; minLvl <= l && l <= maxLvl; l += dir) {\n              if (canUseAsTmpLvl(l)) {\n                break;\n              }\n            }\n          };\n\n          checkLvls(+1);\n          checkLvls(-1); // remove the invalid layers; they will be replaced as needed later in this function\n\n          for (var i = layers.length - 1; i >= 0; i--) {\n            var layer = layers[i];\n\n            if (layer.invalid) {\n              util.removeFromArray(layers, layer);\n            }\n          }\n        };\n\n        if (!lvlComplete) {\n          // if the current level is incomplete, then use the closest, best quality layerset temporarily\n          // and later queue the current layerset so we can get the proper quality level soon\n          checkTempLevels();\n        } else {\n          // log('level complete, using existing layers\\n--');\n          return layers;\n        }\n\n        var getBb = function getBb() {\n          if (!bb) {\n            bb = math.makeBoundingBox();\n\n            for (var i = 0; i < eles.length; i++) {\n              math.updateBoundingBox(bb, eles[i].boundingBox());\n            }\n          }\n\n          return bb;\n        };\n\n        var makeLayer = function makeLayer(opts) {\n          opts = opts || {};\n          var after = opts.after;\n          getBb();\n          var area = bb.w * scale * (bb.h * scale);\n\n          if (area > maxLayerArea) {\n            return null;\n          }\n\n          var layer = self.makeLayer(bb, lvl);\n\n          if (after != null) {\n            var index = layers.indexOf(after) + 1;\n            layers.splice(index, 0, layer);\n          } else if (opts.insert === undefined || opts.insert) {\n            // no after specified => first layer made so put at start\n            layers.unshift(layer);\n          } // if( tmpLayers ){\n          //self.queueLayer( layer );\n          // }\n\n\n          return layer;\n        };\n\n        if (self.skipping && !firstGet) {\n          // log('skip layers');\n          return null;\n        } // log('do layers');\n\n\n        var layer = null;\n        var maxElesPerLayer = eles.length / defNumLayers;\n        var allowLazyQueueing = alwaysQueue && !firstGet;\n\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n          var rs = ele._private.rscratch;\n          var caches = rs.imgLayerCaches = rs.imgLayerCaches || {}; // log('look at ele', ele.id());\n\n          var existingLayer = caches[lvl];\n\n          if (existingLayer) {\n            // reuse layer for later eles\n            // log('reuse layer for', ele.id());\n            layer = existingLayer;\n            continue;\n          }\n\n          if (!layer || layer.eles.length >= maxElesPerLayer || !math.boundingBoxInBoundingBox(layer.bb, ele.boundingBox())) {\n            // log('make new layer for ele %s', ele.id());\n            layer = makeLayer({\n              insert: true,\n              after: layer\n            }); // if now layer can be built then we can't use layers at this level\n\n            if (!layer) {\n              return null;\n            } // log('new layer with id %s', layer.id);\n\n          }\n\n          if (tmpLayers || allowLazyQueueing) {\n            // log('queue ele %s in layer %s', ele.id(), layer.id);\n            self.queueLayer(layer, ele);\n          } else {\n            // log('draw ele %s in layer %s', ele.id(), layer.id);\n            self.drawEleInLayer(layer, ele, lvl, pxRatio);\n          }\n\n          layer.eles.push(ele);\n          caches[lvl] = layer;\n        } // log('--');\n\n\n        if (tmpLayers) {\n          // then we only queued the current layerset and can't draw it yet\n          return tmpLayers;\n        }\n\n        if (allowLazyQueueing) {\n          // log('lazy queue level', lvl);\n          return null;\n        }\n\n        return layers;\n      }; // a layer may want to use an ele cache of a higher level to avoid blurriness\n      // so the layer level might not equal the ele level\n\n\n      LTCp.getEleLevelForLayerLevel = function (lvl, pxRatio) {\n        return lvl;\n      };\n\n      function imgSmoothing(context, bool) {\n        if (context.imageSmoothingEnabled != null) {\n          context.imageSmoothingEnabled = bool;\n        } else {\n          context.webkitImageSmoothingEnabled = bool;\n          context.mozImageSmoothingEnabled = bool;\n          context.msImageSmoothingEnabled = bool;\n        }\n      }\n\n      LTCp.drawEleInLayer = function (layer, ele, lvl, pxRatio) {\n        var self = this;\n        var r = this.renderer;\n        var context = layer.context;\n        var bb = ele.boundingBox();\n\n        if (bb.w === 0 || bb.h === 0 || !ele.visible()) {\n          return;\n        }\n\n        var eleCache = self.eleTxrCache;\n        var reason = useHighQualityEleTxrReqs ? eleCache.reasons.highQuality : undefined;\n        lvl = self.getEleLevelForLayerLevel(lvl, pxRatio);\n        var cache = useEleTxrCaching ? eleCache.getElement(ele, bb, null, lvl, reason) : null;\n\n        if (cache) {\n          if (disableEleImgSmoothing) {\n            imgSmoothing(context, false);\n          }\n\n          context.drawImage(cache.texture.canvas, cache.x, 0, cache.width, cache.height, bb.x1, bb.y1, bb.w, bb.h);\n\n          if (disableEleImgSmoothing) {\n            imgSmoothing(context, true);\n          }\n        } else {\n          // if the element is not cacheable, then draw directly\n          r.drawElement(context, ele);\n        }\n      };\n\n      LTCp.levelIsComplete = function (lvl, eles) {\n        var self = this;\n        var layers = self.layersByLevel[lvl];\n\n        if (!layers || layers.length === 0) {\n          return false;\n        }\n\n        var numElesInLayers = 0;\n\n        for (var i = 0; i < layers.length; i++) {\n          var layer = layers[i]; // if there are any eles needed to be drawn yet, the level is not complete\n\n          if (layer.reqs > 0) {\n            return false;\n          } // if the layer is invalid, the level is not complete\n\n\n          if (layer.invalid) {\n            return false;\n          }\n\n          numElesInLayers += layer.eles.length;\n        } // we should have exactly the number of eles passed in to be complete\n\n\n        if (numElesInLayers !== eles.length) {\n          return false;\n        }\n\n        return true;\n      };\n\n      LTCp.validateLayersElesOrdering = function (lvl, eles) {\n        var layers = this.layersByLevel[lvl];\n\n        if (!layers) {\n          return;\n        } // if in a layer the eles are not in the same order, then the layer is invalid\n        // (i.e. there is an ele in between the eles in the layer)\n\n\n        for (var i = 0; i < layers.length; i++) {\n          var layer = layers[i];\n          var offset = -1; // find the offset\n\n          for (var j = 0; j < eles.length; j++) {\n            if (layer.eles[0] === eles[j]) {\n              offset = j;\n              break;\n            }\n          }\n\n          if (offset < 0) {\n            // then the layer has nonexistant elements and is invalid\n            this.invalidateLayer(layer);\n            continue;\n          } // the eles in the layer must be in the same continuous order, else the layer is invalid\n\n\n          var o = offset;\n\n          for (var j = 0; j < layer.eles.length; j++) {\n            if (layer.eles[j] !== eles[o + j]) {\n              // log('invalidate based on ordering', layer.id);\n              this.invalidateLayer(layer);\n              break;\n            }\n          }\n        }\n      };\n\n      LTCp.updateElementsInLayers = function (eles, update) {\n        var self = this;\n        var isEles = is.element(eles[0]); // collect udpated elements (cascaded from the layers) and update each\n        // layer itself along the way\n\n        for (var i = 0; i < eles.length; i++) {\n          var req = isEles ? null : eles[i];\n          var ele = isEles ? eles[i] : eles[i].ele;\n          var rs = ele._private.rscratch;\n          var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};\n\n          for (var l = minLvl; l <= maxLvl; l++) {\n            var layer = caches[l];\n\n            if (!layer) {\n              continue;\n            } // if update is a request from the ele cache, then it affects only\n            // the matching level\n\n\n            if (req && self.getEleLevelForLayerLevel(layer.level) !== req.level) {\n              continue;\n            }\n\n            update(layer, ele, req);\n          }\n        }\n      };\n\n      LTCp.haveLayers = function () {\n        var self = this;\n        var haveLayers = false;\n\n        for (var l = minLvl; l <= maxLvl; l++) {\n          var layers = self.layersByLevel[l];\n\n          if (layers && layers.length > 0) {\n            haveLayers = true;\n            break;\n          }\n        }\n\n        return haveLayers;\n      };\n\n      LTCp.invalidateElements = function (eles) {\n        var self = this;\n        self.lastInvalidationTime = util.performanceNow(); // log('update invalidate layer time from eles');\n\n        if (eles.length === 0 || !self.haveLayers()) {\n          return;\n        }\n\n        self.updateElementsInLayers(eles, function invalAssocLayers(layer, ele, req) {\n          self.invalidateLayer(layer);\n        });\n      };\n\n      LTCp.invalidateLayer = function (layer) {\n        // log('update invalidate layer time');\n        this.lastInvalidationTime = util.performanceNow();\n\n        if (layer.invalid) {\n          return;\n        } // save cycles\n\n\n        var lvl = layer.level;\n        var eles = layer.eles;\n        var layers = this.layersByLevel[lvl]; // log('invalidate layer', layer.id );\n\n        util.removeFromArray(layers, layer); // layer.eles = [];\n\n        layer.elesQueue = [];\n        layer.invalid = true;\n\n        if (layer.replacement) {\n          layer.replacement.invalid = true;\n        }\n\n        for (var i = 0; i < eles.length; i++) {\n          var caches = eles[i]._private.rscratch.imgLayerCaches;\n\n          if (caches) {\n            caches[lvl] = null;\n          }\n        }\n      };\n\n      LTCp.refineElementTextures = function (eles) {\n        var self = this; // log('refine', eles.length);\n\n        self.updateElementsInLayers(eles, function refineEachEle(layer, ele, req) {\n          var rLyr = layer.replacement;\n\n          if (!rLyr) {\n            rLyr = layer.replacement = self.makeLayer(layer.bb, layer.level);\n            rLyr.replaces = layer;\n            rLyr.eles = layer.eles; // log('make replacement layer %s for %s with level %s', rLyr.id, layer.id, rLyr.level);\n          }\n\n          if (!rLyr.reqs) {\n            for (var i = 0; i < rLyr.eles.length; i++) {\n              self.queueLayer(rLyr, rLyr.eles[i]);\n            } // log('queue replacement layer refinement', rLyr.id);\n\n          }\n        });\n      };\n\n      LTCp.setupEleCacheInvalidation = function () {\n        var self = this;\n        var eleDeqs = [];\n\n        if (!useEleTxrCaching) {\n          return;\n        }\n\n        var updatedElesInLayers = util.debounce(function () {\n          self.refineElementTextures(eleDeqs);\n          eleDeqs = [];\n        }, refineEleDebounceTime);\n        self.eleTxrCache.onDequeue(function (reqs) {\n          for (var i = 0; i < reqs.length; i++) {\n            eleDeqs.push(reqs[i]);\n          }\n\n          updatedElesInLayers();\n        });\n      };\n\n      LTCp.queueLayer = function (layer, ele) {\n        var self = this;\n        var q = self.layersQueue;\n        var elesQ = layer.elesQueue;\n        var hasId = elesQ.hasId = elesQ.hasId || {}; // if a layer is going to be replaced, queuing is a waste of time\n\n        if (layer.replacement) {\n          return;\n        }\n\n        if (ele) {\n          if (hasId[ele.id()]) {\n            return;\n          }\n\n          elesQ.push(ele);\n          hasId[ele.id()] = true;\n        }\n\n        if (layer.reqs) {\n          layer.reqs++;\n          q.updateItem(layer);\n        } else {\n          layer.reqs = 1;\n          q.push(layer);\n        }\n      };\n\n      LTCp.dequeue = function (pxRatio) {\n        var self = this;\n        var q = self.layersQueue;\n        var deqd = [];\n        var eleDeqs = 0;\n\n        while (eleDeqs < maxDeqSize) {\n          if (q.size() === 0) {\n            break;\n          }\n\n          var layer = q.peek(); // if a layer has been or will be replaced, then don't waste time with it\n\n          if (layer.replacement) {\n            // log('layer %s in queue skipped b/c it already has a replacement', layer.id);\n            q.pop();\n            continue;\n          } // if this is a replacement layer that has been superceded, then forget it\n\n\n          if (layer.replaces && layer !== layer.replaces.replacement) {\n            // log('layer is no longer the most uptodate replacement; dequeued', layer.id)\n            q.pop();\n            continue;\n          }\n\n          if (layer.invalid) {\n            // log('replacement layer %s is invalid; dequeued', layer.id);\n            q.pop();\n            continue;\n          }\n\n          var ele = layer.elesQueue.shift();\n\n          if (ele) {\n            // log('dequeue layer %s', layer.id);\n            self.drawEleInLayer(layer, ele, layer.level, pxRatio);\n            eleDeqs++;\n          }\n\n          if (deqd.length === 0) {\n            // we need only one entry in deqd to queue redrawing etc\n            deqd.push(true);\n          } // if the layer has all its eles done, then remove from the queue\n\n\n          if (layer.elesQueue.length === 0) {\n            q.pop();\n            layer.reqs = 0; // log('dequeue of layer %s complete', layer.id);\n            // when a replacement layer is dequeued, it replaces the old layer in the level\n\n            if (layer.replaces) {\n              self.applyLayerReplacement(layer);\n            }\n\n            self.requestRedraw();\n          }\n        }\n\n        return deqd;\n      };\n\n      LTCp.applyLayerReplacement = function (layer) {\n        var self = this;\n        var layersInLevel = self.layersByLevel[layer.level];\n        var replaced = layer.replaces;\n        var index = layersInLevel.indexOf(replaced); // if the replaced layer is not in the active list for the level, then replacing\n        // refs would be a mistake (i.e. overwriting the true active layer)\n\n        if (index < 0 || replaced.invalid) {\n          // log('replacement layer would have no effect', layer.id);\n          return;\n        }\n\n        layersInLevel[index] = layer; // replace level ref\n        // replace refs in eles\n\n        for (var i = 0; i < layer.eles.length; i++) {\n          var _p = layer.eles[i]._private;\n          var cache = _p.imgLayerCaches = _p.imgLayerCaches || {};\n\n          if (cache) {\n            cache[layer.level] = layer;\n          }\n        } // log('apply replacement layer %s over %s', layer.id, replaced.id);\n\n\n        self.requestRedraw();\n      };\n\n      LTCp.requestRedraw = util.debounce(function () {\n        var r = this.renderer;\n        r.redrawHint('eles', true);\n        r.redrawHint('drag', true);\n        r.redraw();\n      }, 100);\n      LTCp.setupDequeueing = defs.setupDequeueing({\n        deqRedrawThreshold: deqRedrawThreshold,\n        deqCost: deqCost,\n        deqAvgCost: deqAvgCost,\n        deqNoDrawCost: deqNoDrawCost,\n        deqFastCost: deqFastCost,\n        deq: function deq(self, pxRatio) {\n          return self.dequeue(pxRatio);\n        },\n        onDeqd: util.noop,\n        shouldRedraw: util.trueify,\n        priority: function priority(self) {\n          return self.renderer.beforeRenderPriorities.lyrTxrDeq;\n        }\n      });\n      module.exports = LayeredTextureCache;\n      /***/\n    },\n    /* 126 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var CRp = {};\n      var impl;\n\n      CRp.arrowShapeImpl = function (name) {\n        return (impl || (impl = {\n          'polygon': function polygon(context, points) {\n            for (var i = 0; i < points.length; i++) {\n              var pt = points[i];\n              context.lineTo(pt.x, pt.y);\n            }\n          },\n          'triangle-backcurve': function triangleBackcurve(context, points, controlPoint) {\n            var firstPt;\n\n            for (var i = 0; i < points.length; i++) {\n              var pt = points[i];\n\n              if (i === 0) {\n                firstPt = pt;\n              }\n\n              context.lineTo(pt.x, pt.y);\n            }\n\n            context.quadraticCurveTo(controlPoint.x, controlPoint.y, firstPt.x, firstPt.y);\n          },\n          'triangle-tee': function triangleTee(context, trianglePoints, teePoints) {\n            if (context.beginPath) {\n              context.beginPath();\n            }\n\n            var triPts = trianglePoints;\n\n            for (var i = 0; i < triPts.length; i++) {\n              var pt = triPts[i];\n              context.lineTo(pt.x, pt.y);\n            }\n\n            if (context.closePath) {\n              context.closePath();\n            }\n\n            if (context.beginPath) {\n              context.beginPath();\n            }\n\n            var teePts = teePoints;\n            var firstTeePt = teePoints[0];\n            context.moveTo(firstTeePt.x, firstTeePt.y);\n\n            for (var i = 0; i < teePts.length; i++) {\n              var pt = teePts[i];\n              context.lineTo(pt.x, pt.y);\n            }\n\n            if (context.closePath) {\n              context.closePath();\n            }\n          },\n          'triangle-cross': function triangleCross(context, trianglePoints, crossLinePoints) {\n            if (context.beginPath) {\n              context.beginPath();\n            }\n\n            var triPts = trianglePoints;\n\n            for (var i = 0; i < triPts.length; i++) {\n              var pt = triPts[i];\n              context.lineTo(pt.x, pt.y);\n            }\n\n            if (context.closePath) {\n              context.closePath();\n            }\n\n            if (context.beginPath) {\n              context.beginPath();\n            }\n\n            var teePts = crossLinePoints;\n            var firstTeePt = crossLinePoints[0];\n            context.moveTo(firstTeePt.x, firstTeePt.y);\n\n            for (var i = 0; i < teePts.length; i++) {\n              var pt = teePts[i];\n              context.lineTo(pt.x, pt.y);\n            }\n\n            if (context.closePath) {\n              context.closePath();\n            }\n          },\n          'circle': function circle(context, rx, ry, r) {\n            context.arc(rx, ry, r, 0, Math.PI * 2, false);\n          }\n        }))[name];\n      };\n\n      module.exports = CRp;\n      /***/\n    },\n    /* 127 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var math = __webpack_require__(2);\n\n      var CRp = {};\n\n      CRp.drawElement = function (context, ele, shiftToOriginWithBb, showLabel) {\n        var r = this;\n\n        if (ele.isNode()) {\n          r.drawNode(context, ele, shiftToOriginWithBb, showLabel);\n        } else {\n          r.drawEdge(context, ele, shiftToOriginWithBb, showLabel);\n        }\n      };\n\n      CRp.drawCachedElement = function (context, ele, pxRatio, extent) {\n        var r = this;\n        var bb = ele.boundingBox();\n\n        if (bb.w === 0 || bb.h === 0) {\n          return;\n        }\n\n        if (!extent || math.boundingBoxesIntersect(bb, extent)) {\n          var cache = r.data.eleTxrCache.getElement(ele, bb, pxRatio);\n\n          if (cache != null) {\n            context.drawImage(cache.texture.canvas, cache.x, 0, cache.width, cache.height, bb.x1, bb.y1, bb.w, bb.h);\n          } else {\n            // if the element is not cacheable, then draw directly\n            r.drawElement(context, ele);\n          }\n        }\n      };\n\n      CRp.drawElements = function (context, eles) {\n        var r = this;\n\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n          r.drawElement(context, ele);\n        }\n      };\n\n      CRp.drawCachedElements = function (context, eles, pxRatio, extent) {\n        var r = this;\n\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n          r.drawCachedElement(context, ele, pxRatio, extent);\n        }\n      };\n\n      CRp.drawCachedNodes = function (context, eles, pxRatio, extent) {\n        var r = this;\n\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n\n          if (!ele.isNode()) {\n            continue;\n          }\n\n          r.drawCachedElement(context, ele, pxRatio, extent);\n        }\n      };\n\n      CRp.drawLayeredElements = function (context, eles, pxRatio, extent) {\n        var r = this;\n        var layers = r.data.lyrTxrCache.getLayers(eles, pxRatio);\n\n        if (layers) {\n          for (var i = 0; i < layers.length; i++) {\n            var layer = layers[i];\n            var bb = layer.bb;\n\n            if (bb.w === 0 || bb.h === 0) {\n              continue;\n            }\n\n            context.drawImage(layer.canvas, bb.x1, bb.y1, bb.w, bb.h);\n          }\n        } else {\n          // fall back on plain caching if no layers\n          r.drawCachedElements(context, eles, pxRatio, extent);\n        }\n      };\n\n      CRp.drawDebugPoints = function (context, eles) {\n        var draw = function draw(x, y, color) {\n          context.fillStyle = color;\n          context.fillRect(x - 1, y - 1, 3, 3);\n        };\n\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n          var rs = ele._private.rscratch;\n\n          if (ele.isNode()) {\n            var p = ele.position();\n            draw(p.x, p.y, 'magenta');\n          } else {\n            var pts = rs.allpts;\n\n            for (var j = 0; j + 1 < pts.length; j += 2) {\n              var x = pts[j];\n              var y = pts[j + 1];\n              draw(x, y, 'cyan');\n            }\n\n            draw(rs.midX, rs.midY, 'yellow');\n          }\n        }\n      };\n\n      module.exports = CRp;\n      /***/\n    },\n    /* 128 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var CRp = {};\n\n      CRp.drawEdge = function (context, edge, shiftToOriginWithBb, drawLabel) {\n        var r = this;\n        var rs = edge._private.rscratch;\n        var usePaths = r.usePaths();\n\n        if (!edge.visible()) {\n          return;\n        } // if bezier ctrl pts can not be calculated, then die\n\n\n        if (rs.badLine || rs.allpts == null || isNaN(rs.allpts[0])) {\n          // isNaN in case edge is impossible and browser bugs (e.g. safari)\n          return;\n        }\n\n        var bb = void 0;\n\n        if (shiftToOriginWithBb) {\n          bb = shiftToOriginWithBb;\n          context.translate(-bb.x1, -bb.y1);\n        }\n\n        var overlayPadding = edge.pstyle('overlay-padding').pfValue;\n        var overlayWidth = 2 * overlayPadding;\n        var overlayOpacity = edge.pstyle('overlay-opacity').value;\n        var overlayColor = edge.pstyle('overlay-color').value;\n        var lineColor = edge.pstyle('line-color').value;\n        var opacity = edge.pstyle('opacity').value;\n        var lineStyle = edge.pstyle('line-style').value;\n        var edgeWidth = edge.pstyle('width').pfValue;\n\n        var drawLine = function drawLine() {\n          var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;\n          context.lineWidth = edgeWidth;\n          context.lineCap = 'butt';\n          r.strokeStyle(context, lineColor[0], lineColor[1], lineColor[2], strokeOpacity);\n          r.drawEdgePath(edge, context, rs.allpts, lineStyle);\n        };\n\n        var drawOverlay = function drawOverlay() {\n          var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : overlayOpacity;\n          context.lineWidth = overlayWidth;\n\n          if (rs.edgeType === 'self' && !usePaths) {\n            context.lineCap = 'butt';\n          } else {\n            context.lineCap = 'round';\n          }\n\n          r.strokeStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], strokeOpacity);\n          r.drawEdgePath(edge, context, rs.allpts, 'solid');\n        };\n\n        var drawArrows = function drawArrows() {\n          var arrowOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;\n          r.drawArrowheads(context, edge, arrowOpacity);\n        };\n\n        var drawText = function drawText() {\n          r.drawElementText(context, edge, drawLabel);\n        };\n\n        context.lineJoin = 'round';\n        var ghost = edge.pstyle('ghost').value === 'yes';\n\n        if (ghost) {\n          var gx = edge.pstyle('ghost-offset-x').pfValue;\n          var gy = edge.pstyle('ghost-offset-y').pfValue;\n          var ghostOpacity = edge.pstyle('ghost-opacity').value;\n          var effectiveGhostOpacity = opacity * ghostOpacity;\n          context.translate(gx, gy);\n          drawLine(effectiveGhostOpacity);\n          drawArrows(effectiveGhostOpacity);\n          context.translate(-gx, -gy);\n        }\n\n        drawLine();\n        drawArrows();\n        drawOverlay();\n        drawText();\n\n        if (shiftToOriginWithBb) {\n          context.translate(bb.x1, bb.y1);\n        }\n      };\n\n      CRp.drawEdgePath = function (edge, context, pts, type) {\n        var rs = edge._private.rscratch;\n        var canvasCxt = context;\n        var path = void 0;\n        var pathCacheHit = false;\n        var usePaths = this.usePaths();\n\n        if (usePaths) {\n          var pathCacheKey = pts.join('$');\n          var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;\n\n          if (keyMatches) {\n            path = context = rs.pathCache;\n            pathCacheHit = true;\n          } else {\n            path = context = new Path2D(); // eslint-disable-line no-undef\n\n            rs.pathCacheKey = pathCacheKey;\n            rs.pathCache = path;\n          }\n        }\n\n        if (canvasCxt.setLineDash) {\n          // for very outofdate browsers\n          switch (type) {\n            case 'dotted':\n              canvasCxt.setLineDash([1, 1]);\n              break;\n\n            case 'dashed':\n              canvasCxt.setLineDash([6, 3]);\n              break;\n\n            case 'solid':\n              canvasCxt.setLineDash([]);\n              break;\n          }\n        }\n\n        if (!pathCacheHit && !rs.badLine) {\n          if (context.beginPath) {\n            context.beginPath();\n          }\n\n          context.moveTo(pts[0], pts[1]);\n\n          switch (rs.edgeType) {\n            case 'bezier':\n            case 'self':\n            case 'compound':\n            case 'multibezier':\n              for (var i = 2; i + 3 < pts.length; i += 4) {\n                context.quadraticCurveTo(pts[i], pts[i + 1], pts[i + 2], pts[i + 3]);\n              }\n\n              break;\n\n            case 'straight':\n            case 'segments':\n            case 'haystack':\n              for (var _i = 2; _i + 1 < pts.length; _i += 2) {\n                context.lineTo(pts[_i], pts[_i + 1]);\n              }\n\n              break;\n          }\n        }\n\n        context = canvasCxt;\n\n        if (usePaths) {\n          context.stroke(path);\n        } else {\n          context.stroke();\n        } // reset any line dashes\n\n\n        if (context.setLineDash) {\n          // for very outofdate browsers\n          context.setLineDash([]);\n        }\n      };\n\n      CRp.drawArrowheads = function (context, edge, opacity) {\n        var rs = edge._private.rscratch;\n        var isHaystack = rs.edgeType === 'haystack';\n\n        if (!isHaystack) {\n          this.drawArrowhead(context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle, opacity);\n        }\n\n        this.drawArrowhead(context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle, opacity);\n        this.drawArrowhead(context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle, opacity);\n\n        if (!isHaystack) {\n          this.drawArrowhead(context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle, opacity);\n        }\n      };\n\n      CRp.drawArrowhead = function (context, edge, prefix, x, y, angle, opacity) {\n        if (isNaN(x) || x == null || isNaN(y) || y == null || isNaN(angle) || angle == null) {\n          return;\n        }\n\n        var self = this;\n        var arrowShape = edge.pstyle(prefix + '-arrow-shape').value;\n\n        if (arrowShape === 'none') {\n          return;\n        }\n\n        var arrowClearFill = edge.pstyle(prefix + '-arrow-fill').value === 'hollow' ? 'both' : 'filled';\n        var arrowFill = edge.pstyle(prefix + '-arrow-fill').value;\n        var edgeWidth = edge.pstyle('width').pfValue;\n        var edgeOpacity = edge.pstyle('opacity').value;\n\n        if (opacity === undefined) {\n          opacity = edgeOpacity;\n        }\n\n        var gco = context.globalCompositeOperation;\n\n        if (opacity !== 1 || arrowFill === 'hollow') {\n          // then extra clear is needed\n          context.globalCompositeOperation = 'destination-out';\n          self.fillStyle(context, 255, 255, 255, 1);\n          self.strokeStyle(context, 255, 255, 255, 1);\n          self.drawArrowShape(edge, prefix, context, arrowClearFill, edgeWidth, arrowShape, x, y, angle);\n          context.globalCompositeOperation = gco;\n        } // otherwise, the opaque arrow clears it for free :)\n\n\n        var color = edge.pstyle(prefix + '-arrow-color').value;\n        self.fillStyle(context, color[0], color[1], color[2], opacity);\n        self.strokeStyle(context, color[0], color[1], color[2], opacity);\n        self.drawArrowShape(edge, prefix, context, arrowFill, edgeWidth, arrowShape, x, y, angle);\n      };\n\n      CRp.drawArrowShape = function (edge, arrowType, context, fill, edgeWidth, shape, x, y, angle) {\n        var r = this;\n        var usePaths = this.usePaths();\n        var rs = edge._private.rscratch;\n        var pathCacheHit = false;\n        var path = void 0;\n        var canvasContext = context;\n        var translation = {\n          x: x,\n          y: y\n        };\n        var scale = edge.pstyle('arrow-scale').value;\n        var size = this.getArrowWidth(edgeWidth, scale);\n        var shapeImpl = r.arrowShapes[shape];\n\n        if (usePaths) {\n          var pathCacheKey = size + '$' + shape + '$' + angle + '$' + x + '$' + y;\n          rs.arrowPathCacheKey = rs.arrowPathCacheKey || {};\n          rs.arrowPathCache = rs.arrowPathCache || {};\n          var alreadyCached = rs.arrowPathCacheKey[arrowType] === pathCacheKey;\n\n          if (alreadyCached) {\n            path = context = rs.arrowPathCache[arrowType];\n            pathCacheHit = true;\n          } else {\n            path = context = new Path2D(); // eslint-disable-line no-undef\n\n            rs.arrowPathCacheKey[arrowType] = pathCacheKey;\n            rs.arrowPathCache[arrowType] = path;\n          }\n        }\n\n        if (context.beginPath) {\n          context.beginPath();\n        }\n\n        if (!pathCacheHit) {\n          shapeImpl.draw(context, size, angle, translation, edgeWidth);\n        }\n\n        if (!shapeImpl.leavePathOpen && context.closePath) {\n          context.closePath();\n        }\n\n        context = canvasContext;\n\n        if (fill === 'filled' || fill === 'both') {\n          if (usePaths) {\n            context.fill(path);\n          } else {\n            context.fill();\n          }\n        }\n\n        if (fill === 'hollow' || fill === 'both') {\n          context.lineWidth = shapeImpl.matchEdgeWidth ? edgeWidth : 1;\n          context.lineJoin = 'miter';\n\n          if (usePaths) {\n            context.stroke(path);\n          } else {\n            context.stroke();\n          }\n        }\n      };\n\n      module.exports = CRp;\n      /***/\n    },\n    /* 129 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var CRp = {};\n\n      CRp.safeDrawImage = function (context, img, ix, iy, iw, ih, x, y, w, h) {\n        var r = this; // detect problematic cases for old browsers with bad images (cheaper than try-catch)\n\n        if (iw <= 0 || ih <= 0 || w <= 0 || h <= 0) {\n          return;\n        }\n\n        context.drawImage(img, ix, iy, iw, ih, x, y, w, h);\n      };\n\n      CRp.drawInscribedImage = function (context, img, node, index, nodeOpacity) {\n        var r = this;\n        var pos = node.position();\n        var nodeX = pos.x;\n        var nodeY = pos.y;\n        var styleObj = node.cy().style();\n        var getIndexedStyle = styleObj.getIndexedStyle.bind(styleObj);\n        var fit = getIndexedStyle(node, 'background-fit', 'value', index);\n        var repeat = getIndexedStyle(node, 'background-repeat', 'value', index);\n        var nodeW = node.width();\n        var nodeH = node.height();\n        var paddingX2 = node.padding() * 2;\n        var nodeTW = nodeW + (getIndexedStyle(node, 'background-width-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);\n        var nodeTH = nodeH + (getIndexedStyle(node, 'background-height-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);\n        var rs = node._private.rscratch;\n        var clip = node.pstyle('background-clip').value;\n        var shouldClip = clip === 'node';\n        var imgOpacity = getIndexedStyle(node, 'background-image-opacity', 'value', index) * nodeOpacity;\n        var imgW = img.width || img.cachedW;\n        var imgH = img.height || img.cachedH; // workaround for broken browsers like ie\n\n        if (null == imgW || null == imgH) {\n          document.body.appendChild(img); // eslint-disable-line no-undef\n\n          imgW = img.cachedW = img.width || img.offsetWidth;\n          imgH = img.cachedH = img.height || img.offsetHeight;\n          document.body.removeChild(img); // eslint-disable-line no-undef\n        }\n\n        var w = imgW;\n        var h = imgH;\n\n        if (getIndexedStyle(node, 'background-width', 'value', index) !== 'auto') {\n          if (getIndexedStyle(node, 'background-width', 'units', index) === '%') {\n            w = getIndexedStyle(node, 'background-width', 'pfValue', index) * nodeTW;\n          } else {\n            w = getIndexedStyle(node, 'background-width', 'pfValue', index);\n          }\n        }\n\n        if (getIndexedStyle(node, 'background-height', 'value', index) !== 'auto') {\n          if (getIndexedStyle(node, 'background-height', 'units', index) === '%') {\n            h = getIndexedStyle(node, 'background-height', 'pfValue', index) * nodeTH;\n          } else {\n            h = getIndexedStyle(node, 'background-height', 'pfValue', index);\n          }\n        }\n\n        if (w === 0 || h === 0) {\n          return; // no point in drawing empty image (and chrome is broken in this case)\n        }\n\n        if (fit === 'contain') {\n          var scale = Math.min(nodeTW / w, nodeTH / h);\n          w *= scale;\n          h *= scale;\n        } else if (fit === 'cover') {\n          var scale = Math.max(nodeTW / w, nodeTH / h);\n          w *= scale;\n          h *= scale;\n        }\n\n        var x = nodeX - nodeTW / 2; // left\n\n        if (getIndexedStyle(node, 'background-position-x', 'units', index) === '%') {\n          x += (nodeTW - w) * getIndexedStyle(node, 'background-position-x', 'pfValue', index);\n        } else {\n          x += getIndexedStyle(node, 'background-position-x', 'pfValue', index);\n        }\n\n        var y = nodeY - nodeTH / 2; // top\n\n        if (getIndexedStyle(node, 'background-position-y', 'units', index) === '%') {\n          y += (nodeTH - h) * getIndexedStyle(node, 'background-position-y', 'pfValue', index);\n        } else {\n          y += getIndexedStyle(node, 'background-position-y', 'pfValue', index);\n        }\n\n        if (rs.pathCache) {\n          x -= nodeX;\n          y -= nodeY;\n          nodeX = 0;\n          nodeY = 0;\n        }\n\n        var gAlpha = context.globalAlpha;\n        context.globalAlpha = imgOpacity;\n\n        if (repeat === 'no-repeat') {\n          if (shouldClip) {\n            context.save();\n\n            if (rs.pathCache) {\n              context.clip(rs.pathCache);\n            } else {\n              r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);\n              context.clip();\n            }\n          }\n\n          r.safeDrawImage(context, img, 0, 0, imgW, imgH, x, y, w, h);\n\n          if (shouldClip) {\n            context.restore();\n          }\n        } else {\n          var pattern = context.createPattern(img, repeat);\n          context.fillStyle = pattern;\n          r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);\n          context.translate(x, y);\n          context.fill();\n          context.translate(-x, -y);\n        }\n\n        context.globalAlpha = gAlpha;\n      };\n\n      module.exports = CRp;\n      /***/\n    },\n    /* 130 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var util = __webpack_require__(1);\n\n      var math = __webpack_require__(2);\n\n      var CRp = {};\n\n      CRp.eleTextBiggerThanMin = function (ele, scale) {\n        if (!scale) {\n          var zoom = ele.cy().zoom();\n          var pxRatio = this.getPixelRatio();\n          var lvl = Math.ceil(math.log2(zoom * pxRatio)); // the effective texture level\n\n          scale = Math.pow(2, lvl);\n        }\n\n        var computedSize = ele.pstyle('font-size').pfValue * scale;\n        var minSize = ele.pstyle('min-zoomed-font-size').pfValue;\n\n        if (computedSize < minSize) {\n          return false;\n        }\n\n        return true;\n      };\n\n      CRp.drawElementText = function (context, ele, force) {\n        var r = this;\n\n        if (force === undefined) {\n          if (!r.eleTextBiggerThanMin(ele)) {\n            return;\n          }\n        } else {\n          if (!force) {\n            return;\n          }\n        }\n\n        if (ele.isNode()) {\n          var label = ele.pstyle('label');\n\n          if (!label || !label.value) {\n            return;\n          }\n\n          var textHalign = ele.pstyle('text-halign').strValue;\n          var textValign = ele.pstyle('text-valign').strValue;\n\n          switch (textHalign) {\n            case 'left':\n              context.textAlign = 'right';\n              break;\n\n            case 'right':\n              context.textAlign = 'left';\n              break;\n\n            default:\n              // e.g. center\n              context.textAlign = 'center';\n          }\n\n          context.textBaseline = 'bottom';\n        } else {\n          var label = ele.pstyle('label');\n          var srcLabel = ele.pstyle('source-label');\n          var tgtLabel = ele.pstyle('target-label');\n\n          if ((!label || !label.value) && (!srcLabel || !srcLabel.value) && (!tgtLabel || !tgtLabel.value)) {\n            return;\n          }\n\n          context.textAlign = 'center';\n          context.textBaseline = 'bottom';\n        }\n\n        r.drawText(context, ele);\n\n        if (ele.isEdge()) {\n          r.drawText(context, ele, 'source');\n          r.drawText(context, ele, 'target');\n        }\n      };\n\n      CRp.drawNodeText = CRp.drawEdgeText = CRp.drawElementText;\n\n      CRp.getFontCache = function (context) {\n        var cache;\n        this.fontCaches = this.fontCaches || [];\n\n        for (var i = 0; i < this.fontCaches.length; i++) {\n          cache = this.fontCaches[i];\n\n          if (cache.context === context) {\n            return cache;\n          }\n        }\n\n        cache = {\n          context: context\n        };\n        this.fontCaches.push(cache);\n        return cache;\n      }; // set up canvas context with font\n      // returns transformed text string\n\n\n      CRp.setupTextStyle = function (context, ele) {\n        // Font style\n        var parentOpacity = ele.effectiveOpacity();\n        var labelStyle = ele.pstyle('font-style').strValue;\n        var labelSize = ele.pstyle('font-size').pfValue + 'px';\n        var labelFamily = ele.pstyle('font-family').strValue;\n        var labelWeight = ele.pstyle('font-weight').strValue;\n        var opacity = ele.pstyle('text-opacity').value * ele.pstyle('opacity').value * parentOpacity;\n        var outlineOpacity = ele.pstyle('text-outline-opacity').value * opacity;\n        var color = ele.pstyle('color').value;\n        var outlineColor = ele.pstyle('text-outline-color').value;\n        var fontCacheKey = ele._private.fontKey;\n        var cache = this.getFontCache(context);\n\n        if (cache.key !== fontCacheKey) {\n          context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;\n          cache.key = fontCacheKey;\n        } // Calculate text draw position based on text alignment\n        // so text outlines aren't jagged\n\n\n        context.lineJoin = 'round';\n        this.fillStyle(context, color[0], color[1], color[2], opacity);\n        this.strokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);\n      };\n\n      function roundRect(ctx, x, y, width, height, radius) {\n        var radius = radius || 5;\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + width - radius, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n        ctx.lineTo(x + width, y + height - radius);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n        ctx.lineTo(x + radius, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n        ctx.fill();\n      } // Draw text\n\n\n      CRp.drawText = function (context, ele, prefix) {\n        var _p = ele._private;\n        var rscratch = _p.rscratch;\n        var parentOpacity = ele.effectiveOpacity();\n\n        if (parentOpacity === 0 || ele.pstyle('text-opacity').value === 0) {\n          return;\n        }\n\n        var textX = util.getPrefixedProperty(rscratch, 'labelX', prefix);\n        var textY = util.getPrefixedProperty(rscratch, 'labelY', prefix);\n        var text = this.getLabelText(ele, prefix);\n\n        if (text != null && text !== '' && !isNaN(textX) && !isNaN(textY)) {\n          this.setupTextStyle(context, ele);\n          var pdash = prefix ? prefix + '-' : '';\n          var textW = util.getPrefixedProperty(rscratch, 'labelWidth', prefix);\n          var textH = util.getPrefixedProperty(rscratch, 'labelHeight', prefix);\n          var textAngle = util.getPrefixedProperty(rscratch, 'labelAngle', prefix);\n          var marginX = ele.pstyle(pdash + 'text-margin-x').pfValue;\n          var marginY = ele.pstyle(pdash + 'text-margin-y').pfValue;\n          var isEdge = ele.isEdge();\n          var isNode = ele.isNode();\n          var halign = ele.pstyle('text-halign').value;\n          var valign = ele.pstyle('text-valign').value;\n\n          if (isEdge) {\n            halign = 'center';\n            valign = 'center';\n          }\n\n          textX += marginX;\n          textY += marginY;\n          var rotation = ele.pstyle(pdash + 'text-rotation');\n          var theta;\n\n          if (rotation.strValue === 'autorotate') {\n            theta = isEdge ? textAngle : 0;\n          } else if (rotation.strValue === 'none') {\n            theta = 0;\n          } else {\n            theta = rotation.pfValue;\n          }\n\n          if (theta !== 0) {\n            var orgTextX = textX;\n            var orgTextY = textY;\n            context.translate(orgTextX, orgTextY);\n            context.rotate(theta);\n            textX = 0;\n            textY = 0;\n          }\n\n          switch (valign) {\n            case 'top':\n              break;\n\n            case 'center':\n              textY += textH / 2;\n              break;\n\n            case 'bottom':\n              textY += textH;\n              break;\n          }\n\n          var backgroundOpacity = ele.pstyle('text-background-opacity').value;\n          var borderOpacity = ele.pstyle('text-border-opacity').value;\n          var textBorderWidth = ele.pstyle('text-border-width').pfValue;\n          var backgroundPadding = ele.pstyle('text-background-padding').pfValue;\n\n          if (backgroundOpacity > 0 || textBorderWidth > 0 && borderOpacity > 0) {\n            var bgX = textX - backgroundPadding;\n\n            switch (halign) {\n              case 'left':\n                bgX -= textW;\n                break;\n\n              case 'center':\n                bgX -= textW / 2;\n                break;\n\n              case 'right':\n                break;\n            }\n\n            var bgY = textY - textH - backgroundPadding;\n            var bgW = textW + 2 * backgroundPadding;\n            var bgH = textH + 2 * backgroundPadding;\n\n            if (backgroundOpacity > 0) {\n              var textFill = context.fillStyle;\n              var textBackgroundColor = ele.pstyle('text-background-color').value;\n              context.fillStyle = 'rgba(' + textBackgroundColor[0] + ',' + textBackgroundColor[1] + ',' + textBackgroundColor[2] + ',' + backgroundOpacity * parentOpacity + ')';\n              var styleShape = ele.pstyle('text-background-shape').strValue;\n\n              if (styleShape == 'roundrectangle') {\n                roundRect(context, bgX, bgY, bgW, bgH, 2);\n              } else {\n                context.fillRect(bgX, bgY, bgW, bgH);\n              }\n\n              context.fillStyle = textFill;\n            }\n\n            if (textBorderWidth > 0 && borderOpacity > 0) {\n              var textStroke = context.strokeStyle;\n              var textLineWidth = context.lineWidth;\n              var textBorderColor = ele.pstyle('text-border-color').value;\n              var textBorderStyle = ele.pstyle('text-border-style').value;\n              context.strokeStyle = 'rgba(' + textBorderColor[0] + ',' + textBorderColor[1] + ',' + textBorderColor[2] + ',' + borderOpacity * parentOpacity + ')';\n              context.lineWidth = textBorderWidth;\n\n              if (context.setLineDash) {\n                // for very outofdate browsers\n                switch (textBorderStyle) {\n                  case 'dotted':\n                    context.setLineDash([1, 1]);\n                    break;\n\n                  case 'dashed':\n                    context.setLineDash([4, 2]);\n                    break;\n\n                  case 'double':\n                    context.lineWidth = textBorderWidth / 4; // 50% reserved for white between the two borders\n\n                    context.setLineDash([]);\n                    break;\n\n                  case 'solid':\n                    context.setLineDash([]);\n                    break;\n                }\n              }\n\n              context.strokeRect(bgX, bgY, bgW, bgH);\n\n              if (textBorderStyle === 'double') {\n                var whiteWidth = textBorderWidth / 2;\n                context.strokeRect(bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2);\n              }\n\n              if (context.setLineDash) {\n                // for very outofdate browsers\n                context.setLineDash([]);\n              }\n\n              context.lineWidth = textLineWidth;\n              context.strokeStyle = textStroke;\n            }\n          }\n\n          var lineWidth = 2 * ele.pstyle('text-outline-width').pfValue; // *2 b/c the stroke is drawn centred on the middle\n\n          if (lineWidth > 0) {\n            context.lineWidth = lineWidth;\n          }\n\n          if (ele.pstyle('text-wrap').value === 'wrap') {\n            var lines = util.getPrefixedProperty(rscratch, 'labelWrapCachedLines', prefix);\n            var lineHeight = textH / lines.length;\n\n            switch (valign) {\n              case 'top':\n                textY -= (lines.length - 1) * lineHeight;\n                break;\n\n              case 'center':\n              case 'bottom':\n                textY -= (lines.length - 1) * lineHeight;\n                break;\n            }\n\n            for (var l = 0; l < lines.length; l++) {\n              if (lineWidth > 0) {\n                context.strokeText(lines[l], textX, textY);\n              }\n\n              context.fillText(lines[l], textX, textY);\n              textY += lineHeight;\n            }\n          } else {\n            if (lineWidth > 0) {\n              context.strokeText(text, textX, textY);\n            }\n\n            context.fillText(text, textX, textY);\n          }\n\n          if (theta !== 0) {\n            context.rotate(-theta);\n            context.translate(-orgTextX, -orgTextY);\n          }\n        }\n      };\n\n      module.exports = CRp;\n      /***/\n    },\n    /* 131 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /* global Path2D */\n\n      var is = __webpack_require__(0);\n\n      var CRp = {};\n\n      CRp.drawNode = function (context, node, shiftToOriginWithBb, drawLabel) {\n        var r = this;\n        var nodeWidth = void 0,\n            nodeHeight = void 0;\n        var _p = node._private;\n        var rs = _p.rscratch;\n        var pos = node.position();\n\n        if (!is.number(pos.x) || !is.number(pos.y)) {\n          return; // can't draw node with undefined position\n        }\n\n        if (!node.visible()) {\n          return;\n        }\n\n        var parentOpacity = node.effectiveOpacity();\n        var usePaths = r.usePaths();\n        var path = void 0;\n        var pathCacheHit = false;\n        var padding = node.padding();\n        nodeWidth = node.width() + 2 * padding;\n        nodeHeight = node.height() + 2 * padding; //\n        // setup shift\n\n        var bb = void 0;\n\n        if (shiftToOriginWithBb) {\n          bb = shiftToOriginWithBb;\n          context.translate(-bb.x1, -bb.y1);\n        } //\n        // load bg image\n\n\n        var bgImgProp = node.pstyle('background-image');\n        var urls = bgImgProp.value;\n        var urlDefined = new Array(urls.length);\n        var image = new Array(urls.length);\n        var numImages = 0;\n\n        for (var i = 0; i < urls.length; i++) {\n          var url = urls[i];\n          var defd = urlDefined[i] = url != null && url !== 'none';\n\n          if (defd) {\n            var bgImgCrossOrigin = node.cy().style().getIndexedStyle(node, 'background-image-crossorigin', 'value', i);\n            numImages++; // get image, and if not loaded then ask to redraw when later loaded\n\n            image[i] = r.getCachedImage(url, bgImgCrossOrigin, function () {\n              node.emitAndNotify('background');\n            });\n          }\n        } //\n        // setup styles\n\n\n        var darkness = node.pstyle('background-blacken').value;\n        var borderWidth = node.pstyle('border-width').pfValue;\n        var bgColor = node.pstyle('background-color').value;\n        var bgOpacity = node.pstyle('background-opacity').value * parentOpacity;\n        var borderColor = node.pstyle('border-color').value;\n        var borderStyle = node.pstyle('border-style').value;\n        var borderOpacity = node.pstyle('border-opacity').value * parentOpacity;\n        context.lineJoin = 'miter'; // so borders are square with the node shape\n\n        var setupShapeColor = function setupShapeColor() {\n          var bgOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : bgOpacity;\n          r.fillStyle(context, bgColor[0], bgColor[1], bgColor[2], bgOpy);\n        };\n\n        var setupBorderColor = function setupBorderColor() {\n          var bdrOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : borderOpacity;\n          r.strokeStyle(context, borderColor[0], borderColor[1], borderColor[2], bdrOpy);\n        }; //\n        // setup shape\n\n\n        var styleShape = node.pstyle('shape').strValue;\n        var shapePts = node.pstyle('shape-polygon-points').pfValue;\n\n        if (usePaths) {\n          var pathCacheKey = styleShape + '$' + nodeWidth + '$' + nodeHeight + (styleShape === 'polygon' ? '$' + shapePts.join('$') : '');\n          context.translate(pos.x, pos.y);\n\n          if (rs.pathCacheKey === pathCacheKey) {\n            path = rs.pathCache;\n            pathCacheHit = true;\n          } else {\n            path = new Path2D();\n            rs.pathCacheKey = pathCacheKey;\n            rs.pathCache = path;\n          }\n        }\n\n        var drawShape = function drawShape() {\n          if (!pathCacheHit) {\n            var npos = pos;\n\n            if (usePaths) {\n              npos = {\n                x: 0,\n                y: 0\n              };\n            }\n\n            r.nodeShapes[r.getNodeShape(node)].draw(path || context, npos.x, npos.y, nodeWidth, nodeHeight);\n          }\n\n          if (usePaths) {\n            context.fill(path);\n          } else {\n            context.fill();\n          }\n        };\n\n        var drawImages = function drawImages() {\n          var nodeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : parentOpacity;\n          var prevBging = _p.backgrounding;\n          var totalCompleted = 0;\n\n          for (var _i = 0; _i < image.length; _i++) {\n            if (urlDefined[_i] && image[_i].complete && !image[_i].error) {\n              totalCompleted++;\n              r.drawInscribedImage(context, image[_i], node, _i, nodeOpacity);\n            }\n          }\n\n          _p.backgrounding = !(totalCompleted === numImages);\n\n          if (prevBging !== _p.backgrounding) {\n            // update style b/c :backgrounding state changed\n            node.updateStyle(false);\n          }\n        };\n\n        var drawPie = function drawPie() {\n          var redrawShape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n          var pieOpacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : parentOpacity;\n\n          if (r.hasPie(node)) {\n            r.drawPie(context, node, pieOpacity); // redraw/restore path if steps after pie need it\n\n            if (redrawShape) {\n              if (!usePaths) {\n                r.nodeShapes[r.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight);\n              }\n            }\n          }\n        };\n\n        var darken = function darken() {\n          var darkenOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : parentOpacity;\n          var opacity = (darkness > 0 ? darkness : -darkness) * darkenOpacity;\n          var c = darkness > 0 ? 0 : 255;\n\n          if (darkness !== 0) {\n            r.fillStyle(context, c, c, c, opacity);\n\n            if (usePaths) {\n              context.fill(path);\n            } else {\n              context.fill();\n            }\n          }\n        };\n\n        var drawBorder = function drawBorder() {\n          if (borderWidth > 0) {\n            context.lineWidth = borderWidth;\n            context.lineCap = 'butt';\n\n            if (context.setLineDash) {\n              // for very outofdate browsers\n              switch (borderStyle) {\n                case 'dotted':\n                  context.setLineDash([1, 1]);\n                  break;\n\n                case 'dashed':\n                  context.setLineDash([4, 2]);\n                  break;\n\n                case 'solid':\n                case 'double':\n                  context.setLineDash([]);\n                  break;\n              }\n            }\n\n            if (usePaths) {\n              context.stroke(path);\n            } else {\n              context.stroke();\n            }\n\n            if (borderStyle === 'double') {\n              context.lineWidth = borderWidth / 3;\n              var gco = context.globalCompositeOperation;\n              context.globalCompositeOperation = 'destination-out';\n\n              if (usePaths) {\n                context.stroke(path);\n              } else {\n                context.stroke();\n              }\n\n              context.globalCompositeOperation = gco;\n            } // reset in case we changed the border style\n\n\n            if (context.setLineDash) {\n              // for very outofdate browsers\n              context.setLineDash([]);\n            }\n          }\n        };\n\n        var drawOverlay = function drawOverlay() {\n          var overlayPadding = node.pstyle('overlay-padding').pfValue;\n          var overlayOpacity = node.pstyle('overlay-opacity').value;\n          var overlayColor = node.pstyle('overlay-color').value;\n\n          if (overlayOpacity > 0) {\n            r.fillStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);\n            r.nodeShapes['roundrectangle'].draw(context, pos.x, pos.y, nodeWidth + overlayPadding * 2, nodeHeight + overlayPadding * 2);\n            context.fill();\n          }\n        };\n\n        var drawText = function drawText() {\n          r.drawElementText(context, node, drawLabel);\n        };\n\n        var ghost = node.pstyle('ghost').value === 'yes';\n\n        if (ghost) {\n          var gx = node.pstyle('ghost-offset-x').pfValue;\n          var gy = node.pstyle('ghost-offset-y').pfValue;\n          var ghostOpacity = node.pstyle('ghost-opacity').value;\n          var effGhostOpacity = ghostOpacity * parentOpacity;\n          context.translate(gx, gy);\n          setupShapeColor(ghostOpacity * bgOpacity);\n          drawShape();\n          drawImages(effGhostOpacity);\n          drawPie(darkness !== 0 || borderWidth !== 0);\n          darken(effGhostOpacity);\n          setupBorderColor(ghostOpacity * borderOpacity);\n          drawBorder();\n          context.translate(-gx, -gy);\n        }\n\n        setupShapeColor();\n        drawShape();\n        drawImages();\n        drawPie(darkness !== 0 || borderWidth !== 0);\n        darken();\n        setupBorderColor();\n        drawBorder();\n\n        if (usePaths) {\n          context.translate(-pos.x, -pos.y);\n        }\n\n        drawText();\n        drawOverlay(); //\n        // clean up shift\n\n        if (shiftToOriginWithBb) {\n          context.translate(bb.x1, bb.y1);\n        }\n      }; // does the node have at least one pie piece?\n\n\n      CRp.hasPie = function (node) {\n        node = node[0]; // ensure ele ref\n\n        return node._private.hasPie;\n      };\n\n      CRp.drawPie = function (context, node, nodeOpacity, pos) {\n        node = node[0]; // ensure ele ref\n\n        pos = pos || node.position();\n        var cyStyle = node.cy().style();\n        var pieSize = node.pstyle('pie-size');\n        var x = pos.x;\n        var y = pos.y;\n        var nodeW = node.width();\n        var nodeH = node.height();\n        var radius = Math.min(nodeW, nodeH) / 2; // must fit in node\n\n        var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]\n\n        var usePaths = this.usePaths();\n\n        if (usePaths) {\n          x = 0;\n          y = 0;\n        }\n\n        if (pieSize.units === '%') {\n          radius = radius * pieSize.pfValue;\n        } else if (pieSize.pfValue !== undefined) {\n          radius = pieSize.pfValue / 2;\n        }\n\n        for (var i = 1; i <= cyStyle.pieBackgroundN; i++) {\n          // 1..N\n          var size = node.pstyle('pie-' + i + '-background-size').value;\n          var color = node.pstyle('pie-' + i + '-background-color').value;\n          var opacity = node.pstyle('pie-' + i + '-background-opacity').value * nodeOpacity;\n          var percent = size / 100; // map integer range [0, 100] to [0, 1]\n          // percent can't push beyond 1\n\n          if (percent + lastPercent > 1) {\n            percent = 1 - lastPercent;\n          }\n\n          var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise\n\n          var angleDelta = 2 * Math.PI * percent;\n          var angleEnd = angleStart + angleDelta; // ignore if\n          // - zero size\n          // - we're already beyond the full circle\n          // - adding the current slice would go beyond the full circle\n\n          if (size === 0 || lastPercent >= 1 || lastPercent + percent > 1) {\n            continue;\n          }\n\n          context.beginPath();\n          context.moveTo(x, y);\n          context.arc(x, y, radius, angleStart, angleEnd);\n          context.closePath();\n          this.fillStyle(context, color[0], color[1], color[2], opacity);\n          context.fill();\n          lastPercent += percent;\n        }\n      };\n\n      module.exports = CRp;\n      /***/\n    },\n    /* 132 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var CRp = {};\n\n      var util = __webpack_require__(1);\n\n      var motionBlurDelay = 100; // var isFirefox = typeof InstallTrigger !== 'undefined';\n\n      CRp.getPixelRatio = function () {\n        var context = this.data.contexts[0];\n\n        if (this.forcedPixelRatio != null) {\n          return this.forcedPixelRatio;\n        }\n\n        var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n        return (window.devicePixelRatio || 1) / backingStore; // eslint-disable-line no-undef\n      };\n\n      CRp.paintCache = function (context) {\n        var caches = this.paintCaches = this.paintCaches || [];\n        var needToCreateCache = true;\n        var cache;\n\n        for (var i = 0; i < caches.length; i++) {\n          cache = caches[i];\n\n          if (cache.context === context) {\n            needToCreateCache = false;\n            break;\n          }\n        }\n\n        if (needToCreateCache) {\n          cache = {\n            context: context\n          };\n          caches.push(cache);\n        }\n\n        return cache;\n      };\n\n      CRp.fillStyle = function (context, r, g, b, a) {\n        context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'; // turn off for now, seems context does its own caching\n        // var cache = this.paintCache(context);\n        // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n        // if( cache.fillStyle !== fillStyle ){\n        //   context.fillStyle = cache.fillStyle = fillStyle;\n        // }\n      };\n\n      CRp.strokeStyle = function (context, r, g, b, a) {\n        context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'; // turn off for now, seems context does its own caching\n        // var cache = this.paintCache(context);\n        // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n        // if( cache.strokeStyle !== strokeStyle ){\n        //   context.strokeStyle = cache.strokeStyle = strokeStyle;\n        // }\n      }; // Resize canvas\n\n\n      CRp.matchCanvasSize = function (container) {\n        var r = this;\n        var data = r.data;\n        var bb = r.findContainerClientCoords();\n        var width = bb[2];\n        var height = bb[3];\n        var pixelRatio = r.getPixelRatio();\n        var mbPxRatio = r.motionBlurPxRatio;\n\n        if (container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE] || container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG]) {\n          pixelRatio = mbPxRatio;\n        }\n\n        var canvasWidth = width * pixelRatio;\n        var canvasHeight = height * pixelRatio;\n        var canvas;\n\n        if (canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight) {\n          return; // save cycles if same\n        }\n\n        r.fontCaches = null; // resizing resets the style\n\n        var canvasContainer = data.canvasContainer;\n        canvasContainer.style.width = width + 'px';\n        canvasContainer.style.height = height + 'px';\n\n        for (var i = 0; i < r.CANVAS_LAYERS; i++) {\n          canvas = data.canvases[i];\n          canvas.width = canvasWidth;\n          canvas.height = canvasHeight;\n          canvas.style.width = width + 'px';\n          canvas.style.height = height + 'px';\n        }\n\n        for (var i = 0; i < r.BUFFER_COUNT; i++) {\n          canvas = data.bufferCanvases[i];\n          canvas.width = canvasWidth;\n          canvas.height = canvasHeight;\n          canvas.style.width = width + 'px';\n          canvas.style.height = height + 'px';\n        }\n\n        r.textureMult = 1;\n\n        if (pixelRatio <= 1) {\n          canvas = data.bufferCanvases[r.TEXTURE_BUFFER];\n          r.textureMult = 2;\n          canvas.width = canvasWidth * r.textureMult;\n          canvas.height = canvasHeight * r.textureMult;\n        }\n\n        r.canvasWidth = canvasWidth;\n        r.canvasHeight = canvasHeight;\n      };\n\n      CRp.renderTo = function (cxt, zoom, pan, pxRatio) {\n        this.render({\n          forcedContext: cxt,\n          forcedZoom: zoom,\n          forcedPan: pan,\n          drawAllLayers: true,\n          forcedPxRatio: pxRatio\n        });\n      };\n\n      CRp.render = function (options) {\n        options = options || util.staticEmptyObject();\n        var forcedContext = options.forcedContext;\n        var drawAllLayers = options.drawAllLayers;\n        var drawOnlyNodeLayer = options.drawOnlyNodeLayer;\n        var forcedZoom = options.forcedZoom;\n        var forcedPan = options.forcedPan;\n        var r = this;\n        var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;\n        var cy = r.cy;\n        var data = r.data;\n        var needDraw = data.canvasNeedsRedraw;\n        var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);\n        var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;\n        var mbPxRatio = r.motionBlurPxRatio;\n        var hasCompoundNodes = cy.hasCompoundNodes();\n        var inNodeDragGesture = r.hoverData.draggingEles;\n        var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;\n        motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;\n        var motionBlurFadeEffect = motionBlur;\n\n        if (!forcedContext) {\n          if (r.prevPxRatio !== pixelRatio) {\n            r.invalidateContainerClientCoordsCache();\n            r.matchCanvasSize(r.container);\n            r.redrawHint('eles', true);\n            r.redrawHint('drag', true);\n          }\n\n          r.prevPxRatio = pixelRatio;\n        }\n\n        if (!forcedContext && r.motionBlurTimeout) {\n          clearTimeout(r.motionBlurTimeout);\n        }\n\n        if (motionBlur) {\n          if (r.mbFrames == null) {\n            r.mbFrames = 0;\n          }\n\n          r.mbFrames++;\n\n          if (r.mbFrames < 3) {\n            // need several frames before even high quality motionblur\n            motionBlurFadeEffect = false;\n          } // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)\n\n\n          if (r.mbFrames > r.minMbLowQualFrames) {\n            //r.fullQualityMb = false;\n            r.motionBlurPxRatio = r.mbPxRBlurry;\n          }\n        }\n\n        if (r.clearingMotionBlur) {\n          r.motionBlurPxRatio = 1;\n        } // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame\n        // because a rogue async texture frame would clear needDraw\n\n\n        if (r.textureDrawLastFrame && !textureDraw) {\n          needDraw[r.NODE] = true;\n          needDraw[r.SELECT_BOX] = true;\n        }\n\n        var coreStyle = cy.style()._private.coreStyle;\n\n        var zoom = cy.zoom();\n        var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;\n        var pan = cy.pan();\n        var effectivePan = {\n          x: pan.x,\n          y: pan.y\n        };\n        var vp = {\n          zoom: zoom,\n          pan: {\n            x: pan.x,\n            y: pan.y\n          }\n        };\n        var prevVp = r.prevViewport;\n        var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y; // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)\n\n        if (!viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes)) {\n          r.motionBlurPxRatio = 1;\n        }\n\n        if (forcedPan) {\n          effectivePan = forcedPan;\n        } // apply pixel ratio\n\n\n        effectiveZoom *= pixelRatio;\n        effectivePan.x *= pixelRatio;\n        effectivePan.y *= pixelRatio;\n        var eles = r.getCachedZSortedEles();\n\n        function mbclear(context, x, y, w, h) {\n          var gco = context.globalCompositeOperation;\n          context.globalCompositeOperation = 'destination-out';\n          r.fillStyle(context, 255, 255, 255, r.motionBlurTransparency);\n          context.fillRect(x, y, w, h);\n          context.globalCompositeOperation = gco;\n        }\n\n        function setContextTransform(context, clear) {\n          var ePan, eZoom, w, h;\n\n          if (!r.clearingMotionBlur && (context === data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] || context === data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG])) {\n            ePan = {\n              x: pan.x * mbPxRatio,\n              y: pan.y * mbPxRatio\n            };\n            eZoom = zoom * mbPxRatio;\n            w = r.canvasWidth * mbPxRatio;\n            h = r.canvasHeight * mbPxRatio;\n          } else {\n            ePan = effectivePan;\n            eZoom = effectiveZoom;\n            w = r.canvasWidth;\n            h = r.canvasHeight;\n          }\n\n          context.setTransform(1, 0, 0, 1, 0, 0);\n\n          if (clear === 'motionBlur') {\n            mbclear(context, 0, 0, w, h);\n          } else if (!forcedContext && (clear === undefined || clear)) {\n            context.clearRect(0, 0, w, h);\n          }\n\n          if (!drawAllLayers) {\n            context.translate(ePan.x, ePan.y);\n            context.scale(eZoom, eZoom);\n          }\n\n          if (forcedPan) {\n            context.translate(forcedPan.x, forcedPan.y);\n          }\n\n          if (forcedZoom) {\n            context.scale(forcedZoom, forcedZoom);\n          }\n        }\n\n        if (!textureDraw) {\n          r.textureDrawLastFrame = false;\n        }\n\n        if (textureDraw) {\n          r.textureDrawLastFrame = true;\n          var bb;\n\n          if (!r.textureCache) {\n            r.textureCache = {};\n            bb = r.textureCache.bb = cy.mutableElements().boundingBox();\n            r.textureCache.texture = r.data.bufferCanvases[r.TEXTURE_BUFFER];\n            var cxt = r.data.bufferContexts[r.TEXTURE_BUFFER];\n            cxt.setTransform(1, 0, 0, 1, 0, 0);\n            cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);\n            r.render({\n              forcedContext: cxt,\n              drawOnlyNodeLayer: true,\n              forcedPxRatio: pixelRatio * r.textureMult\n            });\n            var vp = r.textureCache.viewport = {\n              zoom: cy.zoom(),\n              pan: cy.pan(),\n              width: r.canvasWidth,\n              height: r.canvasHeight\n            };\n            vp.mpan = {\n              x: (0 - vp.pan.x) / vp.zoom,\n              y: (0 - vp.pan.y) / vp.zoom\n            };\n          }\n\n          needDraw[r.DRAG] = false;\n          needDraw[r.NODE] = false;\n          var context = data.contexts[r.NODE];\n          var texture = r.textureCache.texture;\n          var vp = r.textureCache.viewport;\n          bb = r.textureCache.bb;\n          context.setTransform(1, 0, 0, 1, 0, 0);\n\n          if (motionBlur) {\n            mbclear(context, 0, 0, vp.width, vp.height);\n          } else {\n            context.clearRect(0, 0, vp.width, vp.height);\n          }\n\n          var outsideBgColor = coreStyle['outside-texture-bg-color'].value;\n          var outsideBgOpacity = coreStyle['outside-texture-bg-opacity'].value;\n          r.fillStyle(context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity);\n          context.fillRect(0, 0, vp.width, vp.height);\n          var zoom = cy.zoom();\n          setContextTransform(context, false);\n          context.clearRect(vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);\n          context.drawImage(texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);\n        } else if (r.textureOnViewport && !forcedContext) {\n          // clear the cache since we don't need it\n          r.textureCache = null;\n        }\n\n        var extent = cy.extent();\n        var vpManip = r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles;\n        var hideEdges = r.hideEdgesOnViewport && vpManip;\n        var needMbClear = [];\n        needMbClear[r.NODE] = !needDraw[r.NODE] && motionBlur && !r.clearedForMotionBlur[r.NODE] || r.clearingMotionBlur;\n\n        if (needMbClear[r.NODE]) {\n          r.clearedForMotionBlur[r.NODE] = true;\n        }\n\n        needMbClear[r.DRAG] = !needDraw[r.DRAG] && motionBlur && !r.clearedForMotionBlur[r.DRAG] || r.clearingMotionBlur;\n\n        if (needMbClear[r.DRAG]) {\n          r.clearedForMotionBlur[r.DRAG] = true;\n        }\n\n        if (needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r.NODE]) {\n          var useBuffer = motionBlur && !needMbClear[r.NODE] && mbPxRatio !== 1;\n          var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] : data.contexts[r.NODE]);\n          var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;\n          setContextTransform(context, clear);\n\n          if (hideEdges) {\n            r.drawCachedNodes(context, eles.nondrag, pixelRatio, extent);\n          } else {\n            r.drawLayeredElements(context, eles.nondrag, pixelRatio, extent);\n          }\n\n          if (r.debug) {\n            r.drawDebugPoints(context, eles.nondrag);\n          }\n\n          if (!drawAllLayers && !motionBlur) {\n            needDraw[r.NODE] = false;\n          }\n        }\n\n        if (!drawOnlyNodeLayer && (needDraw[r.DRAG] || drawAllLayers || needMbClear[r.DRAG])) {\n          var useBuffer = motionBlur && !needMbClear[r.DRAG] && mbPxRatio !== 1;\n          var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG] : data.contexts[r.DRAG]);\n          setContextTransform(context, motionBlur && !useBuffer ? 'motionBlur' : undefined);\n\n          if (hideEdges) {\n            r.drawCachedNodes(context, eles.drag, pixelRatio, extent);\n          } else {\n            r.drawCachedElements(context, eles.drag, pixelRatio, extent);\n          }\n\n          if (r.debug) {\n            r.drawDebugPoints(context, eles.drag);\n          }\n\n          if (!drawAllLayers && !motionBlur) {\n            needDraw[r.DRAG] = false;\n          }\n        }\n\n        if (r.showFps || !drawOnlyNodeLayer && needDraw[r.SELECT_BOX] && !drawAllLayers) {\n          var context = forcedContext || data.contexts[r.SELECT_BOX];\n          setContextTransform(context);\n\n          if (r.selection[4] == 1 && (r.hoverData.selecting || r.touchData.selecting)) {\n            var zoom = r.cy.zoom();\n            var borderWidth = coreStyle['selection-box-border-width'].value / zoom;\n            context.lineWidth = borderWidth;\n            context.fillStyle = 'rgba(' + coreStyle['selection-box-color'].value[0] + ',' + coreStyle['selection-box-color'].value[1] + ',' + coreStyle['selection-box-color'].value[2] + ',' + coreStyle['selection-box-opacity'].value + ')';\n            context.fillRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);\n\n            if (borderWidth > 0) {\n              context.strokeStyle = 'rgba(' + coreStyle['selection-box-border-color'].value[0] + ',' + coreStyle['selection-box-border-color'].value[1] + ',' + coreStyle['selection-box-border-color'].value[2] + ',' + coreStyle['selection-box-opacity'].value + ')';\n              context.strokeRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);\n            }\n          }\n\n          if (data.bgActivePosistion && !r.hoverData.selecting) {\n            var zoom = r.cy.zoom();\n            var pos = data.bgActivePosistion;\n            context.fillStyle = 'rgba(' + coreStyle['active-bg-color'].value[0] + ',' + coreStyle['active-bg-color'].value[1] + ',' + coreStyle['active-bg-color'].value[2] + ',' + coreStyle['active-bg-opacity'].value + ')';\n            context.beginPath();\n            context.arc(pos.x, pos.y, coreStyle['active-bg-size'].pfValue / zoom, 0, 2 * Math.PI);\n            context.fill();\n          }\n\n          var timeToRender = r.lastRedrawTime;\n\n          if (r.showFps && timeToRender) {\n            timeToRender = Math.round(timeToRender);\n            var fps = Math.round(1000 / timeToRender);\n            context.setTransform(1, 0, 0, 1, 0, 0);\n            context.fillStyle = 'rgba(255, 0, 0, 0.75)';\n            context.strokeStyle = 'rgba(255, 0, 0, 0.75)';\n            context.lineWidth = 1;\n            context.fillText('1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20);\n            var maxFps = 60;\n            context.strokeRect(0, 30, 250, 20);\n            context.fillRect(0, 30, 250 * Math.min(fps / maxFps, 1), 20);\n          }\n\n          if (!drawAllLayers) {\n            needDraw[r.SELECT_BOX] = false;\n          }\n        } // motionblur: blit rendered blurry frames\n\n\n        if (motionBlur && mbPxRatio !== 1) {\n          var cxtNode = data.contexts[r.NODE];\n          var txtNode = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE];\n          var cxtDrag = data.contexts[r.DRAG];\n          var txtDrag = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG];\n\n          var drawMotionBlur = function drawMotionBlur(cxt, txt, needClear) {\n            cxt.setTransform(1, 0, 0, 1, 0, 0);\n\n            if (needClear || !motionBlurFadeEffect) {\n              cxt.clearRect(0, 0, r.canvasWidth, r.canvasHeight);\n            } else {\n              mbclear(cxt, 0, 0, r.canvasWidth, r.canvasHeight);\n            }\n\n            var pxr = mbPxRatio;\n            cxt.drawImage(txt, // img\n            0, 0, // sx, sy\n            r.canvasWidth * pxr, r.canvasHeight * pxr, // sw, sh\n            0, 0, // x, y\n            r.canvasWidth, r.canvasHeight // w, h\n            );\n          };\n\n          if (needDraw[r.NODE] || needMbClear[r.NODE]) {\n            drawMotionBlur(cxtNode, txtNode, needMbClear[r.NODE]);\n            needDraw[r.NODE] = false;\n          }\n\n          if (needDraw[r.DRAG] || needMbClear[r.DRAG]) {\n            drawMotionBlur(cxtDrag, txtDrag, needMbClear[r.DRAG]);\n            needDraw[r.DRAG] = false;\n          }\n        }\n\n        r.prevViewport = vp;\n\n        if (r.clearingMotionBlur) {\n          r.clearingMotionBlur = false;\n          r.motionBlurCleared = true;\n          r.motionBlur = true;\n        }\n\n        if (motionBlur) {\n          r.motionBlurTimeout = setTimeout(function () {\n            r.motionBlurTimeout = null;\n            r.clearedForMotionBlur[r.NODE] = false;\n            r.clearedForMotionBlur[r.DRAG] = false;\n            r.motionBlur = false;\n            r.clearingMotionBlur = !textureDraw;\n            r.mbFrames = 0;\n            needDraw[r.NODE] = true;\n            needDraw[r.DRAG] = true;\n            r.redraw();\n          }, motionBlurDelay);\n        }\n\n        if (!forcedContext) {\n          cy.emit('render');\n        }\n      };\n\n      module.exports = CRp;\n      /***/\n    },\n    /* 133 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var math = __webpack_require__(2);\n\n      var CRp = {}; // @O Polygon drawing\n\n      CRp.drawPolygonPath = function (context, x, y, width, height, points) {\n        var halfW = width / 2;\n        var halfH = height / 2;\n\n        if (context.beginPath) {\n          context.beginPath();\n        }\n\n        context.moveTo(x + halfW * points[0], y + halfH * points[1]);\n\n        for (var i = 1; i < points.length / 2; i++) {\n          context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);\n        }\n\n        context.closePath();\n      }; // Round rectangle drawing\n\n\n      CRp.drawRoundRectanglePath = function (context, x, y, width, height) {\n        var halfWidth = width / 2;\n        var halfHeight = height / 2;\n        var cornerRadius = math.getRoundRectangleRadius(width, height);\n\n        if (context.beginPath) {\n          context.beginPath();\n        } // Start at top middle\n\n\n        context.moveTo(x, y - halfHeight); // Arc from middle top to right side\n\n        context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom\n\n        context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side\n\n        context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder\n\n        context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line\n\n        context.lineTo(x, y - halfHeight);\n        context.closePath();\n      };\n\n      CRp.drawBottomRoundRectanglePath = function (context, x, y, width, height) {\n        var halfWidth = width / 2;\n        var halfHeight = height / 2;\n        var cornerRadius = math.getRoundRectangleRadius(width, height);\n\n        if (context.beginPath) {\n          context.beginPath();\n        } // Start at top middle\n\n\n        context.moveTo(x, y - halfHeight);\n        context.lineTo(x + halfWidth, y - halfHeight);\n        context.lineTo(x + halfWidth, y);\n        context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);\n        context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);\n        context.lineTo(x - halfWidth, y - halfHeight);\n        context.lineTo(x, y - halfHeight);\n        context.closePath();\n      };\n\n      CRp.drawCutRectanglePath = function (context, x, y, width, height) {\n        var halfWidth = width / 2;\n        var halfHeight = height / 2;\n        var cornerLength = math.getCutRectangleCornerLength();\n\n        if (context.beginPath) {\n          context.beginPath();\n        }\n\n        context.moveTo(x - halfWidth + cornerLength, y - halfHeight);\n        context.lineTo(x + halfWidth - cornerLength, y - halfHeight);\n        context.lineTo(x + halfWidth, y - halfHeight + cornerLength);\n        context.lineTo(x + halfWidth, y + halfHeight - cornerLength);\n        context.lineTo(x + halfWidth - cornerLength, y + halfHeight);\n        context.lineTo(x - halfWidth + cornerLength, y + halfHeight);\n        context.lineTo(x - halfWidth, y + halfHeight - cornerLength);\n        context.lineTo(x - halfWidth, y - halfHeight + cornerLength);\n        context.closePath();\n      };\n\n      CRp.drawBarrelPath = function (context, x, y, width, height) {\n        var halfWidth = width / 2;\n        var halfHeight = height / 2;\n        var xBegin = x - halfWidth;\n        var xEnd = x + halfWidth;\n        var yBegin = y - halfHeight;\n        var yEnd = y + halfHeight;\n        var barrelCurveConstants = math.getBarrelCurveConstants(width, height);\n        var wOffset = barrelCurveConstants.widthOffset;\n        var hOffset = barrelCurveConstants.heightOffset;\n        var ctrlPtXOffset = barrelCurveConstants.ctrlPtOffsetPct * wOffset;\n\n        if (context.beginPath) {\n          context.beginPath();\n        }\n\n        context.moveTo(xBegin, yBegin + hOffset);\n        context.lineTo(xBegin, yEnd - hOffset);\n        context.quadraticCurveTo(xBegin + ctrlPtXOffset, yEnd, xBegin + wOffset, yEnd);\n        context.lineTo(xEnd - wOffset, yEnd);\n        context.quadraticCurveTo(xEnd - ctrlPtXOffset, yEnd, xEnd, yEnd - hOffset);\n        context.lineTo(xEnd, yBegin + hOffset);\n        context.quadraticCurveTo(xEnd - ctrlPtXOffset, yBegin, xEnd - wOffset, yBegin);\n        context.lineTo(xBegin + wOffset, yBegin);\n        context.quadraticCurveTo(xBegin + ctrlPtXOffset, yBegin, xBegin, yBegin + hOffset);\n        context.closePath();\n      };\n\n      var sin0 = Math.sin(0);\n      var cos0 = Math.cos(0);\n      var sin = {};\n      var cos = {};\n      var ellipseStepSize = Math.PI / 40;\n\n      for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {\n        sin[i] = Math.sin(i);\n        cos[i] = Math.cos(i);\n      }\n\n      CRp.drawEllipsePath = function (context, centerX, centerY, width, height) {\n        if (context.beginPath) {\n          context.beginPath();\n        }\n\n        if (context.ellipse) {\n          context.ellipse(centerX, centerY, width / 2, height / 2, 0, 0, 2 * Math.PI);\n        } else {\n          var xPos, yPos;\n          var rw = width / 2;\n          var rh = height / 2;\n\n          for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {\n            xPos = centerX - rw * sin[i] * sin0 + rw * cos[i] * cos0;\n            yPos = centerY + rh * cos[i] * sin0 + rh * sin[i] * cos0;\n\n            if (i === 0) {\n              context.moveTo(xPos, yPos);\n            } else {\n              context.lineTo(xPos, yPos);\n            }\n          }\n        }\n\n        context.closePath();\n      };\n\n      module.exports = CRp;\n      /***/\n    },\n    /* 134 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var CRp = {};\n\n      CRp.createBuffer = function (w, h) {\n        var buffer = document.createElement('canvas'); // eslint-disable-line no-undef\n\n        buffer.width = w;\n        buffer.height = h;\n        return [buffer, buffer.getContext('2d')];\n      };\n\n      CRp.bufferCanvasImage = function (options) {\n        var cy = this.cy;\n        var eles = cy.mutableElements();\n        var bb = eles.boundingBox();\n        var ctrRect = this.findContainerClientCoords();\n        var width = options.full ? Math.ceil(bb.w) : ctrRect[2];\n        var height = options.full ? Math.ceil(bb.h) : ctrRect[3];\n        var specdMaxDims = is.number(options.maxWidth) || is.number(options.maxHeight);\n        var pxRatio = this.getPixelRatio();\n        var scale = 1;\n\n        if (options.scale !== undefined) {\n          width *= options.scale;\n          height *= options.scale;\n          scale = options.scale;\n        } else if (specdMaxDims) {\n          var maxScaleW = Infinity;\n          var maxScaleH = Infinity;\n\n          if (is.number(options.maxWidth)) {\n            maxScaleW = scale * options.maxWidth / width;\n          }\n\n          if (is.number(options.maxHeight)) {\n            maxScaleH = scale * options.maxHeight / height;\n          }\n\n          scale = Math.min(maxScaleW, maxScaleH);\n          width *= scale;\n          height *= scale;\n        }\n\n        if (!specdMaxDims) {\n          width *= pxRatio;\n          height *= pxRatio;\n          scale *= pxRatio;\n        }\n\n        var buffCanvas = document.createElement('canvas'); // eslint-disable-line no-undef\n\n        buffCanvas.width = width;\n        buffCanvas.height = height;\n        buffCanvas.style.width = width + 'px';\n        buffCanvas.style.height = height + 'px';\n        var buffCxt = buffCanvas.getContext('2d'); // Rasterize the layers, but only if container has nonzero size\n\n        if (width > 0 && height > 0) {\n          buffCxt.clearRect(0, 0, width, height);\n          buffCxt.globalCompositeOperation = 'source-over';\n          var zsortedEles = this.getCachedZSortedEles();\n\n          if (options.full) {\n            // draw the full bounds of the graph\n            buffCxt.translate(-bb.x1 * scale, -bb.y1 * scale);\n            buffCxt.scale(scale, scale);\n            this.drawElements(buffCxt, zsortedEles);\n            buffCxt.scale(1 / scale, 1 / scale);\n            buffCxt.translate(bb.x1 * scale, bb.y1 * scale);\n          } else {\n            // draw the current view\n            var pan = cy.pan();\n            var translation = {\n              x: pan.x * scale,\n              y: pan.y * scale\n            };\n            scale *= cy.zoom();\n            buffCxt.translate(translation.x, translation.y);\n            buffCxt.scale(scale, scale);\n            this.drawElements(buffCxt, zsortedEles);\n            buffCxt.scale(1 / scale, 1 / scale);\n            buffCxt.translate(-translation.x, -translation.y);\n          } // need to fill bg at end like this in order to fill cleared transparent pixels in jpgs\n\n\n          if (options.bg) {\n            buffCxt.globalCompositeOperation = 'destination-over';\n            buffCxt.fillStyle = options.bg;\n            buffCxt.rect(0, 0, width, height);\n            buffCxt.fill();\n          }\n        }\n\n        return buffCanvas;\n      };\n\n      function b64ToBlob(b64, mimeType) {\n        var bytes = atob(b64);\n        var buff = new ArrayBuffer(bytes.length);\n        var buffUint8 = new Uint8Array(buff);\n\n        for (var i = 0; i < bytes.length; i++) {\n          buffUint8[i] = bytes.charCodeAt(i);\n        }\n\n        return new Blob([buff], {\n          type: mimeType\n        });\n      }\n\n      function b64UriToB64(b64uri) {\n        var i = b64uri.indexOf(',');\n        return b64uri.substr(i + 1);\n      }\n\n      ;\n\n      function output(options, canvas, mimeType) {\n        var b64Uri = canvas.toDataURL(mimeType, options.quality);\n\n        switch (options.output) {\n          case 'blob':\n            return b64ToBlob(b64UriToB64(b64Uri), mimeType);\n\n          case 'base64':\n            return b64UriToB64(b64Uri);\n\n          case 'base64uri':\n          default:\n            return b64Uri;\n        }\n      }\n\n      CRp.png = function (options) {\n        return output(options, this.bufferCanvasImage(options), 'image/png');\n      };\n\n      CRp.jpg = function (options) {\n        return output(options, this.bufferCanvasImage(options), 'image/jpeg');\n      };\n\n      module.exports = CRp;\n      /***/\n    },\n    /* 135 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var CRp = {};\n\n      CRp.nodeShapeImpl = function (name, context, centerX, centerY, width, height, points) {\n        switch (name) {\n          case 'ellipse':\n            return this.drawEllipsePath(context, centerX, centerY, width, height);\n\n          case 'polygon':\n            return this.drawPolygonPath(context, centerX, centerY, width, height, points);\n\n          case 'roundrectangle':\n            return this.drawRoundRectanglePath(context, centerX, centerY, width, height);\n\n          case 'cutrectangle':\n            return this.drawCutRectanglePath(context, centerX, centerY, width, height);\n\n          case 'bottomroundrectangle':\n            return this.drawBottomRoundRectanglePath(context, centerX, centerY, width, height);\n\n          case 'barrel':\n            return this.drawBarrelPath(context, centerX, centerY, width, height);\n        }\n      };\n\n      module.exports = CRp;\n      /***/\n    },\n    /* 136 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var is = __webpack_require__(0);\n\n      var util = __webpack_require__(1);\n\n      var Style = __webpack_require__(18); // a dummy stylesheet object that doesn't need a reference to the core\n      // (useful for init)\n\n\n      var Stylesheet = function Stylesheet() {\n        if (!(this instanceof Stylesheet)) {\n          return new Stylesheet();\n        }\n\n        this.length = 0;\n      };\n\n      var sheetfn = Stylesheet.prototype;\n\n      sheetfn.instanceString = function () {\n        return 'stylesheet';\n      }; // just store the selector to be parsed later\n\n\n      sheetfn.selector = function (selector) {\n        var i = this.length++;\n        this[i] = {\n          selector: selector,\n          properties: []\n        };\n        return this; // chaining\n      }; // just store the property to be parsed later\n\n\n      sheetfn.css = function (name, value) {\n        var i = this.length - 1;\n\n        if (is.string(name)) {\n          this[i].properties.push({\n            name: name,\n            value: value\n          });\n        } else if (is.plainObject(name)) {\n          var map = name;\n\n          for (var j = 0; j < Style.properties.length; j++) {\n            var prop = Style.properties[j];\n            var mapVal = map[prop.name];\n\n            if (mapVal === undefined) {\n              // also try camel case name\n              mapVal = map[util.dash2camel(prop.name)];\n            }\n\n            if (mapVal !== undefined) {\n              var _name = prop.name;\n              var _value = mapVal;\n              this[i].properties.push({\n                name: _name,\n                value: _value\n              });\n            }\n          }\n        }\n\n        return this; // chaining\n      };\n\n      sheetfn.style = sheetfn.css; // generate a real style object from the dummy stylesheet\n\n      sheetfn.generateStyle = function (cy) {\n        var style = new Style(cy);\n        return this.appendToStyle(style);\n      }; // append a dummy stylesheet object on a real style object\n\n\n      sheetfn.appendToStyle = function (style) {\n        for (var i = 0; i < this.length; i++) {\n          var context = this[i];\n          var selector = context.selector;\n          var props = context.properties;\n          style.selector(selector); // apply selector\n\n          for (var j = 0; j < props.length; j++) {\n            var prop = props[j];\n            style.css(prop.name, prop.value); // apply property\n          }\n        }\n\n        return style;\n      };\n\n      module.exports = Stylesheet;\n      /***/\n    },\n    /* 137 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      module.exports = \"3.2.19\";\n      /***/\n    }])\n  );\n});","map":null,"metadata":{},"sourceType":"script"}