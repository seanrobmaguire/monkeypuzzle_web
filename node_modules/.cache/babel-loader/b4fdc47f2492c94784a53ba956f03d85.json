{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/ResourcePane.js\";\nimport React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons'; //Import Components\n\nimport Modal from './Modal';\nimport TabBody from './TabBody';\nimport { newResourceModal } from './ModalData.jsx';\n\nclass ResourcePane extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}; //create ref\n\n    this.newAtomModalRef = React.createRef();\n    this.handleAdd = this.handleAdd.bind(this);\n    this.returnType = this.returnType.bind(this);\n    this.handlegetType = this.handlegetType.bind(this);\n    this.handleNewAtomText = this.handleNewAtomText.bind(this);\n  }\n\n  returnType() {\n    var resource_type_idx = document.getElementById(\"resource_type\").options.selectedIndex;\n    var resource_type_txt = document.getElementById(\"resource_type\").options[resource_type_idx].text;\n    let type = resource_type_txt.toLowerCase();\n    this.props.setType(type);\n  }\n\n  handleAdd() {\n    this.props.addTab();\n    console.log(\"handleADD\");\n  }\n\n  componentDidMount() {// this.setState({activeTab: this.props.activeTab})\n    //  console.log(this.state.activeTab, 'active tabs');\n  }\n\n  componentDidUpdate(prevProps) {// Typical usage (don't forget to compare props):\n    //if (this.props.remove_all_tabs !== prevProps.remove_all_tabs) {\n    //  this.remove_all_tabs();\n    // }\n  }\n\n  handlegetType(e) {\n    let type = e.target.value;\n    let newAtomModalType = this.newAtomModalRef.current;\n    console.log(newAtomModalType, \"newAtomModalType\");\n    console.log(type, 'resourcePane type');\n  }\n\n  handleNewAtomText() {\n    if (this.props.focused != null || this.props.focused != undefined) {\n      if (this.props.focused.parentNode.id == \"textarea\") {\n        var elem = document.getElementById(this.props.focused.id);\n        var selection = elem.value.substring(elem.selectionStart, elem.selectionEnd);\n        console.log(selection, 'selection');\n        console.log(elem, 'elem'); //  if(selection != null || selection != undefined){\n        //   add_new_atom_node(selection);\n        //   elem.selectionStart = elem.selectionEnd;\n        //   clear_focus();\n        // }\n      }\n    } else {\n      console.log(\"Not a valid text source\");\n    }\n  }\n\n  render() {\n    const activeTab = this.props.activeTab;\n    var tabNumber = 1;\n    const newResourceModal = {\n      trigger: {\n        triggerText: React.createElement(FontAwesomeIcon, {\n          icon: faPlusSquare,\n          size: \"lg\",\n          color: \"#cbc5c1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }),\n        className: 'add_tab_button',\n        triggerId: \"add_tab_button\"\n      },\n      id: \"resource_pane_selection_modal\",\n      title: 'New Resource Pane',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Select a resource type\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        ref: this.newAtomModalRef,\n        id: \"resource_type\",\n        onChange: this.handlegetType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Text\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"none\"))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: \"btn btn-primary\",\n          value: \"Add\"\n        }\n      }\n    };\n    return React.createElement(\"div\", {\n      className: \"resource-pane\",\n      id: \"resource-pane\",\n      style: {\n        display: this.props.showResourcePane ? \"block\" : \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"resource_pane_tab_head\",\n      id: \"resource_pane_tab_head\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      modalProps: newResourceModal,\n      onClick: this.returnType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), this.props.tabs.map((item, i) => {\n      const onSetActiveTab = () => this.props.setActiveTab(item.id);\n\n      return React.createElement(\"button\", {\n        key: item.id + '_btn',\n        onClick: onSetActiveTab,\n        className: this.props.current_tab === item.id ? \"tablinks active\" : \"tablinks\",\n        id: item.id + \"_btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, item.tab_number);\n    })), React.createElement(\"div\", {\n      className: \"tab_body\",\n      id: \"tab_body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, this.props.tabs.map((item, i) => {\n      if (item.type === \"text\") {\n        this.loadTxtRef = React.createRef();\n        this.contentRef = React.createRef();\n        this.titleRef = React.createRef();\n\n        const handleRemove = () => this.props.remove_tab(i);\n\n        const clickLoad = () => {\n          this.loadTxtRef.current.click();\n        };\n\n        const handleFileUpload = () => {\n          var files = this.loadTxtRef.current.files;\n          this.props.fileManager('load', 'txt', item.tab_id, files);\n        };\n\n        const handleFileDownload = () => {\n          this.props.fileManager('save', 'txt', item.tab_id);\n        };\n\n        const handleChange_title = e => {\n          var titleValue = this.titleRef.current.value;\n          this.props.change_title(item.tab_id, titleValue);\n        };\n\n        const handleChange_content = () => {\n          var contentValue = this.contentRef.current.value;\n          this.props.change_content(item.tab_id, contentValue);\n        };\n\n        return React.createElement(TabBody, {\n          id: item.id,\n          key: item.id + '_bdy',\n          i: i,\n          style: {\n            display: this.props.current_tab === item.id ? 'block' : 'none'\n          },\n          handleremove: handleRemove,\n          handleFileUpload: handleFileUpload,\n          handleFileDownload: handleFileDownload,\n          clickLoad: clickLoad,\n          handleNewAtomText: this.handleNewAtomText,\n          titleValue: item.metadata.title,\n          contentValue: item.content,\n          handleChange_title: handleChange_title,\n          handleChange_content: handleChange_content,\n          set_focus: this.props.set_focus,\n          loadTxtRef: this.loadTxtRef,\n          titleRef: this.titleRef,\n          contentRef: this.contentRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        });\n      }\n    })));\n  }\n\n}\n\nexport default ResourcePane;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/ResourcePane.js"],"names":["React","Component","FontAwesomeIcon","faPlusSquare","Modal","TabBody","newResourceModal","ResourcePane","constructor","props","state","newAtomModalRef","createRef","handleAdd","bind","returnType","handlegetType","handleNewAtomText","resource_type_idx","document","getElementById","options","selectedIndex","resource_type_txt","text","type","toLowerCase","setType","addTab","console","log","componentDidMount","componentDidUpdate","prevProps","e","target","value","newAtomModalType","current","focused","undefined","parentNode","id","elem","selection","substring","selectionStart","selectionEnd","render","activeTab","tabNumber","trigger","triggerText","className","triggerId","title","content","footer","buttonNo","button1","button2","display","showResourcePane","tabs","map","item","i","onSetActiveTab","setActiveTab","current_tab","tab_number","loadTxtRef","contentRef","titleRef","handleRemove","remove_tab","clickLoad","click","handleFileUpload","files","fileManager","tab_id","handleFileDownload","handleChange_title","titleValue","change_title","handleChange_content","contentValue","change_content","metadata","set_focus"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons';\n//Import Components\nimport Modal from './Modal';\nimport TabBody from './TabBody';\nimport { newResourceModal} from './ModalData.jsx';\n\n\n\n\n\n\nclass ResourcePane extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n        //create ref\n        this.newAtomModalRef = React.createRef();\n\n        this.handleAdd = this.handleAdd.bind(this);\n        this.returnType =this.returnType.bind(this);\n        this.handlegetType = this.handlegetType.bind(this);\n        this.handleNewAtomText = this.handleNewAtomText.bind(this);\n\n\n    };\n\n\nreturnType(){\n    var resource_type_idx = document.getElementById(\"resource_type\").options.selectedIndex;\n    var resource_type_txt = document.getElementById(\"resource_type\").options[resource_type_idx].text;\n    let type = resource_type_txt.toLowerCase()\n    this.props.setType(type);\n\n}\n\nhandleAdd(){\n    this.props.addTab();\n   console.log(\"handleADD\");\n}\n\n\n\n\ncomponentDidMount(){\n   // this.setState({activeTab: this.props.activeTab})\n  //  console.log(this.state.activeTab, 'active tabs');\n}\n\n    componentDidUpdate(prevProps) {\n  // Typical usage (don't forget to compare props):\n  //if (this.props.remove_all_tabs !== prevProps.remove_all_tabs) {\n  //  this.remove_all_tabs();\n // }\n}\n\nhandlegetType(e){\n    let type = e.target.value;\n    let newAtomModalType = this.newAtomModalRef.current;\n    console.log(newAtomModalType, \"newAtomModalType\");\n    console.log(type,'resourcePane type');\n\n}\n\nhandleNewAtomText(){\n     if(this.props.focused != null || this.props.focused != undefined){\n        if(this.props.focused.parentNode.id == \"textarea\"){\n            var elem = document.getElementById(this.props.focused.id);\n\n            var selection = elem.value.substring(elem.selectionStart, elem.selectionEnd);\n            console.log(selection, 'selection');\n            console.log(elem, 'elem');\n          //  if(selection != null || selection != undefined){\n            //   add_new_atom_node(selection);\n             //   elem.selectionStart = elem.selectionEnd;\n             //   clear_focus();\n           // }\n        }\n    }\n    else { console.log(\"Not a valid text source\") }\n\n}\n\n\n\n\n\nrender() {\n    const{\n        activeTab\n\n\n    } =this.props;\n    var tabNumber = 1;\n\n\n    const newResourceModal = {\n  trigger: {\n    triggerText: <FontAwesomeIcon icon={faPlusSquare} size=\"lg\" color=\"#cbc5c1\"/>,\n    className: 'add_tab_button',\n    triggerId: \"add_tab_button\",\n  },\n  id:\"resource_pane_selection_modal\",\n  title: 'New Resource Pane',\n  content:  <div className=\"modal-body\">\n  <p>Select a resource type</p>\n  <select className=\"form-control\" ref={this.newAtomModalRef}id=\"resource_type\" onChange={this.handlegetType}>\n  <option>Text</option>\n    <option>none</option>\n  </select>\n  </div>,\n  footer: {\n    buttonNo: 2,\n    button1: {\n      className: \"btn btn-secondary\",\n      value: \"Close\"\n    },\n    button2: {\n      className: \"btn btn-primary\",\n      value: \"Add\"\n    }\n  }\n};\n\n\n    return ( \n        <div className=\"resource-pane\" id=\"resource-pane\" style={{display: this.props.showResourcePane ? \"block\" : \"none\"}}> \n            <div className=\"resource_pane_tab_head\" id=\"resource_pane_tab_head\">\n                        <Modal\n                            modalProps = {newResourceModal}  \n                            onClick = {this.returnType} \n\n                         />\n                    \n                        {\n                            this.props.tabs.map((item, i)=> {\n                                const onSetActiveTab = () =>\n                                    this.props.setActiveTab(item.id);\n                                return(\n                                    <button  \n                                        key={item.id + '_btn'}\n                                        onClick={onSetActiveTab} \n                                        className={this.props.current_tab === item.id ? \"tablinks active\" : \"tablinks\"}\n                                        id={item.id+\"_btn\"}\n                                    >\n                                        {item.tab_number}\n                                    </button>\n                                    \n                                );\n                            })\n                        }\n                    </div>\n\n\n                        \n                    <div className=\"tab_body\" id=\"tab_body\">\n                        {this.props.tabs.map((item,i) => {\n                            if(item.type === \"text\"){\n                            this.loadTxtRef = React.createRef();\n                            this.contentRef = React.createRef();\n                            this.titleRef = React.createRef();\n\n                            const handleRemove = () =>\n                                this.props.remove_tab(i);\n\n                            const clickLoad =() => {\n                                \n                                this.loadTxtRef.current.click();\n\n                            }\n\n                            const handleFileUpload = () =>{\n                            var files = this.loadTxtRef.current.files;\n                            this.props.fileManager('load','txt',  item.tab_id ,files);\n\n                            }\n                            const handleFileDownload = () =>{\n\n                                this.props.fileManager('save', 'txt', item.tab_id); \n                            }\n                            const handleChange_title = (e) =>{\n                                var titleValue = this.titleRef.current.value;\n                                this.props.change_title(item.tab_id, titleValue);\n                            }\n\n                            const handleChange_content = () =>{\n                                var contentValue = this.contentRef.current.value;\n                                this.props.change_content(item.tab_id, contentValue);\n                            }\n\n                            return(\n                                <TabBody\n                                    id={item.id}\n                                    key={item.id + '_bdy'}\n                                    i={i}\n                                    style={{display: this.props.current_tab === item.id ? 'block' : 'none'}}\n\n                                    handleremove={handleRemove}\n                                    handleFileUpload={handleFileUpload}\n                                    handleFileDownload={handleFileDownload}\n                                    clickLoad={clickLoad}\n                                    handleNewAtomText = {this.handleNewAtomText}\n\n\n                                    titleValue={item.metadata.title}\n                                    contentValue = {item.content}\n                                \n                                    handleChange_title={handleChange_title}\n                                    handleChange_content={handleChange_content}\n                                    set_focus={this.props.set_focus}\n\n\n                                    loadTxtRef={this.loadTxtRef}\n                                    titleRef={this.titleRef}\n                                    contentRef={this.contentRef}\n                                />\n                            )\n                        }\n                        })}\n                    </div>\n                    </div>\n                    );\n\n}\n}\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\nexport default ResourcePane;\n"]},"metadata":{},"sourceType":"module"}