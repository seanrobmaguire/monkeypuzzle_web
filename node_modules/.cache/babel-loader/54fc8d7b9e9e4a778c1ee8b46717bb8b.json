{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/VisualisationPane/VisualisationPane.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport $ from 'jquery';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\nimport { remove_falsy, update_scheme, update_atom_metadata, import_json, export_cytoscape, add_atom, sd, add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source } from '../../lib/Sadface';\n\nclass Cytoscape extends Component {\n  constructor(props) {\n    super(props); //create Refs\n\n    this.newAtomRef = React.createRef();\n    this.newSchemeRef = React.createRef();\n    this.editContentRef = React.createRef();\n    this.state = {\n      modalValue: ' ',\n      dropDownValue: ' ',\n      cy: null\n    };\n    this.default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\" + this.analyst_email + \"\\\",\\\"analyst_name\\\":\\\"\" + this.analyst_email + \"\\\",\\\"created\\\":\\\"\" + this.created_date + \"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\" + this.edited_date + \"\\\",\\\"id\\\":\\\"\" + this.document_id + \"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\n    this.analyst_email = \"Default Analyst Email\";\n    this.analyst_name = \"Default Analsyst Name\";\n    this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n    this.initCytoscape = this.initCytoscape.bind(this);\n  }\n\n  initialise_monkeypuzzle() {\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\")) {\n      this.props.loadJSON(localStorage.getItem(\"state\"));\n      this.initCytoscape(); //else use default\n    } else {\n      this.props.setCurrentSadFaceDoc(this.default_sadface_doc);\n      localStorage.setItem(\"state\", this.props.current_sadface_doc);\n      this.props.setCyData(export_cytoscape(import_json(this.props.current_sadface_doc)));\n      this.initCytoscape();\n    }\n  }\n\n  initCytoscape() {\n    this.setState({\n      cy: cytoscape({\n        container: document.getElementById('cy'),\n        elements: JSON.parse(this.props.cyData),\n        style: [{\n          selector: \"node\",\n          style: {\n            \"label\": \"data(content)\",\n            \"text-opacity\": 0.7,\n            // \"width\" : \"auto\",\n            //    \"height\" : \"auto\",\n            \"text-valign\": \"bottom\",\n            \"text-halign\": \"right\",\n            \"text-outline-color\": \"#eee\",\n            \"text-outline-width\": 1\n          }\n        }, {\n          selector: \"[typeshape]\",\n          style: {\n            \"shape\": \"data(typeshape)\"\n          }\n        }, {\n          selector: \"node[typeshape='diamond']\",\n          style: {\n            'background-color': '#CC9900'\n          }\n        }, {\n          selector: \"node[typeshape='diamond'][content='Conflict']\",\n          style: {\n            'background-color': 'red'\n          }\n        }, {\n          selector: \"node[typeshape='diamond'][content='Support']\",\n          style: {\n            'background-color': 'green'\n          }\n        }, {\n          selector: \"edge\",\n          style: {\n            \"line-color\": \"#9dbaea\",\n            \"target-arrow-shape\": \"triangle\",\n            \"target-arrow-color\": \"#9dbaea\",\n            \"curve-style\": \"bezier\"\n          }\n        }, {\n          selector: \":selected\",\n          style: {\n            \"border-width\": \"1\",\n            \"border-color\": \"black\",\n            \"background-color\": \"#3399CC\"\n          }\n        }, {\n          selector: \".atom-label\",\n          style: {\n            \"text-wrap\": \"wrap\",\n            \"text-max-width\": 160\n          }\n        }, {\n          selector: \".scheme-label\",\n          style: {\n            \"text-wrap\": \"wrap\",\n            \"text-max-width\": 160\n          }\n        }, {\n          selector: '.eh-handle',\n          style: {\n            'background-color': 'orange',\n            'width': 10,\n            'height': 10,\n            'shape': 'ellipse',\n            'overlay-opacity': 0,\n            'border-width': 8,\n            // makes the handle easier to hit\n            'border-opacity': 0,\n            'label': ''\n          }\n        }],\n        boxSelectionEnabled: false,\n        autounselectify: false,\n        selectionType: \"single\",\n        minZoom: 0.1,\n        maxZoom: 1.5\n      }) //cytoscapefunction\n\n    }); //setState cy\n\n    this.layout = this.build_cola_layout();\n    this.layout.run();\n  } //initmonkeyPuzzle\n\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return this.state.cy.makeLayout(cola_params);\n  }\n\n  componentDidMount() {\n    this.initialise_monkeypuzzle(); // }\n    // static getDerivedStateFromProps(nextProps, prevState) {\n    //     if(nextProps.cy_data !== prevState.cy_data){\n    //         return{cy_data: nextProps.cy_data};\n    //     }\n    //    else return null;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"cy\",\n      onDrop: this.dropHandler,\n      onDragOver: this.dragoverHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Cytoscape;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/VisualisationPane/VisualisationPane.js"],"names":["React","Component","cytoscape","cola","edgehandles","$","contextMenus","remove_falsy","update_scheme","update_atom_metadata","import_json","export_cytoscape","add_atom","sd","add_scheme","add_edge","get_atom","now","new_uuid","update_atom_text","get_sd","delete_edge","update","add_source","Cytoscape","constructor","props","newAtomRef","createRef","newSchemeRef","editContentRef","state","modalValue","dropDownValue","cy","default_sadface_doc","analyst_email","created_date","edited_date","document_id","analyst_name","initialise_monkeypuzzle","bind","initCytoscape","localStorage","getItem","loadJSON","setCurrentSadFaceDoc","setItem","current_sadface_doc","setCyData","setState","container","document","getElementById","elements","JSON","parse","cyData","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","layout","build_cola_layout","run","opts","cola_params","name","animate","randomize","padding","fit","maxSimulationTime","i","undefined","forEach","opt","makeLayout","componentDidMount","render","dropHandler","dragoverHandler"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AAEA,OAAO,qDAAP;AAIA,SAAQC,YAAR,EAAqBC,aAArB,EAAoCC,oBAApC,EAA0DC,WAA1D,EAAsEC,gBAAtE,EAAuFC,QAAvF,EAAiGC,EAAjG,EAAoGC,UAApG,EAAgHC,QAAhH,EAA0HC,QAA1H,EAAoIC,GAApI,EAAyIC,QAAzI,EAAmJC,gBAAnJ,EAAqKC,MAArK,EAA6KC,WAA7K,EAA0LC,MAA1L,EAAkMC,UAAlM,QAAmN,mBAAnN;;AAGA,MAAMC,SAAN,SAAwBvB,SAAxB,CAAkC;AAChCwB,EAAAA,WAAW,CAACC,KAAD,EAAO;AACZ,UAAMA,KAAN,EADY,CAEZ;;AACA,SAAKC,UAAL,GAAkB3B,KAAK,CAAC4B,SAAN,EAAlB;AACA,SAAKC,YAAL,GAAoB7B,KAAK,CAAC4B,SAAN,EAApB;AACA,SAAKE,cAAL,GAAsB9B,KAAK,CAAC4B,SAAN,EAAtB;AAEA,SAAKG,KAAL,GAAW;AACTC,MAAAA,UAAU,EAAE,GADH;AAETC,MAAAA,aAAa,EAAE,GAFN;AAGTC,MAAAA,EAAE,EAAE;AAHK,KAAX;AAOA,SAAKC,mBAAL,GAA0B,0BAAwB,KAAKC,aAA7B,GAA2C,wBAA3C,GAAoE,KAAKA,aAAzE,GAAuF,mBAAvF,GAA2G,KAAKC,YAAhH,GAA6H,+BAA7H,GAA6J,KAAKC,WAAlK,GAA8K,cAA9K,GAA6L,KAAKC,WAAlM,GAA8M,oDAAxO;AACA,SAAKH,aAAL,GAAqB,uBAArB;AACA,SAAKI,YAAL,GAAoB,uBAApB;AAEA,SAAKC,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAA/B;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AAIH;;AAEDD,EAAAA,uBAAuB,GAAE;AACvB;AACE,QAAIG,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EACA;AACI,WAAKnB,KAAL,CAAWoB,QAAX,CAAoBF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AACA,WAAKF,aAAL,GAFJ,CAGA;AACC,KALD,MAMA;AACI,WAAKjB,KAAL,CAAWqB,oBAAX,CAAgC,KAAKZ,mBAArC;AACAS,MAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8B,KAAKtB,KAAL,CAAWuB,mBAAzC;AACA,WAAKvB,KAAL,CAAWwB,SAAX,CAAqBvC,gBAAgB,CAACD,WAAW,CAAC,KAAKgB,KAAL,CAAWuB,mBAAZ,CAAZ,CAArC;AACA,WAAKN,aAAL;AACH;AAEJ;;AAEDA,EAAAA,aAAa,GAAE;AACb,SAAKQ,QAAL,CAAc;AAACjB,MAAAA,EAAE,EAAEhC,SAAS,CAAC;AACvBkD,QAAAA,SAAS,EAAEC,QAAQ,CAACC,cAAT,CAAwB,IAAxB,CADY;AAEvBC,QAAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAK/B,KAAL,CAAWgC,MAAtB,CAFa;AAIvBC,QAAAA,KAAK,EAAC,CACF;AAAIC,UAAAA,QAAQ,EAAE,MAAd;AACID,UAAAA,KAAK,EAAE;AACH,qBAAS,eADN;AAEH,4BAAgB,GAFb;AAGJ;AACH;AACI,2BAAe,QALZ;AAMH,2BAAe,OANZ;AAOH,kCAAsB,MAPnB;AAQH,kCAAsB;AARnB;AADX,SADE,EAcF;AAAIC,UAAAA,QAAQ,EAAE,aAAd;AACID,UAAAA,KAAK,EAAE;AACH,qBAAQ;AADL;AADX,SAdE,EAoBF;AAAIC,UAAAA,QAAQ,EAAE,2BAAd;AACID,UAAAA,KAAK,EAAE;AACH,gCAAoB;AADjB;AADX,SApBE,EA0BF;AAAIC,UAAAA,QAAQ,EAAE,+CAAd;AACID,UAAAA,KAAK,EAAE;AACH,gCAAoB;AADjB;AADX,SA1BE,EAgCF;AAAIC,UAAAA,QAAQ,EAAE,8CAAd;AACID,UAAAA,KAAK,EAAE;AACH,gCAAoB;AADjB;AADX,SAhCE,EAsCF;AAAIC,UAAAA,QAAQ,EAAE,MAAd;AACID,UAAAA,KAAK,EAAE;AACH,0BAAc,SADX;AAEH,kCAAsB,UAFnB;AAGH,kCAAsB,SAHnB;AAIH,2BAAe;AAJZ;AADX,SAtCE,EAgDF;AAAIC,UAAAA,QAAQ,EAAE,WAAd;AACID,UAAAA,KAAK,EAAE;AACH,4BAAe,GADZ;AAEH,4BAAe,OAFZ;AAGH,gCAAoB;AAHjB;AADX,SAhDE,EAyDF;AAAIC,UAAAA,QAAQ,EAAE,aAAd;AACID,UAAAA,KAAK,EAAC;AACF,yBAAa,MADX;AAEF,8BAAkB;AAFhB;AADV,SAzDE,EAgEF;AAAIC,UAAAA,QAAQ,EAAE,eAAd;AACID,UAAAA,KAAK,EAAC;AACF,yBAAa,MADX;AAEF,8BAAkB;AAFhB;AADV,SAhEE,EAsEF;AAAIC,UAAAA,QAAQ,EAAE,YAAd;AACID,UAAAA,KAAK,EAAE;AACH,gCAAoB,QADjB;AAEH,qBAAS,EAFN;AAGH,sBAAU,EAHP;AAIH,qBAAS,SAJN;AAKH,+BAAmB,CALhB;AAMH,4BAAgB,CANb;AAMgB;AACnB,8BAAkB,CAPf;AAQH,qBAAS;AARN;AADX,SAtEE,CAJiB;AAyFvBE,QAAAA,mBAAmB,EAAE,KAzFE;AA0FvBC,QAAAA,eAAe,EAAE,KA1FM;AA2FvBC,QAAAA,aAAa,EAAE,QA3FQ;AA4FvBC,QAAAA,OAAO,EAAE,GA5Fc;AA6FvBC,QAAAA,OAAO,EAAE;AA7Fc,OAAD,CAAd,CA8FZ;;AA9FY,KAAd,EADa,CAiGV;;AACH,SAAKC,MAAL,GAAc,KAAKC,iBAAL,EAAd;AACA,SAAKD,MAAL,CAAYE,GAAZ;AAED,GAhJ6B,CAgJ7B;;;AAEDD,EAAAA,iBAAiB,CAAEE,IAAF,EAAS;AACtB,QAAIC,WAAW,GAAG;AACdC,MAAAA,IAAI,EAAE,MADQ;AAEdC,MAAAA,OAAO,EAAE,IAFK;AAGdC,MAAAA,SAAS,EAAE,IAHG;AAIdC,MAAAA,OAAO,EAAE,GAJK;AAKdC,MAAAA,GAAG,EAAE,KALS;AAMdC,MAAAA,iBAAiB,EAAE;AANL,KAAlB;AAQA,QAAIC,CAAC,GAAG,CAAR;;AACA,QAAIR,IAAI,KAAKS,SAAb,EAAwB;AACpBT,MAAAA,IAAI,CAACU,OAAL,CAAa,UAASC,GAAT,EAAc;AAC1BV,QAAAA,WAAW,CAACO,CAAD,CAAX,GAAiBR,IAAI,CAACQ,CAAD,CAArB;AACA,UAAEA,CAAF;AACH,OAHE;AAIH;;AACD,WAAO,KAAK9C,KAAL,CAAWG,EAAX,CAAc+C,UAAd,CAA0BX,WAA1B,CAAP;AACH;;AAEDY,EAAAA,iBAAiB,GAAE;AAChB,SAAKzC,uBAAL,GADgB,CAEjB;AACA;AACA;AACA;AACA;AACA;AACC;;AACH0C,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAK,MAAA,EAAE,EAAC,IAAR;AAAa,MAAA,MAAM,EAAE,KAAKC,WAA1B;AAAuC,MAAA,UAAU,EAAE,KAAKC,eAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADF;AAOH;;AAtL+B;;AAyLlC,eAAe7D,SAAf","sourcesContent":["import React, {Component} from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport $ from 'jquery';\nimport contextMenus from 'cytoscape-context-menus';\n\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\n\n\n\nimport {remove_falsy,update_scheme, update_atom_metadata, import_json,export_cytoscape,add_atom, sd,add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source} from '../../lib/Sadface'; \n\n\nclass Cytoscape extends Component {\n  constructor(props){\n        super(props);\n        //create Refs\n        this.newAtomRef = React.createRef()\n        this.newSchemeRef = React.createRef();\n        this.editContentRef = React.createRef();\n\n        this.state={\n          modalValue: ' ',\n          dropDownValue: ' ',\n          cy: null,\n\n        };\n        \n        this.default_sadface_doc= \"{\\\"analyst_email\\\":\\\"\"+this.analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+this.analyst_email+\"\\\",\\\"created\\\":\\\"\"+this.created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+this.edited_date+\"\\\",\\\"id\\\":\\\"\"+this.document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\n        this.analyst_email = \"Default Analyst Email\";\n        this.analyst_name = \"Default Analsyst Name\";\n\n        this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n        this.initCytoscape = this.initCytoscape.bind(this);\n\n\n\n    }\n\n    initialise_monkeypuzzle(){\n      //load diagram if there is one in localStorage\n        if (localStorage.getItem(\"state\"))\n        {\n            this.props.loadJSON(localStorage.getItem(\"state\"));\n            this.initCytoscape();\n        //else use default\n        } else\n        {\n            this.props.setCurrentSadFaceDoc(this.default_sadface_doc);\n            localStorage.setItem(\"state\", this.props.current_sadface_doc);\n            this.props.setCyData(export_cytoscape(import_json(this.props.current_sadface_doc)));\n            this.initCytoscape();\n        }\n\n    }\n\n    initCytoscape(){\n      this.setState({cy: cytoscape({\n            container: document.getElementById('cy'),\n            elements: JSON.parse(this.props.cyData),\n\n            style:[\n                {   selector: \"node\", \n                    style: {\n                        \"label\": \"data(content)\",\n                        \"text-opacity\": 0.7,\n                       // \"width\" : \"auto\",\n                    //    \"height\" : \"auto\",\n                        \"text-valign\": \"bottom\",\n                        \"text-halign\": \"right\",\n                        \"text-outline-color\": \"#eee\",\n                        \"text-outline-width\": 1\n                    }\n                },\n                \n                {   selector: \"[typeshape]\", \n                    style: {\n                        \"shape\":\"data(typeshape)\"\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond']\", \n                    style: {\n                        'background-color': '#CC9900'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][content='Conflict']\",\n                    style: {\n                        'background-color': 'red'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][content='Support']\",\n                    style: {\n                        'background-color': 'green'\n                    }\n                },\n\n                {   selector: \"edge\", \n                    style: {\n                        \"line-color\": \"#9dbaea\",\n                        \"target-arrow-shape\": \"triangle\",\n                        \"target-arrow-color\": \"#9dbaea\",\n                        \"curve-style\": \"bezier\"\n                    }\n                },\n\n\n                {   selector: \":selected\", \n                    style: {\n                        \"border-width\":\"1\",\n                        \"border-color\":\"black\",\n                        \"background-color\": \"#3399CC\"\n                    }\n                },\n\n\n                {   selector: \".atom-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n\n                {   selector: \".scheme-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n                {   selector: '.eh-handle',\n                    style: {\n                        'background-color': 'orange',\n                        'width': 10,\n                        'height': 10,\n                        'shape': 'ellipse',\n                        'overlay-opacity': 0,\n                        'border-width': 8, // makes the handle easier to hit\n                        'border-opacity': 0,\n                        'label': '',\n                    }\n                }\n                \n            ],\n\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n      })//cytoscapefunction\n        \n      });//setState cy\n      this.layout = this.build_cola_layout();\n      this.layout.run();\n\n    }//initmonkeyPuzzle\n\n    build_cola_layout( opts ) {\n        var cola_params = {\n            name: \"cola\",\n            animate: true,\n            randomize: true,\n            padding: 100,\n            fit: false,\n            maxSimulationTime: 1500\n        };\n        var i = 0;\n        if (opts !== undefined) {\n            opts.forEach(function(opt) {\n             cola_params[i] = opts[i];\n             ++i;\n         });\n        }\n        return this.state.cy.makeLayout( cola_params );\n    }\n\n    componentDidMount(){\n       this.initialise_monkeypuzzle();\n      // }\n      // static getDerivedStateFromProps(nextProps, prevState) {\n      //     if(nextProps.cy_data !== prevState.cy_data){\n      //         return{cy_data: nextProps.cy_data};\n      //     }\n      //    else return null;\n      }\n    render(){\n      return(\n        <div>\n         <div id=\"cy\" onDrop={this.dropHandler} onDragOver={this.dragoverHandler}>\n\n      </div>\n        </div>);\n\n  }\n}\n\nexport default Cytoscape;"]},"metadata":{},"sourceType":"module"}