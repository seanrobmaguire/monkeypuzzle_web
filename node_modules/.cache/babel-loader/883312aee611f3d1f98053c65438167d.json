{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/ResourcePane.js\";\nimport React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons'; //Import Components\n\nimport Modal from './Modal';\nimport TabBody from './TabBody';\n\nclass ResourcePane extends Component {\n  constructor(props) {\n    super(props);\n    this.handlegetType = this.handlegetType.bind(this);\n    this.addTab = this.addTab.bind(this);\n  }\n\n  add_tab() {\n    let newTab = {};\n    console.log('load tab null');\n    newTab = add_resource(' ');\n    console.log(newTab, 'newTab');\n    add_resource_metadata(newTab.id, 'title', '');\n    newTab.metadata = {\n      title: ''\n    };\n    console.log(newTab, 'newTab with metadata');\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    newTab.type = this.state.resourceType;\n    this.add_tab_to_tab_array(newTab);\n  }\n\n  componentDidMount() {// this.setState({activeTab: this.props.activeTab})\n    //  console.log(this.state.activeTab, 'active tabs');\n  }\n\n  componentDidUpdate(prevProps) {// Typical usage (don't forget to compare props):\n    //if (this.props.remove_all_tabs !== prevProps.remove_all_tabs) {\n    //  this.remove_all_tabs();\n    // }\n  }\n\n  handlegetType(e) {\n    let type = e.target.value.toLowerCase();\n    console.log(type, 'resourcePane type');\n    this.props.setType(type);\n  } // handleNewAtomText(){\n  //      if(this.props.focused !== null || this.props.focused !== undefined){\n  //         if(this.props.focused.parentNode.id === \"textarea\"){\n  //             var elem = document.getElementById(this.props.focused.id);\n  //             var selection = elem.value.substring(elem.selectionStart, elem.selectionEnd);\n  //             console.log(selection, 'selection');\n  //             console.log(elem, 'elem');\n  //           //  if(selection != null || selection != undefined){\n  //             //   add_new_atom_node(selection);\n  //              //   elem.selectionStart = elem.selectionEnd;\n  //              //   clear_focus();\n  //            // }\n  //         }\n  //     }\n  //     else { console.log(\"Not a valid text source\") }\n  // }\n\n\n  render() {\n    let num = 0;\n    const newResourceModal = {\n      trigger: {\n        triggerText: React.createElement(FontAwesomeIcon, {\n          icon: faPlusSquare,\n          size: \"lg\",\n          color: \"#cbc5c1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }),\n        className: 'add_tab_button',\n        triggerId: \"add_tab_button\"\n      },\n      id: \"resource_pane_selection_modal\",\n      title: 'New Resource Pane',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Select a resource type\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"resource_type\",\n        onChange: this.handlegetType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Text\"))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: \"btn btn-primary\",\n          value: \"Add\"\n        }\n      }\n    };\n    return React.createElement(\"div\", {\n      className: \"resource-pane\",\n      id: \"resource-pane\",\n      style: {\n        display: this.props.showResourcePane ? \"block\" : \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"resource_pane_tab_head\",\n      id: \"resource_pane_tab_head\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      modalProps: newResourceModal,\n      onClick: this.props.addTab,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), this.props.tabs.map((item, i) => {\n      const onSetActiveTab = () => this.props.setActiveTab(item.id);\n\n      return React.createElement(\"button\", {\n        key: item.id + '_btn',\n        onClick: onSetActiveTab,\n        className: this.props.current_tab === item.id ? \"tablinks active\" : \"tablinks\",\n        id: item.id + \"_btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, ++num);\n    })), React.createElement(\"div\", {\n      className: \"tab_body\",\n      id: \"tab_body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, this.props.tabs.map((item, i) => {\n      if (item.type === \"text\") {\n        this.loadTxtRef = React.createRef();\n\n        const handleRemove = () => this.props.remove_tab(i);\n\n        const clickLoad = () => {\n          this.loadTxtRef.current.click();\n        };\n\n        const handleFileUpload = () => {\n          var files = this.loadTxtRef.current.files;\n          this.props.fileManager('load', 'txt', item.tab_id, files);\n        };\n\n        const handleFileDownload = () => {\n          this.props.fileManager('save', 'txt', item.tab_id);\n        };\n\n        const handleChange_title = e => {\n          var titleValue = e.target.value;\n          this.props.change_title(item.tab_id, titleValue);\n        };\n\n        const handleChangeContent = e => {\n          var contentValue = e.target.value;\n          this.props.change_content(item.tab_id, contentValue);\n        };\n\n        const handleAtomFromText = e => {\n          console.log(\"atom from text\");\n          console.log(this.props.selectedText, \"atom from text selected\");\n          this.props.addAtomFromText();\n        };\n\n        return React.createElement(TabBody, {\n          id: item.id,\n          key: item.id + '_bdy',\n          i: i,\n          style: {\n            display: this.props.current_tab === item.id ? 'block' : 'none'\n          },\n          handleremove: handleRemove,\n          handleFileUpload: handleFileUpload,\n          handleFileDownload: handleFileDownload,\n          clickLoad: clickLoad,\n          handleAtomFromText: handleAtomFromText,\n          focus: this.props.focus,\n          clearSelection: this.props.clearSelection,\n          titleValue: item.metadata.title,\n          contentValue: item.content,\n          handleChange_title: handleChange_title,\n          handleChangeContent: handleChangeContent,\n          set_focus: this.props.set_focus,\n          loadTxtRef: this.loadTxtRef,\n          setSelectedText: this.props.setSelectedText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        });\n      }\n    })));\n  }\n\n}\n\nexport default ResourcePane;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/ResourcePane.js"],"names":["React","Component","FontAwesomeIcon","faPlusSquare","Modal","TabBody","ResourcePane","constructor","props","handlegetType","bind","addTab","add_tab","newTab","console","log","add_resource","add_resource_metadata","id","metadata","title","localStorage","setItem","JSON","stringify","get_sd","type","state","resourceType","add_tab_to_tab_array","componentDidMount","componentDidUpdate","prevProps","e","target","value","toLowerCase","setType","render","num","newResourceModal","trigger","triggerText","className","triggerId","content","footer","buttonNo","button1","button2","display","showResourcePane","tabs","map","item","i","onSetActiveTab","setActiveTab","current_tab","loadTxtRef","createRef","handleRemove","remove_tab","clickLoad","current","click","handleFileUpload","files","fileManager","tab_id","handleFileDownload","handleChange_title","titleValue","change_title","handleChangeContent","contentValue","change_content","handleAtomFromText","selectedText","addAtomFromText","focus","clearSelection","set_focus","setSelectedText"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons';\n//Import Components\nimport Modal from './Modal';\nimport TabBody from './TabBody';\n\n\n\n\n\n\nclass ResourcePane extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.handlegetType = this.handlegetType.bind(this);\n        this.addTab = this.addTab.bind(this);\n\n\n    };\n\n    add_tab(){\n        let newTab = {}\n        console.log('load tab null')\n        newTab = add_resource(' ');\n        console.log(newTab, 'newTab');\n        add_resource_metadata(newTab.id, 'title', '');\n\n        newTab.metadata = {title: ''}\n        console.log(newTab, 'newTab with metadata')\n\n\n        localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n        newTab.type = this.state.resourceType;\n        this.add_tab_to_tab_array(newTab);   \n    }\n\n\n\n    componentDidMount(){\n       // this.setState({activeTab: this.props.activeTab})\n      //  console.log(this.state.activeTab, 'active tabs');\n    }\n\n    componentDidUpdate(prevProps) {\n        // Typical usage (don't forget to compare props):\n        //if (this.props.remove_all_tabs !== prevProps.remove_all_tabs) {\n        //  this.remove_all_tabs();\n        // }\n    }\n\n    handlegetType(e){\n        let type = e.target.value.toLowerCase();\n        console.log(type,'resourcePane type');\n        this.props.setType(type);\n\n    }\n\n    // handleNewAtomText(){\n    //      if(this.props.focused !== null || this.props.focused !== undefined){\n    //         if(this.props.focused.parentNode.id === \"textarea\"){\n    //             var elem = document.getElementById(this.props.focused.id);\n\n    //             var selection = elem.value.substring(elem.selectionStart, elem.selectionEnd);\n    //             console.log(selection, 'selection');\n    //             console.log(elem, 'elem');\n    //           //  if(selection != null || selection != undefined){\n    //             //   add_new_atom_node(selection);\n    //              //   elem.selectionStart = elem.selectionEnd;\n    //              //   clear_focus();\n    //            // }\n    //         }\n    //     }\n    //     else { console.log(\"Not a valid text source\") }\n\n    // }\n\n\n\n\n\n    render() {\n        let num =0;\n         \n\n\n    \n\n\n        const newResourceModal = {\n            trigger: {\n                triggerText: <FontAwesomeIcon icon={faPlusSquare} size=\"lg\" color=\"#cbc5c1\"/>,\n                className: 'add_tab_button',\n                triggerId: \"add_tab_button\",\n            },\n            id:\"resource_pane_selection_modal\",\n            title: 'New Resource Pane',\n            content:  <div className=\"modal-body\">\n                <p>Select a resource type</p>\n                <select className=\"form-control\" id=\"resource_type\" onChange={this.handlegetType}>\n                <option>Text</option>\n                </select>\n                </div>,\n            footer: {\n                buttonNo: 2,\n                button1: {\n                    className: \"btn btn-secondary\",\n                    value: \"Close\"\n                },\n                button2: {\n                    className: \"btn btn-primary\",\n                    value: \"Add\"\n                }\n            }\n        };\n\n\n        return ( \n            <div className=\"resource-pane\" id=\"resource-pane\" style={{display: this.props.showResourcePane ? \"block\" : \"none\"}}> \n                <div className=\"resource_pane_tab_head\" id=\"resource_pane_tab_head\">\n                    <Modal\n                        modalProps = {newResourceModal}  \n                        onClick = {this.props.addTab} \n\n                    />\n                    {\n                        this.props.tabs.map((item, i)=> {\n                            const onSetActiveTab = () =>\n                                this.props.setActiveTab(item.id);\n                                    return(\n                                        <button  \n                                            key={item.id + '_btn'}\n                                            onClick={onSetActiveTab} \n                                            className={this.props.current_tab === item.id ? \"tablinks active\" : \"tablinks\"}\n                                            id={item.id+\"_btn\"}\n                                        >\n                                            {++num}\n                                        </button>\n                                    );\n                        })\n                    }\n                </div>\n                            \n                        <div className=\"tab_body\" id=\"tab_body\">\n                            {this.props.tabs.map((item,i) => {\n                                if(item.type === \"text\"){\n                                this.loadTxtRef = React.createRef();\n                                \n\n                                const handleRemove = () =>\n                                    this.props.remove_tab(i);\n\n                                const clickLoad =() => {\n                                    \n                                    this.loadTxtRef.current.click();\n\n                                }\n\n                                const handleFileUpload = () =>{\n                                var files = this.loadTxtRef.current.files;\n                                this.props.fileManager('load','txt',  item.tab_id ,files);\n\n                                }\n                                const handleFileDownload = () =>{\n\n                                    this.props.fileManager('save', 'txt', item.tab_id); \n                                }\n                                const handleChange_title = (e) =>{\n                                    var titleValue = e.target.value;\n                                    this.props.change_title(item.tab_id, titleValue);\n                                }\n\n                                const handleChangeContent = (e) =>{\n                                    var contentValue = e.target.value;\n                                    this.props.change_content(item.tab_id, contentValue);\n                                }\n                                const handleAtomFromText = (e) =>{\n                                    console.log(\"atom from text\")\n                                    console.log(this.props.selectedText, \"atom from text selected\");\n                                    this.props.addAtomFromText();\n                                }\n                                return(\n                                    <TabBody\n                                        id={item.id}\n                                        key={item.id + '_bdy'}\n                                        i={i}\n                                        style={{display: this.props.current_tab === item.id ? 'block' : 'none'}}\n\n                                        handleremove={handleRemove}\n                                        handleFileUpload={handleFileUpload}\n                                        handleFileDownload={handleFileDownload}\n                                        clickLoad={clickLoad}\n                                        handleAtomFromText = {handleAtomFromText}\n                                        focus={this.props.focus}\n                                        clearSelection={this.props.clearSelection}\n\n\n                                        titleValue={item.metadata.title}\n                                        contentValue = {item.content}\n                                    \n                                        handleChange_title={handleChange_title}\n                                        handleChangeContent={handleChangeContent}\n                                        set_focus={this.props.set_focus}\n\n\n                                        loadTxtRef={this.loadTxtRef}\n                                        setSelectedText={this.props.setSelectedText}\n                                       \n                                    />\n                                );\n                            }\n                            })}\n                        </div>\n            </div>\n        );\n    }\n}\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\nexport default ResourcePane;\n"]},"metadata":{},"sourceType":"module"}