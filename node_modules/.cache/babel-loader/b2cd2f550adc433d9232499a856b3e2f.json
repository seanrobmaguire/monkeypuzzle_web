{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles'; //import functions\n\nimport { import_json } from '../lib/Sadface';\nimport { export_cytoscape } from '../lib/Sadface';\ncytoscape.use(edgehandles);\ncytoscape.use(cola);\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar cy_data = {};\nvar json;\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\"; //var document_id = this.props.new_uuid;\n//var default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+this.state.created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+this.state.edited_date+\"\\\",\\\"id\\\":\\\"\"+this.state.document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\n\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\nclass GraphContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cy: null,\n      cm: null,\n      selected: [],\n      position: [],\n      layout: null,\n      running: false,\n      cy_data: {\n        nodes: [{\n          data: {\n            id: 'cat'\n          }\n        }, {\n          data: {\n            id: 'bird'\n          }\n        }, {\n          data: {\n            id: 'ladybug'\n          }\n        }, {\n          data: {\n            id: 'aphid'\n          }\n        }, {\n          data: {\n            id: 'rose'\n          }\n        }, {\n          data: {\n            id: 'grasshopper'\n          }\n        }, {\n          data: {\n            id: 'plant'\n          }\n        }, {\n          data: {\n            id: 'wheat'\n          }\n        }],\n        edges: [{\n          data: {\n            source: 'cat',\n            target: 'bird'\n          }\n        }, {\n          data: {\n            source: 'bird',\n            target: 'ladybug'\n          }\n        }, {\n          data: {\n            source: 'bird',\n            target: 'grasshopper'\n          }\n        }, {\n          data: {\n            source: 'grasshopper',\n            target: 'plant'\n          }\n        }, {\n          data: {\n            source: 'grasshopper',\n            target: 'wheat'\n          }\n        }, {\n          data: {\n            source: 'ladybug',\n            target: 'aphid'\n          }\n        }, {\n          data: {\n            source: 'aphid',\n            target: 'rose'\n          }\n        }]\n      },\n      json: '',\n      created_date: '',\n      edited_date: '',\n      analyst_email: \"Default Analyst Email\",\n      analyst_name: '',\n      document_id: '',\n      default_sadface_doc: {},\n      current_sadface_doc: null,\n      focused: null,\n      undo_stack: [],\n      redo_stack: [],\n      edit_atom: null,\n      resource_pane_viewable_state: true,\n      sd: {}\n    };\n    this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n  }\n\n  initialise_monkeypuzzle() {\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\")) {\n      this.loadJSON(localStorage.getItem(\"state\"));\n      this.initCytoscape(); //else use default\n    } else {\n      current_sadface_doc = this.setDefault();\n      localStorage.setItem(\"state\", current_sadface_doc); //   cy_data = export_cytoscape({import_json(current_sadface_doc)});\n\n      this.initCytoscape();\n    }\n  }\n\n  setDefault() {\n    this.setState({\n      analyst_email: \"Default Analyst Email\",\n      analyst_name: \"Default Analsyst Name\",\n      created: this.props.now(),\n      edges: [],\n      edited: this.props.now(),\n      id: this.props.new_uuid(),\n      metadata: {},\n      nodes: [],\n      resources: []\n    });\n  }\n\n  loadJSON(json_value) {\n    /*  json = import_json(json_value);\n      localStorage.setItem(\"state\",JSON.stringify(this.state.sd));\n      current_sadface_doc = JSON.stringify(this.state.sd);\n      //load any sources in the stored diagram state\n      window.onload = function () {\n          this.props.loadTabs(json.resources);\n      };\n      cy_data = export_cytoscape(json);\n      if(cy !== null)\n      {\n          cy.elements().remove();\n          cy.json({elements: JSON.parse(cy_data)});\n          this.redraw_visualisation();\n      }*/\n  }\n\n  redraw_visualisation() {} //  this.state.layout.stop();\n  //  layout.options.eles = cy.elements();\n  // layout.run();\n  // cy.center();\n  //  cy.resize();\n  //End Redo\n\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return this.state.cy.makeLayout(cola_params);\n  }\n\n  initCytoscape() {\n    this.setState({\n      cy: cytoscape({\n        container: document.getElementById(\"cy\"),\n        ready: function () {\n          window.cy = this;\n        },\n        elements: JSON.parse(cy_data),\n        style: [{\n          selector: \"node\",\n          style: {\n            \"content\": \"data(content)\",\n            \"text-opacity\": 0.7,\n            \"width\": \"auto\",\n            \"height\": \"auto\",\n            \"text-valign\": \"bottom\",\n            \"text-halign\": \"right\",\n            \"text-outline-color\": \"#eee\",\n            \"text-outline-width\": 1\n          }\n        }, {\n          selector: \"[typeshape]\",\n          style: {\n            \"shape\": \"data(typeshape)\"\n          }\n        }, {\n          selector: \"node[typeshape='diamond']\",\n          style: {\n            'background-color': '#CC9900'\n          }\n        }, {\n          selector: \"node[typeshape='diamond'][content='Conflict']\",\n          style: {\n            'background-color': 'red'\n          }\n        }, {\n          selector: \"node[typeshape='diamond'][content='Support']\",\n          style: {\n            'background-color': 'green'\n          }\n        }, {\n          selector: \"edge\",\n          style: {\n            \"line-color\": \"#9dbaea\",\n            \"target-arrow-shape\": \"triangle\",\n            \"target-arrow-color\": \"#9dbaea\",\n            \"curve-style\": \"bezier\"\n          }\n        }, {\n          selector: \":selected\",\n          style: {\n            \"border-width\": \"1\",\n            \"border-color\": \"black\",\n            \"background-color\": \"#3399CC\"\n          }\n        }, {\n          selector: \".atom-label\",\n          style: {\n            \"text-wrap\": \"wrap\",\n            \"text-max-width\": 160\n          }\n        }, {\n          selector: \".scheme-label\",\n          style: {\n            \"text-wrap\": \"wrap\",\n            \"text-max-width\": 160\n          }\n        }],\n        boxSelectionEnabled: false,\n        autounselectify: false,\n        selectionType: \"single\",\n        minZoom: 0.1,\n        maxZoom: 1.5\n      })\n    });\n  } //close initCytoscape \n\n\n  componentDidMount() {\n    this.initialise_monkeypuzzle();\n    this.setState({\n      created_date: this.now,\n      document_id: this.props.new_uuid,\n      default_sadface_doc: \"{\\\"analyst_email\\\":\\\"\" + analyst_email + \"\\\",\\\"analyst_name\\\":\\\"\" + analyst_email + \"\\\",\\\"created\\\":\\\"\" + this.state.created_date + \"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\" + this.state.edited_date + \"\\\",\\\"id\\\":\\\"\" + this.state.document_id + \"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\"\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"cy\",\n      ondrop: \"drop_handler(event);\",\n      ondragover: \"dragover_handler(event);\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nexport default GraphContainer;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js"],"names":["React","Component","cytoscape","cola","edgehandles","import_json","export_cytoscape","use","cy","cm","selected","position","layout","running","cy_data","json","analyst_email","analyst_name","current_sadface_doc","focused","undo_stack","redo_stack","edit_atom","resource_pane_viewable_state","GraphContainer","constructor","props","state","nodes","data","id","edges","source","target","created_date","edited_date","document_id","default_sadface_doc","sd","initialise_monkeypuzzle","bind","build_cola_layout","localStorage","getItem","loadJSON","initCytoscape","setDefault","setItem","setState","created","now","edited","new_uuid","metadata","resources","json_value","redraw_visualisation","opts","cola_params","name","animate","randomize","padding","fit","maxSimulationTime","i","undefined","forEach","opt","makeLayout","container","document","getElementById","ready","window","elements","JSON","parse","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","componentDidMount","render","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,WAAP,MAAwB,uBAAxB,C,CAEA;;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,gBAAR,QAA+B,gBAA/B;AAKAJ,SAAS,CAACK,GAAV,CAAeH,WAAf;AACAF,SAAS,CAACK,GAAV,CAAeJ,IAAf;AAGA,IAAIK,EAAE,GAAG,IAAT;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,QAAQ,GAAG,EAAf;AACA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,MAAM,GAAG,IAAb;AACA,IAAIC,OAAO,GAAG,KAAd;AACA,IAAIC,OAAO,GAAI,EAAf;AACA,IAAIC,IAAJ;AACA,IAAIC,aAAa,GAAG,uBAApB;AACA,IAAIC,YAAY,GAAG,uBAAnB,C,CACA;AACA;;AACA,IAAIC,mBAAmB,GAAG,IAA1B;AACA,IAAIC,OAAO,GAAG,IAAd;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,4BAA4B,GAAG,IAAnC;;AAGA,MAAMC,cAAN,SAA6BxB,KAAK,CAACC,SAAnC,CAA4C;AACxCwB,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZnB,MAAAA,EAAE,EAAC,IADS;AAETC,MAAAA,EAAE,EAAE,IAFK;AAGTC,MAAAA,QAAQ,EAAE,EAHD;AAITC,MAAAA,QAAQ,EAAE,EAJD;AAKTC,MAAAA,MAAM,EAAE,IALC;AAMTC,MAAAA,OAAO,EAAE,KANA;AAOTC,MAAAA,OAAO,EAAE;AACLc,QAAAA,KAAK,EAAE,CACH;AAAEC,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SADG,EAEH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SAFG,EAGH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SAHG,EAIH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SAJG,EAKH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SALG,EAMH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SANG,EAOH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SAPG,EAQH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SARG,CADF;AAWLC,QAAAA,KAAK,EAAE,CACH;AAAEF,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,KAAV;AAAiBC,YAAAA,MAAM,EAAE;AAAzB;AAAR,SADG,EAEH;AAAEJ,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,MAAV;AAAkBC,YAAAA,MAAM,EAAE;AAA1B;AAAR,SAFG,EAGH;AAAEJ,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,MAAV;AAAkBC,YAAAA,MAAM,EAAE;AAA1B;AAAR,SAHG,EAIH;AAAEJ,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,aAAV;AAAyBC,YAAAA,MAAM,EAAE;AAAjC;AAAR,SAJG,EAKH;AAAEJ,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,aAAV;AAAyBC,YAAAA,MAAM,EAAE;AAAjC;AAAR,SALG,EAMH;AAAEJ,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,SAAV;AAAqBC,YAAAA,MAAM,EAAE;AAA7B;AAAR,SANG,EAOH;AAAEJ,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,OAAV;AAAmBC,YAAAA,MAAM,EAAE;AAA3B;AAAR,SAPG;AAXF,OAPA;AA4BTlB,MAAAA,IAAI,EAAE,EA5BG;AA6BTmB,MAAAA,YAAY,EAAE,EA7BL;AA8BTC,MAAAA,WAAW,EAAC,EA9BH;AA+BTnB,MAAAA,aAAa,EAAE,uBA/BN;AAgCTC,MAAAA,YAAY,EAAC,EAhCJ;AAiCTmB,MAAAA,WAAW,EAAE,EAjCJ;AAkCTC,MAAAA,mBAAmB,EAAE,EAlCZ;AAmCTnB,MAAAA,mBAAmB,EAAE,IAnCZ;AAoCTC,MAAAA,OAAO,EAAE,IApCA;AAqCTC,MAAAA,UAAU,EAAE,EArCH;AAsCTC,MAAAA,UAAU,EAAE,EAtCH;AAuCTC,MAAAA,SAAS,EAAE,IAvCF;AAwCTC,MAAAA,4BAA4B,EAAE,IAxCrB;AA0CTe,MAAAA,EAAE,EAAC;AA1CM,KAAb;AAiDA,SAAKC,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAA/B;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACH;;AAEDD,EAAAA,uBAAuB,GAAE;AACnB;AACF,QAAIG,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EACA;AACI,WAAKC,QAAL,CAAcF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,WAAKE,aAAL,GAFJ,CAGA;AACC,KALD,MAMA;AACI3B,MAAAA,mBAAmB,GAAG,KAAK4B,UAAL,EAAtB;AACAJ,MAAAA,YAAY,CAACK,OAAb,CAAqB,OAArB,EAA8B7B,mBAA9B,EAFJ,CAGC;;AACG,WAAK2B,aAAL;AACH;AACJ;;AAELC,EAAAA,UAAU,GAAE;AACR,SAAKE,QAAL,CAAc;AACVhC,MAAAA,aAAa,EAAE,uBADL;AAEVC,MAAAA,YAAY,EAAE,uBAFJ;AAGVgC,MAAAA,OAAO,EAAE,KAAKvB,KAAL,CAAWwB,GAAX,EAHC;AAIVnB,MAAAA,KAAK,EAAC,EAJI;AAKVoB,MAAAA,MAAM,EAAE,KAAKzB,KAAL,CAAWwB,GAAX,EALE;AAMVpB,MAAAA,EAAE,EAAE,KAAKJ,KAAL,CAAW0B,QAAX,EANM;AAOVC,MAAAA,QAAQ,EAAC,EAPC;AAQVzB,MAAAA,KAAK,EAAC,EARI;AASV0B,MAAAA,SAAS,EAAE;AATD,KAAd;AAcH;;AAEDV,EAAAA,QAAQ,CAACW,UAAD,EAAa;AACnB;;;;;;;;;;;;;;AAcD;;AAEDC,EAAAA,oBAAoB,GAAG,CAMtB,CANmB,CAClB;AACA;AACC;AACA;AACD;AAIF;;;AAEIf,EAAAA,iBAAiB,CAAEgB,IAAF,EAAS;AACtB,QAAIC,WAAW,GAAG;AACdC,MAAAA,IAAI,EAAE,MADQ;AAEdC,MAAAA,OAAO,EAAE,IAFK;AAGdC,MAAAA,SAAS,EAAE,IAHG;AAIdC,MAAAA,OAAO,EAAE,GAJK;AAKdC,MAAAA,GAAG,EAAE,KALS;AAMdC,MAAAA,iBAAiB,EAAE;AANL,KAAlB;AAQA,QAAIC,CAAC,GAAG,CAAR;;AACA,QAAIR,IAAI,KAAKS,SAAb,EAAwB;AACpBT,MAAAA,IAAI,CAACU,OAAL,CAAa,UAASC,GAAT,EAAc;AACxBV,QAAAA,WAAW,CAACO,CAAD,CAAX,GAAiBR,IAAI,CAACQ,CAAD,CAArB;AACA,UAAEA,CAAF;AACF,OAHD;AAIH;;AACD,WAAO,KAAKtC,KAAL,CAAWnB,EAAX,CAAc6D,UAAd,CAA0BX,WAA1B,CAAP;AACH;;AAEDb,EAAAA,aAAa,GAAE;AACX,SAAKG,QAAL,CAAc;AACVxC,MAAAA,EAAE,EAAEN,SAAS,CAAC;AACdoE,QAAAA,SAAS,EAAEC,QAAQ,CAACC,cAAT,CAAwB,IAAxB,CADG;AAEdC,QAAAA,KAAK,EAAE,YAAU;AAAEC,UAAAA,MAAM,CAAClE,EAAP,GAAY,IAAZ;AAAmB,SAFxB;AAGdmE,QAAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAW/D,OAAX,CAHI;AAIdgE,QAAAA,KAAK,EAAC,CACF;AAAIC,UAAAA,QAAQ,EAAE,MAAd;AACID,UAAAA,KAAK,EAAE;AACH,uBAAW,eADR;AAEH,4BAAgB,GAFb;AAGH,qBAAU,MAHP;AAIH,sBAAW,MAJR;AAKH,2BAAe,QALZ;AAMH,2BAAe,OANZ;AAOH,kCAAsB,MAPnB;AAQH,kCAAsB;AARnB;AADX,SADE,EAaF;AAAIC,UAAAA,QAAQ,EAAE,aAAd;AACID,UAAAA,KAAK,EAAE;AACH,qBAAQ;AADL;AADX,SAbE,EAkBF;AAAIC,UAAAA,QAAQ,EAAE,2BAAd;AACID,UAAAA,KAAK,EAAE;AACH,gCAAoB;AADjB;AADX,SAlBE,EAuBF;AACIC,UAAAA,QAAQ,EAAE,+CADd;AAEID,UAAAA,KAAK,EAAE;AACH,gCAAoB;AADjB;AAFX,SAvBE,EA6BF;AACIC,UAAAA,QAAQ,EAAE,8CADd;AAEID,UAAAA,KAAK,EAAE;AACH,gCAAoB;AADjB;AAFX,SA7BE,EAmCF;AAAIC,UAAAA,QAAQ,EAAE,MAAd;AACID,UAAAA,KAAK,EAAE;AACH,0BAAc,SADX;AAEH,kCAAsB,UAFnB;AAGH,kCAAsB,SAHnB;AAIH,2BAAe;AAJZ;AADX,SAnCE,EA2CF;AAAIC,UAAAA,QAAQ,EAAE,WAAd;AACID,UAAAA,KAAK,EAAE;AACH,4BAAe,GADZ;AAEH,4BAAe,OAFZ;AAGH,gCAAoB;AAHjB;AADX,SA3CE,EAkDF;AAAIC,UAAAA,QAAQ,EAAE,aAAd;AACID,UAAAA,KAAK,EAAC;AACF,yBAAa,MADX;AAEF,8BAAkB;AAFhB;AADV,SAlDE,EAwDF;AAAIC,UAAAA,QAAQ,EAAE,eAAd;AACID,UAAAA,KAAK,EAAC;AACF,yBAAa,MADX;AAEF,8BAAkB;AAFhB;AADV,SAxDE,CAJQ;AAmEVE,QAAAA,mBAAmB,EAAE,KAnEX;AAoEVC,QAAAA,eAAe,EAAE,KApEP;AAqEVC,QAAAA,aAAa,EAAE,QArEL;AAsEVC,QAAAA,OAAO,EAAE,GAtEC;AAuEVC,QAAAA,OAAO,EAAE;AAvEC,OAAD;AADH,KAAd;AA4EH,GArNuC,CAqNvC;;;AAKDC,EAAAA,iBAAiB,GAAE;AACf,SAAK9C,uBAAL;AACA,SAAKS,QAAL,CACI;AAACd,MAAAA,YAAY,EAAE,KAAKgB,GAApB;AACCd,MAAAA,WAAW,EAAE,KAAKV,KAAL,CAAW0B,QADzB;AAECf,MAAAA,mBAAmB,EAAE,0BAAwBrB,aAAxB,GAAsC,wBAAtC,GAA+DA,aAA/D,GAA6E,mBAA7E,GAAiG,KAAKW,KAAL,CAAWO,YAA5G,GAAyH,+BAAzH,GAAyJ,KAAKP,KAAL,CAAWQ,WAApK,GAAgL,cAAhL,GAA+L,KAAKR,KAAL,CAAWS,WAA1M,GAAsN;AAF5O,KADJ;AAOH;;AAEDkD,EAAAA,MAAM,GAAE;AACJ,WACI;AAAK,MAAA,EAAE,EAAC,IAAR;AAAa,MAAA,MAAM,EAAC,sBAApB;AAA2C,MAAA,UAAU,EAAC,0BAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AAzOuC;;AA4O5C,SAASC,eAAT,CAAyB5D,KAAzB,EAA+B;AAC3B,SAAO,EAAP;AACH;;AAGD,eAAeH,cAAf","sourcesContent":["import React,{Component} from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\n\n//import functions\nimport {import_json} from '../lib/Sadface';\nimport {export_cytoscape} from '../lib/Sadface';\n\n\n\n\ncytoscape.use( edgehandles );\ncytoscape.use( cola );\n\n\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar cy_data  = {};\nvar json;\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\n//var document_id = this.props.new_uuid;\n//var default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+this.state.created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+this.state.edited_date+\"\\\",\\\"id\\\":\\\"\"+this.state.document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\n\nclass GraphContainer extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n        \tcy:null,\n            cm: null,\n            selected: [],\n            position: [],\n            layout: null,\n            running: false,\n            cy_data: {\n                nodes: [\n                    { data: { id: 'cat' } },\n                    { data: { id: 'bird' } },\n                    { data: { id: 'ladybug' } },\n                    { data: { id: 'aphid' } },\n                    { data: { id: 'rose' } },\n                    { data: { id: 'grasshopper' } },\n                    { data: { id: 'plant' } },\n                    { data: { id: 'wheat' } }\n                ],\n                edges: [\n                    { data: { source: 'cat', target: 'bird' } },\n                    { data: { source: 'bird', target: 'ladybug' } },\n                    { data: { source: 'bird', target: 'grasshopper' } },\n                    { data: { source: 'grasshopper', target: 'plant' } },\n                    { data: { source: 'grasshopper', target: 'wheat' } },\n                    { data: { source: 'ladybug', target: 'aphid' } },\n                    { data: { source: 'aphid', target: 'rose' } }\n                ]\n            },\n            json: '',\n            created_date: '',\n            edited_date:'',\n            analyst_email: \"Default Analyst Email\",\n            analyst_name:'',\n            document_id: '',\n            default_sadface_doc: {},\n            current_sadface_doc: null,\n            focused: null,\n            undo_stack: [],\n            redo_stack: [],\n            edit_atom: null,\n            resource_pane_viewable_state: true,\n\n            sd:{},\n\n\n\n\n        \t\n        }\n        this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n        this.build_cola_layout = this.build_cola_layout.bind(this);\n    }\n\n    initialise_monkeypuzzle(){\n          //load diagram if there is one in localStorage\n        if (localStorage.getItem(\"state\"))\n        {\n            this.loadJSON(localStorage.getItem(\"state\"));\n            this.initCytoscape();\n        //else use default\n        } else\n        {\n            current_sadface_doc = this.setDefault();\n            localStorage.setItem(\"state\", current_sadface_doc);\n         //   cy_data = export_cytoscape({import_json(current_sadface_doc)});\n            this.initCytoscape();\n        }\n    }\n\nsetDefault(){\n    this.setState({\n        analyst_email: \"Default Analyst Email\",\n        analyst_name: \"Default Analsyst Name\",\n        created: this.props.now(),\n        edges:[],\n        edited: this.props.now(),\n        id: this.props.new_uuid(),\n        metadata:{},\n        nodes:[],\n        resources: [],\n\n\n\n    });\n}\n\nloadJSON(json_value) {\n  /*  json = import_json(json_value);\n    localStorage.setItem(\"state\",JSON.stringify(this.state.sd));\n    current_sadface_doc = JSON.stringify(this.state.sd);\n    //load any sources in the stored diagram state\n    window.onload = function () {\n        this.props.loadTabs(json.resources);\n    };\n    cy_data = export_cytoscape(json);\n    if(cy !== null)\n    {\n        cy.elements().remove();\n        cy.json({elements: JSON.parse(cy_data)});\n        this.redraw_visualisation();\n    }*/\n}\n\nredraw_visualisation() {\n  //  this.state.layout.stop();\n  //  layout.options.eles = cy.elements();\n   // layout.run();\n   // cy.center();\n  //  cy.resize();\n}\n\n\n//End Redo\n\n    build_cola_layout( opts ) {\n        var cola_params = {\n            name: \"cola\",\n            animate: true,\n            randomize: true,\n            padding: 100,\n            fit: false,\n            maxSimulationTime: 1500\n        };\n        var i = 0;\n        if (opts !== undefined) {\n            opts.forEach(function(opt) {\n               cola_params[i] = opts[i];\n               ++i;\n            });\n        }\n        return this.state.cy.makeLayout( cola_params );\n    }\n\n    initCytoscape(){\n        this.setState({\n            cy: cytoscape({\n            container: document.getElementById(\"cy\"),\n            ready: function(){ window.cy = this; },\n            elements: JSON.parse(cy_data),\n            style:[\n                {   selector: \"node\", \n                    style: {\n                        \"content\": \"data(content)\",\n                        \"text-opacity\": 0.7,\n                        \"width\" : \"auto\",\n                        \"height\" : \"auto\",\n                        \"text-valign\": \"bottom\",\n                        \"text-halign\": \"right\",\n                        \"text-outline-color\": \"#eee\",\n                        \"text-outline-width\": 1\n                  }\n                },\n                {   selector: \"[typeshape]\", \n                    style: {\n                        \"shape\":\"data(typeshape)\"\n                    }\n                },\n                {   selector: \"node[typeshape='diamond']\", \n                    style: {\n                        'background-color': '#CC9900'\n                    }\n                },\n                {\n                    selector: \"node[typeshape='diamond'][content='Conflict']\",\n                    style: {\n                        'background-color': 'red'\n                    }\n                },\n                {\n                    selector: \"node[typeshape='diamond'][content='Support']\",\n                    style: {\n                        'background-color': 'green'\n                    }\n                },\n                {   selector: \"edge\", \n                    style: {\n                        \"line-color\": \"#9dbaea\",\n                        \"target-arrow-shape\": \"triangle\",\n                        \"target-arrow-color\": \"#9dbaea\",\n                        \"curve-style\": \"bezier\"\n                    }\n                },\n                {   selector: \":selected\", \n                    style: {\n                        \"border-width\":\"1\",\n                        \"border-color\":\"black\",\n                        \"background-color\": \"#3399CC\"\n                    }\n                },\n                {   selector: \".atom-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n                {   selector: \".scheme-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                }\n                ],\n                boxSelectionEnabled: false,\n                autounselectify: false,\n                selectionType: \"single\",\n                minZoom: 0.1,\n                maxZoom: 1.5\n        })\n\n        })\n    }//close initCytoscape \n\n    \n\n\n    componentDidMount(){\n        this.initialise_monkeypuzzle();\n        this.setState(\n            {created_date: this.now,\n             document_id: this.props.new_uuid,\n             default_sadface_doc: \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+this.state.created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+this.state.edited_date+\"\\\",\\\"id\\\":\\\"\"+this.state.document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\",\n\n            }\n            )\n    }\n\n    render(){\n        return(\n            <div id=\"cy\" ondrop=\"drop_handler(event);\" ondragover=\"dragover_handler(event);\"></div>\n        )\n    }\n}\n\nfunction mapStateToProps(state){\n    return {};\n}\n\n\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}