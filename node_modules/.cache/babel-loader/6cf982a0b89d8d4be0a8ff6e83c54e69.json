{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\nimport $ from 'jquery';\nimport { update_atom_metadata, import_json, export_cytoscape, add_atom, sd, add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source } from '../lib/Sadface'; //Import Components\n\nimport Modal from './Modal';\n\nvar cyqtip = require('cytoscape-qtip');\n\ncyqtip(cytoscape); // register extension\n\ncytoscape.use(edgehandles);\ncytoscape.use(contextMenus, $);\ncytoscape.use(cola);\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\" + analyst_email + \"\\\",\\\"analyst_name\\\":\\\"\" + analyst_email + \"\\\",\\\"created\\\":\\\"\" + created_date + \"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\" + edited_date + \"\\\",\\\"id\\\":\\\"\" + document_id + \"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\nclass Cytoscape extends Component {\n  constructor(props) {\n    super(props); //create Refs\n\n    this.edit_atom_content = () => {\n      var content = document.getElementById(\"edit_atom_content\").value;\n      var atom = cy.$(\"#\" + edit_atom.id());\n      update_atom_text(edit_atom.id(), content);\n      this.update_local_storage();\n      atom.data(\"content\", content);\n      edit_atom = null;\n    };\n\n    this.handleAddScheme = e => {\n      let scheme = this.newSchemeRef.current.value;\n      console.log(scheme, 'new_scheme');\n      this.add_new_scheme_node(scheme);\n    };\n\n    this.handleEditContent = () => {\n      let editContent = this.state;\n      let atom = cy.$(\"#\" + edit_atom.id());\n      this.update_local_storage();\n      atom.data(\"content\", editContent);\n      edit_atom = null;\n      this.setState({\n        modalValue: ' '\n      }, () => console.log('modalValue reset', this.state.modalValue));\n    };\n\n    this.handleModalValueChange = e => {\n      this.setState({\n        modalValue: e.target.value\n      });\n    };\n\n    this.newSchemeRef = React.createRef();\n    this.editContentRef = React.createRef();\n    this.state = {\n      png: '',\n      jpg: '',\n      NewAtomText: '',\n      modalValue: ' '\n    };\n    this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n    this.initCytoscape = this.initCytoscape.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n    this.edit_atom_content = this.edit_atom_content.bind(this);\n    this.delete_nodes = this.delete_nodes.bind(this);\n    this.update_local_storage = this.update_local_storage.bind(this);\n    this.redraw_visualisation = this.redraw_visualisation.bind(this);\n    this.undo = this.undo.bind(this);\n    this.redo = this.redo.bind(this);\n    this.merge_nodes = this.merge_nodes.bind(this);\n    this.delete_atom = this.delete_atom.bind(this); //    this.dragover_handler = this.dragover_handler.bind(this);\n\n    this.add_new_atom_node = this.add_new_atom_node.bind(this);\n  }\n\n  initialise_monkeypuzzle() {\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\")) {\n      console.log(localStorage.getItem(\"state\"), 'localstorage');\n      this.props.loadJSON(localStorage.getItem(\"state\")); // this.initCytoscape();\n      //else use default\n    } else {\n      current_sadface_doc = default_sadface_doc;\n      localStorage.setItem(\"state\", current_sadface_doc);\n      console.log(current_sadface_doc, 'current sadface'); //this.props.setCyData(export_cytoscape(import_json(current_sadface_doc)));\n\n      this.initCytoscape();\n    }\n  }\n\n  initCytoscape() {\n    console.log(\"initCyto\"); //change cy to state of APP\n\n    cy = cytoscape({\n      container: document.getElementById('cy'),\n      elements: JSON.parse(this.props.cy_data),\n      style: [{\n        selector: \"node\",\n        style: {\n          \"label\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          \"width\": \"auto\",\n          \"height\": \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: '.eh-handle',\n        style: {\n          'background-color': 'orange',\n          'width': 12,\n          'height': 12,\n          'shape': 'ellipse',\n          'overlay-opacity': 0,\n          'border-width': 12,\n          // makes the handle easier to hit\n          'border-opacity': 0,\n          'toggleOffOnLeave': true\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    }); //close cy = cytoscape()\n\n    layout = this.build_cola_layout();\n    layout.run();\n    cy.elements(\"node[type = \\\"atom\\\"]\").qtip({\n      content: function () {\n        return 'ID: ' + this.id();\n      },\n      position: {\n        my: \"top center\",\n        at: \"bottom center\"\n      },\n      style: {\n        classes: \"qtip-bootstrap\",\n        tip: {\n          width: 16,\n          height: 8\n        }\n      }\n    });\n    cy.edgehandles({\n      toggleOffOnLeave: true,\n      handleNodes: \"node\",\n      handleSize: 10,\n      handleColor: \"#DF0085\",\n      handleHitThreshold: 8,\n      handleLineWidth: 5,\n      //handleLineType: \"flat\",\n      handleOutlineColor: \"pink\",\n      edgeType: function () {\n        return \"flat\";\n      },\n      complete: function (event, sourceNode, targetNode, addedEles) {\n        if (targetNode.length !== 0) {\n          var source_id = targetNode[0].source().id();\n          var target_id = targetNode[0].target().id(); //get the mid point between source node and target node\n\n          var source_position = targetNode[0].source().position();\n          var target_position = targetNode[0].target().position();\n          position = {};\n          position.x = (source_position.x + target_position.x) / 2;\n          position.y = (source_position.y + target_position.y) / 2;\n\n          if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\") {\n            var scheme = add_scheme(\"Support\");\n            var scheme_id = scheme.id;\n            var scheme_content = scheme.name; //remove the automatically generated edge\n\n            targetNode.remove();\n            cy.add([{\n              group: \"nodes\",\n              data: {\n                id: scheme_id.toString(),\n                content: scheme_content,\n                typeshape: \"diamond\"\n              },\n              classes: \"scheme-label\",\n              locked: false,\n              position: position\n            }]);\n            var edge1 = add_edge(source_id, scheme_id);\n            var edge2 = add_edge(scheme_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge1.id.toString(),\n                source: source_id,\n                target: scheme_id\n              }\n            }, {\n              group: \"edges\",\n              data: {\n                id: edge2.id.toString(),\n                source: scheme_id,\n                target: target_id\n              }\n            }]);\n          } else {\n            targetNode.remove();\n            var edge = add_edge(source_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge.id.toString(),\n                source: source_id,\n                target: target_id\n              }\n            }]);\n          }\n\n          this.update_local_storage();\n        } else {\n          targetNode.remove();\n        }\n      }.bind(this)\n    }); //edgehandles\n\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n\n    cm = cy.contextMenus({\n      menuItems: [{\n        id: \"edit-content\",\n        content: \"edit content\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          let target = event.target || event.cyTarget;\n          document.getElementById(\"editContentTrigger\").click();\n          this.setState({\n            modalValue: target.data().content\n          }, () => console.log(\"modal value set\", this.state.modalValue));\n          edit_atom = target;\n        }.bind(this),\n        hasTrailingDivider: false\n      }, {\n        id: \"edit-metadata\",\n        content: \"edit metadata\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n          var atom = get_atom(target.id());\n          console.log(JSON.stringify(atom.metadata), 'atom metadata');\n          document.getElementById(\"editMetaTrigger\").click();\n          this.setState({\n            modalValue: JSON.stringify(atom.metadata)\n          });\n          edit_atom = target;\n        }.bind(this),\n        hasTrailingDivider: true\n      }, {\n        id: \"change-scheme\",\n        content: \"change scheme\",\n        selector: \"node[typeshape = \\\"diamond\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget; //                $(\"#editSchemeModal\").modal(\"show\");\n\n          edit_atom = target;\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"remove\",\n        content: \"remove\",\n        selector: \"node, edge\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n\n          if (selected.length !== 0) {\n            selected.forEach(function (node) {\n              this.delete_nodes(node);\n            });\n            selected = [];\n          } else {\n            if (target.data().type == \"atom\") {\n              this.delete_nodes(event);\n              target.remove();\n            } else if (target.data().typeshape == \"diamond\") {\n              this.delete_nodes(event);\n              target.remove();\n            } else {\n              this.delete_edge(target.id());\n              this.update_local_storage();\n              target.remove();\n            }\n          }\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"add-atom\",\n        content: \"add atom\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          position = event.renderedPosition;\n          document.getElementById(\"newAtomTrigger\").click();\n        }\n      }, {\n        id: \"add-scheme\",\n        content: \"add scheme\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          position = event.position || event.cyPosition;\n          document.getElementById(\"new_scheme\").click(); //   document.getElementById(\"sel1\").options.selectedIndex=0;\n          //      $(\"#newSchemeModal\").modal(\"show\");\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"redraw\",\n        content: \"redraw\",\n        coreAsWell: true,\n        onClickFunction: function () {\n          this.redraw_visualisation();\n        }.bind(this),\n        hasTrailingDivider: true\n      }, {\n        id: \"undo\",\n        content: \"undo\",\n        selector: \"node, edge\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.undo();\n        }.bind(this),\n        hasTrailingDivider: false\n      }, {\n        id: \"redo\",\n        content: \"redo\",\n        selector: \"node, edge\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.redo();\n\n          if (redo_stack == []) {\n            cm.hideMenuItem(\"redo\");\n          }\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"merge_nodes\",\n        content: \"merge nodes\",\n        selector: \"node\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.merge_nodes();\n        }\n      }]\n    });\n    cy.on(\"layoutstop\", function () {\n      running = false;\n      var png = cy.png({\n        full: true\n      });\n      this.props.handleSetPng(png);\n      var jpg = cy.jpg({\n        full: true\n      });\n      this.props.handleSetJpg(jpg);\n    }.bind(this));\n  }\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return cy.makeLayout(cola_params);\n  }\n\n  delete_nodes(event) {\n    var target = event.target || event.cyTarget;\n    var id = target.id(); //removed = target.remove();\n\n    this.delete_atom(id);\n    var i = 0;\n    var sds = get_sd();\n    var edges = sds.edges;\n    edges.forEach(function (edge) {\n      if (edges[i] !== undefined) {\n        if (edges[i].source_id === id || edges[i].target_id === id) {\n          delete_edge(edges[i].id);\n        }\n\n        ++i;\n      }\n    });\n    this.update_local_storage();\n  }\n\n  update_local_storage() {\n    console.log(current_sadface_doc);\n    var undo_item = JSON.parse(current_sadface_doc);\n    console.log(undo_item, 'undoitem');\n    undo_stack.push(undo_item);\n    redo_stack = [];\n    cm.showMenuItem(\"undo\");\n    cm.hideMenuItem(\"redo\");\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    current_sadface_doc = JSON.stringify(get_sd());\n    update();\n  }\n\n  redraw_visualisation() {\n    layout.stop();\n    layout.options.eles = cy.elements();\n    layout.run();\n    cy.center();\n    cy.resize();\n  }\n\n  undo() {\n    if (undo_stack.length != 0) {\n      var redo_item = get_sd();\n      console.log(redo_item, 'redo item');\n      redo_stack.push(redo_item);\n      console.log(redo_stack, 'redo stack');\n      var state = undo_stack.pop();\n      console.log(state, 'state');\n      this.loadJSON(JSON.stringify(state));\n\n      if (undo_stack.length == 0) {\n        cm.hideMenuItem(\"undo\");\n      }\n\n      cm.showMenuItem(\"redo\");\n    }\n  }\n\n  redo() {\n    if (redo_stack.length != 0) {\n      var undo_item = get_sd();\n      undo_stack.push(undo_item);\n      var state = redo_stack.pop();\n      this.loadJSON(JSON.stringify(state));\n\n      if (redo_stack.length == 0) {\n        cm.hideMenuItem(\"redo\");\n      }\n\n      cm.showMenuItem(\"undo\");\n    }\n  }\n\n  merge_nodes() {\n    //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n    var target;\n    var id;\n    var atom;\n    var baseNode = selected[0].target || selected[0].cyTarget;\n    var baseId = baseNode.id();\n    var baseAtom = get_atom(baseId);\n    var edge;\n\n    if (baseAtom.type == \"atom\") {\n      var sds = get_sd();\n      var i = 0;\n      selected.forEach(function (node) {\n        var j = 0;\n\n        if (i > 0) {\n          target = selected[i].target || selected[i].cyTarget;\n          id = target.id();\n          atom = get_atom(id);\n\n          if (atom.type == \"atom\") {\n            atom.sources.forEach(function (source) {\n              add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n              ++j;\n            });\n            j = 0;\n            sds.edges.forEach(function (edge) {\n              if (sds.edges[j].source_id == id) {\n                edge = add_edge(baseId, sds.edges[j].target_id);\n                cy.add([{\n                  group: \"edges\",\n                  data: {\n                    id: edge.id.toString(),\n                    source: baseId,\n                    target: sds.edges[j].target_id\n                  }\n                }]);\n              }\n\n              if (sds.edges[j].target_id == id) {\n                edge = add_edge(sds.edges[j].source_id, baseId);\n                cy.add([{\n                  group: \"edges\",\n                  data: {\n                    id: edge.id.toString(),\n                    source: sds.edges[j].source_id,\n                    target: baseId\n                  }\n                }]);\n              }\n\n              ++j;\n            });\n            this.delete_nodes(selected[i]);\n          } else {\n            alert(\"cannot merge scheme nodes\");\n          }\n        }\n\n        ++i;\n      });\n      selected = [];\n      cm.hideMenuItem(\"merge_nodes\");\n    } else {\n      alert(\"cannot merge scheme nodes\");\n    }\n  }\n\n  delete_atom(atom_id) {\n    /*\n    Remove the atom from the sadface document identified by the\n    supplied atom ID\n    */\n    if (atom_id) {\n      var atom = get_atom(atom_id);\n\n      if (atom !== null && atom !== undefined) {\n        var size = Object.keys(sd.nodes).length;\n\n        for (var i = 0; i < size; ++i) {\n          if (sd.nodes[i].id === atom.id) {\n            delete sd.nodes[i]; //                    sd.nodes = remove_falsy(sd.nodes);\n\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.initialise_monkeypuzzle();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      cy_data: nextProps.cy_data\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    if (this.props.cy_data !== prevProps.cy_data) {\n      this.initCytoscape();\n    }\n  }\n\n  add_new_atom_node() {\n    let content = this.state.modalValue;\n    var meta = {\n      \"hello\": \"world\"\n    };\n    var new_atom = add_atom(content);\n    console.log(new_atom, 'new atom');\n    console.log(this.state.modalValue, 'modal value');\n    var atom_id = new_atom.id;\n\n    if (focused != null) {\n      add_source(atom_id, focused.id, content, 0, 0);\n    }\n\n    if (position == null) {\n      position = {\n        \"x\": cy.width() / 2,\n        \"y\": cy.height() / 2\n      };\n    }\n\n    cy.add([{\n      group: \"nodes\",\n      data: {\n        id: atom_id.toString(),\n        content: content,\n        type: \"atom\",\n        typeshape: \"roundrectangle\",\n        metadata: meta\n      },\n      classes: \"atom-label\",\n      locked: false,\n      renderedPosition: position\n    }]);\n    let node = cy.getElementById(atom_id.toString());\n    node.qtip({\n      content: function () {\n        return 'ID: ' + this.id();\n      },\n      position: {\n        my: \"top center\",\n        at: \"bottom center\"\n      },\n      style: {\n        classes: \"qtip-bootstrap\",\n        tip: {\n          width: 16,\n          height: 8\n        }\n      }\n    });\n    position = null;\n    this.update_local_storage();\n    this.setState({\n      modalValue: ' '\n    }, () => console.log('modalValue reset', this.state.modalValue));\n  }\n\n  add_new_scheme_node(scheme) {\n    // var scheme_idx = document.getElementById(\"sel1\").options.selectedIndex;\n    //  var scheme = document.getElementById(\"sel1\").options[scheme_idx].text;\n    var new_scheme = add_scheme(scheme);\n    var scheme_id = new_scheme.id;\n    cy.add([{\n      group: \"nodes\",\n      data: {\n        id: scheme_id.toString(),\n        content: scheme,\n        type: \"scheme\",\n        typeshape: \"diamond\"\n      },\n      classes: \"scheme-label\",\n      locked: false,\n      position: position\n    }]);\n    this.update_local_storage();\n  }\n\n  edit_atom_metadata() {\n    var atom = cy.$(\"#\" + edit_atom.id());\n    var content = document.getElementById(atom.id() + \"_metadata\").value;\n\n    if (JSON.parse(content)) {\n      var metadata = JSON.parse(content);\n      update_atom_metadata(atom.id(), metadata);\n      this.update_local_storage();\n      edit_atom = null;\n    } else {\n      alert(\"Metadata not in JSON format, unable to update\");\n    }\n\n    this.setState({\n      modalValue: ' '\n    }, () => console.log('modalValue reset', this.state.modalValue));\n  }\n\n  render() {\n    /* New Atom Modal */\n    const newAtomModal = {\n      trigger: {\n        triggerText: 'New Atom',\n        triggerId: 'newAtomTrigger'\n      },\n      title: 'New Atom',\n      id: 'newAtomModal',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 724\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 725\n        },\n        __self: this\n      }, \"Add some content to the new atom\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 726\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control\",\n        rows: \"2\",\n        id: \"new_atom_content\",\n        onChange: this.handleModalValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727\n        },\n        __self: this\n      }))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Create'\n        }\n      }\n    };\n    /* New Scheme Modal*/\n\n    var newSchemeModal = {\n      trigger: {\n        triggerText: 'New Scheme',\n        className: \"new_scheme\",\n        triggerId: \"new_scheme\"\n      },\n      id: \"newSchemeModal\",\n      title: 'New Scheme',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 756\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 757\n        },\n        __self: this\n      }, \"Select a scheme\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"sel1\",\n        ref: this.newSchemeRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 758\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 763\n        },\n        __self: this\n      }, \"Support\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 764\n        },\n        __self: this\n      }, \"Conflict\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 765\n        },\n        __self: this\n      }, \"Argument from Sign\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 766\n        },\n        __self: this\n      }, \"Argument from an Exceptional Case\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 767\n        },\n        __self: this\n      }, \"Argument from Analogy\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 768\n        },\n        __self: this\n      }, \"Argument from Bias\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 769\n        },\n        __self: this\n      }, \"Argument from Cause to Effect\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 770\n        },\n        __self: this\n      }, \"Argument from Correlation to Causes\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 771\n        },\n        __self: this\n      }, \"Argument from Established Rule\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 772\n        },\n        __self: this\n      }, \"Argument from Evidence to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 773\n        },\n        __self: this\n      }, \"Argument from Falsification to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 774\n        },\n        __self: this\n      }, \"Argument from Example\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 775\n        },\n        __self: this\n      }, \"Argument from Commitment\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 776\n        },\n        __self: this\n      }, \"Circumstantial Argument Against the Person\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 777\n        },\n        __self: this\n      }, \"Argument from Popular Practice\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778\n        },\n        __self: this\n      }, \"Argument from Popularity\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 779\n        },\n        __self: this\n      }, \"Argument from Position to Know\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 780\n        },\n        __self: this\n      }, \"Argument from Expert Opinion\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 781\n        },\n        __self: this\n      }, \"Argument from Precedent\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 782\n        },\n        __self: this\n      }, \"Argument from Consequences\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 783\n        },\n        __self: this\n      }, \"Argument from Waste\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 784\n        },\n        __self: this\n      }, \"Causal Slippery Slope Argument\"))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: \"btn btn-primary\",\n          value: \"Create\"\n        }\n      }\n    };\n    /* Edit Content Modal */\n\n    var editContentModal = {\n      trigger: {\n        triggerText: 'editContentTrigger',\n        className: \"editContentTrigger\",\n        triggerId: \"editContentTrigger\"\n      },\n      id: 'editContentModal',\n      title: 'Edit Atom Content',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 809\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 810\n        },\n        __self: this\n      }, \"Edit atom content\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 811\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control\",\n        rows: \"2\",\n        id: \"edit_atom_content_textarea\",\n        ref: this.editContentRef,\n        value: this.state.modalValue,\n        onChange: this.handleModalValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 812\n        },\n        __self: this\n      }))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Save'\n        }\n      }\n    };\n    /* Edit Metadata Modal  */\n\n    var editMetaDataModal = {\n      trigger: {\n        triggerText: 'Edit Meta',\n        className: 'editMeta',\n        triggerId: 'editMetaTrigger'\n      },\n      id: 'editMetadataModal',\n      title: 'Edit Metadata',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 845\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 846\n        },\n        __self: this\n      }, \"Edit atom content\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        id: \"edit_metadata\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 847\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control\",\n        rows: \"2\",\n        id: \"edit_atom_content\",\n        value: this.state.modalValue,\n        onChange: this.handleModalValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 848\n        },\n        __self: this\n      }))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: 'btn btn-secondary',\n          value: 'Close'\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Save'\n        }\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 875\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      modalProps: newAtomModal,\n      style: \"\",\n      onClick: this.add_new_atom_node,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: newSchemeModal,\n      style: \"\",\n      onClick: this.handleAddScheme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: editContentModal,\n      style: \"\",\n      onClick: this.handleEditContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: editMetaDataModal,\n      style: \"\",\n      onClick: this.handleEditContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"cy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 902\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Cytoscape;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js"],"names":["React","Component","cytoscape","cola","edgehandles","contextMenus","$","update_atom_metadata","import_json","export_cytoscape","add_atom","sd","add_scheme","add_edge","get_atom","now","new_uuid","update_atom_text","get_sd","delete_edge","update","add_source","Modal","cyqtip","require","use","cy","cm","selected","position","layout","running","json","created_date","edited_date","analyst_email","analyst_name","document_id","default_sadface_doc","current_sadface_doc","focused","undo_stack","redo_stack","edit_atom","resource_pane_viewable_state","Cytoscape","constructor","props","edit_atom_content","content","document","getElementById","value","atom","id","update_local_storage","data","handleAddScheme","e","scheme","newSchemeRef","current","console","log","add_new_scheme_node","handleEditContent","editContent","state","setState","modalValue","handleModalValueChange","target","createRef","editContentRef","png","jpg","NewAtomText","initialise_monkeypuzzle","bind","initCytoscape","build_cola_layout","delete_nodes","redraw_visualisation","undo","redo","merge_nodes","delete_atom","add_new_atom_node","localStorage","getItem","loadJSON","setItem","container","elements","JSON","parse","cy_data","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","run","qtip","my","at","classes","tip","width","height","toggleOffOnLeave","handleNodes","handleSize","handleColor","handleHitThreshold","handleLineWidth","handleOutlineColor","edgeType","complete","event","sourceNode","targetNode","addedEles","length","source_id","source","target_id","source_position","target_position","x","y","type","scheme_id","scheme_content","name","remove","add","group","toString","typeshape","locked","edge1","edge2","edge","menuItems","onClickFunction","cyTarget","click","hasTrailingDivider","stringify","metadata","forEach","node","coreAsWell","renderedPosition","cyPosition","show","hideMenuItem","on","full","handleSetPng","handleSetJpg","opts","cola_params","animate","randomize","padding","fit","maxSimulationTime","i","undefined","opt","makeLayout","sds","edges","undo_item","push","showMenuItem","stop","options","eles","center","resize","redo_item","pop","baseNode","baseId","baseAtom","j","sources","resource_id","text","offset","alert","atom_id","size","Object","keys","nodes","componentDidMount","componentWillReceiveProps","nextProps","componentDidUpdate","prevProps","meta","new_atom","new_scheme","edit_atom_metadata","render","newAtomModal","trigger","triggerText","triggerId","title","footer","buttonNo","button1","className","button2","newSchemeModal","editContentModal","editMetaDataModal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\n\n\nimport $ from 'jquery';\n\n\nimport {update_atom_metadata, import_json,export_cytoscape,add_atom, sd,add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source} from '../lib/Sadface'; \n//Import Components\nimport Modal from  './Modal';\nvar cyqtip = require('cytoscape-qtip');\n\ncyqtip( cytoscape ); // register extension\n\n\ncytoscape.use( edgehandles );\ncytoscape.use(contextMenus, $);\ncytoscape.use( cola );\n\n\n\n\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+edited_date+\"\\\",\\\"id\\\":\\\"\"+document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\n\n\nclass Cytoscape extends Component {\n  constructor(props){\n        super(props);\n        //create Refs\n        this.newSchemeRef = React.createRef();\n        this.editContentRef =React.createRef();\n\n        this.state={\n         png:'',\n         jpg:'',\n         NewAtomText: '',\n         modalValue: ' ',\n        }\n            this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n            this.initCytoscape = this.initCytoscape.bind(this);\n            this.build_cola_layout = this.build_cola_layout.bind(this);\n            this.edit_atom_content = this.edit_atom_content.bind(this);\n            this. delete_nodes =this.delete_nodes.bind(this);\n            this.update_local_storage = this.update_local_storage.bind(this);\n            this.redraw_visualisation = this.redraw_visualisation.bind(this);\n            this.undo = this.undo.bind(this);\n            this.redo = this.redo.bind(this);\n            this.merge_nodes = this.merge_nodes.bind(this);\n            this.delete_atom =this.delete_atom.bind(this);\n            //    this.dragover_handler = this.dragover_handler.bind(this);\n\n            this.add_new_atom_node = this.add_new_atom_node.bind(this);\n    }\n\n    initialise_monkeypuzzle() {\n\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\"))\n    {\n        console.log(localStorage.getItem(\"state\"), 'localstorage')\n        this.props.loadJSON(localStorage.getItem(\"state\"));\n       // this.initCytoscape();\n    //else use default\n    } else\n    {\n        current_sadface_doc = default_sadface_doc;\n        localStorage.setItem(\"state\", current_sadface_doc);\n        console.log(current_sadface_doc, 'current sadface');\n        //this.props.setCyData(export_cytoscape(import_json(current_sadface_doc)));\n        this.initCytoscape();\n    }\n}\n\n    initCytoscape(){\n        console.log(\"initCyto\");\n        //change cy to state of APP\n        cy = cytoscape({\n            container: document.getElementById('cy'),\n            elements: JSON.parse(this.props.cy_data),\n\n            style:[\n                {   selector: \"node\", \n                    style: {\n                        \"label\": \"data(content)\",\n                        \"text-opacity\": 0.7,\n                        \"width\" : \"auto\",\n                        \"height\" : \"auto\",\n                        \"text-valign\": \"bottom\",\n                        \"text-halign\": \"right\",\n                        \"text-outline-color\": \"#eee\",\n                        \"text-outline-width\": 1\n                    }\n                },\n                \n                {   selector: \"[typeshape]\", \n                    style: {\n                        \"shape\":\"data(typeshape)\"\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond']\", \n                    style: {\n                        'background-color': '#CC9900'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][content='Conflict']\",\n                    style: {\n                        'background-color': 'red'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][content='Support']\",\n                    style: {\n                        'background-color': 'green'\n                    }\n                },\n\n                {   selector: \"edge\", \n                    style: {\n                        \"line-color\": \"#9dbaea\",\n                        \"target-arrow-shape\": \"triangle\",\n                        \"target-arrow-color\": \"#9dbaea\",\n                        \"curve-style\": \"bezier\"\n                    }\n                },\n\n\n                {   selector: \":selected\", \n                    style: {\n                        \"border-width\":\"1\",\n                        \"border-color\":\"black\",\n                        \"background-color\": \"#3399CC\"\n                    }\n                },\n\n\n                {   selector: \".atom-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n\n                {   selector: \".scheme-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n                {\n\n                  \n              selector: '.eh-handle',\n              style: {\n                'background-color': 'orange',\n                'width': 12,\n                'height': 12,\n                'shape': 'ellipse',\n                'overlay-opacity': 0,\n                'border-width': 12, // makes the handle easier to hit\n                'border-opacity': 0,\n                'toggleOffOnLeave': true,\n              }\n            }\n            ],\n\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n\n        });//close cy = cytoscape()\n\n\n\n    layout = this.build_cola_layout();\n    layout.run();\n\n      cy.elements(\"node[type = \\\"atom\\\"]\").qtip({\n        content: function(){return 'ID: '+this.id()},\n        position: {\n            my: \"top center\",\n            at: \"bottom center\"\n        },\n        style: {\n            classes: \"qtip-bootstrap\",\n            tip: {\n                width: 16,\n                height: 8\n            }\n        }\n    });\n\n    \n   \n\n    cy.edgehandles({\n        toggleOffOnLeave: true,\n        handleNodes: \"node\",\n        handleSize: 10,\n        handleColor: \"#DF0085\",\n        handleHitThreshold: 8,\n        handleLineWidth: 5,\n        //handleLineType: \"flat\",\n        handleOutlineColor: \"pink\",\n        edgeType: function(){ return \"flat\"; },\n        complete: function(event, sourceNode, targetNode, addedEles){\n            if (targetNode.length !== 0) {\n                var source_id = targetNode[0].source().id();\n                var target_id = targetNode[0].target().id();\n\n                //get the mid point between source node and target node\n                var source_position = targetNode[0].source().position();\n                var target_position = targetNode[0].target().position();\n\n                position = {};\n                position.x = ((source_position.x + target_position.x)/2);\n                position.y = ((source_position.y + target_position.y)/2);\n\n                if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\")\n                {\n                    var scheme = add_scheme(\"Support\");\n                    var scheme_id = scheme.id;\n                    var scheme_content = scheme.name;\n                    //remove the automatically generated edge\n                    targetNode.remove();\n                    cy.add([\n                        {group: \"nodes\", data: {id: scheme_id.toString(),\n                            content: scheme_content, typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n                            ]);\n                    var edge1 = add_edge(source_id, scheme_id);\n                    var edge2 = add_edge(scheme_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge1.id.toString(), source: source_id, target: scheme_id } },\n                      { group: \"edges\", data: { id: edge2.id.toString(), source: scheme_id, target: target_id } }\n                      ]);\n                } else {\n                    targetNode.remove();\n                    var edge = add_edge(source_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge.id.toString(), source: source_id, target: target_id } }\n                      ]);\n                }\n                this.update_local_storage();\n            } else {\n                targetNode.remove();\n            }\n        }.bind(this)\n    });\n    //edgehandles\n\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n     cm = cy.contextMenus({\n       menuItems: [\n       {\n        id: \"edit-content\",\n        content: \"edit content\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n            let target = event.target || event.cyTarget;\n            document.getElementById(\"editContentTrigger\").click();\n            this.setState({modalValue:target.data().content}, () =>\n            console.log(\"modal value set\", this.state.modalValue));\n            edit_atom = target;\n        }.bind(this),\n        hasTrailingDivider: false\n    },\n    {\n        id: \"edit-metadata\",\n        content: \"edit metadata\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n              var target = event.target || event.cyTarget;\n              var atom = get_atom(target.id());\n              console.log(JSON.stringify(atom.metadata), 'atom metadata');\n              document.getElementById(\"editMetaTrigger\").click();\n              this.setState({modalValue: JSON.stringify(atom.metadata)})\n             edit_atom = target;\n         }.bind(this),\n         hasTrailingDivider: true\n     },\n     {\n        id: \"change-scheme\",\n        content: \"change scheme\",\n        selector: \"node[typeshape = \\\"diamond\\\"]\",\n        onClickFunction: function (event) {\n            var target = event.target || event.cyTarget;\n//                $(\"#editSchemeModal\").modal(\"show\");\nedit_atom = target;\n},\nhasTrailingDivider: true\n},\n{\n    id: \"remove\",\n    content: \"remove\",\n    selector: \"node, edge\",\n    onClickFunction: function (event) {\n        var target = event.target || event.cyTarget;\n        if (selected.length !== 0) {\n            selected.forEach(function(node) {\n                this.delete_nodes(node);\n            });\n            selected = [];\n        } else {\n            if (target.data().type==\"atom\") {\n                this.delete_nodes(event);\n                target.remove();\n            } else if (target.data().typeshape==\"diamond\"){\n                this.delete_nodes(event);\n                target.remove();\n            } else {\n                this.delete_edge(target.id());\n                this.update_local_storage();\n                target.remove();\n            }\n        }\n    },\n    hasTrailingDivider: true\n},\n{\n    id: \"add-atom\",\n    content: \"add atom\",\n    coreAsWell: true,\n\n    onClickFunction: function (event) {\n        position = event.renderedPosition;\n        document.getElementById(\"newAtomTrigger\").click();\n    }\n},\n{\n    id: \"add-scheme\",\n    content: \"add scheme\",\n    coreAsWell: true,\n    onClickFunction: function (event) {\n\n        position = event.position || event.cyPosition;\n        document.getElementById(\"new_scheme\").click()\n\n\n     //   document.getElementById(\"sel1\").options.selectedIndex=0;\n//      $(\"#newSchemeModal\").modal(\"show\");\n},\nhasTrailingDivider: true\n},\n{\n    id: \"redraw\",\n    content: \"redraw\",\n    coreAsWell: true,\n    onClickFunction: function () { this.redraw_visualisation(); }.bind(this),\n    hasTrailingDivider: true\n},\n{\n    id: \"undo\",\n    content: \"undo\",\n    selector: \"node, edge\",\n    show: false,\n    coreAsWell: true,\n    onClickFunction: function (event) {\n      this.undo();\n  }.bind(this),\n  hasTrailingDivider: false\n},\n{\n    id: \"redo\",\n    content: \"redo\",\n    selector: \"node, edge\",\n    show: false,\n    coreAsWell: true,\n    onClickFunction: function (event) {\n      this.redo();\n      if (redo_stack == []) {\n        cm.hideMenuItem(\"redo\");\n    }\n},\nhasTrailingDivider: true\n},\n{\n  id: \"merge_nodes\",\n  content: \"merge nodes\",\n  selector: \"node\",\n  show: false,\n  coreAsWell: true,\n  onClickFunction: function (event) {\n      this.merge_nodes();\n  }\n}\n]\n});\n      cy.on(\"layoutstop\", function(){\n        running = false;\n        \n        var png = cy.png({ full: true });\n        this.props.handleSetPng(png);\n\n        var jpg = cy.jpg({ full: true });\n        this.props.handleSetJpg(jpg);\n    }.bind(this));\n\n }\n\n build_cola_layout( opts ) {\n    var cola_params = {\n        name: \"cola\",\n        animate: true,\n        randomize: true,\n        padding: 100,\n        fit: false,\n        maxSimulationTime: 1500\n    };\n    var i = 0;\n    if (opts !== undefined) {\n        opts.forEach(function(opt) {\n         cola_params[i] = opts[i];\n         ++i;\n     });\n    }\n    return cy.makeLayout( cola_params );\n}\n\nedit_atom_content = () => {\n    var content = document.getElementById(\"edit_atom_content\").value;\n    var atom = cy.$(\"#\"+edit_atom.id());\n    update_atom_text(edit_atom.id(), content);\n    this.update_local_storage();\n    atom.data(\"content\", content);\n    edit_atom = null;\n}\n\ndelete_nodes(event) {\n    var target = event.target || event.cyTarget;\n    var id = target.id();\n    //removed = target.remove();\n    this.delete_atom(id);\n    var i = 0;\n    var sds = get_sd();\n    var edges = sds.edges;\n    edges.forEach(function(edge) {\n        if (edges[i] !== undefined) {\n            if (edges[i].source_id === id || edges[i].target_id === id) {\n                delete_edge(edges[i].id);\n            }\n            ++i;\n        }\n    });\n    this.update_local_storage();\n}\n\nupdate_local_storage() {\n    console.log(current_sadface_doc);\n    var undo_item = JSON.parse(current_sadface_doc);\n    console.log(undo_item, 'undoitem');\n    undo_stack.push(undo_item);\n    redo_stack = [];\n    cm.showMenuItem(\"undo\");\n    cm.hideMenuItem(\"redo\");\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    current_sadface_doc = JSON.stringify(get_sd());\n    update();\n}\n\nredraw_visualisation() {\n    layout.stop();\n    layout.options.eles = cy.elements();\n    layout.run();\n    cy.center();\n    cy.resize();\n}\n\nundo() {\n    if (undo_stack.length != 0) {\n        var redo_item = get_sd();\n        console.log(redo_item, 'redo item');\n        redo_stack.push(redo_item);\n        console.log(redo_stack, 'redo stack');\n        var state = undo_stack.pop();\n        console.log(state, 'state');\n        this.loadJSON(JSON.stringify(state));\n        if (undo_stack.length == 0) {\n            cm.hideMenuItem(\"undo\");\n        }\n        cm.showMenuItem(\"redo\");\n    }\n}\n\nredo() {\n    if (redo_stack.length != 0) {\n        var undo_item = get_sd();\n        undo_stack.push(undo_item);\n        var state = redo_stack.pop();\n        this.loadJSON(JSON.stringify(state));\n        if (redo_stack.length == 0) {\n            cm.hideMenuItem(\"redo\");\n        }\n        cm.showMenuItem(\"undo\");\n    }\n}\n\n\nmerge_nodes() {\n    //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n    var target;\n    var id;\n    var atom;\n    var baseNode = selected[0].target || selected[0].cyTarget;\n    var baseId = baseNode.id();\n    var baseAtom = get_atom(baseId);\n    var edge;\n    if (baseAtom.type == \"atom\") {\n        var sds = get_sd();\n        var i = 0;\n        selected.forEach(function(node){\n            var j = 0;\n            if (i > 0) {\n                target = selected[i].target || selected[i].cyTarget;\n                id = target.id();\n                atom = get_atom(id);\n                if (atom.type == \"atom\") {\n                    atom.sources.forEach(function(source) {\n                        add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n                        ++j;\n                    });\n                    j = 0;\n                    sds.edges.forEach(function(edge) {\n                        if (sds.edges[j].source_id == id) {\n                            edge = add_edge(baseId,sds.edges[j].target_id);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: baseId, target: sds.edges[j].target_id } }\n                              ]);\n                        }\n                        if (sds.edges[j].target_id == id) {\n                            edge = add_edge(sds.edges[j].source_id, baseId);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: sds.edges[j].source_id, target: baseId } }\n                              ]);\n                        }\n                        ++j;\n                    });\n                    this.delete_nodes(selected[i]);\n                } else {\n                    alert(\"cannot merge scheme nodes\");\n                }\n            }\n            ++i;\n        });\n        selected = [];\n        cm.hideMenuItem(\"merge_nodes\");\n    } else {\n        alert(\"cannot merge scheme nodes\");\n    }\n}\n\ndelete_atom(atom_id) {\n    /*\n    Remove the atom from the sadface document identified by the\n    supplied atom ID\n    */\n    if (atom_id) {\n        var atom = get_atom(atom_id);\n        if (atom !== null && atom !== undefined) {\n            var size = Object.keys(sd.nodes).length;\n            for (var i = 0; i < size; ++i) {\n                if (sd.nodes[i].id === atom.id) {\n                    delete sd.nodes[i];\n//                    sd.nodes = remove_falsy(sd.nodes);\n                        return;\n                }\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\ncomponentDidMount(){\n this.initialise_monkeypuzzle();\n}\ncomponentWillReceiveProps(nextProps) {\n   this.setState({ cy_data: nextProps.cy_data })\n}\n\ncomponentDidUpdate(prevProps) {\n  // Typical usage (don't forget to compare props):\n  if (this.props.cy_data !== prevProps.cy_data) {\n  \tthis.initCytoscape();\n  }\n}\n\n\n\nadd_new_atom_node() {\n    let content = this.state.modalValue;\n    var meta = {\"hello\":\"world\"};\n    var new_atom = add_atom(content);\n    console.log(new_atom, 'new atom');\n    console.log(this.state.modalValue, 'modal value');\n    var atom_id = new_atom.id;\n    if (focused != null) {\n        add_source(atom_id, focused.id, content, 0, 0);\n    }\n    if (position == null) {\n        position = {\"x\": cy.width()/2, \"y\": cy.height()/2};\n    }\n    cy.add([\n        {group: \"nodes\", data: {id: atom_id.toString(),\n            content: content, type: \"atom\", typeshape: \"roundrectangle\", metadata: meta }, \n            classes: \"atom-label\", locked: false, renderedPosition: position}\n    ]);\n    let node = cy.getElementById(atom_id.toString() );\n    node.qtip({\n        content: function(){return 'ID: '+this.id()},\n        position: {\n            my: \"top center\",\n            at: \"bottom center\"\n        },\n        style: {\n            classes: \"qtip-bootstrap\",\n            tip: {\n                width: 16,\n                height: 8\n            }\n        }\n    });\n    position = null;\n    this.update_local_storage();\n    this.setState({modalValue: ' '}, () =>\n        console.log('modalValue reset', this.state.modalValue));\n}\n\nhandleAddScheme = (e) => {\n    let scheme = this.newSchemeRef.current.value;\n    console.log(scheme, 'new_scheme');\n    this.add_new_scheme_node(scheme)\n}\n\n add_new_scheme_node(scheme) {\n   // var scheme_idx = document.getElementById(\"sel1\").options.selectedIndex;\n  //  var scheme = document.getElementById(\"sel1\").options[scheme_idx].text;\n    var new_scheme = add_scheme(scheme);\n    var scheme_id = new_scheme.id;\n\n    cy.add([\n        {group: \"nodes\", data: {id: scheme_id.toString(),\n            content: scheme, type: \"scheme\", typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n    ]);\n    this.update_local_storage();\n}\n\nhandleEditContent = () => {\n    let editContent = this.state;\n    let atom = cy.$(\"#\"+edit_atom.id());\n    this.update_local_storage();\n    atom.data(\"content\", editContent);\n    edit_atom = null;\n    this.setState({modalValue: ' '}, () =>\n        console.log('modalValue reset', this.state.modalValue));\n}\n\nedit_atom_metadata() {\n    var atom = cy.$(\"#\"+edit_atom.id());\n    var content = document.getElementById(atom.id()+\"_metadata\").value;\n    if (JSON.parse(content)) {\n        var metadata = JSON.parse(content);\n        update_atom_metadata(atom.id(), metadata);\n        this.update_local_storage();\n        edit_atom=null;\n    } else {\n        alert(\"Metadata not in JSON format, unable to update\");\n    }\n\n        this.setState({modalValue: ' '}, () =>\n        console.log('modalValue reset', this.state.modalValue));\n}\n\nhandleModalValueChange = (e) => {\n    this.setState({modalValue: e.target.value})\n}\n\n\n\n\nrender(){\n     /* New Atom Modal */\n        const newAtomModal = {\n            trigger: {\n                triggerText: 'New Atom',\n                triggerId: 'newAtomTrigger'\n            },\n              title: 'New Atom',\n              id: 'newAtomModal',\n              content: <div className=\"modal-body\">\n              <p>Add some content to the new atom</p>\n              <div className=\"form-group\">\n              <textarea \n                className=\"form-control\" \n                rows=\"2\" \n                id=\"new_atom_content\" \n                onChange={this.handleModalValueChange}\n                >\n              </textarea></div></div>,\n            footer: {\n                buttonNo:2,\n                button1: {\n                  className: \"btn btn-secondary\",\n                  value: \"Close\"\n                },\n                button2: {\n                  className: 'btn btn-primary',\n                  value: 'Create',\n                },\n            }\n        };\n\n        /* New Scheme Modal*/\n        var newSchemeModal = {\n            trigger: {\n                triggerText: 'New Scheme',\n                className: \"new_scheme\",\n                triggerId: \"new_scheme\",\n            },\n              id:\"newSchemeModal\",\n              title: 'New Scheme',\n              content: <div className=\"modal-body\">\n              <p>Select a scheme</p>\n              <select \n                className=\"form-control\" \n                id=\"sel1\" \n                ref={this.newSchemeRef}\n                >\n              <option>Support</option>\n              <option>Conflict</option>\n              <option>Argument from Sign</option>\n              <option>Argument from an Exceptional Case</option>\n              <option>Argument from Analogy</option>\n              <option>Argument from Bias</option>\n              <option>Argument from Cause to Effect</option>\n              <option>Argument from Correlation to Causes</option>\n              <option>Argument from Established Rule</option>\n              <option>Argument from Evidence to a Hypothesis</option>\n              <option>Argument from Falsification to a Hypothesis</option>\n              <option>Argument from Example</option>\n              <option>Argument from Commitment</option>\n              <option>Circumstantial Argument Against the Person</option>\n              <option>Argument from Popular Practice</option>\n              <option>Argument from Popularity</option>\n              <option>Argument from Position to Know</option>\n              <option>Argument from Expert Opinion</option>\n              <option>Argument from Precedent</option>\n              <option>Argument from Consequences</option>\n              <option>Argument from Waste</option>\n              <option>Causal Slippery Slope Argument</option>\n              </select>\n              </div>,\n            footer: {\n                buttonNo: 2,\n                button1: {\n                  className: \"btn btn-secondary\",\n                  value: \"Close\"\n                },\n                button2: {\n                  className: \"btn btn-primary\",\n                  value: \"Create\"\n                }\n            }\n        };\n\n        /* Edit Content Modal */\n        var editContentModal = {\n            trigger: {\n                triggerText: 'editContentTrigger',\n                className: \"editContentTrigger\",\n                triggerId: \"editContentTrigger\",\n            },\n            id: 'editContentModal',\n            title: 'Edit Atom Content',\n            content: <div className=\"modal-body\">\n            <p>Edit atom content</p>\n            <div className=\"form-group\">\n            <textarea \n                className=\"form-control\" \n                rows=\"2\" \n                id=\"edit_atom_content_textarea\"\n                ref={this.editContentRef}\n                value={this.state.modalValue}\n                onChange={this.handleModalValueChange}\n                ></textarea>\n                </div>\n                </div>,\n            footer: {\n                buttonNo: 2,\n                button1:{\n                    className: \"btn btn-secondary\",\n                    value: \"Close\"\n                },\n                button2: {\n                    className: 'btn btn-primary',\n                    value: 'Save',\n                }\n            }\n        };\n\n        /* Edit Metadata Modal  */\n\n            var editMetaDataModal = {\n                trigger:{\n                    triggerText: 'Edit Meta',\n                    className: 'editMeta',\n                    triggerId: 'editMetaTrigger',\n                },\n                id: 'editMetadataModal',\n                title: 'Edit Metadata',\n                content: <div className=\"modal-body\">\n                <p>Edit atom content</p>\n                <div className=\"form-group\" id=\"edit_metadata\">\n                <textarea \n                    className=\"form-control\" \n                    rows=\"2\" \n                    id=\"edit_atom_content\"\n                    value={this.state.modalValue}\n                    onChange={this.handleModalValueChange}\n\n                    >\n                </textarea>\n                </div>\n                </div>,\n                footer: {\n                    buttonNo: 2,\n                    button1: {\n                        className: 'btn btn-secondary',\n                        value: 'Close',\n                    },\n                    button2: {\n                        className: 'btn btn-primary',\n                        value: 'Save',\n                    },  \n                },\n            };\n\n\n\n    return (\n    \t<div>\n\n    \t<Modal\n            modalProps={newAtomModal}\n            style=\"\"\n            onClick={this.add_new_atom_node}\n        />\n      <Modal\n            modalProps={newSchemeModal}\n            style=\"\"\n            onClick={this.handleAddScheme}\n        />\n\n        <Modal\n            modalProps={editContentModal}\n            style=\"\"\n            onClick={this.handleEditContent}\n        />\n\n        <Modal\n            modalProps={editMetaDataModal}\n            style=\"\"\n            onClick={this.handleEditContent}\n        />\n\n\n\n      <div id=\"cy\" >\n\n      </div>\n      </div>\n      );\n}\n}\n\nexport default Cytoscape;"]},"metadata":{},"sourceType":"module"}