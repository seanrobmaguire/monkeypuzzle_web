{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\nimport $ from 'jquery';\nimport { add_atom, sd, add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source } from '../lib/Sadface'; //Import Components\n\nimport Modal from './Modal';\ncytoscape.use(edgehandles);\ncytoscape.use(contextMenus, $);\ncytoscape.use(cola);\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\" + analyst_email + \"\\\",\\\"analyst_name\\\":\\\"\" + analyst_email + \"\\\",\\\"created\\\":\\\"\" + created_date + \"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\" + edited_date + \"\\\",\\\"id\\\":\\\"\" + document_id + \"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\nclass Cytoscape extends Component {\n  constructor(props) {\n    super(props); //create Refs\n\n    this.handleAddAtom = e => {\n      let new_content = this.addAtomTextRef.current.value;\n\n      if (new_content == '') {\n        new_content = 'no content';\n        console.log(new_content, 'empty new content');\n      }\n\n      this.add_new_atom_node(new_content);\n    };\n\n    this.addAtomTextRef = React.createRef();\n    this.state = {\n      png: '',\n      jpg: '',\n      NewAtomText: ''\n    };\n    this.initCytoscape = this.initCytoscape.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n    this.edit_atom_content = this.edit_atom_content.bind(this);\n    this.delete_nodes = this.delete_nodes.bind(this);\n    this.update_local_storage = this.update_local_storage.bind(this);\n    this.redraw_visualisation = this.redraw_visualisation.bind(this);\n    this.undo = this.undo.bind(this);\n    this.redo = this.redo.bind(this);\n    this.merge_nodes = this.merge_nodes.bind(this);\n    this.delete_atom = this.delete_atom.bind(this); //    this.dragover_handler = this.dragover_handler.bind(this);\n\n    this.add_new_atom_node = this.add_new_atom_node.bind(this);\n  }\n\n  initCytoscape() {\n    console.log(\"initCyto\"); //change cy to state of APP\n\n    cy = cytoscape({\n      container: document.getElementById('cy'),\n      elements: JSON.parse(this.props.cy_data),\n      style: [{\n        selector: \"node\",\n        style: {\n          \"label\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          \"width\": \"auto\",\n          \"height\": \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][name='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: 'eh.handle',\n        style: {\n          \"handleColor\": \"orange\"\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    }); //close cy = cytoscape()\n\n    layout = this.build_cola_layout();\n    layout.run();\n    let defaults = {\n      handleColor: \"pink\"\n    };\n    cy.edgehandles({\n      toggleOffOnLeave: true,\n      handleNodes: \"node\",\n      handleSize: 10,\n      handleColor: \"#DF0085\",\n      handleHitThreshold: 8,\n      handleLineWidth: 5,\n      //handleLineType: \"flat\",\n      handleOutlineColor: \"pink\",\n      edgeType: function () {\n        return \"flat\";\n      },\n      complete: function (event, sourceNode, targetNode, addedEles) {\n        if (targetNode.length !== 0) {\n          var source_id = targetNode[0].source().id();\n          var target_id = targetNode[0].target().id(); //get the mid point between source node and target node\n\n          var source_position = targetNode[0].source().position();\n          var target_position = targetNode[0].target().position();\n          position = {};\n          position.x = (source_position.x + target_position.x) / 2;\n          position.y = (source_position.y + target_position.y) / 2;\n\n          if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\") {\n            var scheme = add_scheme(\"Support\");\n            var scheme_id = scheme.id;\n            var scheme_content = scheme.name; //remove the automatically generated edge\n\n            targetNode.remove();\n            cy.add([{\n              group: \"nodes\",\n              data: {\n                id: scheme_id.toString(),\n                content: scheme_content,\n                typeshape: \"diamond\"\n              },\n              classes: \"scheme-label\",\n              locked: false,\n              position: position\n            }]);\n            var edge1 = add_edge(source_id, scheme_id);\n            var edge2 = add_edge(scheme_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge1.id.toString(),\n                source: source_id,\n                target: scheme_id\n              }\n            }, {\n              group: \"edges\",\n              data: {\n                id: edge2.id.toString(),\n                source: scheme_id,\n                target: target_id\n              }\n            }]);\n          } else {\n            targetNode.remove();\n            var edge = add_edge(source_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge.id.toString(),\n                source: source_id,\n                target: target_id\n              }\n            }]);\n          }\n\n          this.update_local_storage();\n        } else {\n          targetNode.remove();\n        }\n      }.bind(this)\n    }); //edgehandles\n\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n\n    cm = cy.contextMenus({\n      menuItems: [{\n        id: \"edit-content\",\n        title: \"edit content\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget; //    $(\"#editContentModal\").modal(\"show\");\n          //  $(\"#edit_atom_content\").val(target.data().content);\n\n          this.edit_atom = target;\n        },\n        hasTrailingDivider: false\n      }, {\n        id: \"edit-metadata\",\n        title: \"edit metadata\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          //  $(\"#edit_metadata\").empty();\n          var target = event.target || event.cyTarget;\n          var atom = get_atom(target.id()); //  var textArea = $(\"<textarea id=\\\"\"+target.id()+\"_metadata\\\" class=\\\"form-control\\\" rows=\\\"2\\\" >\"+JSON.stringify(atom.metadata)+\"</textarea>\");\n          //   $(\"#edit_metadata\").append(textArea);\n          //   $(\"#editMetadataModal\").modal(\"show\");\n\n          edit_atom = target;\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"change-scheme\",\n        title: \"change scheme\",\n        selector: \"node[typeshape = \\\"diamond\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget; //                $(\"#editSchemeModal\").modal(\"show\");\n\n          edit_atom = target;\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"remove\",\n        title: \"remove\",\n        selector: \"node, edge\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n\n          if (selected.length !== 0) {\n            selected.forEach(function (node) {\n              this.delete_nodes(node);\n            });\n            selected = [];\n          } else {\n            if (target.data().type == \"atom\") {\n              this.delete_nodes(event);\n              target.remove();\n            } else if (target.data().typeshape == \"diamond\") {\n              this.delete_nodes(event);\n              target.remove();\n            } else {\n              this.delete_edge(target.id());\n              this.update_local_storage();\n              target.remove();\n            }\n          }\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"add-atom\",\n        content: \"add atom\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          position = event.renderedPosition;\n          document.getElementById(\"newAtomTrigger\").click(); //  addAtomTriggerRef.click();\n        }\n      }, {\n        id: \"add-scheme\",\n        content: \"add scheme\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          position = event.position || event.cyPosition;\n          document.getElementById(\"new_scheme\").click(); //   document.getElementById(\"sel1\").options.selectedIndex=0;\n          //      $(\"#newSchemeModal\").modal(\"show\");\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"redraw\",\n        content: \"redraw\",\n        coreAsWell: true,\n        onClickFunction: function () {\n          this.redraw_visualisation();\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"undo\",\n        content: \"undo\",\n        selector: \"node, edge\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.undo();\n        },\n        hasTrailingDivider: false\n      }, {\n        id: \"redo\",\n        content: \"redo\",\n        selector: \"node, edge\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.redo();\n\n          if (redo_stack == []) {\n            cm.hideMenuItem(\"redo\");\n          }\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"merge_nodes\",\n        content: \"merge nodes\",\n        selector: \"node\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.merge_nodes();\n        }\n      }]\n    });\n    cy.on(\"layoutstop\", function () {\n      running = false;\n      var png = cy.png({\n        full: true\n      });\n      this.props.handleSetPng(png); //$('#download_png').attr('href', png);\n\n      var jpg = cy.jpg({\n        full: true\n      });\n      this.props.handleSetJpg(jpg); //  $('#download_jpg').attr('href', jpg);\n    }.bind(this));\n  }\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return cy.makeLayout(cola_params);\n  }\n\n  edit_atom_content() {\n    var content = document.getElementById(\"edit_atom_content\").value;\n    var atom = cy.$(\"#\" + edit_atom.id());\n    update_atom_text(edit_atom.id(), content);\n    this.update_local_storage();\n    atom.data(\"content\", content);\n    edit_atom = null;\n  }\n\n  delete_nodes(event) {\n    var target = event.target || event.cyTarget;\n    var id = target.id(); //removed = target.remove();\n\n    this.delete_atom(id);\n    var i = 0;\n    var sds = get_sd();\n    var edges = sds.edges;\n    edges.forEach(function (edge) {\n      if (edges[i] !== undefined) {\n        if (edges[i].source_id === id || edges[i].target_id === id) {\n          delete_edge(edges[i].id);\n        }\n\n        ++i;\n      }\n    });\n    this.update_local_storage();\n  }\n\n  update_local_storage() {\n    var undo_item = JSON.parse(current_sadface_doc);\n    undo_stack.push(undo_item);\n    redo_stack = [];\n    cm.showMenuItem(\"undo\");\n    cm.hideMenuItem(\"redo\");\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    current_sadface_doc = JSON.stringify(get_sd());\n    update();\n  }\n\n  redraw_visualisation() {\n    layout.stop();\n    layout.options.eles = cy.elements();\n    layout.run();\n    cy.center();\n    cy.resize();\n  }\n\n  undo() {\n    if (undo_stack.length != 0) {\n      var redo_item = get_sd();\n      redo_stack.push(redo_item);\n      var state = undo_stack.pop();\n      this.loadJSON(JSON.stringify(state));\n\n      if (undo_stack.length == 0) {\n        cm.hideMenuItem(\"undo\");\n      }\n\n      cm.showMenuItem(\"redo\");\n    }\n  }\n\n  redo() {\n    if (redo_stack.length != 0) {\n      var undo_item = get_sd();\n      undo_stack.push(undo_item);\n      var state = redo_stack.pop();\n      this.loadJSON(JSON.stringify(state));\n\n      if (redo_stack.length == 0) {\n        cm.hideMenuItem(\"redo\");\n      }\n\n      cm.showMenuItem(\"undo\");\n    }\n  }\n\n  merge_nodes() {\n    //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n    var target;\n    var id;\n    var atom;\n    var baseNode = selected[0].target || selected[0].cyTarget;\n    var baseId = baseNode.id();\n    var baseAtom = get_atom(baseId);\n    var edge;\n\n    if (baseAtom.type == \"atom\") {\n      var sds = get_sd();\n      var i = 0;\n      selected.forEach(function (node) {\n        var j = 0;\n\n        if (i > 0) {\n          target = selected[i].target || selected[i].cyTarget;\n          id = target.id();\n          atom = get_atom(id);\n\n          if (atom.type == \"atom\") {\n            atom.sources.forEach(function (source) {\n              add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n              ++j;\n            });\n            j = 0;\n            sds.edges.forEach(function (edge) {\n              if (sds.edges[j].source_id == id) {\n                edge = add_edge(baseId, sds.edges[j].target_id);\n                cy.add([{\n                  group: \"edges\",\n                  data: {\n                    id: edge.id.toString(),\n                    source: baseId,\n                    target: sds.edges[j].target_id\n                  }\n                }]);\n              }\n\n              if (sds.edges[j].target_id == id) {\n                edge = add_edge(sds.edges[j].source_id, baseId);\n                cy.add([{\n                  group: \"edges\",\n                  data: {\n                    id: edge.id.toString(),\n                    source: sds.edges[j].source_id,\n                    target: baseId\n                  }\n                }]);\n              }\n\n              ++j;\n            });\n            this.delete_nodes(selected[i]);\n          } else {\n            alert(\"cannot merge scheme nodes\");\n          }\n        }\n\n        ++i;\n      });\n      selected = [];\n      cm.hideMenuItem(\"merge_nodes\");\n    } else {\n      alert(\"cannot merge scheme nodes\");\n    }\n  }\n\n  delete_atom(atom_id) {\n    /*\n    Remove the atom from the sadface document identified by the\n    supplied atom ID\n    */\n    if (atom_id) {\n      var atom = get_atom(atom_id);\n\n      if (atom !== null && atom !== undefined) {\n        var size = Object.keys(sd.nodes).length;\n\n        for (var i = 0; i < size; ++i) {\n          if (sd.nodes[i].id === atom.id) {\n            delete sd.nodes[i]; //                    sd.nodes = remove_falsy(sd.nodes);\n\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.initCytoscape();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      cy_data: nextProps.cy_data\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    if (this.props.cy_data !== prevProps.cy_data) {\n      this.initCytoscape();\n    }\n  }\n\n  add_new_atom_node(content) {\n    var meta = {\n      \"hello\": \"world\"\n    };\n    var new_atom = add_atom(content);\n    console.log(new_atom, 'new_atom');\n    var atom_id = new_atom.id;\n\n    if (focused != null) {\n      add_source(atom_id, focused.id, content, 0, 0);\n    }\n\n    if (position == null) {\n      position = {\n        \"x\": cy.width() / 2,\n        \"y\": cy.height() / 2\n      };\n    }\n\n    cy.add([{\n      group: \"nodes\",\n      data: {\n        id: atom_id.toString(),\n        content: content,\n        type: \"atom\",\n        typeshape: \"roundrectangle\",\n        metadata: meta\n      },\n      classes: \"atom-label\",\n      locked: false,\n      renderedPosition: position\n    }]);\n    let node = cy.getElementById(atom_id.toString());\n    /*  node.qtip({\n          content: function(){return 'ID: '+this.id()},\n          position: {\n              my: \"top center\",\n              at: \"bottom center\"\n          },\n          style: {\n              classes: \"qtip-bootstrap\",\n              tip: {\n                  width: 16,\n                  height: 8\n              }\n          }\n      });*/\n\n    position = null;\n    this.update_local_storage();\n  }\n\n  render() {\n    /* New Atom Modal */\n    const newAtomModal = {\n      trigger: {\n        triggerText: 'New Atom',\n        triggerId: 'newAtomTrigger'\n      },\n      title: 'New Atom',\n      id: 'newAtomModal',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 636\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637\n        },\n        __self: this\n      }, \"Add some content to the new atom\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control\",\n        rows: \"2\",\n        id: \"new_atom_content\",\n        ref: this.addAtomTextRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 639\n        },\n        __self: this\n      }))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Create'\n        }\n      }\n    };\n    /* New Scheme Modal*/\n\n    var newSchemeModal = {\n      trigger: {\n        triggerText: 'New Scheme',\n        className: \"new_scheme\",\n        triggerId: \"new_scheme\"\n      },\n      id: \"newSchemeModal\",\n      title: 'New Scheme',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 669\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670\n        },\n        __self: this\n      }, \"Select a scheme\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"sel1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 671\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 672\n        },\n        __self: this\n      }, \"Support\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673\n        },\n        __self: this\n      }, \"Conflict\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 674\n        },\n        __self: this\n      }, \"Argument from Sign\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675\n        },\n        __self: this\n      }, \"Argument from an Exceptional Case\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676\n        },\n        __self: this\n      }, \"Argument from Analogy\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677\n        },\n        __self: this\n      }, \"Argument from Bias\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678\n        },\n        __self: this\n      }, \"Argument from Cause to Effect\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 679\n        },\n        __self: this\n      }, \"Argument from Correlation to Causes\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 680\n        },\n        __self: this\n      }, \"Argument from Established Rule\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 681\n        },\n        __self: this\n      }, \"Argument from Evidence to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 682\n        },\n        __self: this\n      }, \"Argument from Falsification to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683\n        },\n        __self: this\n      }, \"Argument from Example\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684\n        },\n        __self: this\n      }, \"Argument from Commitment\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 685\n        },\n        __self: this\n      }, \"Circumstantial Argument Against the Person\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 686\n        },\n        __self: this\n      }, \"Argument from Popular Practice\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 687\n        },\n        __self: this\n      }, \"Argument from Popularity\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 688\n        },\n        __self: this\n      }, \"Argument from Position to Know\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 689\n        },\n        __self: this\n      }, \"Argument from Expert Opinion\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 690\n        },\n        __self: this\n      }, \"Argument from Precedent\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 691\n        },\n        __self: this\n      }, \"Argument from Consequences\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 692\n        },\n        __self: this\n      }, \"Argument from Waste\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 693\n        },\n        __self: this\n      }, \"Causal Slippery Slope Argument\"))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: \"btn btn-primary\",\n          value: \"Create\"\n        }\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      modalProps: newAtomModal,\n      style: \"\",\n      onClick: this.handleAddAtom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: newSchemeModal,\n      style: \"\",\n      onClick: this.handleAddAtom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"cy\",\n      style: {\n        height: '600px',\n        width: '600px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Cytoscape;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js"],"names":["React","Component","cytoscape","cola","edgehandles","contextMenus","$","add_atom","sd","add_scheme","add_edge","get_atom","now","new_uuid","update_atom_text","get_sd","delete_edge","update","add_source","Modal","use","cy","cm","selected","position","layout","running","json","created_date","edited_date","analyst_email","analyst_name","document_id","default_sadface_doc","current_sadface_doc","focused","undo_stack","redo_stack","edit_atom","resource_pane_viewable_state","Cytoscape","constructor","props","handleAddAtom","e","new_content","addAtomTextRef","current","value","console","log","add_new_atom_node","createRef","state","png","jpg","NewAtomText","initCytoscape","bind","build_cola_layout","edit_atom_content","delete_nodes","update_local_storage","redraw_visualisation","undo","redo","merge_nodes","delete_atom","container","document","getElementById","elements","JSON","parse","cy_data","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","run","defaults","handleColor","toggleOffOnLeave","handleNodes","handleSize","handleHitThreshold","handleLineWidth","handleOutlineColor","edgeType","complete","event","sourceNode","targetNode","addedEles","length","source_id","source","id","target_id","target","source_position","target_position","x","y","data","type","scheme","scheme_id","scheme_content","name","remove","add","group","toString","content","typeshape","classes","locked","edge1","edge2","edge","menuItems","title","onClickFunction","cyTarget","hasTrailingDivider","atom","forEach","node","coreAsWell","renderedPosition","click","cyPosition","show","hideMenuItem","on","full","handleSetPng","handleSetJpg","opts","cola_params","animate","randomize","padding","fit","maxSimulationTime","i","undefined","opt","makeLayout","sds","edges","undo_item","push","showMenuItem","localStorage","setItem","stringify","stop","options","eles","center","resize","redo_item","pop","loadJSON","baseNode","baseId","baseAtom","j","sources","resource_id","text","offset","alert","atom_id","size","Object","keys","nodes","componentDidMount","componentWillReceiveProps","nextProps","setState","componentDidUpdate","prevProps","meta","new_atom","width","height","metadata","render","newAtomModal","trigger","triggerText","triggerId","footer","buttonNo","button1","className","button2","newSchemeModal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\n\nimport $ from 'jquery';\n\n\nimport {add_atom, sd,add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source} from '../lib/Sadface'; \n//Import Components\nimport Modal from  './Modal';\n\n\ncytoscape.use( edgehandles );\ncytoscape.use(contextMenus, $);\ncytoscape.use( cola );\n\n\n\n\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+edited_date+\"\\\",\\\"id\\\":\\\"\"+document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\n\n\nclass Cytoscape extends Component {\n  constructor(props){\n        super(props);\n        //create Refs\n        this.addAtomTextRef = React.createRef();\n\n        this.state={\n         png:'',\n         jpg:'',\n         NewAtomText: '',\n        }\n         this.initCytoscape = this.initCytoscape.bind(this);\n         this.build_cola_layout = this.build_cola_layout.bind(this);\n         this.edit_atom_content = this.edit_atom_content.bind(this);\n         this. delete_nodes =this.delete_nodes.bind(this);\n         this.update_local_storage = this.update_local_storage.bind(this);\n         this.redraw_visualisation = this.redraw_visualisation.bind(this);\n         this.undo = this.undo.bind(this);\n         this.redo = this.redo.bind(this);\n         this.merge_nodes = this.merge_nodes.bind(this);\n         this.delete_atom =this.delete_atom.bind(this);\n        //    this.dragover_handler = this.dragover_handler.bind(this);\n\n        this.add_new_atom_node = this.add_new_atom_node.bind(this);\n    }\n\n    initCytoscape(){\n        console.log(\"initCyto\");\n        //change cy to state of APP\n        cy = cytoscape({\n            container: document.getElementById('cy'),\n            elements: JSON.parse(this.props.cy_data),\n\n            style:[\n                {   selector: \"node\", \n                    style: {\n                        \"label\": \"data(content)\",\n                        \"text-opacity\": 0.7,\n                        \"width\" : \"auto\",\n                        \"height\" : \"auto\",\n                        \"text-valign\": \"bottom\",\n                        \"text-halign\": \"right\",\n                        \"text-outline-color\": \"#eee\",\n                        \"text-outline-width\": 1\n                    }\n                },\n                \n                {   selector: \"[typeshape]\", \n                    style: {\n                        \"shape\":\"data(typeshape)\"\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond']\", \n                    style: {\n                        'background-color': '#CC9900'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][content='Conflict']\",\n                    style: {\n                        'background-color': 'red'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][name='Support']\",\n                    style: {\n                        'background-color': 'green'\n                    }\n                },\n\n                {   selector: \"edge\", \n                    style: {\n                        \"line-color\": \"#9dbaea\",\n                        \"target-arrow-shape\": \"triangle\",\n                        \"target-arrow-color\": \"#9dbaea\",\n                        \"curve-style\": \"bezier\"\n                    }\n                },\n\n\n                {   selector: \":selected\", \n                    style: {\n                        \"border-width\":\"1\",\n                        \"border-color\":\"black\",\n                        \"background-color\": \"#3399CC\"\n                    }\n                },\n\n\n                {   selector: \".atom-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n\n                {   selector: \".scheme-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n                {\n\n                selector: 'eh.handle',\n                style: {\n                    \"handleColor\":\"orange\",\n\n                },\n            }\n            ],\n\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n\n        });//close cy = cytoscape()\n\n\n\n    layout = this.build_cola_layout();\n    layout.run();\n\n    let defaults = {\n                handleColor: \"pink\",\n\n\n    }\n\n   \n\n    cy.edgehandles({\n        toggleOffOnLeave: true,\n        handleNodes: \"node\",\n        handleSize: 10,\n        handleColor: \"#DF0085\",\n        handleHitThreshold: 8,\n        handleLineWidth: 5,\n        //handleLineType: \"flat\",\n        handleOutlineColor: \"pink\",\n        edgeType: function(){ return \"flat\"; },\n        complete: function(event, sourceNode, targetNode, addedEles){\n            if (targetNode.length !== 0) {\n                var source_id = targetNode[0].source().id();\n                var target_id = targetNode[0].target().id();\n\n                //get the mid point between source node and target node\n                var source_position = targetNode[0].source().position();\n                var target_position = targetNode[0].target().position();\n\n                position = {};\n                position.x = ((source_position.x + target_position.x)/2);\n                position.y = ((source_position.y + target_position.y)/2);\n\n                if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\")\n                {\n                    var scheme = add_scheme(\"Support\");\n                    var scheme_id = scheme.id;\n                    var scheme_content = scheme.name;\n                    //remove the automatically generated edge\n                    targetNode.remove();\n                    cy.add([\n                        {group: \"nodes\", data: {id: scheme_id.toString(),\n                            content: scheme_content, typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n                            ]);\n                    var edge1 = add_edge(source_id, scheme_id);\n                    var edge2 = add_edge(scheme_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge1.id.toString(), source: source_id, target: scheme_id } },\n                      { group: \"edges\", data: { id: edge2.id.toString(), source: scheme_id, target: target_id } }\n                      ]);\n                } else {\n                    targetNode.remove();\n                    var edge = add_edge(source_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge.id.toString(), source: source_id, target: target_id } }\n                      ]);\n                }\n                this.update_local_storage();\n            } else {\n                targetNode.remove();\n            }\n        }.bind(this)\n    });\n    //edgehandles\n\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n     cm = cy.contextMenus({\n       menuItems: [\n       {\n        id: \"edit-content\",\n        title: \"edit content\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n          //    $(\"#editContentModal\").modal(\"show\");\n            //  $(\"#edit_atom_content\").val(target.data().content);\n            this.edit_atom = target;\n        },\n        hasTrailingDivider: false\n    },\n    {\n        id: \"edit-metadata\",\n        title: \"edit metadata\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n              //  $(\"#edit_metadata\").empty();\n              var target = event.target || event.cyTarget;\n              var atom = get_atom(target.id());\n              //  var textArea = $(\"<textarea id=\\\"\"+target.id()+\"_metadata\\\" class=\\\"form-control\\\" rows=\\\"2\\\" >\"+JSON.stringify(atom.metadata)+\"</textarea>\");\n             //   $(\"#edit_metadata\").append(textArea);\n             //   $(\"#editMetadataModal\").modal(\"show\");\n             edit_atom = target;\n         },\n         hasTrailingDivider: true\n     },\n     {\n        id: \"change-scheme\",\n        title: \"change scheme\",\n        selector: \"node[typeshape = \\\"diamond\\\"]\",\n        onClickFunction: function (event) {\n            var target = event.target || event.cyTarget;\n//                $(\"#editSchemeModal\").modal(\"show\");\nedit_atom = target;\n},\nhasTrailingDivider: true\n},\n{\n    id: \"remove\",\n    title: \"remove\",\n    selector: \"node, edge\",\n    onClickFunction: function (event) {\n        var target = event.target || event.cyTarget;\n        if (selected.length !== 0) {\n            selected.forEach(function(node) {\n                this.delete_nodes(node);\n            });\n            selected = [];\n        } else {\n            if (target.data().type==\"atom\") {\n                this.delete_nodes(event);\n                target.remove();\n            } else if (target.data().typeshape==\"diamond\"){\n                this.delete_nodes(event);\n                target.remove();\n            } else {\n                this.delete_edge(target.id());\n                this.update_local_storage();\n                target.remove();\n            }\n        }\n    },\n    hasTrailingDivider: true\n},\n{\n    id: \"add-atom\",\n    content: \"add atom\",\n    coreAsWell: true,\n\n    onClickFunction: function (event) {\n        position = event.renderedPosition;\n         \n        document.getElementById(\"newAtomTrigger\").click()\n      //  addAtomTriggerRef.click();\n\n    }\n},\n{\n    id: \"add-scheme\",\n    content: \"add scheme\",\n    coreAsWell: true,\n    onClickFunction: function (event) {\n\n        position = event.position || event.cyPosition;\n        document.getElementById(\"new_scheme\").click()\n\n\n     //   document.getElementById(\"sel1\").options.selectedIndex=0;\n//      $(\"#newSchemeModal\").modal(\"show\");\n},\nhasTrailingDivider: true\n},\n{\n    id: \"redraw\",\n    content: \"redraw\",\n    coreAsWell: true,\n    onClickFunction: function () { this.redraw_visualisation(); },\n    hasTrailingDivider: true\n},\n{\n    id: \"undo\",\n    content: \"undo\",\n    selector: \"node, edge\",\n    show: false,\n    coreAsWell: true,\n    onClickFunction: function (event) {\n      this.undo();\n  },\n  hasTrailingDivider: false\n},\n{\n    id: \"redo\",\n    content: \"redo\",\n    selector: \"node, edge\",\n    show: false,\n    coreAsWell: true,\n    onClickFunction: function (event) {\n      this.redo();\n      if (redo_stack == []) {\n        cm.hideMenuItem(\"redo\");\n    }\n},\nhasTrailingDivider: true\n},\n{\n  id: \"merge_nodes\",\n  content: \"merge nodes\",\n  selector: \"node\",\n  show: false,\n  coreAsWell: true,\n  onClickFunction: function (event) {\n      this.merge_nodes();\n  }\n}\n]\n});\n      cy.on(\"layoutstop\", function(){\n        running = false;\n        \n        var png = cy.png({ full: true });\n        this.props.handleSetPng(png);\n        //$('#download_png').attr('href', png);\n\n        var jpg = cy.jpg({ full: true });\n        this.props.handleSetJpg(jpg);\n      //  $('#download_jpg').attr('href', jpg);\n    }.bind(this));\n\n }\n\n build_cola_layout( opts ) {\n    var cola_params = {\n        name: \"cola\",\n        animate: true,\n        randomize: true,\n        padding: 100,\n        fit: false,\n        maxSimulationTime: 1500\n    };\n    var i = 0;\n    if (opts !== undefined) {\n        opts.forEach(function(opt) {\n         cola_params[i] = opts[i];\n         ++i;\n     });\n    }\n    return cy.makeLayout( cola_params );\n}\n\nedit_atom_content() {\n    var content = document.getElementById(\"edit_atom_content\").value;\n    var atom = cy.$(\"#\"+edit_atom.id());\n    update_atom_text(edit_atom.id(), content);\n    this.update_local_storage();\n    atom.data(\"content\", content);\n    edit_atom = null;\n}\n\ndelete_nodes(event) {\n    var target = event.target || event.cyTarget;\n    var id = target.id();\n    //removed = target.remove();\n    this.delete_atom(id);\n    var i = 0;\n    var sds = get_sd();\n    var edges = sds.edges;\n    edges.forEach(function(edge) {\n        if (edges[i] !== undefined) {\n            if (edges[i].source_id === id || edges[i].target_id === id) {\n                delete_edge(edges[i].id);\n            }\n            ++i;\n        }\n    });\n    this.update_local_storage();\n}\n\nupdate_local_storage() {\n    var undo_item = JSON.parse(current_sadface_doc);\n    undo_stack.push(undo_item);\n    redo_stack = [];\n    cm.showMenuItem(\"undo\");\n    cm.hideMenuItem(\"redo\");\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    current_sadface_doc = JSON.stringify(get_sd());\n    update();\n}\n\nredraw_visualisation() {\n    layout.stop();\n    layout.options.eles = cy.elements();\n    layout.run();\n    cy.center();\n    cy.resize();\n}\n\nundo() {\n    if (undo_stack.length != 0) {\n        var redo_item = get_sd();\n        redo_stack.push(redo_item);\n        var state = undo_stack.pop();\n        this.loadJSON(JSON.stringify(state));\n        if (undo_stack.length == 0) {\n            cm.hideMenuItem(\"undo\");\n        }\n        cm.showMenuItem(\"redo\");\n    }\n}\n\nredo() {\n    if (redo_stack.length != 0) {\n        var undo_item = get_sd();\n        undo_stack.push(undo_item);\n        var state = redo_stack.pop();\n        this.loadJSON(JSON.stringify(state));\n        if (redo_stack.length == 0) {\n            cm.hideMenuItem(\"redo\");\n        }\n        cm.showMenuItem(\"undo\");\n    }\n}\n\nmerge_nodes() {\n    //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n    var target;\n    var id;\n    var atom;\n    var baseNode = selected[0].target || selected[0].cyTarget;\n    var baseId = baseNode.id();\n    var baseAtom = get_atom(baseId);\n    var edge;\n    if (baseAtom.type == \"atom\") {\n        var sds = get_sd();\n        var i = 0;\n        selected.forEach(function(node){\n            var j = 0;\n            if (i > 0) {\n                target = selected[i].target || selected[i].cyTarget;\n                id = target.id();\n                atom = get_atom(id);\n                if (atom.type == \"atom\") {\n                    atom.sources.forEach(function(source) {\n                        add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n                        ++j;\n                    });\n                    j = 0;\n                    sds.edges.forEach(function(edge) {\n                        if (sds.edges[j].source_id == id) {\n                            edge = add_edge(baseId,sds.edges[j].target_id);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: baseId, target: sds.edges[j].target_id } }\n                              ]);\n                        }\n                        if (sds.edges[j].target_id == id) {\n                            edge = add_edge(sds.edges[j].source_id, baseId);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: sds.edges[j].source_id, target: baseId } }\n                              ]);\n                        }\n                        ++j;\n                    });\n                    this.delete_nodes(selected[i]);\n                } else {\n                    alert(\"cannot merge scheme nodes\");\n                }\n            }\n            ++i;\n        });\n        selected = [];\n        cm.hideMenuItem(\"merge_nodes\");\n    } else {\n        alert(\"cannot merge scheme nodes\");\n    }\n}\n\ndelete_atom(atom_id) {\n    /*\n    Remove the atom from the sadface document identified by the\n    supplied atom ID\n    */\n    if (atom_id) {\n        var atom = get_atom(atom_id);\n        if (atom !== null && atom !== undefined) {\n            var size = Object.keys(sd.nodes).length;\n            for (var i = 0; i < size; ++i) {\n                if (sd.nodes[i].id === atom.id) {\n                    delete sd.nodes[i];\n//                    sd.nodes = remove_falsy(sd.nodes);\n                        return;\n                }\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\ncomponentDidMount(){\n this.initCytoscape();\n}\ncomponentWillReceiveProps(nextProps) {\n   this.setState({ cy_data: nextProps.cy_data })\n}\n\ncomponentDidUpdate(prevProps) {\n  // Typical usage (don't forget to compare props):\n  if (this.props.cy_data !== prevProps.cy_data) {\n  \tthis.initCytoscape();\n  }\n}\n\nhandleAddAtom = (e) => {\n    let new_content = this.addAtomTextRef.current.value;\n    if(new_content == ''){\n        new_content = 'no content'\n        console.log(new_content, 'empty new content')\n    }\n    this.add_new_atom_node(new_content)\n\n}\n\nadd_new_atom_node(content) {\n    var meta = {\"hello\":\"world\"};\n    var new_atom = add_atom(content);\n    console.log(new_atom, 'new_atom');\n    var atom_id = new_atom.id;\n    if (focused != null) {\n        add_source(atom_id, focused.id, content, 0, 0);\n    }\n    if (position == null) {\n        position = {\"x\": cy.width()/2, \"y\": cy.height()/2};\n    }\n    cy.add([\n        {group: \"nodes\", data: {id: atom_id.toString(),\n            content: content, type: \"atom\", typeshape: \"roundrectangle\", metadata: meta }, \n            classes: \"atom-label\", locked: false, renderedPosition: position}\n    ]);\n    let node = cy.getElementById(atom_id.toString() );\n  /*  node.qtip({\n        content: function(){return 'ID: '+this.id()},\n        position: {\n            my: \"top center\",\n            at: \"bottom center\"\n        },\n        style: {\n            classes: \"qtip-bootstrap\",\n            tip: {\n                width: 16,\n                height: 8\n            }\n        }\n    });*/\n    position = null;\n    this.update_local_storage();\n}\n\n\n\n\n\nrender(){\n     /* New Atom Modal */\n        const newAtomModal = {\n          trigger: {\n            triggerText: 'New Atom',\n            triggerId: 'newAtomTrigger'\n          },\n          title: 'New Atom',\n          id: 'newAtomModal',\n          content: <div className=\"modal-body\">\n          <p>Add some content to the new atom</p>\n          <div className=\"form-group\">\n          <textarea \n            className=\"form-control\" \n            rows=\"2\" \n            id=\"new_atom_content\" \n            ref={this.addAtomTextRef}\n            >\n          </textarea></div></div>,\n          footer: {\n            buttonNo:2,\n            button1: {\n              className: \"btn btn-secondary\",\n              value: \"Close\"\n            },\n            button2: {\n              className: 'btn btn-primary',\n              value: 'Create',\n            },\n\n          }\n        };\n\n        /* New Scheme Modal*/\nvar newSchemeModal = {\n  trigger: {\n    triggerText: 'New Scheme',\n    className: \"new_scheme\",\n    triggerId: \"new_scheme\",\n  },\n  id:\"newSchemeModal\",\n  title: 'New Scheme',\n  content: <div className=\"modal-body\">\n  <p>Select a scheme</p>\n  <select className=\"form-control\" id=\"sel1\">\n  <option>Support</option>\n  <option>Conflict</option>\n  <option>Argument from Sign</option>\n  <option>Argument from an Exceptional Case</option>\n  <option>Argument from Analogy</option>\n  <option>Argument from Bias</option>\n  <option>Argument from Cause to Effect</option>\n  <option>Argument from Correlation to Causes</option>\n  <option>Argument from Established Rule</option>\n  <option>Argument from Evidence to a Hypothesis</option>\n  <option>Argument from Falsification to a Hypothesis</option>\n  <option>Argument from Example</option>\n  <option>Argument from Commitment</option>\n  <option>Circumstantial Argument Against the Person</option>\n  <option>Argument from Popular Practice</option>\n  <option>Argument from Popularity</option>\n  <option>Argument from Position to Know</option>\n  <option>Argument from Expert Opinion</option>\n  <option>Argument from Precedent</option>\n  <option>Argument from Consequences</option>\n  <option>Argument from Waste</option>\n  <option>Causal Slippery Slope Argument</option>\n  </select>\n  </div>,\n  footer: {\n    buttonNo: 2,\n    button1: {\n      className: \"btn btn-secondary\",\n      value: \"Close\"\n    },\n    button2: {\n      className: \"btn btn-primary\",\n      value: \"Create\"\n    }\n  }\n};\n\n\n\n    return (\n    \t<div>\n\n    \t<Modal\n\n            modalProps={newAtomModal}\n            style=\"\"\n            onClick={this.handleAddAtom}\n\n      />\n      <Modal\n\n            modalProps={newSchemeModal}\n            style=\"\"\n            onClick={this.handleAddAtom}\n\n      />\n\n      <div id=\"cy\"  style={{height:'600px', width:'600px'}}>\n\n      </div>\n      </div>\n      );\n}\n}\n\nexport default Cytoscape;"]},"metadata":{},"sourceType":"module"}