{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles'; //import functions\n\nimport { import_json } from '../lib/Sadface';\ncytoscape.use(edgehandles);\ncytoscape.use(cola);\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar cy_data = {};\nvar json;\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\"; //var document_id = this.props.new_uuid;\n//var default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+this.state.created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+this.state.edited_date+\"\\\",\\\"id\\\":\\\"\"+this.state.document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\n\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\nclass GraphContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cy: null,\n      layout: null,\n      created_date: '',\n      edited_date: '',\n      analyst_email: \"Default Analyst Email\",\n      document_id: '',\n      default_sadface_doc: {},\n      sd: {},\n      cy_data: {\n        nodes: [{\n          data: {\n            id: 'cat'\n          }\n        }, {\n          data: {\n            id: 'bird'\n          }\n        }, {\n          data: {\n            id: 'ladybug'\n          }\n        }, {\n          data: {\n            id: 'aphid'\n          }\n        }, {\n          data: {\n            id: 'rose'\n          }\n        }, {\n          data: {\n            id: 'grasshopper'\n          }\n        }, {\n          data: {\n            id: 'plant'\n          }\n        }, {\n          data: {\n            id: 'wheat'\n          }\n        }],\n        edges: [{\n          data: {\n            source: 'cat',\n            target: 'bird'\n          }\n        }, {\n          data: {\n            source: 'bird',\n            target: 'ladybug'\n          }\n        }, {\n          data: {\n            source: 'bird',\n            target: 'grasshopper'\n          }\n        }, {\n          data: {\n            source: 'grasshopper',\n            target: 'plant'\n          }\n        }, {\n          data: {\n            source: 'grasshopper',\n            target: 'wheat'\n          }\n        }, {\n          data: {\n            source: 'ladybug',\n            target: 'aphid'\n          }\n        }, {\n          data: {\n            source: 'aphid',\n            target: 'rose'\n          }\n        }]\n      }\n    };\n    this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n  }\n\n  initialise_monkeypuzzle() {\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\")) {\n      this.loadJSON(localStorage.getItem(\"state\"));\n      this.initCytoscape(); //else use default\n    } else {\n      current_sadface_doc = this.setDefault();\n      localStorage.setItem(\"state\", current_sadface_doc); //   cy_data = export_cytoscape({import_json(current_sadface_doc)});\n\n      this.initCytoscape();\n    }\n  }\n\n  setDefault() {\n    this.setState({\n      analyst_email: \"Default Analyst Email\",\n      analyst_name: \"Default Analsyst Name\",\n      created: this.props.now(),\n      edges: [],\n      edited: this.props.now(),\n      id: this.props.new_uuid(),\n      metadata: {},\n      nodes: [],\n      resources: []\n    });\n  }\n\n  loadJSON(json_value) {\n    json = import_json(json_value);\n    localStorage.setItem(\"state\", JSON.stringify(this.state.sd));\n    current_sadface_doc = JSON.stringify(this.state.sd); //load any sources in the stored diagram state\n\n    window.onload = function () {\n      loadTabs(json.resources);\n    };\n\n    cy_data = export_cytoscape(json);\n\n    if (cy !== null) {\n      cy.elements().remove();\n      cy.json({\n        elements: JSON.parse(cy_data)\n      });\n      redraw_visualisation();\n    }\n  }\n\n  loadTabs(tabs) {\n    tabs.forEach(function (tab) {\n      load_tab(tab);\n    });\n  } //End Redo\n\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return this.state.cy.makeLayout(cola_params);\n  }\n\n  renderCytoscapeElement() {\n    console.log('* Cytoscape.js is rendering the graph..');\n    this.state.cy = cytoscape({\n      container: document.getElementById('cy'),\n      ready: function () {\n        window.cy = this;\n      },\n      elements: this.state.cy_data,\n      //JSON.parae(cy_data)\n      style: [{\n        selector: \"node\",\n        style: {\n          \"content\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          \"width\": \"auto\",\n          \"height\": \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    });\n    this.state.layout = this.build_cola_layout();\n    this.state.layout.run();\n    {\n      /*  this.state.cy.elements(\"node[type = \\\"atom\\\"]\").qtip({\n      content: function(){return 'ID: '+this.id()},\n      position: {\n        my: \"top center\",\n        at: \"bottom center\"\n      },\n      style: {\n        classes: \"qtip-bootstrap\",\n        tip: {\n            width: 16,\n            height: 8\n      \t\t}\n      }\n      });*/\n    }\n    this.state.cy.edgehandles({\n      toggleOffOnLeave: true,\n      handleNodes: \"node\",\n      handleSize: 10,\n      handleColor: \"orange\",\n      handleHitThreshold: 8,\n      handleLineWidth: 5,\n      //handleLineType: \"flat\",\n      handleOutlineColor: \"grey\",\n      edgeType: function () {\n        return \"flat\";\n      },\n      complete: function (event, sourceNode, targetNode, addedEles) {\n        if (targetNode.length !== 0) {\n          var source_id = targetNode[0].source().id();\n          var target_id = targetNode[0].target().id(); //get the mid point between source node and target node\n\n          var source_position = targetNode[0].source().position();\n          var target_position = targetNode[0].target().position();\n          position = {};\n          position.x = (source_position.x + target_position.x) / 2;\n          position.y = (source_position.y + target_position.y) / 2;\n\n          if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\") {\n            var scheme = this.add_scheme(\"Support\");\n            var scheme_id = scheme.id;\n            var scheme_content = scheme.name; //remove the automatically generated edge\n\n            targetNode.remove();\n            cy.add([{\n              group: \"nodes\",\n              data: {\n                id: scheme_id.toString(),\n                content: scheme_content,\n                typeshape: \"diamond\"\n              },\n              classes: \"scheme-label\",\n              locked: false,\n              position: position\n            }]);\n            var edge1 = this.add_edge(source_id, scheme_id);\n            var edge2 = this.add_edge(scheme_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge1.id.toString(),\n                source: source_id,\n                target: scheme_id\n              }\n            }, {\n              group: \"edges\",\n              data: {\n                id: edge2.id.toString(),\n                source: scheme_id,\n                target: target_id\n              }\n            }]);\n          } else {\n            targetNode.remove();\n            var edge = this.add_edge(source_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge.id.toString(),\n                source: source_id,\n                target: target_id\n              }\n            }]);\n          }\n\n          this.props.update_local_storage();\n        } else {\n          targetNode.remove();\n        }\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.initialise_monkeypuzzle();\n    this.setState({\n      created_date: this.now,\n      document_id: this.props.new_uuid,\n      default_sadface_doc: \"{\\\"analyst_email\\\":\\\"\" + analyst_email + \"\\\",\\\"analyst_name\\\":\\\"\" + analyst_email + \"\\\",\\\"created\\\":\\\"\" + this.state.created_date + \"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\" + this.state.edited_date + \"\\\",\\\"id\\\":\\\"\" + this.state.document_id + \"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\"\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"cy\",\n      ondrop: \"drop_handler(event);\",\n      ondragover: \"dragover_handler(event);\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nexport default GraphContainer;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js"],"names":["React","Component","cytoscape","cola","edgehandles","import_json","use","cy","cm","selected","position","layout","running","cy_data","json","analyst_email","analyst_name","current_sadface_doc","focused","undo_stack","redo_stack","edit_atom","resource_pane_viewable_state","GraphContainer","constructor","props","state","created_date","edited_date","document_id","default_sadface_doc","sd","nodes","data","id","edges","source","target","initialise_monkeypuzzle","bind","build_cola_layout","localStorage","getItem","loadJSON","initCytoscape","setDefault","setItem","setState","created","now","edited","new_uuid","metadata","resources","json_value","JSON","stringify","window","onload","loadTabs","export_cytoscape","elements","remove","parse","redraw_visualisation","tabs","forEach","tab","load_tab","opts","cola_params","name","animate","randomize","padding","fit","maxSimulationTime","i","undefined","opt","makeLayout","renderCytoscapeElement","console","log","container","document","getElementById","ready","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","run","toggleOffOnLeave","handleNodes","handleSize","handleColor","handleHitThreshold","handleLineWidth","handleOutlineColor","edgeType","complete","event","sourceNode","targetNode","addedEles","length","source_id","target_id","source_position","target_position","x","y","type","scheme","add_scheme","scheme_id","scheme_content","add","group","toString","content","typeshape","classes","locked","edge1","add_edge","edge2","edge","update_local_storage","componentDidMount","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\n\n//import functions\nimport {import_json} from '../lib/Sadface'\n\n\ncytoscape.use( edgehandles );\ncytoscape.use( cola );\n\n\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar cy_data  = {};\nvar json;\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\n//var document_id = this.props.new_uuid;\n//var default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+this.state.created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+this.state.edited_date+\"\\\",\\\"id\\\":\\\"\"+this.state.document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\n\nclass GraphContainer extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n        \tcy:null,\n        \tlayout: null,\n            created_date: '',\n            edited_date:'',\n            analyst_email: \"Default Analyst Email\",\n            document_id: '',\n            default_sadface_doc: {},\n            sd:{},\n\n\n\n\n        \tcy_data: {\n\n                nodes: [\n                    { data: { id: 'cat' } },\n                    { data: { id: 'bird' } },\n                    { data: { id: 'ladybug' } },\n                    { data: { id: 'aphid' } },\n                    { data: { id: 'rose' } },\n                    { data: { id: 'grasshopper' } },\n                    { data: { id: 'plant' } },\n                    { data: { id: 'wheat' } }\n                ],\n                edges: [\n                    { data: { source: 'cat', target: 'bird' } },\n                    { data: { source: 'bird', target: 'ladybug' } },\n                    { data: { source: 'bird', target: 'grasshopper' } },\n                    { data: { source: 'grasshopper', target: 'plant' } },\n                    { data: { source: 'grasshopper', target: 'wheat' } },\n                    { data: { source: 'ladybug', target: 'aphid' } },\n                    { data: { source: 'aphid', target: 'rose' } }\n                ]\n           \n\n        \t},\n        }\n        this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n        this.build_cola_layout = this.build_cola_layout.bind(this);\n    }\n\n    initialise_monkeypuzzle(){\n          //load diagram if there is one in localStorage\n        if (localStorage.getItem(\"state\"))\n        {\n            this.loadJSON(localStorage.getItem(\"state\"));\n            this.initCytoscape();\n        //else use default\n        } else\n        {\n            current_sadface_doc = this.setDefault();\n            localStorage.setItem(\"state\", current_sadface_doc);\n         //   cy_data = export_cytoscape({import_json(current_sadface_doc)});\n            this.initCytoscape();\n        }\n    }\n\nsetDefault(){\n    this.setState({\n        analyst_email: \"Default Analyst Email\",\n        analyst_name: \"Default Analsyst Name\",\n        created: this.props.now(),\n        edges:[],\n        edited: this.props.now(),\n        id: this.props.new_uuid(),\n        metadata:{},\n        nodes:[],\n        resources: [],\n\n    });\n}\n\nloadJSON(json_value) {\n    json = import_json(json_value);\n    localStorage.setItem(\"state\",JSON.stringify(this.state.sd));\n    current_sadface_doc = JSON.stringify(this.state.sd);\n    //load any sources in the stored diagram state\n    window.onload = function () {\n        loadTabs(json.resources);\n    };\n    cy_data = export_cytoscape(json);\n    if(cy !== null)\n    {\n        cy.elements().remove();\n        cy.json({elements: JSON.parse(cy_data)});\n        redraw_visualisation();\n    }\n}\n\nloadTabs(tabs) {\n    tabs.forEach(function(tab) {\n       load_tab(tab);\n    });\n}\n//End Redo\n\n    build_cola_layout( opts ) {\n        var cola_params = {\n            name: \"cola\",\n            animate: true,\n            randomize: true,\n            padding: 100,\n            fit: false,\n            maxSimulationTime: 1500\n        };\n        var i = 0;\n        if (opts !== undefined) {\n            opts.forEach(function(opt) {\n               cola_params[i] = opts[i];\n               ++i;\n            });\n        }\n        return this.state.cy.makeLayout( cola_params );\n    }\n\n    renderCytoscapeElement(){\n\n        console.log('* Cytoscape.js is rendering the graph..');\n\n        this.state.cy = cytoscape(\n        {\n            container: document.getElementById('cy'),\n            ready: function(){ window.cy = this; },\n            elements: this.state.cy_data, //JSON.parae(cy_data)\n\n\n\n          \n\n            style: [\n\t            {   selector: \"node\", \n\t                style: {\n\t                    \"content\": \"data(content)\",\n\t                    \"text-opacity\": 0.7,\n\t                    \"width\" : \"auto\",\n\t                    \"height\" : \"auto\",\n\t                    \"text-valign\": \"bottom\",\n\t                    \"text-halign\": \"right\",\n\t                    \"text-outline-color\": \"#eee\",\n\t                    \"text-outline-width\": 1\n\t              \t}\t\n\t            },\n\n\t            {   selector: \"[typeshape]\", \n\t                style: {\n\t                    \"shape\":\"data(typeshape)\"\n\t                }\n\t            },\n\n\t            {   selector: \"node[typeshape='diamond']\", \n\t                style: {\n\t                    'background-color': '#CC9900'\n\t                }\n\t            },\n\n\t            {\n\t                selector: \"node[typeshape='diamond'][content='Conflict']\",\n\t                style: {\n\t                    'background-color': 'red'\n\t                }\n\t            },\n\n\t            {\n\t                selector: \"node[typeshape='diamond'][content='Support']\",\n\t                style: {\n\t                    'background-color': 'green'\n\t                }\n\t            },\n\n\t            {   selector: \"edge\", \n\t                style: {\n\t                    \"line-color\": \"#9dbaea\",\n\t                    \"target-arrow-shape\": \"triangle\",\n\t                    \"target-arrow-color\": \"#9dbaea\",\n\t                    \"curve-style\": \"bezier\"\n\t                }\n\t            },\n\n\t            {   selector: \":selected\", \n\t                style: {\n\t                    \"border-width\":\"1\",\n\t                    \"border-color\":\"black\",\n\t                    \"background-color\": \"#3399CC\"\n\t                }\n\t            },\n\n\t            {   selector: \".atom-label\", \n\t                style:{\n\t                    \"text-wrap\": \"wrap\",\n\t                    \"text-max-width\": 160\n\t                }\n\t            },\n\n\t            {   selector: \".scheme-label\", \n\t                style:{\n\t                    \"text-wrap\": \"wrap\",\n\t                    \"text-max-width\": 160\n\t                }\n            \t}\n           \t],\n\n\n\n\n              \n              boxSelectionEnabled: false,\n              autounselectify: false,\n              selectionType: \"single\",\n              minZoom: 0.1,\n              maxZoom: 1.5,\n                \n           \n            }); \n            this.state.layout= this.build_cola_layout();\n            this.state.layout.run();\n\n            {/*  this.state.cy.elements(\"node[type = \\\"atom\\\"]\").qtip({\n        \t\t\tcontent: function(){return 'ID: '+this.id()},\n\t\t\t        position: {\n\t\t\t            my: \"top center\",\n\t\t\t            at: \"bottom center\"\n\t\t\t        },\n\t\t\t        style: {\n\t\t\t            classes: \"qtip-bootstrap\",\n\t\t\t            tip: {\n\t\t\t                width: 16,\n\t\t\t                height: 8\n            \t\t\t}\n        \t\t\t}\n    \t\t\t});*/}\n\n    \tthis.state.cy.edgehandles({\n        toggleOffOnLeave: true,\n        handleNodes: \"node\",\n        handleSize: 10,\n        handleColor: \"orange\",\n        handleHitThreshold: 8,\n        handleLineWidth: 5,\n        //handleLineType: \"flat\",\n        handleOutlineColor: \"grey\",\n        edgeType: function(){ return \"flat\"; },\n        complete: function(event, sourceNode, targetNode, addedEles){\n            if (targetNode.length !== 0) {\n                var source_id = targetNode[0].source().id();\n                var target_id = targetNode[0].target().id();\n\n                //get the mid point between source node and target node\n                var source_position = targetNode[0].source().position();\n                var target_position = targetNode[0].target().position();\n\n                position = {};\n                position.x = ((source_position.x + target_position.x)/2);\n                position.y = ((source_position.y + target_position.y)/2);\n\n                if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\")\n                {\n                    var scheme = this.add_scheme(\"Support\");\n                    var scheme_id = scheme.id;\n                    var scheme_content = scheme.name;\n                    //remove the automatically generated edge\n                    targetNode.remove();\n                    cy.add([\n                        {group: \"nodes\", data: {id: scheme_id.toString(),\n                            content: scheme_content, typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n                    ]);\n                    var edge1 = this.add_edge(source_id, scheme_id);\n                    var edge2 = this.add_edge(scheme_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge1.id.toString(), source: source_id, target: scheme_id } },\n                      { group: \"edges\", data: { id: edge2.id.toString(), source: scheme_id, target: target_id } }\n                    ]);\n                } else {\n                    targetNode.remove();\n                    var edge = this.add_edge(source_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge.id.toString(), source: source_id, target: target_id } }\n                    ]);\n                }\n                this.props.update_local_storage();\n            } else {\n                targetNode.remove();\n            }\n        }\n    });\n    }\n\n\n    componentDidMount(){\n        this.initialise_monkeypuzzle();\n        this.setState(\n            {created_date: this.now,\n             document_id: this.props.new_uuid,\n             default_sadface_doc: \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+this.state.created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+this.state.edited_date+\"\\\",\\\"id\\\":\\\"\"+this.state.document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\",\n\n            }\n            )\n    }\n\n    render(){\n        return(\n            <div id=\"cy\" ondrop=\"drop_handler(event);\" ondragover=\"dragover_handler(event);\"></div>\n        )\n    }\n}\n\nfunction mapStateToProps(state){\n    return {};\n}\n\n\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}