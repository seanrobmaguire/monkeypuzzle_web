{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\ncytoscape.use(edgehandles);\ncytoscape.use(cola);\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar cy_data = {};\nvar json;\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\"; //var document_id = this.props.new_uuid;\n//var default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+this.state.created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+this.state.edited_date+\"\\\",\\\"id\\\":\\\"\"+this.state.document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\n\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\nclass GraphContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cy: null,\n      layout: null,\n      created_date: '',\n      edited_date: '',\n      document_id: '',\n      cy_data: {\n        nodes: [{\n          data: {\n            id: 'cat'\n          }\n        }, {\n          data: {\n            id: 'bird'\n          }\n        }, {\n          data: {\n            id: 'ladybug'\n          }\n        }, {\n          data: {\n            id: 'aphid'\n          }\n        }, {\n          data: {\n            id: 'rose'\n          }\n        }, {\n          data: {\n            id: 'grasshopper'\n          }\n        }, {\n          data: {\n            id: 'plant'\n          }\n        }, {\n          data: {\n            id: 'wheat'\n          }\n        }],\n        edges: [{\n          data: {\n            source: 'cat',\n            target: 'bird'\n          }\n        }, {\n          data: {\n            source: 'bird',\n            target: 'ladybug'\n          }\n        }, {\n          data: {\n            source: 'bird',\n            target: 'grasshopper'\n          }\n        }, {\n          data: {\n            source: 'grasshopper',\n            target: 'plant'\n          }\n        }, {\n          data: {\n            source: 'grasshopper',\n            target: 'wheat'\n          }\n        }, {\n          data: {\n            source: 'ladybug',\n            target: 'aphid'\n          }\n        }, {\n          data: {\n            source: 'aphid',\n            target: 'rose'\n          }\n        }]\n      }\n    };\n    this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n  }\n\n  initialise_monkeypuzzle() {\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\")) {\n      this.loadJSON(localStorage.getItem(\"state\"));\n      this.initCytoscape(); //else use default\n    } else {\n      current_sadface_doc = default_sadface_doc;\n      localStorage.setItem(\"state\", current_sadface_doc);\n      cy_data = export_cytoscape(import_json(current_sadface_doc));\n      initCytoscape();\n    }\n  }\n\n  initCytoscape() {\n    cy = cytoscape({\n      container: document.getElementById(\"cy\"),\n      ready: function () {\n        window.cy = this;\n      },\n      elements: JSON.parse(cy_data),\n      style: [{\n        selector: \"node\",\n        style: {\n          \"content\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          \"width\": \"auto\",\n          \"height\": \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    });\n    layout = build_cola_layout();\n    layout.run();\n    cy.elements(\"node[type = \\\"atom\\\"]\").qtip({\n      content: function () {\n        return 'ID: ' + this.id();\n      },\n      position: {\n        my: \"top center\",\n        at: \"bottom center\"\n      },\n      style: {\n        classes: \"qtip-bootstrap\",\n        tip: {\n          width: 16,\n          height: 8\n        }\n      }\n    });\n    cy.edgehandles({\n      toggleOffOnLeave: true,\n      handleNodes: \"node\",\n      handleSize: 10,\n      handleColor: \"orange\",\n      handleHitThreshold: 8,\n      handleLineWidth: 5,\n      //handleLineType: \"flat\",\n      handleOutlineColor: \"grey\",\n      edgeType: function () {\n        return \"flat\";\n      },\n      complete: function (event, sourceNode, targetNode, addedEles) {\n        if (targetNode.length !== 0) {\n          var source_id = targetNode[0].source().id();\n          var target_id = targetNode[0].target().id(); //get the mid point between source node and target node\n\n          var source_position = targetNode[0].source().position();\n          var target_position = targetNode[0].target().position();\n          position = {};\n          position.x = (source_position.x + target_position.x) / 2;\n          position.y = (source_position.y + target_position.y) / 2;\n\n          if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\") {\n            var scheme = add_scheme(\"Support\");\n            var scheme_id = scheme.id;\n            var scheme_content = scheme.name; //remove the automatically generated edge\n\n            targetNode.remove();\n            cy.add([{\n              group: \"nodes\",\n              data: {\n                id: scheme_id.toString(),\n                content: scheme_content,\n                typeshape: \"diamond\"\n              },\n              classes: \"scheme-label\",\n              locked: false,\n              position: position\n            }]);\n            var edge1 = add_edge(source_id, scheme_id);\n            var edge2 = add_edge(scheme_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge1.id.toString(),\n                source: source_id,\n                target: scheme_id\n              }\n            }, {\n              group: \"edges\",\n              data: {\n                id: edge2.id.toString(),\n                source: scheme_id,\n                target: target_id\n              }\n            }]);\n          } else {\n            targetNode.remove();\n            var edge = add_edge(source_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge.id.toString(),\n                source: source_id,\n                target: target_id\n              }\n            }]);\n          }\n\n          update_local_storage();\n        } else {\n          targetNode.remove();\n        }\n      }\n    });\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n\n    cm = cy.contextMenus({\n      menuItems: [{\n        id: \"edit-content\",\n        title: \"edit content\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n          $(\"#editContentModal\").modal(\"show\");\n          $(\"#edit_atom_content\").val(target.data().content);\n          edit_atom = target;\n        },\n        hasTrailingDivider: false\n      }, {\n        id: \"edit-metadata\",\n        title: \"edit metadata\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          $(\"#edit_metadata\").empty();\n          var target = event.target || event.cyTarget;\n          var atom = get_atom(target.id());\n          var textArea = $(\"<textarea id=\\\"\" + target.id() + \"_metadata\\\" class=\\\"form-control\\\" rows=\\\"2\\\" >\" + JSON.stringify(atom.metadata) + \"</textarea>\");\n          $(\"#edit_metadata\").append(textArea);\n          $(\"#editMetadataModal\").modal(\"show\");\n          edit_atom = target;\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"change-scheme\",\n        title: \"change scheme\",\n        selector: \"node[typeshape = \\\"diamond\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n          $(\"#editSchemeModal\").modal(\"show\");\n          edit_atom = target;\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"remove\",\n        title: \"remove\",\n        selector: \"node, edge\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n\n          if (selected.length !== 0) {\n            selected.forEach(function (node) {\n              delete_nodes(node);\n            });\n            selected = [];\n          } else {\n            if (target.data().type == \"atom\") {\n              delete_nodes(event);\n              target.remove();\n            } else if (target.data().typeshape == \"diamond\") {\n              delete_nodes(event);\n              target.remove();\n            } else {\n              delete_edge(target.id());\n              update_local_storage();\n              target.remove();\n            }\n          }\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"add-atom\",\n        title: \"add atom\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          position = event.renderedPosition;\n          $(\"#newAtomModal\").modal(\"show\");\n        }\n      }, {\n        id: \"add-scheme\",\n        title: \"add scheme\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          position = event.position || event.cyPosition;\n          document.getElementById(\"sel1\").options.selectedIndex = 0;\n          $(\"#newSchemeModal\").modal(\"show\");\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"redraw\",\n        title: \"redraw\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          redraw_visualisation();\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"undo\",\n        title: \"undo\",\n        selector: \"node, edge\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          undo();\n        },\n        hasTrailingDivider: false\n      }, {\n        id: \"redo\",\n        title: \"redo\",\n        selector: \"node, edge\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          redo();\n\n          if (redo_stack == []) {\n            cm.hideMenuItem(\"redo\");\n          }\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"merge_nodes\",\n        title: \"merge nodes\",\n        selector: \"node\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          merge_nodes();\n        }\n      }]\n    });\n    cy.on(\"unselect\", \"node\", function (e) {\n      selected.pop(e);\n      cm.hideMenuItem(\"merge_nodes\");\n    });\n    cy.on(\"select\", \"node\", function (e) {\n      selected.push(e);\n\n      if (selected.length > 1) {\n        cm.showMenuItem(\"merge_nodes\");\n      } else {\n        cm.hideMenuItem(\"merge_nodes\");\n      }\n    });\n    cy.on(\"tap\", function (e) {\n      //when cytoscape is tapped remove any focus from HTML elements like the tab textareas\n      //this mainly helps with keybinds\n      $(\":focus\").blur();\n    });\n    cy.on(\"layoutstart\", function () {\n      running = true;\n    });\n    cy.on(\"layoutstop\", function () {\n      running = false;\n      var png = cy.png({\n        full: true\n      });\n      $('#download_png').attr('href', png);\n      var jpg = cy.jpg({\n        full: true\n      });\n      $('#download_jpg').attr('href', jpg);\n    });\n    $(\".resource-pane\").resizable({\n      handleSelector: \".splitter\",\n      resizeHeight: false,\n      resizeWidthFrom: \"right\",\n      //onDragStart: function (e, $el, opt) {},\n      onDragEnd: function (e, $el, opt) {\n        cy.resize();\n      }\n    });\n  }\n\n  loadJSON(json_value) {\n    json = import_json(json_value);\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    current_sadface_doc = JSON.stringify(get_sd()); //load any sources in the stored diagram state\n\n    window.onload = function () {\n      loadTabs(json.resources);\n    };\n\n    cy_data = export_cytoscape(json);\n\n    if (cy !== null) {\n      cy.elements().remove();\n      cy.json({\n        elements: JSON.parse(cy_data)\n      });\n      redraw_visualisation();\n    }\n  } //End Redo\n\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return this.state.cy.makeLayout(cola_params);\n  }\n\n  renderCytoscapeElement() {\n    console.log('* Cytoscape.js is rendering the graph..');\n    this.state.cy = cytoscape({\n      container: document.getElementById('cy'),\n      ready: function () {\n        window.cy = this;\n      },\n      elements: this.state.cy_data,\n      //JSON.parae(cy_data)\n      style: [{\n        selector: \"node\",\n        style: {\n          \"content\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          \"width\": \"auto\",\n          \"height\": \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    });\n    this.state.layout = this.build_cola_layout();\n    this.state.layout.run();\n    {\n      /*  this.state.cy.elements(\"node[type = \\\"atom\\\"]\").qtip({\n      content: function(){return 'ID: '+this.id()},\n      position: {\n        my: \"top center\",\n        at: \"bottom center\"\n      },\n      style: {\n        classes: \"qtip-bootstrap\",\n        tip: {\n            width: 16,\n            height: 8\n      \t\t}\n      }\n      });*/\n    }\n    this.state.cy.edgehandles({\n      toggleOffOnLeave: true,\n      handleNodes: \"node\",\n      handleSize: 10,\n      handleColor: \"orange\",\n      handleHitThreshold: 8,\n      handleLineWidth: 5,\n      //handleLineType: \"flat\",\n      handleOutlineColor: \"grey\",\n      edgeType: function () {\n        return \"flat\";\n      },\n      complete: function (event, sourceNode, targetNode, addedEles) {\n        if (targetNode.length !== 0) {\n          var source_id = targetNode[0].source().id();\n          var target_id = targetNode[0].target().id(); //get the mid point between source node and target node\n\n          var source_position = targetNode[0].source().position();\n          var target_position = targetNode[0].target().position();\n          position = {};\n          position.x = (source_position.x + target_position.x) / 2;\n          position.y = (source_position.y + target_position.y) / 2;\n\n          if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\") {\n            var scheme = this.add_scheme(\"Support\");\n            var scheme_id = scheme.id;\n            var scheme_content = scheme.name; //remove the automatically generated edge\n\n            targetNode.remove();\n            cy.add([{\n              group: \"nodes\",\n              data: {\n                id: scheme_id.toString(),\n                content: scheme_content,\n                typeshape: \"diamond\"\n              },\n              classes: \"scheme-label\",\n              locked: false,\n              position: position\n            }]);\n            var edge1 = this.add_edge(source_id, scheme_id);\n            var edge2 = this.add_edge(scheme_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge1.id.toString(),\n                source: source_id,\n                target: scheme_id\n              }\n            }, {\n              group: \"edges\",\n              data: {\n                id: edge2.id.toString(),\n                source: scheme_id,\n                target: target_id\n              }\n            }]);\n          } else {\n            targetNode.remove();\n            var edge = this.add_edge(source_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge.id.toString(),\n                source: source_id,\n                target: target_id\n              }\n            }]);\n          }\n\n          this.props.update_local_storage();\n        } else {\n          targetNode.remove();\n        }\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.initialise_monkeypuzzle();\n    this.setState({\n      created_date: this.now,\n      document_id: this.props.new_uuid,\n      default_sadface_doc: \"{\\\"analyst_email\\\":\\\"\" + analyst_email + \"\\\",\\\"analyst_name\\\":\\\"\" + analyst_email + \"\\\",\\\"created\\\":\\\"\" + this.state.created_date + \"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\" + this.state.edited_date + \"\\\",\\\"id\\\":\\\"\" + this.state.document_id + \"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\"\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"cy\",\n      ondrop: \"drop_handler(event);\",\n      ondragover: \"dragover_handler(event);\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nexport default GraphContainer;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js"],"names":["React","Component","cytoscape","cola","edgehandles","use","cy","cm","selected","position","layout","running","cy_data","json","analyst_email","analyst_name","current_sadface_doc","focused","undo_stack","redo_stack","edit_atom","resource_pane_viewable_state","GraphContainer","constructor","props","state","created_date","edited_date","document_id","nodes","data","id","edges","source","target","initialise_monkeypuzzle","bind","build_cola_layout","localStorage","getItem","loadJSON","initCytoscape","default_sadface_doc","setItem","export_cytoscape","import_json","container","document","getElementById","ready","window","elements","JSON","parse","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","run","qtip","content","my","at","classes","tip","width","height","toggleOffOnLeave","handleNodes","handleSize","handleColor","handleHitThreshold","handleLineWidth","handleOutlineColor","edgeType","complete","event","sourceNode","targetNode","addedEles","length","source_id","target_id","source_position","target_position","x","y","type","scheme","add_scheme","scheme_id","scheme_content","name","remove","add","group","toString","typeshape","locked","edge1","add_edge","edge2","edge","update_local_storage","contextMenus","menuItems","title","onClickFunction","cyTarget","$","modal","val","hasTrailingDivider","empty","atom","get_atom","textArea","stringify","metadata","append","forEach","node","delete_nodes","delete_edge","coreAsWell","renderedPosition","cyPosition","options","selectedIndex","redraw_visualisation","show","undo","redo","hideMenuItem","merge_nodes","on","e","pop","push","showMenuItem","blur","png","full","attr","jpg","resizable","handleSelector","resizeHeight","resizeWidthFrom","onDragEnd","$el","opt","resize","json_value","get_sd","onload","loadTabs","resources","opts","cola_params","animate","randomize","padding","fit","maxSimulationTime","i","undefined","makeLayout","renderCytoscapeElement","console","log","componentDidMount","setState","now","new_uuid","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\n\ncytoscape.use( edgehandles );\ncytoscape.use( cola );\n\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar cy_data  = {};\nvar json;\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\n//var document_id = this.props.new_uuid;\n//var default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+this.state.created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+this.state.edited_date+\"\\\",\\\"id\\\":\\\"\"+this.state.document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\n\nclass GraphContainer extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n        \tcy:null,\n        \tlayout: null,\n            created_date: '',\n            edited_date:'',\n            document_id: '',\n\n\n        \tcy_data: {\n\n                nodes: [\n                    { data: { id: 'cat' } },\n                    { data: { id: 'bird' } },\n                    { data: { id: 'ladybug' } },\n                    { data: { id: 'aphid' } },\n                    { data: { id: 'rose' } },\n                    { data: { id: 'grasshopper' } },\n                    { data: { id: 'plant' } },\n                    { data: { id: 'wheat' } }\n                ],\n                edges: [\n                    { data: { source: 'cat', target: 'bird' } },\n                    { data: { source: 'bird', target: 'ladybug' } },\n                    { data: { source: 'bird', target: 'grasshopper' } },\n                    { data: { source: 'grasshopper', target: 'plant' } },\n                    { data: { source: 'grasshopper', target: 'wheat' } },\n                    { data: { source: 'ladybug', target: 'aphid' } },\n                    { data: { source: 'aphid', target: 'rose' } }\n                ]\n           \n\n        \t},\n        }\n        this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n        this.build_cola_layout = this.build_cola_layout.bind(this);\n    }\n\n    initialise_monkeypuzzle(){\n          //load diagram if there is one in localStorage\n        if (localStorage.getItem(\"state\"))\n        {\n            this.loadJSON(localStorage.getItem(\"state\"));\n            this.initCytoscape();\n        //else use default\n        } else\n        {\n            current_sadface_doc = default_sadface_doc;\n            localStorage.setItem(\"state\", current_sadface_doc);\n            cy_data = export_cytoscape(import_json(current_sadface_doc));\n            initCytoscape();\n        }\n    }\n\ninitCytoscape() {\n    cy = cytoscape({\n        container: document.getElementById(\"cy\"),\n        ready: function(){ window.cy = this; },\n        elements: JSON.parse(cy_data),\n        style:[\n            {   selector: \"node\", \n                style: {\n                    \"content\": \"data(content)\",\n                    \"text-opacity\": 0.7,\n                    \"width\" : \"auto\",\n                    \"height\" : \"auto\",\n                    \"text-valign\": \"bottom\",\n                    \"text-halign\": \"right\",\n                    \"text-outline-color\": \"#eee\",\n                    \"text-outline-width\": 1\n              }\n            },\n            {   selector: \"[typeshape]\", \n                style: {\n                    \"shape\":\"data(typeshape)\"\n                }\n            },\n            {   selector: \"node[typeshape='diamond']\", \n                style: {\n                    'background-color': '#CC9900'\n                }\n            },\n            {\n                selector: \"node[typeshape='diamond'][content='Conflict']\",\n                style: {\n                    'background-color': 'red'\n                }\n            },\n            {\n                selector: \"node[typeshape='diamond'][content='Support']\",\n                style: {\n                    'background-color': 'green'\n                }\n            },\n            {   selector: \"edge\", \n                style: {\n                    \"line-color\": \"#9dbaea\",\n                    \"target-arrow-shape\": \"triangle\",\n                    \"target-arrow-color\": \"#9dbaea\",\n                    \"curve-style\": \"bezier\"\n                }\n            },\n            {   selector: \":selected\", \n                style: {\n                    \"border-width\":\"1\",\n                    \"border-color\":\"black\",\n                    \"background-color\": \"#3399CC\"\n                }\n            },\n            {   selector: \".atom-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n            },\n            {   selector: \".scheme-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n            }\n            ],\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n    });\n\n    layout = build_cola_layout();\n    layout.run();\n\n    cy.elements(\"node[type = \\\"atom\\\"]\").qtip({\n        content: function(){return 'ID: '+this.id()},\n        position: {\n            my: \"top center\",\n            at: \"bottom center\"\n        },\n        style: {\n            classes: \"qtip-bootstrap\",\n            tip: {\n                width: 16,\n                height: 8\n            }\n        }\n    });\n\n\n   cy.edgehandles({\n        toggleOffOnLeave: true,\n        handleNodes: \"node\",\n        handleSize: 10,\n        handleColor: \"orange\",\n        handleHitThreshold: 8,\n        handleLineWidth: 5,\n        //handleLineType: \"flat\",\n        handleOutlineColor: \"grey\",\n        edgeType: function(){ return \"flat\"; },\n        complete: function(event, sourceNode, targetNode, addedEles){\n            if (targetNode.length !== 0) {\n                var source_id = targetNode[0].source().id();\n                var target_id = targetNode[0].target().id();\n\n                //get the mid point between source node and target node\n                var source_position = targetNode[0].source().position();\n                var target_position = targetNode[0].target().position();\n\n                position = {};\n                position.x = ((source_position.x + target_position.x)/2);\n                position.y = ((source_position.y + target_position.y)/2);\n\n                if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\")\n                {\n                    var scheme = add_scheme(\"Support\");\n                    var scheme_id = scheme.id;\n                    var scheme_content = scheme.name;\n                    //remove the automatically generated edge\n                    targetNode.remove();\n                    cy.add([\n                        {group: \"nodes\", data: {id: scheme_id.toString(),\n                            content: scheme_content, typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n                    ]);\n                    var edge1 = add_edge(source_id, scheme_id);\n                    var edge2 = add_edge(scheme_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge1.id.toString(), source: source_id, target: scheme_id } },\n                      { group: \"edges\", data: { id: edge2.id.toString(), source: scheme_id, target: target_id } }\n                    ]);\n                } else {\n                    targetNode.remove();\n                    var edge = add_edge(source_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge.id.toString(), source: source_id, target: target_id } }\n                    ]);\n                }\n                update_local_storage();\n            } else {\n                targetNode.remove();\n            }\n        }\n    });\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n    cm = cy.contextMenus({\n        menuItems: [\n          {\n            id: \"edit-content\",\n            title: \"edit content\",\n            selector: \"node[type = \\\"atom\\\"]\",\n            onClickFunction: function (event) {\n              var target = event.target || event.cyTarget;\n              $(\"#editContentModal\").modal(\"show\");\n              $(\"#edit_atom_content\").val(target.data().content);\n              edit_atom = target;\n            },\n            hasTrailingDivider: false\n          },\n          {\n            id: \"edit-metadata\",\n            title: \"edit metadata\",\n            selector: \"node[type = \\\"atom\\\"]\",\n            onClickFunction: function (event) {\n                $(\"#edit_metadata\").empty();\n                var target = event.target || event.cyTarget;\n                var atom = get_atom(target.id());\n                var textArea = $(\"<textarea id=\\\"\"+target.id()+\"_metadata\\\" class=\\\"form-control\\\" rows=\\\"2\\\" >\"+JSON.stringify(atom.metadata)+\"</textarea>\");\n                $(\"#edit_metadata\").append(textArea);\n                $(\"#editMetadataModal\").modal(\"show\");\n                edit_atom = target;\n            },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"change-scheme\",\n            title: \"change scheme\",\n            selector: \"node[typeshape = \\\"diamond\\\"]\",\n            onClickFunction: function (event) {\n                var target = event.target || event.cyTarget;\n                $(\"#editSchemeModal\").modal(\"show\");\n                edit_atom = target;\n            },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"remove\",\n            title: \"remove\",\n            selector: \"node, edge\",\n            onClickFunction: function (event) {\n                var target = event.target || event.cyTarget;\n                if (selected.length !== 0) {\n                    selected.forEach(function(node) {\n                        delete_nodes(node);\n                    });\n                    selected = [];\n                } else {\n                    if (target.data().type==\"atom\") {\n                        delete_nodes(event);\n                        target.remove();\n                    } else if (target.data().typeshape==\"diamond\"){\n                        delete_nodes(event);\n                        target.remove();\n                    } else {\n                        delete_edge(target.id());\n                        update_local_storage();\n                        target.remove();\n                    }\n                }\n            },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"add-atom\",\n            title: \"add atom\",\n            coreAsWell: true,\n            onClickFunction: function (event) {\n                position = event.renderedPosition;\n                $(\"#newAtomModal\").modal(\"show\");\n            }\n          },\n          {\n            id: \"add-scheme\",\n            title: \"add scheme\",\n            coreAsWell: true,\n            onClickFunction: function (event) {\n\n                position = event.position || event.cyPosition;\n\n                document.getElementById(\"sel1\").options.selectedIndex=0;\n                $(\"#newSchemeModal\").modal(\"show\");\n            },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"redraw\",\n            title: \"redraw\",\n            coreAsWell: true,\n            onClickFunction: function (event) { redraw_visualisation(); },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"undo\",\n            title: \"undo\",\n            selector: \"node, edge\",\n            show: false,\n            coreAsWell: true,\n            onClickFunction: function (event) {\n              undo();\n            },\n            hasTrailingDivider: false\n          },\n          {\n            id: \"redo\",\n            title: \"redo\",\n            selector: \"node, edge\",\n            show: false,\n            coreAsWell: true,\n            onClickFunction: function (event) {\n              redo();\n              if (redo_stack == []) {\n                cm.hideMenuItem(\"redo\");\n              }\n            },\n            hasTrailingDivider: true\n          },\n          {\n              id: \"merge_nodes\",\n              title: \"merge nodes\",\n              selector: \"node\",\n              show: false,\n              coreAsWell: true,\n              onClickFunction: function (event) {\n                  merge_nodes();\n              }\n          }\n        ]\n    });\n\n    cy.on(\"unselect\", \"node\", function (e){\n        selected.pop(e);\n        cm.hideMenuItem(\"merge_nodes\");\n    });\n\n    cy.on(\"select\", \"node\", function (e){\n        selected.push(e);\n        if(selected.length>1) {\n            cm.showMenuItem(\"merge_nodes\");\n        } else {\n            cm.hideMenuItem(\"merge_nodes\");\n        }\n    });\n\n    cy.on(\"tap\", function (e){\n        //when cytoscape is tapped remove any focus from HTML elements like the tab textareas\n        //this mainly helps with keybinds\n        $(\":focus\").blur();\n    });\n\n    cy.on(\"layoutstart\", function(){\n        running = true;\n    });\n\n    cy.on(\"layoutstop\", function(){\n        running = false;\n        \n        var png = cy.png({ full: true });\n        $('#download_png').attr('href', png);\n\n        var jpg = cy.jpg({ full: true });\n        $('#download_jpg').attr('href', jpg);\n    });\n\n    $(\".resource-pane\").resizable({\n        handleSelector: \".splitter\",\n        resizeHeight: false,\n        resizeWidthFrom: \"right\",\n        //onDragStart: function (e, $el, opt) {},\n        onDragEnd: function (e, $el, opt) {\n            cy.resize();\n        }\n    });\n}\n\n\n\n    loadJSON(json_value) {\n        json = import_json(json_value);\n        localStorage.setItem(\"state\",JSON.stringify(get_sd()));\n        current_sadface_doc = JSON.stringify(get_sd());\n        //load any sources in the stored diagram state\n        window.onload = function () {\n            loadTabs(json.resources);\n        };\n        cy_data = export_cytoscape(json);\n        if(cy !== null)\n        {\n            cy.elements().remove();\n            cy.json({elements: JSON.parse(cy_data)});\n            redraw_visualisation();\n        }\n    }\n\n//End Redo\n\n    build_cola_layout( opts ) {\n        var cola_params = {\n            name: \"cola\",\n            animate: true,\n            randomize: true,\n            padding: 100,\n            fit: false,\n            maxSimulationTime: 1500\n        };\n        var i = 0;\n        if (opts !== undefined) {\n            opts.forEach(function(opt) {\n               cola_params[i] = opts[i];\n               ++i;\n            });\n        }\n        return this.state.cy.makeLayout( cola_params );\n    }\n\n    renderCytoscapeElement(){\n\n        console.log('* Cytoscape.js is rendering the graph..');\n\n        this.state.cy = cytoscape(\n        {\n            container: document.getElementById('cy'),\n            ready: function(){ window.cy = this; },\n            elements: this.state.cy_data, //JSON.parae(cy_data)\n\n\n\n          \n\n            style: [\n\t            {   selector: \"node\", \n\t                style: {\n\t                    \"content\": \"data(content)\",\n\t                    \"text-opacity\": 0.7,\n\t                    \"width\" : \"auto\",\n\t                    \"height\" : \"auto\",\n\t                    \"text-valign\": \"bottom\",\n\t                    \"text-halign\": \"right\",\n\t                    \"text-outline-color\": \"#eee\",\n\t                    \"text-outline-width\": 1\n\t              \t}\t\n\t            },\n\n\t            {   selector: \"[typeshape]\", \n\t                style: {\n\t                    \"shape\":\"data(typeshape)\"\n\t                }\n\t            },\n\n\t            {   selector: \"node[typeshape='diamond']\", \n\t                style: {\n\t                    'background-color': '#CC9900'\n\t                }\n\t            },\n\n\t            {\n\t                selector: \"node[typeshape='diamond'][content='Conflict']\",\n\t                style: {\n\t                    'background-color': 'red'\n\t                }\n\t            },\n\n\t            {\n\t                selector: \"node[typeshape='diamond'][content='Support']\",\n\t                style: {\n\t                    'background-color': 'green'\n\t                }\n\t            },\n\n\t            {   selector: \"edge\", \n\t                style: {\n\t                    \"line-color\": \"#9dbaea\",\n\t                    \"target-arrow-shape\": \"triangle\",\n\t                    \"target-arrow-color\": \"#9dbaea\",\n\t                    \"curve-style\": \"bezier\"\n\t                }\n\t            },\n\n\t            {   selector: \":selected\", \n\t                style: {\n\t                    \"border-width\":\"1\",\n\t                    \"border-color\":\"black\",\n\t                    \"background-color\": \"#3399CC\"\n\t                }\n\t            },\n\n\t            {   selector: \".atom-label\", \n\t                style:{\n\t                    \"text-wrap\": \"wrap\",\n\t                    \"text-max-width\": 160\n\t                }\n\t            },\n\n\t            {   selector: \".scheme-label\", \n\t                style:{\n\t                    \"text-wrap\": \"wrap\",\n\t                    \"text-max-width\": 160\n\t                }\n            \t}\n           \t],\n\n\n\n\n              \n              boxSelectionEnabled: false,\n              autounselectify: false,\n              selectionType: \"single\",\n              minZoom: 0.1,\n              maxZoom: 1.5,\n                \n           \n            }); \n            this.state.layout= this.build_cola_layout();\n            this.state.layout.run();\n\n            {/*  this.state.cy.elements(\"node[type = \\\"atom\\\"]\").qtip({\n        \t\t\tcontent: function(){return 'ID: '+this.id()},\n\t\t\t        position: {\n\t\t\t            my: \"top center\",\n\t\t\t            at: \"bottom center\"\n\t\t\t        },\n\t\t\t        style: {\n\t\t\t            classes: \"qtip-bootstrap\",\n\t\t\t            tip: {\n\t\t\t                width: 16,\n\t\t\t                height: 8\n            \t\t\t}\n        \t\t\t}\n    \t\t\t});*/}\n\n    \tthis.state.cy.edgehandles({\n        toggleOffOnLeave: true,\n        handleNodes: \"node\",\n        handleSize: 10,\n        handleColor: \"orange\",\n        handleHitThreshold: 8,\n        handleLineWidth: 5,\n        //handleLineType: \"flat\",\n        handleOutlineColor: \"grey\",\n        edgeType: function(){ return \"flat\"; },\n        complete: function(event, sourceNode, targetNode, addedEles){\n            if (targetNode.length !== 0) {\n                var source_id = targetNode[0].source().id();\n                var target_id = targetNode[0].target().id();\n\n                //get the mid point between source node and target node\n                var source_position = targetNode[0].source().position();\n                var target_position = targetNode[0].target().position();\n\n                position = {};\n                position.x = ((source_position.x + target_position.x)/2);\n                position.y = ((source_position.y + target_position.y)/2);\n\n                if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\")\n                {\n                    var scheme = this.add_scheme(\"Support\");\n                    var scheme_id = scheme.id;\n                    var scheme_content = scheme.name;\n                    //remove the automatically generated edge\n                    targetNode.remove();\n                    cy.add([\n                        {group: \"nodes\", data: {id: scheme_id.toString(),\n                            content: scheme_content, typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n                    ]);\n                    var edge1 = this.add_edge(source_id, scheme_id);\n                    var edge2 = this.add_edge(scheme_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge1.id.toString(), source: source_id, target: scheme_id } },\n                      { group: \"edges\", data: { id: edge2.id.toString(), source: scheme_id, target: target_id } }\n                    ]);\n                } else {\n                    targetNode.remove();\n                    var edge = this.add_edge(source_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge.id.toString(), source: source_id, target: target_id } }\n                    ]);\n                }\n                this.props.update_local_storage();\n            } else {\n                targetNode.remove();\n            }\n        }\n    });\n    }\n\n\n    componentDidMount(){\n        this.initialise_monkeypuzzle();\n        this.setState(\n            {created_date: this.now,\n             document_id: this.props.new_uuid,\n             default_sadface_doc: \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+this.state.created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+this.state.edited_date+\"\\\",\\\"id\\\":\\\"\"+this.state.document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\",\n\n            }\n            )\n    }\n\n    render(){\n        return(\n            <div id=\"cy\" ondrop=\"drop_handler(event);\" ondragover=\"dragover_handler(event);\"></div>\n        )\n    }\n}\n\nfunction mapStateToProps(state){\n    return {};\n}\n\n\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}