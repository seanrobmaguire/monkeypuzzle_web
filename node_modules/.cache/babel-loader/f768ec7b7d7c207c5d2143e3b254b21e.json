{"ast":null,"code":";\n\n(function () {\n  'use strict';\n\n  var $ = typeof jQuery === typeof undefined ? null : jQuery;\n\n  var register = function (cytoscape, $) {\n    if (!cytoscape) {\n      return;\n    } // can't register if cytoscape unspecified\n\n\n    var defaults = {\n      // List of initial menu items\n      menuItems: [\n        /*\n        {\n          id: 'remove',\n          content: 'remove',\n          tooltipText: 'remove',\n          selector: 'node, edge',\n          onClickFunction: function () {\n            console.log('remove element');\n          },\n          hasTrailingDivider: true\n        },\n        {\n          id: 'hide',\n          content: 'hide',\n          tooltipText: 'remove',\n          selector: 'node, edge',\n          onClickFunction: function () {\n            console.log('hide element');\n          },\n          disabled: true\n        }*/\n      ],\n      // css classes that menu items will have\n      menuItemClasses: [// add class names to this list\n      ],\n      // css classes that context menu will have\n      contextMenuClasses: [// add class names to this list\n      ]\n    };\n    var eventCyTapStart; // The event to be binded on tap start\n    // To initialize with options.\n\n    cytoscape('core', 'contextMenus', function (opts) {\n      var cy = this; // Initilize scratch pad\n\n      if (!cy.scratch('cycontextmenus')) {\n        cy.scratch('cycontextmenus', {});\n      }\n\n      var options = getScratchProp('options');\n      var $cxtMenu = getScratchProp('cxtMenu');\n      var menuItemCSSClass = 'cy-context-menus-cxt-menuitem';\n      var dividerCSSClass = 'cy-context-menus-divider'; // Merge default options with the ones coming from parameter\n\n      function extend(defaults, options) {\n        var obj = {};\n\n        for (var i in defaults) {\n          obj[i] = defaults[i];\n        }\n\n        for (var i in options) {\n          obj[i] = options[i];\n        }\n\n        return obj;\n      }\n\n      ;\n\n      function getScratchProp(propname) {\n        return cy.scratch('cycontextmenus')[propname];\n      }\n\n      ;\n\n      function setScratchProp(propname, value) {\n        cy.scratch('cycontextmenus')[propname] = value;\n      }\n\n      ;\n\n      function preventDefaultContextTap() {\n        $(\".cy-context-menus-cxt-menu\").contextmenu(function () {\n          return false;\n        });\n      } // Get string representation of css classes\n\n\n      function getMenuItemClassStr(classes, hasTrailingDivider) {\n        var str = getClassStr(classes);\n        str += ' ' + menuItemCSSClass;\n\n        if (hasTrailingDivider) {\n          str += ' ' + dividerCSSClass;\n        }\n\n        return str;\n      } // Get string representation of css classes\n\n\n      function getClassStr(classes) {\n        var str = '';\n\n        for (var i = 0; i < classes.length; i++) {\n          var className = classes[i];\n          str += className;\n\n          if (i !== classes.length - 1) {\n            str += ' ';\n          }\n        }\n\n        return str;\n      }\n\n      function displayComponent($component) {\n        $component.css('display', 'block');\n      }\n\n      function hideComponent($component) {\n        $component.css('display', 'none');\n      }\n\n      function hideMenuItemComponents() {\n        $cxtMenu.children().css('display', 'none');\n      }\n\n      function bindOnClickFunction($component, onClickFcn) {\n        var callOnClickFcn;\n        $component.on('click', callOnClickFcn = function () {\n          onClickFcn(getScratchProp('currentCyEvent'));\n        });\n        $component.data('call-on-click-function', callOnClickFcn);\n      }\n\n      function bindCyCxttap($component, selector, coreAsWell) {\n        function _cxtfcn(event) {\n          setScratchProp('currentCyEvent', event);\n          adjustCxtMenu(event); // adjust the position of context menu\n\n          if ($component.data('show')) {\n            // Now we have a visible element display context menu if it is not visible\n            if (!$cxtMenu.is(':visible')) {\n              displayComponent($cxtMenu);\n            } // anyVisibleChild indicates if there is any visible child of context menu if not do not show the context menu\n\n\n            setScratchProp('anyVisibleChild', true); // there is visible child\n\n            displayComponent($component); // display the component\n          } // If there is no visible element hide the context menu as well(If it is visible)\n\n\n          if (!getScratchProp('anyVisibleChild') && $cxtMenu.is(':visible')) {\n            hideComponent($cxtMenu);\n          }\n        }\n\n        var cxtfcn;\n        var cxtCoreFcn;\n\n        if (coreAsWell) {\n          cy.on('cxttap', cxtCoreFcn = function (event) {\n            var target = event.target || event.cyTarget;\n\n            if (target != cy) {\n              return;\n            }\n\n            _cxtfcn(event);\n          });\n        }\n\n        if (selector) {\n          cy.on('cxttap', selector, cxtfcn = function (event) {\n            _cxtfcn(event);\n          });\n        } // Bind the event to menu item to be able to remove it back\n\n\n        $component.data('cy-context-menus-cxtfcn', cxtfcn);\n        $component.data('cy-context-menus-cxtcorefcn', cxtCoreFcn);\n      }\n\n      function bindCyEvents() {\n        cy.on('tapstart', eventCyTapStart = function () {\n          hideComponent($cxtMenu);\n          setScratchProp('cxtMenuPosition', undefined);\n          setScratchProp('currentCyEvent', undefined);\n        });\n      }\n\n      function performBindings($component, onClickFcn, selector, coreAsWell) {\n        bindOnClickFunction($component, onClickFcn);\n        bindCyCxttap($component, selector, coreAsWell);\n      } // Adjusts context menu if necessary\n\n\n      function adjustCxtMenu(event) {\n        var currentCxtMenuPosition = getScratchProp('cxtMenuPosition');\n        var cyPos = event.position || event.cyPosition;\n\n        if (currentCxtMenuPosition != cyPos) {\n          hideMenuItemComponents();\n          setScratchProp('anyVisibleChild', false); // we hide all children there is no visible child remaining\n\n          setScratchProp('cxtMenuPosition', cyPos);\n          var containerPos = $(cy.container()).offset();\n          var renderedPos = event.renderedPosition || event.cyRenderedPosition;\n          var borderThickness = parseInt($(cy.container()).css(\"border-width\").replace(\"px\", \"\"));\n\n          if (borderThickness > 0) {\n            containerPos.top += borderThickness;\n            containerPos.left += borderThickness;\n          } // var left = containerPos.left + renderedPos.x;\n          // var top = containerPos.top + renderedPos.y;\n          //$cxtMenu.css('left', left);\n          //$cxtMenu.css('top', top);\n\n\n          var containerHeight = $(cy.container()).innerHeight();\n          var containerWidth = $(cy.container()).innerWidth();\n          var horizontalSplit = containerHeight / 2;\n          var verticalSplit = containerWidth / 2;\n          var windowHeight = $(window).height();\n          var windowWidth = $(window).width(); //When user click on bottom-left part of window\n\n          if (renderedPos.y > horizontalSplit && renderedPos.x <= verticalSplit) {\n            $cxtMenu.css(\"left\", renderedPos.x + containerPos.left);\n            $cxtMenu.css(\"bottom\", windowHeight - (containerPos.top + renderedPos.y));\n            $cxtMenu.css(\"right\", \"auto\");\n            $cxtMenu.css(\"top\", \"auto\");\n          } else if (renderedPos.y > horizontalSplit && renderedPos.x > verticalSplit) {\n            //When user click on bottom-right part of window\n            $cxtMenu.css(\"right\", windowWidth - (containerPos.left + renderedPos.x));\n            $cxtMenu.css(\"bottom\", windowHeight - (containerPos.top + renderedPos.y));\n            $cxtMenu.css(\"left\", \"auto\");\n            $cxtMenu.css(\"top\", \"auto\");\n          } else if (renderedPos.y <= horizontalSplit && renderedPos.x <= verticalSplit) {\n            //When user click on top-left part of window\n            $cxtMenu.css(\"left\", renderedPos.x + containerPos.left);\n            $cxtMenu.css(\"top\", renderedPos.y + containerPos.top);\n            $cxtMenu.css(\"right\", \"auto\");\n            $cxtMenu.css(\"bottom\", \"auto\");\n          } else {\n            //When user click on top-right part of window\n            $cxtMenu.css(\"right\", windowWidth - (renderedPos.x + containerPos.left));\n            $cxtMenu.css(\"top\", renderedPos.y + containerPos.top);\n            $cxtMenu.css(\"left\", \"auto\");\n            $cxtMenu.css(\"bottom\", \"auto\");\n          }\n        }\n      }\n\n      function createAndAppendMenuItemComponents(menuItems) {\n        for (var i = 0; i < menuItems.length; i++) {\n          createAndAppendMenuItemComponent(menuItems[i]);\n        }\n      }\n\n      function createAndAppendMenuItemComponent(menuItem) {\n        // Create and append menu item\n        var $menuItemComponent = createMenuItemComponent(menuItem);\n        appendComponentToCxtMenu($menuItemComponent);\n        performBindings($menuItemComponent, menuItem.onClickFunction, menuItem.selector, menuItem.coreAsWell);\n      } //insertComponentBeforeExistingItem(component, existingItemID)\n\n\n      function createAndInsertMenuItemComponentBeforeExistingComponent(menuItem, existingComponentID) {\n        // Create and insert menu item\n        var $menuItemComponent = createMenuItemComponent(menuItem);\n        insertComponentBeforeExistingItem($menuItemComponent, existingComponentID);\n        performBindings($menuItemComponent, menuItem.onClickFunction, menuItem.selector, menuItem.coreAsWell);\n      } // create cxtMenu and append it to body\n\n\n      function createAndAppendCxtMenuComponent() {\n        var classes = getClassStr(options.contextMenuClasses); //        classes += ' cy-context-menus-cxt-menu';\n\n        $cxtMenu = $('<div class=' + classes + '></div>');\n        $cxtMenu.addClass('cy-context-menus-cxt-menu');\n        setScratchProp('cxtMenu', $cxtMenu);\n        $('body').append($cxtMenu);\n        return $cxtMenu;\n      } // Creates a menu item as an html component\n\n\n      function createMenuItemComponent(item) {\n        var classStr = getMenuItemClassStr(options.menuItemClasses, item.hasTrailingDivider);\n        var itemStr = '<button id=\"' + item.id + '\" class=\"' + classStr + '\"';\n\n        if (item.tooltipText) {\n          itemStr += ' title=\"' + item.tooltipText + '\"';\n        }\n\n        if (item.disabled) {\n          itemStr += ' disabled';\n        }\n\n        if (!item.image) {\n          itemStr += '>' + item.content + '</button>';\n        } else {\n          itemStr += '>' + '<img src=\"' + item.image.src + '\" width=\"' + item.image.width + 'px\"; height=\"' + item.image.height + 'px\"; style=\"position:absolute; top: ' + item.image.y + 'px; left: ' + item.image.x + 'px;\">' + item.content + '</button>';\n        }\n\n        ;\n        var $menuItemComponent = $(itemStr);\n        $menuItemComponent.data('selector', item.selector);\n        $menuItemComponent.data('on-click-function', item.onClickFunction);\n        $menuItemComponent.data('show', typeof item.show === 'undefined' || item.show);\n        return $menuItemComponent;\n      } // Appends the given component to cxtMenu\n\n\n      function appendComponentToCxtMenu(component) {\n        $cxtMenu.append(component);\n        bindMenuItemClickFunction(component);\n      } // Insert the given component to cxtMenu just before the existing item with given ID\n\n\n      function insertComponentBeforeExistingItem(component, existingItemID) {\n        var $existingItem = $('#' + existingItemID);\n        component.insertBefore($existingItem);\n      }\n\n      function destroyCxtMenu() {\n        if (!getScratchProp('active')) {\n          return;\n        }\n\n        removeAndUnbindMenuItems();\n        cy.off('tapstart', eventCyTapStart);\n        $cxtMenu.remove();\n        $cxtMenu = undefined;\n        setScratchProp($cxtMenu, undefined);\n        setScratchProp('active', false);\n        setScratchProp('anyVisibleChild', false);\n      }\n\n      function removeAndUnbindMenuItems() {\n        var children = $cxtMenu.children();\n        $(children).each(function () {\n          removeAndUnbindMenuItem($(this));\n        });\n      }\n\n      function removeAndUnbindMenuItem(itemID) {\n        var $component = typeof itemID === 'string' ? $('#' + itemID) : itemID;\n        var cxtfcn = $component.data('cy-context-menus-cxtfcn');\n        var selector = $component.data('selector');\n        var callOnClickFcn = $component.data('call-on-click-function');\n        var cxtCoreFcn = $component.data('cy-context-menus-cxtcorefcn');\n\n        if (cxtfcn) {\n          cy.off('cxttap', selector, cxtfcn);\n        }\n\n        if (cxtCoreFcn) {\n          cy.off('cxttap', cxtCoreFcn);\n        }\n\n        if (callOnClickFcn) {\n          $component.off('click', callOnClickFcn);\n        }\n\n        $component.remove();\n      }\n\n      function moveBeforeOtherMenuItemComponent(componentID, existingComponentID) {\n        if (componentID === existingComponentID) {\n          return;\n        }\n\n        var $component = $('#' + componentID).detach();\n        var $existingComponent = $('#' + existingComponentID);\n        $component.insertBefore($existingComponent);\n      }\n\n      function bindMenuItemClickFunction(component) {\n        component.click(function () {\n          hideComponent($cxtMenu);\n          setScratchProp('cxtMenuPosition', undefined);\n        });\n      }\n\n      function disableComponent(componentID) {\n        $('#' + componentID).attr('disabled', true);\n      }\n\n      function enableComponent(componentID) {\n        $('#' + componentID).attr('disabled', false);\n      }\n\n      function setTrailingDivider(componentID, status) {\n        var $component = $('#' + componentID);\n\n        if (status) {\n          $component.addClass(dividerCSSClass);\n        } else {\n          $component.removeClass(dividerCSSClass);\n        }\n      } // Get an extension instance to enable users to access extension methods\n\n\n      function getInstance(cy) {\n        var instance = {\n          // Returns whether the extension is active\n          isActive: function () {\n            return getScratchProp('active');\n          },\n          // Appends given menu item to the menu items list.\n          appendMenuItem: function (item) {\n            createAndAppendMenuItemComponent(item);\n            return cy;\n          },\n          // Appends menu items in the given list to the menu items list.\n          appendMenuItems: function (items) {\n            createAndAppendMenuItemComponents(items);\n            return cy;\n          },\n          // Removes the menu item with given ID.\n          removeMenuItem: function (itemID) {\n            removeAndUnbindMenuItem(itemID);\n            return cy;\n          },\n          // Sets whether the menuItem with given ID will have a following divider.\n          setTrailingDivider: function (itemID, status) {\n            setTrailingDivider(itemID, status);\n            return cy;\n          },\n          // Inserts given item before the existingitem.\n          insertBeforeMenuItem: function (item, existingItemID) {\n            createAndInsertMenuItemComponentBeforeExistingComponent(item, existingItemID);\n            return cy;\n          },\n          // Moves the item with given ID before the existingitem.\n          moveBeforeOtherMenuItem: function (itemID, existingItemID) {\n            moveBeforeOtherMenuItemComponent(itemID, existingItemID);\n            return cy;\n          },\n          // Disables the menu item with given ID.\n          disableMenuItem: function (itemID) {\n            disableComponent(itemID);\n            return cy;\n          },\n          // Enables the menu item with given ID.\n          enableMenuItem: function (itemID) {\n            enableComponent(itemID);\n            return cy;\n          },\n          // Disables the menu item with given ID.\n          hideMenuItem: function (itemID) {\n            $('#' + itemID).data('show', false);\n            hideComponent($('#' + itemID));\n            return cy;\n          },\n          // Enables the menu item with given ID.\n          showMenuItem: function (itemID) {\n            $('#' + itemID).data('show', true);\n            displayComponent($('#' + itemID));\n            return cy;\n          },\n          // Destroys the extension instance\n          destroy: function () {\n            destroyCxtMenu();\n            return cy;\n          }\n        };\n        return instance;\n      }\n\n      if (opts !== 'get') {\n        // merge the options with default ones\n        options = extend(defaults, opts);\n        setScratchProp('options', options); // Clear old context menu if needed\n\n        if (getScratchProp('active')) {\n          destroyCxtMenu();\n        }\n\n        setScratchProp('active', true);\n        $cxtMenu = createAndAppendCxtMenuComponent();\n        var menuItems = options.menuItems;\n        createAndAppendMenuItemComponents(menuItems);\n        bindCyEvents();\n        preventDefaultContextTap();\n      }\n\n      return getInstance(this);\n    });\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    // expose as a commonjs module\n    module.exports = register;\n  }\n\n  if (typeof define !== 'undefined' && define.amd) {\n    // expose as an amd/requirejs module\n    define('cytoscape-context-menus', function () {\n      return register;\n    });\n  }\n\n  if (typeof cytoscape !== 'undefined' && $) {\n    // expose to global cytoscape (i.e. window.cytoscape)\n    register(cytoscape, $);\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}