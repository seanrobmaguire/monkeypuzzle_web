{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport cytoscape from 'cytoscape';\nimport edgehandles from 'cytoscape-edgehandles';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\nimport $ from 'jquery';\nimport { sd, add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source } from '../lib/Sadface';\nimport Modal from './Modal';\ncytoscape.use(edgehandles);\ncytoscape.use(contextMenus, $);\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\" + analyst_email + \"\\\",\\\"analyst_name\\\":\\\"\" + analyst_email + \"\\\",\\\"created\\\":\\\"\" + created_date + \"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\" + edited_date + \"\\\",\\\"id\\\":\\\"\" + document_id + \"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\nclass Cytoscape extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cy_data: this.props.cy_data\n    };\n    this.initCytoscape = this.initCytoscape.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n    this.edit_atom_content = this.edit_atom_content.bind(this);\n    this.delete_nodes = this.delete_nodes.bind(this);\n    this.update_local_storage = this.update_local_storage.bind(this);\n    this.redraw_visualisation = this.redraw_visualisation.bind(this);\n    this.undo = this.undo.bind(this);\n    this.redo = this.redo.bind(this);\n    this.merge_nodes = this.merge_nodes.bind(this);\n    this.delete_atom = this.delete_atom.bind(this); //    this.dragover_handler = this.dragover_handler.bind(this);\n  }\n\n  initCytoscape() {\n    console.log(\"initCyto\");\n    console.log(this.state.cy_data);\n    cy = cytoscape({\n      container: document.getElementById('cy'),\n      elements: this.state.cy_data,\n      style: [{\n        selector: \"node\",\n        style: {\n          \"label\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          \"width\": \"auto\",\n          \"height\": \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][name='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    });\n    layout = this.build_cola_layout();\n    layout.run();\n    cy.edgehandles({\n      toggleOffOnLeave: true,\n      handleNodes: \"node\",\n      handleSize: 10,\n      handleColor: \"orange\",\n      handleHitThreshold: 8,\n      handleLineWidth: 5,\n      //handleLineType: \"flat\",\n      handleOutlineColor: \"pink\",\n      edgeType: function () {\n        return \"flat\";\n      },\n      complete: function (event, sourceNode, targetNode, addedEles) {\n        if (targetNode.length !== 0) {\n          var source_id = targetNode[0].source().id();\n          var target_id = targetNode[0].target().id(); //get the mid point between source node and target node\n\n          var source_position = targetNode[0].source().position();\n          var target_position = targetNode[0].target().position();\n          position = {};\n          position.x = (source_position.x + target_position.x) / 2;\n          position.y = (source_position.y + target_position.y) / 2;\n\n          if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\") {\n            var scheme = add_scheme(\"Support\");\n            var scheme_id = scheme.id;\n            var scheme_content = scheme.name; //remove the automatically generated edge\n\n            targetNode.remove();\n            cy.add([{\n              group: \"nodes\",\n              data: {\n                id: scheme_id.toString(),\n                content: scheme_content,\n                typeshape: \"diamond\"\n              },\n              classes: \"scheme-label\",\n              locked: false,\n              position: position\n            }]);\n            var edge1 = add_edge(source_id, scheme_id);\n            var edge2 = add_edge(scheme_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge1.id.toString(),\n                source: source_id,\n                target: scheme_id\n              }\n            }, {\n              group: \"edges\",\n              data: {\n                id: edge2.id.toString(),\n                source: scheme_id,\n                target: target_id\n              }\n            }]);\n          } else {\n            targetNode.remove();\n            var edge = add_edge(source_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge.id.toString(),\n                source: source_id,\n                target: target_id\n              }\n            }]);\n          }\n\n          this.update_local_storage();\n        } else {\n          targetNode.remove();\n        }\n      }\n    });\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n\n    cm = cy.contextMenus({}); //context menus\n  }\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return cy.makeLayout(cola_params);\n  }\n\n  edit_atom_content() {\n    var content = document.getElementById(\"edit_atom_content\").value;\n    var atom = cy.$(\"#\" + edit_atom.id());\n    update_atom_text(edit_atom.id(), content);\n    this.update_local_storage();\n    atom.data(\"content\", content);\n    edit_atom = null;\n  }\n\n  delete_nodes(event) {\n    var target = event.target || event.cyTarget;\n    var id = target.id(); //removed = target.remove();\n\n    this.delete_atom(id);\n    var i = 0;\n    var sds = get_sd();\n    var edges = sds.edges;\n    edges.forEach(function (edge) {\n      if (edges[i] !== undefined) {\n        if (edges[i].source_id === id || edges[i].target_id === id) {\n          delete_edge(edges[i].id);\n        }\n\n        ++i;\n      }\n    });\n    this.update_local_storage();\n  }\n\n  update_local_storage() {\n    var undo_item = JSON.parse(current_sadface_doc);\n    undo_stack.push(undo_item);\n    redo_stack = [];\n    cm.showMenuItem(\"undo\");\n    cm.hideMenuItem(\"redo\");\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    current_sadface_doc = JSON.stringify(get_sd());\n    update();\n  }\n\n  redraw_visualisation() {\n    layout.stop();\n    layout.options.eles = cy.elements();\n    layout.run();\n    cy.center();\n    cy.resize();\n  }\n\n  undo() {\n    if (undo_stack.length != 0) {\n      var redo_item = get_sd();\n      redo_stack.push(redo_item);\n      var state = undo_stack.pop();\n      this.loadJSON(JSON.stringify(state));\n\n      if (undo_stack.length == 0) {\n        cm.hideMenuItem(\"undo\");\n      }\n\n      cm.showMenuItem(\"redo\");\n    }\n  }\n\n  redo() {\n    if (redo_stack.length != 0) {\n      var undo_item = get_sd();\n      undo_stack.push(undo_item);\n      var state = redo_stack.pop();\n      this.loadJSON(JSON.stringify(state));\n\n      if (redo_stack.length == 0) {\n        cm.hideMenuItem(\"redo\");\n      }\n\n      cm.showMenuItem(\"undo\");\n    }\n  }\n\n  merge_nodes() {\n    //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n    var target;\n    var id;\n    var atom;\n    var baseNode = selected[0].target || selected[0].cyTarget;\n    var baseId = baseNode.id();\n    var baseAtom = get_atom(baseId);\n    var edge;\n\n    if (baseAtom.type == \"atom\") {\n      var sds = get_sd();\n      var i = 0;\n      selected.forEach(function (node) {\n        var j = 0;\n\n        if (i > 0) {\n          target = selected[i].target || selected[i].cyTarget;\n          id = target.id();\n          atom = get_atom(id);\n\n          if (atom.type == \"atom\") {\n            atom.sources.forEach(function (source) {\n              add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n              ++j;\n            });\n            j = 0;\n            sds.edges.forEach(function (edge) {\n              if (sds.edges[j].source_id == id) {\n                edge = add_edge(baseId, sds.edges[j].target_id);\n                cy.add([{\n                  group: \"edges\",\n                  data: {\n                    id: edge.id.toString(),\n                    source: baseId,\n                    target: sds.edges[j].target_id\n                  }\n                }]);\n              }\n\n              if (sds.edges[j].target_id == id) {\n                edge = add_edge(sds.edges[j].source_id, baseId);\n                cy.add([{\n                  group: \"edges\",\n                  data: {\n                    id: edge.id.toString(),\n                    source: sds.edges[j].source_id,\n                    target: baseId\n                  }\n                }]);\n              }\n\n              ++j;\n            });\n            this.delete_nodes(selected[i]);\n          } else {\n            alert(\"cannot merge scheme nodes\");\n          }\n        }\n\n        ++i;\n      });\n      selected = [];\n      cm.hideMenuItem(\"merge_nodes\");\n    } else {\n      alert(\"cannot merge scheme nodes\");\n    }\n  }\n\n  delete_atom(atom_id) {\n    /*\n    Remove the atom from the sadface document identified by the\n    supplied atom ID\n    */\n    if (atom_id) {\n      var atom = get_atom(atom_id);\n\n      if (atom !== null && atom !== undefined) {\n        var size = Object.keys(sd.nodes).length;\n\n        for (var i = 0; i < size; ++i) {\n          if (sd.nodes[i].id === atom.id) {\n            delete sd.nodes[i]; //                    sd.nodes = remove_falsy(sd.nodes);\n\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.initCytoscape();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      cy_data: nextProps.cy_data\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    if (this.props.cy_data !== prevProps.cy_data) {\n      this.setState({\n        cy_data: this.props.cy_data\n      });\n      this.initCytoscape();\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"cy\",\n      style: {\n        height: '600px',\n        width: '600px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Cytoscape;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js"],"names":["React","Component","ReactDOM","cytoscape","edgehandles","contextMenus","$","sd","add_scheme","add_edge","get_atom","now","new_uuid","update_atom_text","get_sd","delete_edge","update","add_source","Modal","use","cy","cm","selected","position","layout","running","json","created_date","edited_date","analyst_email","analyst_name","document_id","default_sadface_doc","current_sadface_doc","focused","undo_stack","redo_stack","edit_atom","resource_pane_viewable_state","Cytoscape","constructor","props","state","cy_data","initCytoscape","bind","build_cola_layout","edit_atom_content","delete_nodes","update_local_storage","redraw_visualisation","undo","redo","merge_nodes","delete_atom","console","log","container","document","getElementById","elements","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","run","toggleOffOnLeave","handleNodes","handleSize","handleColor","handleHitThreshold","handleLineWidth","handleOutlineColor","edgeType","complete","event","sourceNode","targetNode","addedEles","length","source_id","source","id","target_id","target","source_position","target_position","x","y","data","type","scheme","scheme_id","scheme_content","name","remove","add","group","toString","content","typeshape","classes","locked","edge1","edge2","edge","opts","cola_params","animate","randomize","padding","fit","maxSimulationTime","i","undefined","forEach","opt","makeLayout","value","atom","cyTarget","sds","edges","undo_item","JSON","parse","push","showMenuItem","hideMenuItem","localStorage","setItem","stringify","stop","options","eles","center","resize","redo_item","pop","loadJSON","baseNode","baseId","baseAtom","node","j","sources","resource_id","text","offset","alert","atom_id","size","Object","keys","nodes","componentDidMount","componentWillReceiveProps","nextProps","setState","componentDidUpdate","prevProps","render","height","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport cytoscape from 'cytoscape';\nimport edgehandles from 'cytoscape-edgehandles';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\n\nimport $ from 'jquery';\n\n\nimport {sd,add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source} from '../lib/Sadface'; \n\nimport Modal from  './Modal';\n\ncytoscape.use( edgehandles );\ncytoscape.use(contextMenus, $);\n\n\n\n\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+edited_date+\"\\\",\\\"id\\\":\\\"\"+document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\n\n\nclass Cytoscape extends Component {\n  constructor(props){\n    super(props);\n\t\tthis.state={\n\t\t\tcy_data: this.props.cy_data,\n\t\t}\n    this.initCytoscape = this.initCytoscape.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n    this.edit_atom_content = this.edit_atom_content.bind(this);\n    this. delete_nodes =this.delete_nodes.bind(this);\n    this.update_local_storage = this.update_local_storage.bind(this);\n    this.redraw_visualisation = this.redraw_visualisation.bind(this);\n    this.undo = this.undo.bind(this);\n    this.redo = this.redo.bind(this);\n    this.merge_nodes = this.merge_nodes.bind(this);\n    this.delete_atom =this.delete_atom.bind(this);\n//    this.dragover_handler = this.dragover_handler.bind(this);\n  }\n\n  initCytoscape(){\n  \t\tconsole.log(\"initCyto\");\n\t\tconsole.log(this.state.cy_data);\n  \t\tcy = cytoscape({\n  \t\tcontainer: document.getElementById('cy'),\n  \t\t elements:this.state.cy_data,\n\n\n  \t\t \t\n\n        style:[\n            {   selector: \"node\", \n                style: {\n                    \"label\": \"data(content)\",\n                    \"text-opacity\": 0.7,\n                    \"width\" : \"auto\",\n                    \"height\" : \"auto\",\n                    \"text-valign\": \"bottom\",\n                    \"text-halign\": \"right\",\n                    \"text-outline-color\": \"#eee\",\n                    \"text-outline-width\": 1\n              }\n            },\n            {   selector: \"[typeshape]\", \n                style: {\n                    \"shape\":\"data(typeshape)\"\n                }\n            },\n            {   selector: \"node[typeshape='diamond']\", \n                style: {\n                    'background-color': '#CC9900'\n                }\n            },\n            {\n                selector: \"node[typeshape='diamond'][content='Conflict']\",\n                style: {\n                    'background-color': 'red'\n                }\n            },\n            {\n                selector: \"node[typeshape='diamond'][name='Support']\",\n                style: {\n                    'background-color': 'green'\n                }\n            },\n            {   selector: \"edge\", \n                style: {\n                    \"line-color\": \"#9dbaea\",\n                    \"target-arrow-shape\": \"triangle\",\n                    \"target-arrow-color\": \"#9dbaea\",\n                    \"curve-style\": \"bezier\"\n                }\n            },\n            {   selector: \":selected\", \n                style: {\n                    \"border-width\":\"1\",\n                    \"border-color\":\"black\",\n                    \"background-color\": \"#3399CC\"\n                }\n            },\n            {   selector: \".atom-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n            },\n            {   selector: \".scheme-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n            }\n            ],\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n                \n    });\n\n  \tlayout = this.build_cola_layout();\n    layout.run();\n\n    cy.edgehandles({\n        toggleOffOnLeave: true,\n        handleNodes: \"node\",\n        handleSize: 10,\n        handleColor: \"orange\",\n        handleHitThreshold: 8,\n        handleLineWidth: 5,\n        //handleLineType: \"flat\",\n        handleOutlineColor: \"pink\",\n        edgeType: function(){ return \"flat\"; },\n        complete: function(event, sourceNode, targetNode, addedEles){\n            if (targetNode.length !== 0) {\n                var source_id = targetNode[0].source().id();\n                var target_id = targetNode[0].target().id();\n\n                //get the mid point between source node and target node\n                var source_position = targetNode[0].source().position();\n                var target_position = targetNode[0].target().position();\n\n                position = {};\n                position.x = ((source_position.x + target_position.x)/2);\n                position.y = ((source_position.y + target_position.y)/2);\n\n                if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\")\n                {\n                    var scheme = add_scheme(\"Support\");\n                    var scheme_id = scheme.id;\n                    var scheme_content = scheme.name;\n                    //remove the automatically generated edge\n                    targetNode.remove();\n                    cy.add([\n                        {group: \"nodes\", data: {id: scheme_id.toString(),\n                            content: scheme_content, typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n                    ]);\n                    var edge1 = add_edge(source_id, scheme_id);\n                    var edge2 = add_edge(scheme_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge1.id.toString(), source: source_id, target: scheme_id } },\n                      { group: \"edges\", data: { id: edge2.id.toString(), source: scheme_id, target: target_id } }\n                    ]);\n                } else {\n                    targetNode.remove();\n                    var edge = add_edge(source_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge.id.toString(), source: source_id, target: target_id } }\n                    ]);\n                }\n             this.update_local_storage();\n            } else {\n                targetNode.remove();\n            }\n        }\n    });\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n     cm = cy.contextMenus({\n        \t\n    });//context menus\n}\n\n  build_cola_layout( opts ) {\n    var cola_params = {\n        name: \"cola\",\n        animate: true,\n        randomize: true,\n        padding: 100,\n        fit: false,\n        maxSimulationTime: 1500\n    };\n    var i = 0;\n    if (opts !== undefined) {\n        opts.forEach(function(opt) {\n           cola_params[i] = opts[i];\n           ++i;\n        });\n    }\n    return cy.makeLayout( cola_params );\n}\n\nedit_atom_content() {\n    var content = document.getElementById(\"edit_atom_content\").value;\n    var atom = cy.$(\"#\"+edit_atom.id());\n    update_atom_text(edit_atom.id(), content);\n    this.update_local_storage();\n    atom.data(\"content\", content);\n    edit_atom = null;\n}\n\n delete_nodes(event) {\n    var target = event.target || event.cyTarget;\n    var id = target.id();\n    //removed = target.remove();\n    this.delete_atom(id);\n    var i = 0;\n    var sds = get_sd();\n    var edges = sds.edges;\n    edges.forEach(function(edge) {\n        if (edges[i] !== undefined) {\n            if (edges[i].source_id === id || edges[i].target_id === id) {\n                delete_edge(edges[i].id);\n            }\n            ++i;\n        }\n    });\n    this.update_local_storage();\n}\n\nupdate_local_storage() {\n    var undo_item = JSON.parse(current_sadface_doc);\n    undo_stack.push(undo_item);\n    redo_stack = [];\n    cm.showMenuItem(\"undo\");\n    cm.hideMenuItem(\"redo\");\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    current_sadface_doc = JSON.stringify(get_sd());\n    update();\n}\n\nredraw_visualisation() {\n    layout.stop();\n    layout.options.eles = cy.elements();\n    layout.run();\n    cy.center();\n    cy.resize();\n}\n\n undo() {\n    if (undo_stack.length != 0) {\n        var redo_item = get_sd();\n        redo_stack.push(redo_item);\n        var state = undo_stack.pop();\n        this.loadJSON(JSON.stringify(state));\n        if (undo_stack.length == 0) {\n            cm.hideMenuItem(\"undo\");\n        }\n        cm.showMenuItem(\"redo\");\n    }\n}\n\n redo() {\n    if (redo_stack.length != 0) {\n        var undo_item = get_sd();\n        undo_stack.push(undo_item);\n        var state = redo_stack.pop();\n        this.loadJSON(JSON.stringify(state));\n        if (redo_stack.length == 0) {\n            cm.hideMenuItem(\"redo\");\n        }\n        cm.showMenuItem(\"undo\");\n    }\n}\n\nmerge_nodes() {\n    //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n    var target;\n    var id;\n    var atom;\n    var baseNode = selected[0].target || selected[0].cyTarget;\n    var baseId = baseNode.id();\n    var baseAtom = get_atom(baseId);\n    var edge;\n    if (baseAtom.type == \"atom\") {\n        var sds = get_sd();\n        var i = 0;\n        selected.forEach(function(node){\n            var j = 0;\n            if (i > 0) {\n                target = selected[i].target || selected[i].cyTarget;\n                id = target.id();\n                atom = get_atom(id);\n                if (atom.type == \"atom\") {\n                    atom.sources.forEach(function(source) {\n                        add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n                        ++j;\n                    });\n                    j = 0;\n                    sds.edges.forEach(function(edge) {\n                        if (sds.edges[j].source_id == id) {\n                            edge = add_edge(baseId,sds.edges[j].target_id);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: baseId, target: sds.edges[j].target_id } }\n                            ]);\n                        }\n                        if (sds.edges[j].target_id == id) {\n                            edge = add_edge(sds.edges[j].source_id, baseId);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: sds.edges[j].source_id, target: baseId } }\n                            ]);\n                        }\n                        ++j;\n                    });\n                this.delete_nodes(selected[i]);\n                } else {\n                    alert(\"cannot merge scheme nodes\");\n                }\n            }\n            ++i;\n        });\n        selected = [];\n        cm.hideMenuItem(\"merge_nodes\");\n    } else {\n        alert(\"cannot merge scheme nodes\");\n    }\n}\n\ndelete_atom(atom_id) {\n    /*\n    Remove the atom from the sadface document identified by the\n    supplied atom ID\n    */\n    if (atom_id) {\n        var atom = get_atom(atom_id);\n        if (atom !== null && atom !== undefined) {\n            var size = Object.keys(sd.nodes).length;\n            for (var i = 0; i < size; ++i) {\n                if (sd.nodes[i].id === atom.id) {\n                    delete sd.nodes[i];\n//                    sd.nodes = remove_falsy(sd.nodes);\n                    return;\n                }\n            }\n        }\n    }\n}\n\n\n  componentDidMount(){\n  \tthis.initCytoscape();\n  }\ncomponentWillReceiveProps(nextProps) {\n         this.setState({ cy_data: nextProps.cy_data })\n    }\n   \n     componentDidUpdate(prevProps) {\n  // Typical usage (don't forget to compare props):\n  if (this.props.cy_data !== prevProps.cy_data) {\n  \tthis.setState({cy_data: this.props.cy_data});\n  \tthis.initCytoscape();\n  }\n}\n\n\n   render(){\n\n  \n\n    return (\n    \t<div id=\"cy\"  style={{height:'600px', width:'600px'}}>\n    \t</div>\n    );\n    }\n    }\n\n    export default Cytoscape;"]},"metadata":{},"sourceType":"module"}