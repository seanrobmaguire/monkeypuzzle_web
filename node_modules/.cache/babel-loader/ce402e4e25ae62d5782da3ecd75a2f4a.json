{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles'; //import functions\n\nvar sadface = require('../lib/Sadface'); //import {import_json} from '../lib/Sadface';\n\n\ncytoscape.use(edgehandles);\ncytoscape.use(cola);\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar cy_data = {};\nvar json;\nvar created_date = sadface.now();\nvar edited_date = sadface.now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = this.props.new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\" + analyst_email + \"\\\",\\\"analyst_name\\\":\\\"\" + analyst_email + \"\\\",\\\"created\\\":\\\"\" + created_date + \"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\" + edited_date + \"\\\",\\\"id\\\":\\\"\" + document_id + \"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\ninitialise_monkeypuzzle();\n\nfunction initialise_monkeypuzzle() {\n  //load diagram if there is one in localStorage\n  if (localStorage.getItem(\"state\")) {\n    loadJSON(localStorage.getItem(\"state\"));\n    initCytoscape(); //else use default\n  } else {\n    current_sadface_doc = default_sadface_doc;\n    localStorage.setItem(\"state\", current_sadface_doc);\n    cy_data = sadface.export_cytoscape(sadface.import_json(current_sadface_doc));\n    initCytoscape();\n  }\n}\n\nfunction initCytoscape() {\n  cy = cytoscape({\n    container: document.getElementById(\"cy\"),\n    ready: function () {\n      window.cy = this;\n    },\n    elements: JSON.parse(cy_data),\n    style: [{\n      selector: \"node\",\n      style: {\n        \"content\": \"data(content)\",\n        \"text-opacity\": 0.7,\n        \"width\": \"auto\",\n        \"height\": \"auto\",\n        \"text-valign\": \"bottom\",\n        \"text-halign\": \"right\",\n        \"text-outline-color\": \"#eee\",\n        \"text-outline-width\": 1\n      }\n    }, {\n      selector: \"[typeshape]\",\n      style: {\n        \"shape\": \"data(typeshape)\"\n      }\n    }, {\n      selector: \"node[typeshape='diamond']\",\n      style: {\n        'background-color': '#CC9900'\n      }\n    }, {\n      selector: \"node[typeshape='diamond'][content='Conflict']\",\n      style: {\n        'background-color': 'red'\n      }\n    }, {\n      selector: \"node[typeshape='diamond'][content='Support']\",\n      style: {\n        'background-color': 'green'\n      }\n    }, {\n      selector: \"edge\",\n      style: {\n        \"line-color\": \"#9dbaea\",\n        \"target-arrow-shape\": \"triangle\",\n        \"target-arrow-color\": \"#9dbaea\",\n        \"curve-style\": \"bezier\"\n      }\n    }, {\n      selector: \":selected\",\n      style: {\n        \"border-width\": \"1\",\n        \"border-color\": \"black\",\n        \"background-color\": \"#3399CC\"\n      }\n    }, {\n      selector: \".atom-label\",\n      style: {\n        \"text-wrap\": \"wrap\",\n        \"text-max-width\": 160\n      }\n    }, {\n      selector: \".scheme-label\",\n      style: {\n        \"text-wrap\": \"wrap\",\n        \"text-max-width\": 160\n      }\n    }],\n    boxSelectionEnabled: false,\n    autounselectify: false,\n    selectionType: \"single\",\n    minZoom: 0.1,\n    maxZoom: 1.5\n  });\n  layout = build_cola_layout();\n  layout.run();\n  cy.elements(\"node[type = \\\"atom\\\"]\").qtip({\n    content: function () {\n      return 'ID: ' + this.id();\n    },\n    position: {\n      my: \"top center\",\n      at: \"bottom center\"\n    },\n    style: {\n      classes: \"qtip-bootstrap\",\n      tip: {\n        width: 16,\n        height: 8\n      }\n    }\n  });\n  cy.edgehandles({\n    toggleOffOnLeave: true,\n    handleNodes: \"node\",\n    handleSize: 10,\n    handleColor: \"orange\",\n    handleHitThreshold: 8,\n    handleLineWidth: 5,\n    //handleLineType: \"flat\",\n    handleOutlineColor: \"grey\",\n    edgeType: function () {\n      return \"flat\";\n    },\n    complete: function (event, sourceNode, targetNode, addedEles) {\n      if (targetNode.length !== 0) {\n        var source_id = targetNode[0].source().id();\n        var target_id = targetNode[0].target().id(); //get the mid point between source node and target node\n\n        var source_position = targetNode[0].source().position();\n        var target_position = targetNode[0].target().position();\n        position = {};\n        position.x = (source_position.x + target_position.x) / 2;\n        position.y = (source_position.y + target_position.y) / 2;\n\n        if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\") {\n          var scheme = sadface.add_scheme(\"Support\");\n          var scheme_id = scheme.id;\n          var scheme_content = scheme.name; //remove the automatically generated edge\n\n          targetNode.remove();\n          cy.add([{\n            group: \"nodes\",\n            data: {\n              id: scheme_id.toString(),\n              content: scheme_content,\n              typeshape: \"diamond\"\n            },\n            classes: \"scheme-label\",\n            locked: false,\n            position: position\n          }]);\n          var edge1 = sadface.add_edge(source_id, scheme_id);\n          var edge2 = sadface.add_edge(scheme_id, target_id);\n          cy.add([{\n            group: \"edges\",\n            data: {\n              id: edge1.id.toString(),\n              source: source_id,\n              target: scheme_id\n            }\n          }, {\n            group: \"edges\",\n            data: {\n              id: edge2.id.toString(),\n              source: scheme_id,\n              target: target_id\n            }\n          }]);\n        } else {\n          targetNode.remove();\n          var edge = sadface.add_edge(source_id, target_id);\n          cy.add([{\n            group: \"edges\",\n            data: {\n              id: edge.id.toString(),\n              source: source_id,\n              target: target_id\n            }\n          }]);\n        }\n\n        update_local_storage();\n      } else {\n        targetNode.remove();\n      }\n    }\n  });\n  /*\n   *\n   * Set up context menus\n   *\n   * */\n\n  cm = cy.contextMenus({\n    menuItems: [{\n      id: \"edit-content\",\n      title: \"edit content\",\n      selector: \"node[type = \\\"atom\\\"]\",\n      onClickFunction: function (event) {\n        var target = event.target || event.cyTarget; // $(\"#editContentModal\").modal(\"show\");\n        //  $(\"#edit_atom_content\").val(target.data().content);\n\n        edit_atom = target;\n      },\n      hasTrailingDivider: false\n    }, {\n      id: \"edit-metadata\",\n      title: \"edit metadata\",\n      selector: \"node[type = \\\"atom\\\"]\",\n      onClickFunction: function (event) {\n        // $(\"#edit_metadata\").empty();\n        var target = event.target || event.cyTarget;\n        var atom = sadface.get_atom(target.id()); // var textArea = $(\"<textarea id=\\\"\"+target.id()+\"_metadata\\\" class=\\\"form-control\\\" rows=\\\"2\\\" >\"+JSON.stringify(atom.metadata)+\"</textarea>\");\n        // $(\"#edit_metadata\").append(textArea);\n        //  $(\"#editMetadataModal\").modal(\"show\");\n\n        edit_atom = target;\n      },\n      hasTrailingDivider: true\n    }, {\n      id: \"change-scheme\",\n      title: \"change scheme\",\n      selector: \"node[typeshape = \\\"diamond\\\"]\",\n      onClickFunction: function (event) {\n        var target = event.target || event.cyTarget; //  $(\"#editSchemeModal\").modal(\"show\");\n\n        edit_atom = target;\n      },\n      hasTrailingDivider: true\n    }, {\n      id: \"remove\",\n      title: \"remove\",\n      selector: \"node, edge\",\n      onClickFunction: function (event) {\n        var target = event.target || event.cyTarget;\n\n        if (selected.length !== 0) {\n          selected.forEach(function (node) {\n            delete_nodes(node);\n          });\n          selected = [];\n        } else {\n          if (target.data().type == \"atom\") {\n            delete_nodes(event);\n            target.remove();\n          } else if (target.data().typeshape == \"diamond\") {\n            delete_nodes(event);\n            target.remove();\n          } else {\n            sadface.delete_edge(target.id());\n            update_local_storage();\n            target.remove();\n          }\n        }\n      },\n      hasTrailingDivider: true\n    }, {\n      id: \"add-atom\",\n      title: \"add atom\",\n      coreAsWell: true,\n      onClickFunction: function (event) {\n        position = event.renderedPosition; //  $(\"#newAtomModal\").modal(\"show\");\n      }\n    }, {\n      id: \"add-scheme\",\n      title: \"add scheme\",\n      coreAsWell: true,\n      onClickFunction: function (event) {\n        position = event.position || event.cyPosition;\n        document.getElementById(\"sel1\").options.selectedIndex = 0; //  $(\"#newSchemeModal\").modal(\"show\");\n      },\n      hasTrailingDivider: true\n    }, {\n      id: \"redraw\",\n      title: \"redraw\",\n      coreAsWell: true,\n      onClickFunction: function (event) {\n        redraw_visualisation();\n      },\n      hasTrailingDivider: true\n    }, {\n      id: \"undo\",\n      title: \"undo\",\n      selector: \"node, edge\",\n      show: false,\n      coreAsWell: true,\n      onClickFunction: function (event) {\n        undo();\n      },\n      hasTrailingDivider: false\n    }, {\n      id: \"redo\",\n      title: \"redo\",\n      selector: \"node, edge\",\n      show: false,\n      coreAsWell: true,\n      onClickFunction: function (event) {\n        redo();\n\n        if (redo_stack == []) {\n          cm.hideMenuItem(\"redo\");\n        }\n      },\n      hasTrailingDivider: true\n    }, {\n      id: \"merge_nodes\",\n      title: \"merge nodes\",\n      selector: \"node\",\n      show: false,\n      coreAsWell: true,\n      onClickFunction: function (event) {\n        merge_nodes();\n      }\n    }]\n  });\n  cy.on(\"unselect\", \"node\", function (e) {\n    selected.pop(e);\n    cm.hideMenuItem(\"merge_nodes\");\n  });\n  cy.on(\"select\", \"node\", function (e) {\n    selected.push(e);\n\n    if (selected.length > 1) {\n      cm.showMenuItem(\"merge_nodes\");\n    } else {\n      cm.hideMenuItem(\"merge_nodes\");\n    }\n  });\n  cy.on(\"tap\", function (e) {//when cytoscape is tapped remove any focus from HTML elements like the tab textareas\n    //this mainly helps with keybinds\n    //        $(\":focus\").blur();\n  });\n  cy.on(\"layoutstart\", function () {\n    running = true;\n  });\n  cy.on(\"layoutstop\", function () {\n    running = false;\n    var png = cy.png({\n      full: true\n    }); //        $('#download_png').attr('href', png);\n\n    var jpg = cy.jpg({\n      full: true\n    }); //        $('#download_jpg').attr('href', jpg);\n  });\n  /*  $(\".resource-pane\").resizable({\n         handleSelector: \".splitter\",\n         resizeHeight: false,\n         resizeWidthFrom: \"right\",\n         //onDragStart: function (e, $el, opt) {},\n         onDragEnd: function (e, $el, opt) {\n             cy.resize();\n         }\n     });*/\n}\n\nfunction build_cola_layout(opts) {\n  var cola_params = {\n    name: \"cola\",\n    animate: true,\n    randomize: true,\n    padding: 100,\n    fit: false,\n    maxSimulationTime: 1500\n  };\n  var i = 0;\n\n  if (opts !== undefined) {\n    opts.forEach(function (opt) {\n      cola_params[i] = opts[i];\n      ++i;\n    });\n  }\n\n  return cy.makeLayout(cola_params);\n}\n\nfunction loadJSON(json_value) {\n  json = sadface.import_json(json_value);\n  localStorage.setItem(\"state\", JSON.stringify(sadface.get_sd()));\n  current_sadface_doc = JSON.stringify(sadface.get_sd()); //load any sources in the stored diagram state\n\n  window.onload = function () {\n    loadTabs(json.resources);\n  };\n\n  cy_data = sadface.export_cytoscape(json);\n\n  if (cy !== null) {\n    cy.elements().remove();\n    cy.json({\n      elements: JSON.parse(cy_data)\n    });\n    redraw_visualisation();\n  }\n}\n\nfunction loadTabs(tabs) {\n  tabs.forEach(function (tab) {\n    sadface.load_tab(tab);\n  });\n}\n/*\n *\n * Model Manipulation Functions\n *\n * */\n\n\nfunction add_new_atom_node(content) {\n  var meta = {\n    \"hello\": \"world\"\n  };\n  var new_atom = sadface.add_atom(content);\n  var atom_id = new_atom.id;\n\n  if (focused != null) {\n    sadface.add_source(atom_id, focused.id, content, 0, 0);\n  }\n\n  if (position == null) {\n    position = {\n      \"x\": cy.width() / 2,\n      \"y\": cy.height() / 2\n    };\n  }\n\n  cy.add([{\n    group: \"nodes\",\n    data: {\n      id: atom_id.toString(),\n      content: content,\n      type: \"atom\",\n      typeshape: \"roundrectangle\",\n      metadata: meta\n    },\n    classes: \"atom-label\",\n    locked: false,\n    renderedPosition: position\n  }]);\n  sadface.node = cy.getElementById(atom_id.toString());\n  sadface.node.qtip({\n    content: function () {\n      return 'ID: ' + this.id();\n    },\n    position: {\n      my: \"top center\",\n      at: \"bottom center\"\n    },\n    style: {\n      classes: \"qtip-bootstrap\",\n      tip: {\n        width: 16,\n        height: 8\n      }\n    }\n  });\n  position = null;\n  update_local_storage();\n}\n\nfunction get_selected_text() {\n  if (document.activeElement.tagName.toLowerCase() == \"textarea\") {\n    var selectedTextArea = document.activeElement;\n    var selection = selectedTextArea.value.substring(selectedTextArea.selectionStart, selectedTextArea.selectionEnd);\n    selectedTextArea.selectionStart = selectedTextArea.selectionEnd;\n  }\n\n  return selection;\n}\n\nfunction clear_selection() {\n  if (window.getSelection) {\n    if (window.getSelection().empty) {\n      // Chrome\n      window.getSelection().empty();\n    }\n\n    if (window.getSelection().removeAllRanges) {\n      // Firefox\n      window.getSelection().removeAllRanges();\n    }\n  }\n\n  if (document.selection) {\n    // IE?\n    document.selection.empty();\n  }\n}\n\nfunction set_focus(element) {\n  focused = document.getElementById(element.id); //.id;\n}\n\nfunction clear_focus() {\n  focused = null;\n}\n\nfunction update_local_storage() {\n  var undo_item = JSON.parse(current_sadface_doc);\n  undo_stack.push(undo_item);\n  redo_stack = [];\n  cm.showMenuItem(\"undo\");\n  cm.hideMenuItem(\"redo\");\n  localStorage.setItem(\"state\", JSON.stringify(sadface.get_sd()));\n  current_sadface_doc = JSON.stringify(sadface.get_sd());\n  sadface.update();\n}\n\nfunction undo() {\n  if (undo_stack.length != 0) {\n    var redo_item = sadface.get_sd();\n    redo_stack.push(redo_item);\n    sadface.state = undo_stack.pop();\n    loadJSON(JSON.stringify(sadface.state));\n\n    if (undo_stack.length == 0) {\n      cm.hideMenuItem(\"undo\");\n    }\n\n    cm.showMenuItem(\"redo\");\n  }\n}\n\nfunction redo() {\n  if (redo_stack.length != 0) {\n    var undo_item = sadface.get_sd();\n    undo_stack.push(undo_item);\n    sadface.state = redo_stack.pop();\n    loadJSON(JSON.stringify(state));\n\n    if (redo_stack.length == 0) {\n      cm.hideMenuItem(\"redo\");\n    }\n\n    cm.showMenuItem(\"undo\");\n  }\n}\n\nfunction dragover_handler(ev) {\n  ev.preventDefault();\n  ev.dataTransfer.dropEffect = \"move\";\n}\n\nfunction drop_handler(ev) {\n  ev.preventDefault();\n  position = {\n    x: ev.clientX - 280,\n    y: ev.clientY + 200\n  };\n  var selection = get_selected_text();\n\n  if (selection != null || selection != undefined) {\n    add_new_atom_node(selection);\n    clear_selection();\n    clear_focus();\n  } else {\n    console.log(\"Not a valid text selection.\");\n  }\n}\n\nfunction merge_nodes() {\n  //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n  var target;\n  var id;\n  var atom;\n  var baseNode = selected[0].target || selected[0].cyTarget;\n  var baseId = baseNode.id();\n  var baseAtom = get_atom(baseId);\n  var edge;\n\n  if (baseAtom.type == \"atom\") {\n    sds = get_sd();\n    var i = 0;\n    selected.forEach(function (node) {\n      var j = 0;\n\n      if (i > 0) {\n        target = selected[i].target || selected[i].cyTarget;\n        id = target.id();\n        atom = get_atom(id);\n\n        if (atom.type == \"atom\") {\n          atom.sources.forEach(function (source) {\n            add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n            ++j;\n          });\n          j = 0;\n          sds.edges.forEach(function (edge) {\n            if (sds.edges[j].source_id == id) {\n              edge = add_edge(baseId, sds.edges[j].target_id);\n              cy.add([{\n                group: \"edges\",\n                data: {\n                  id: edge.id.toString(),\n                  source: baseId,\n                  target: sds.edges[j].target_id\n                }\n              }]);\n            }\n\n            if (sds.edges[j].target_id == id) {\n              edge = add_edge(sds.edges[j].source_id, baseId);\n              cy.add([{\n                group: \"edges\",\n                data: {\n                  id: edge.id.toString(),\n                  source: sds.edges[j].source_id,\n                  target: baseId\n                }\n              }]);\n            }\n\n            ++j;\n          });\n          delete_nodes(selected[i]);\n        } else {\n          alert(\"cannot merge scheme nodes\");\n        }\n      }\n\n      ++i;\n    });\n    selected = [];\n    cm.hideMenuItem(\"merge_nodes\");\n  } else {\n    alert(\"cannot merge scheme nodes\");\n  }\n}\n\nfunction edit_atom_content() {\n  var content = document.getElementById(\"edit_atom_content\").value;\n  var atom = cy.$(\"#\" + edit_atom.id());\n  update_atom_text(edit_atom.id(), content);\n  update_local_storage();\n  atom.data(\"content\", content);\n  edit_atom = null;\n}\n\nfunction edit_atom_metadata() {\n  var atom = cy.$(\"#\" + edit_atom.id());\n  var content = document.getElementById(atom.id() + \"_metadata\").value;\n\n  if (JSON.parse(content)) {\n    var metadata = JSON.parse(content);\n    update_atom_metadata(atom.id(), metadata);\n    update_local_storage();\n    edit_atom = null;\n  } else {\n    alert(\"Metadata not in JSON format, unable to update\");\n  }\n}\n\nfunction edit_scheme_content() {\n  var scheme_idx = document.getElementById(\"sel2\").options.selectedIndex;\n  var content = document.getElementById(\"sel2\").options[scheme_idx].text;\n  var scheme = cy.$(\"#\" + edit_atom.id());\n  update_scheme(edit_atom.id(), content);\n  update_local_storage();\n  scheme.data(\"content\", content);\n  edit_atom = null;\n}\n\nfunction clear_local_storage() {\n  localStorage.clear();\n  window.location.reload(false);\n} //******************************************************\n\n\nfunction add_new_scheme_node() {\n  var scheme_idx = document.getElementById(\"sel1\").options.selectedIndex;\n  var scheme = document.getElementById(\"sel1\").options[scheme_idx].text;\n  var new_scheme = add_scheme(scheme);\n  var scheme_id = new_scheme.id;\n  cy.add([{\n    group: \"nodes\",\n    data: {\n      id: scheme_id.toString(),\n      content: scheme,\n      type: \"scheme\",\n      typeshape: \"diamond\"\n    },\n    classes: \"scheme-label\",\n    locked: false,\n    position: position\n  }]);\n  update_local_storage();\n}\n\nfunction delete_nodes(event) {\n  var target = event.target || event.cyTarget;\n  var id = target.id();\n  removed = target.remove();\n  delete_atom(id);\n  var i = 0;\n  var sds = get_sd();\n  var edges = sds.edges;\n  edges.forEach(function (edge) {\n    if (edges[i] !== undefined) {\n      if (edges[i].source_id === id || edges[i].target_id === id) {\n        delete_edge(edges[i].id);\n      }\n\n      ++i;\n    }\n  });\n  update_local_storage();\n}\n\nfunction redraw_visualisation() {\n  layout.stop();\n  layout.options.eles = cy.elements();\n  layout.run();\n  cy.center();\n  cy.resize();\n}\n\nfunction mp_reset() {\n  clear_local_storage();\n}\n\nfunction set_analyst_name() {\n  analyst_name = document.getElementById('analyst_name_textarea').value;\n  update_analyst_name(analyst_name);\n}\n\nfunction set_analyst_email() {\n  analyst_email = document.getElementById('analyst_email_textarea').value;\n  update_analyst_email(analyst_email);\n}\n\nclass GraphContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n  }\n\n  initialise_monkeypuzzle() {\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\")) {\n      //  this.loadJSON(localStorage.getItem(\"state\"));\n      this.initCytoscape(); //else use default\n    } else {\n      this.setState({\n        current_sadface_doc: this.setDefault()\n      });\n      localStorage.setItem(\"state\", this.state.current_sadface_doc); //   cy_data = export_cytoscape({import_json(current_sadface_doc)});\n\n      this.initCytoscape();\n    }\n  }\n\n  setDefault() {\n    this.setState({\n      analyst_email: \"Default Analyst Email\",\n      analyst_name: \"Default Analsyst Name\",\n      created: this.props.now(),\n      edges: [],\n      edited: this.props.now(),\n      id: this.props.new_uuid(),\n      metadata: {},\n      nodes: [],\n      resources: []\n    });\n  }\n\n  componentDidMount() {\n    this.initialise_monkeypuzzle();\n    this.setState({\n      cy: this.cy,\n      layout: this.layout,\n      position: this.position\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"cy\",\n      ondrop: \"drop_handler(event);\",\n      ondragover: \"dragover_handler(event);\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default GraphContainer;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js"],"names":["React","Component","cytoscape","cola","edgehandles","sadface","require","use","cy","cm","selected","position","layout","running","cy_data","json","created_date","now","edited_date","analyst_email","analyst_name","document_id","props","new_uuid","default_sadface_doc","current_sadface_doc","focused","undo_stack","redo_stack","edit_atom","resource_pane_viewable_state","initialise_monkeypuzzle","localStorage","getItem","loadJSON","initCytoscape","setItem","export_cytoscape","import_json","container","document","getElementById","ready","window","elements","JSON","parse","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","build_cola_layout","run","qtip","content","id","my","at","classes","tip","width","height","toggleOffOnLeave","handleNodes","handleSize","handleColor","handleHitThreshold","handleLineWidth","handleOutlineColor","edgeType","complete","event","sourceNode","targetNode","addedEles","length","source_id","source","target_id","target","source_position","target_position","x","y","data","type","scheme","add_scheme","scheme_id","scheme_content","name","remove","add","group","toString","typeshape","locked","edge1","add_edge","edge2","edge","update_local_storage","contextMenus","menuItems","title","onClickFunction","cyTarget","hasTrailingDivider","atom","get_atom","forEach","node","delete_nodes","delete_edge","coreAsWell","renderedPosition","cyPosition","options","selectedIndex","redraw_visualisation","show","undo","redo","hideMenuItem","merge_nodes","on","e","pop","push","showMenuItem","png","full","jpg","opts","cola_params","animate","randomize","padding","fit","maxSimulationTime","i","undefined","opt","makeLayout","json_value","stringify","get_sd","onload","loadTabs","resources","tabs","tab","load_tab","add_new_atom_node","meta","new_atom","add_atom","atom_id","add_source","metadata","get_selected_text","activeElement","tagName","toLowerCase","selectedTextArea","selection","value","substring","selectionStart","selectionEnd","clear_selection","getSelection","empty","removeAllRanges","set_focus","element","clear_focus","undo_item","update","redo_item","state","dragover_handler","ev","preventDefault","dataTransfer","dropEffect","drop_handler","clientX","clientY","console","log","baseNode","baseId","baseAtom","sds","j","sources","resource_id","text","offset","edges","alert","edit_atom_content","$","update_atom_text","edit_atom_metadata","update_atom_metadata","edit_scheme_content","scheme_idx","update_scheme","clear_local_storage","clear","location","reload","add_new_scheme_node","new_scheme","removed","delete_atom","stop","eles","center","resize","mp_reset","set_analyst_name","update_analyst_name","set_analyst_email","update_analyst_email","GraphContainer","constructor","bind","setState","setDefault","created","edited","nodes","componentDidMount","render"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\n\n//import functions\nvar sadface = require('../lib/Sadface');\n//import {import_json} from '../lib/Sadface';\n\n\n\n\n\n\n\ncytoscape.use( edgehandles );\ncytoscape.use( cola );\n\n\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar cy_data  = {};\nvar json;\nvar created_date = sadface.now();\nvar edited_date = sadface.now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = this.props.new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+edited_date+\"\\\",\\\"id\\\":\\\"\"+document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\ninitialise_monkeypuzzle();\n\nfunction initialise_monkeypuzzle() {\n\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\"))\n    {\n        loadJSON(localStorage.getItem(\"state\"));\n        initCytoscape();\n    //else use default\n    } else\n    {\n        current_sadface_doc = default_sadface_doc;\n        localStorage.setItem(\"state\", current_sadface_doc);\n        cy_data = sadface.export_cytoscape(sadface.import_json(current_sadface_doc));\n        initCytoscape();\n    }\n}\n\nfunction initCytoscape() {\n    cy = cytoscape({\n        container: document.getElementById(\"cy\"),\n        ready: function(){ window.cy = this; },\n        elements: JSON.parse(cy_data),\n        style:[\n            {   selector: \"node\", \n                style: {\n                    \"content\": \"data(content)\",\n                    \"text-opacity\": 0.7,\n                    \"width\" : \"auto\",\n                    \"height\" : \"auto\",\n                    \"text-valign\": \"bottom\",\n                    \"text-halign\": \"right\",\n                    \"text-outline-color\": \"#eee\",\n                    \"text-outline-width\": 1\n              }\n            },\n            {   selector: \"[typeshape]\", \n                style: {\n                    \"shape\":\"data(typeshape)\"\n                }\n            },\n            {   selector: \"node[typeshape='diamond']\", \n                style: {\n                    'background-color': '#CC9900'\n                }\n            },\n            {\n                selector: \"node[typeshape='diamond'][content='Conflict']\",\n                style: {\n                    'background-color': 'red'\n                }\n            },\n            {\n                selector: \"node[typeshape='diamond'][content='Support']\",\n                style: {\n                    'background-color': 'green'\n                }\n            },\n            {   selector: \"edge\", \n                style: {\n                    \"line-color\": \"#9dbaea\",\n                    \"target-arrow-shape\": \"triangle\",\n                    \"target-arrow-color\": \"#9dbaea\",\n                    \"curve-style\": \"bezier\"\n                }\n            },\n            {   selector: \":selected\", \n                style: {\n                    \"border-width\":\"1\",\n                    \"border-color\":\"black\",\n                    \"background-color\": \"#3399CC\"\n                }\n            },\n            {   selector: \".atom-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n            },\n            {   selector: \".scheme-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n            }\n            ],\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n    });\n\n    layout = build_cola_layout();\n    layout.run();\n\n    cy.elements(\"node[type = \\\"atom\\\"]\").qtip({\n        content: function(){return 'ID: '+this.id()},\n        position: {\n            my: \"top center\",\n            at: \"bottom center\"\n        },\n        style: {\n            classes: \"qtip-bootstrap\",\n            tip: {\n                width: 16,\n                height: 8\n            }\n        }\n    });\n\n\n   cy.edgehandles({\n        toggleOffOnLeave: true,\n        handleNodes: \"node\",\n        handleSize: 10,\n        handleColor: \"orange\",\n        handleHitThreshold: 8,\n        handleLineWidth: 5,\n        //handleLineType: \"flat\",\n        handleOutlineColor: \"grey\",\n        edgeType: function(){ return \"flat\"; },\n        complete: function(event, sourceNode, targetNode, addedEles){\n            if (targetNode.length !== 0) {\n                var source_id = targetNode[0].source().id();\n                var target_id = targetNode[0].target().id();\n\n                //get the mid point between source node and target node\n                var source_position = targetNode[0].source().position();\n                var target_position = targetNode[0].target().position();\n\n                position = {};\n                position.x = ((source_position.x + target_position.x)/2);\n                position.y = ((source_position.y + target_position.y)/2);\n\n                if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\")\n                {\n                    var scheme = sadface.add_scheme(\"Support\");\n                    var scheme_id = scheme.id;\n                    var scheme_content = scheme.name;\n                    //remove the automatically generated edge\n                    targetNode.remove();\n                    cy.add([\n                        {group: \"nodes\", data: {id: scheme_id.toString(),\n                            content: scheme_content, typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n                    ]);\n                    var edge1 = sadface.add_edge(source_id, scheme_id);\n                    var edge2 = sadface.add_edge(scheme_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge1.id.toString(), source: source_id, target: scheme_id } },\n                      { group: \"edges\", data: { id: edge2.id.toString(), source: scheme_id, target: target_id } }\n                    ]);\n                } else {\n                    targetNode.remove();\n                    var edge = sadface.add_edge(source_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge.id.toString(), source: source_id, target: target_id } }\n                    ]);\n                }\n                update_local_storage();\n            } else {\n                targetNode.remove();\n            }\n        }\n    });\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n    cm = cy.contextMenus({\n        menuItems: [\n          {\n            id: \"edit-content\",\n            title: \"edit content\",\n            selector: \"node[type = \\\"atom\\\"]\",\n            onClickFunction: function (event) {\n              var target = event.target || event.cyTarget;\n             // $(\"#editContentModal\").modal(\"show\");\n            //  $(\"#edit_atom_content\").val(target.data().content);\n              edit_atom = target;\n            },\n            hasTrailingDivider: false\n          },\n          {\n            id: \"edit-metadata\",\n            title: \"edit metadata\",\n            selector: \"node[type = \\\"atom\\\"]\",\n            onClickFunction: function (event) {\n               // $(\"#edit_metadata\").empty();\n                var target = event.target || event.cyTarget;\n                var atom = sadface.get_atom(target.id());\n               // var textArea = $(\"<textarea id=\\\"\"+target.id()+\"_metadata\\\" class=\\\"form-control\\\" rows=\\\"2\\\" >\"+JSON.stringify(atom.metadata)+\"</textarea>\");\n               // $(\"#edit_metadata\").append(textArea);\n              //  $(\"#editMetadataModal\").modal(\"show\");\n                edit_atom = target;\n            },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"change-scheme\",\n            title: \"change scheme\",\n            selector: \"node[typeshape = \\\"diamond\\\"]\",\n            onClickFunction: function (event) {\n                var target = event.target || event.cyTarget;\n              //  $(\"#editSchemeModal\").modal(\"show\");\n                edit_atom = target;\n            },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"remove\",\n            title: \"remove\",\n            selector: \"node, edge\",\n            onClickFunction: function (event) {\n                var target = event.target || event.cyTarget;\n                if (selected.length !== 0) {\n                    selected.forEach(function(node) {\n                        delete_nodes(node);\n                    });\n                    selected = [];\n                } else {\n                    if (target.data().type==\"atom\") {\n                        delete_nodes(event);\n                        target.remove();\n                    } else if (target.data().typeshape==\"diamond\"){\n                        delete_nodes(event);\n                        target.remove();\n                    } else {\n                        sadface.delete_edge(target.id());\n                        update_local_storage();\n                        target.remove();\n                    }\n                }\n            },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"add-atom\",\n            title: \"add atom\",\n            coreAsWell: true,\n            onClickFunction: function (event) {\n                position = event.renderedPosition;\n              //  $(\"#newAtomModal\").modal(\"show\");\n            }\n          },\n          {\n            id: \"add-scheme\",\n            title: \"add scheme\",\n            coreAsWell: true,\n            onClickFunction: function (event) {\n\n                position = event.position || event.cyPosition;\n\n                document.getElementById(\"sel1\").options.selectedIndex=0;\n              //  $(\"#newSchemeModal\").modal(\"show\");\n            },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"redraw\",\n            title: \"redraw\",\n            coreAsWell: true,\n            onClickFunction: function (event) { redraw_visualisation(); },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"undo\",\n            title: \"undo\",\n            selector: \"node, edge\",\n            show: false,\n            coreAsWell: true,\n            onClickFunction: function (event) {\n              undo();\n            },\n            hasTrailingDivider: false\n          },\n          {\n            id: \"redo\",\n            title: \"redo\",\n            selector: \"node, edge\",\n            show: false,\n            coreAsWell: true,\n            onClickFunction: function (event) {\n              redo();\n              if (redo_stack == []) {\n                cm.hideMenuItem(\"redo\");\n              }\n            },\n            hasTrailingDivider: true\n          },\n          {\n              id: \"merge_nodes\",\n              title: \"merge nodes\",\n              selector: \"node\",\n              show: false,\n              coreAsWell: true,\n              onClickFunction: function (event) {\n                  merge_nodes();\n              }\n          }\n        ]\n    });\n\n    cy.on(\"unselect\", \"node\", function (e){\n        selected.pop(e);\n        cm.hideMenuItem(\"merge_nodes\");\n    });\n\n    cy.on(\"select\", \"node\", function (e){\n        selected.push(e);\n        if(selected.length>1) {\n            cm.showMenuItem(\"merge_nodes\");\n        } else {\n            cm.hideMenuItem(\"merge_nodes\");\n        }\n    });\n\n    cy.on(\"tap\", function (e){\n        //when cytoscape is tapped remove any focus from HTML elements like the tab textareas\n        //this mainly helps with keybinds\n//        $(\":focus\").blur();\n    });\n\n    cy.on(\"layoutstart\", function(){\n        running = true;\n    });\n\n    cy.on(\"layoutstop\", function(){\n        running = false;\n        \n        var png = cy.png({ full: true });\n//        $('#download_png').attr('href', png);\n\n        var jpg = cy.jpg({ full: true });\n//        $('#download_jpg').attr('href', jpg);\n    });\n\n /*  $(\".resource-pane\").resizable({\n        handleSelector: \".splitter\",\n        resizeHeight: false,\n        resizeWidthFrom: \"right\",\n        //onDragStart: function (e, $el, opt) {},\n        onDragEnd: function (e, $el, opt) {\n            cy.resize();\n        }\n    });*/\n}\n\nfunction build_cola_layout( opts ) {\n    var cola_params = {\n        name: \"cola\",\n        animate: true,\n        randomize: true,\n        padding: 100,\n        fit: false,\n        maxSimulationTime: 1500\n    };\n    var i = 0;\n    if (opts !== undefined) {\n        opts.forEach(function(opt) {\n           cola_params[i] = opts[i];\n           ++i;\n        });\n    }\n    return cy.makeLayout( cola_params );\n}\n\n\nfunction loadJSON(json_value) {\n    json = sadface.import_json(json_value);\n    localStorage.setItem(\"state\",JSON.stringify(sadface.get_sd()));\n    current_sadface_doc = JSON.stringify(sadface.get_sd());\n    //load any sources in the stored diagram state\n    window.onload = function () {\n        loadTabs(json.resources);\n    };\n    cy_data = sadface.export_cytoscape(json);\n    if(cy !== null)\n    {\n        cy.elements().remove();\n        cy.json({elements: JSON.parse(cy_data)});\n        redraw_visualisation();\n    }\n}\n\nfunction loadTabs(tabs) {\n    tabs.forEach(function(tab) {\n       sadface.load_tab(tab);\n    });\n}\n\n\n/*\n *\n * Model Manipulation Functions\n *\n * */\n\nfunction add_new_atom_node(content) {\n    var meta = {\"hello\":\"world\"};\n    var new_atom = sadface.add_atom(content);\n    var atom_id = new_atom.id;\n    if (focused != null) {\n        sadface.add_source(atom_id, focused.id, content, 0, 0);\n    }\n    if (position == null) {\n        position = {\"x\": cy.width()/2, \"y\": cy.height()/2};\n    }\n    cy.add([\n        {group: \"nodes\", data: {id: atom_id.toString(),\n            content: content, type: \"atom\", typeshape: \"roundrectangle\", metadata: meta }, \n            classes: \"atom-label\", locked: false, renderedPosition: position}\n    ]);\n    sadface.node = cy.getElementById(atom_id.toString() );\n    sadface.node.qtip({\n        content: function(){return 'ID: '+this.id()},\n        position: {\n            my: \"top center\",\n            at: \"bottom center\"\n        },\n        style: {\n            classes: \"qtip-bootstrap\",\n            tip: {\n                width: 16,\n                height: 8\n            }\n        }\n    });\n    position = null;\n    update_local_storage();\n}\n\nfunction get_selected_text() {\n    if(document.activeElement.tagName.toLowerCase() == \"textarea\")\n    {\n        var selectedTextArea = document.activeElement;\n        var selection = selectedTextArea.value.substring(\n            selectedTextArea.selectionStart, selectedTextArea.selectionEnd);\n        selectedTextArea.selectionStart = selectedTextArea.selectionEnd;\n    }\n    return selection;\n}\n\nfunction clear_selection() {\n    if (window.getSelection) {\n        if (window.getSelection().empty) {  // Chrome\n            window.getSelection().empty();\n        } \n        if (window.getSelection().removeAllRanges) {  // Firefox\n            window.getSelection().removeAllRanges();\n        }\n    } \n    if (document.selection) {  // IE?\n        document.selection.empty();\n    }\n}\n\nfunction set_focus(element) {\n    focused = document.getElementById(element.id);//.id;\n}\n\nfunction clear_focus(){\n    focused = null;\n}\n\nfunction update_local_storage() {\n    var undo_item = JSON.parse(current_sadface_doc);\n    undo_stack.push(undo_item);\n    redo_stack = [];\n    cm.showMenuItem(\"undo\");\n    cm.hideMenuItem(\"redo\");\n    localStorage.setItem(\"state\", JSON.stringify(sadface.get_sd()));\n    current_sadface_doc = JSON.stringify(sadface.get_sd());\n    sadface.update();\n}\n\nfunction undo() {\n    if (undo_stack.length != 0) {\n        var redo_item = sadface.get_sd();\n        redo_stack.push(redo_item);\n        sadface.state = undo_stack.pop();\n        loadJSON(JSON.stringify(sadface.state));\n        if (undo_stack.length == 0) {\n            cm.hideMenuItem(\"undo\");\n        }\n        cm.showMenuItem(\"redo\");\n    }\n}\n\nfunction redo() {\n    if (redo_stack.length != 0) {\n        var undo_item = sadface.get_sd();\n        undo_stack.push(undo_item);\n        sadface.state = redo_stack.pop();\n        loadJSON(JSON.stringify(state));\n        if (redo_stack.length == 0) {\n            cm.hideMenuItem(\"redo\");\n        }\n        cm.showMenuItem(\"undo\");\n    }\n}\n\nfunction dragover_handler(ev) {\n     ev.preventDefault();\n     ev.dataTransfer.dropEffect = \"move\";\n}\n\nfunction drop_handler(ev) {\n    ev.preventDefault();\n    position = {x: ev.clientX-280, y: ev.clientY+200};\n    var selection = get_selected_text();\n    if(selection != null || selection != undefined){\n        add_new_atom_node(selection);\n        clear_selection();\n        clear_focus();\n    }\n    else { console.log(\"Not a valid text selection.\"); }\n}\n\nfunction merge_nodes() {\n    //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n    var target;\n    var id;\n    var atom;\n    var baseNode = selected[0].target || selected[0].cyTarget;\n    var baseId = baseNode.id();\n    var baseAtom = get_atom(baseId);\n    var edge;\n    if (baseAtom.type == \"atom\") {\n        sds = get_sd();\n        var i = 0;\n        selected.forEach(function(node){\n            var j = 0;\n            if (i > 0) {\n                target = selected[i].target || selected[i].cyTarget;\n                id = target.id();\n                atom = get_atom(id);\n                if (atom.type == \"atom\") {\n                    atom.sources.forEach(function(source) {\n                        add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n                        ++j;\n                    });\n                    j = 0;\n                    sds.edges.forEach(function(edge) {\n                        if (sds.edges[j].source_id == id) {\n                            edge = add_edge(baseId,sds.edges[j].target_id);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: baseId, target: sds.edges[j].target_id } }\n                            ]);\n                        }\n                        if (sds.edges[j].target_id == id) {\n                            edge = add_edge(sds.edges[j].source_id, baseId);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: sds.edges[j].source_id, target: baseId } }\n                            ]);\n                        }\n                        ++j;\n                    });\n                delete_nodes(selected[i]);\n                } else {\n                    alert(\"cannot merge scheme nodes\");\n                }\n            }\n            ++i;\n        });\n        selected = [];\n        cm.hideMenuItem(\"merge_nodes\");\n    } else {\n        alert(\"cannot merge scheme nodes\");\n    }\n}\n\nfunction edit_atom_content() {\n    var content = document.getElementById(\"edit_atom_content\").value;\n    var atom = cy.$(\"#\"+edit_atom.id());\n    update_atom_text(edit_atom.id(), content);\n    update_local_storage();\n    atom.data(\"content\", content);\n    edit_atom = null;\n}\n\nfunction edit_atom_metadata() {\n    var atom = cy.$(\"#\"+edit_atom.id());\n    var content = document.getElementById(atom.id()+\"_metadata\").value;\n    if (JSON.parse(content)) {\n        var metadata = JSON.parse(content);\n        update_atom_metadata(atom.id(), metadata);\n        update_local_storage();\n        edit_atom=null;\n    } else {\n        alert(\"Metadata not in JSON format, unable to update\");\n    }\n}\n\nfunction edit_scheme_content() {\n    var scheme_idx = document.getElementById(\"sel2\").options.selectedIndex;\n    var content = document.getElementById(\"sel2\").options[scheme_idx].text;\n    var scheme = cy.$(\"#\"+edit_atom.id());\n    update_scheme(edit_atom.id(), content);\n    update_local_storage();\n    scheme.data(\"content\", content);\n    edit_atom = null;\n}\n\nfunction clear_local_storage() {\n    localStorage.clear();\n    window.location.reload(false);\n}\n//******************************************************\n\nfunction add_new_scheme_node() {\n    var scheme_idx = document.getElementById(\"sel1\").options.selectedIndex;\n    var scheme = document.getElementById(\"sel1\").options[scheme_idx].text;\n    var new_scheme = add_scheme(scheme);\n    var scheme_id = new_scheme.id;\n\n    cy.add([\n        {group: \"nodes\", data: {id: scheme_id.toString(),\n            content: scheme, type: \"scheme\", typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n    ]);\n    update_local_storage();\n}\n\nfunction delete_nodes(event) {\n    var target = event.target || event.cyTarget;\n    var id = target.id();\n    removed = target.remove();\n    delete_atom(id);\n    var i = 0;\n    var sds = get_sd();\n    var edges = sds.edges;\n    edges.forEach(function(edge) {\n        if (edges[i] !== undefined) {\n            if (edges[i].source_id === id || edges[i].target_id === id) {\n                delete_edge(edges[i].id);\n            }\n            ++i;\n        }\n    });\n    update_local_storage();\n}\n\nfunction redraw_visualisation() {\n    layout.stop();\n    layout.options.eles = cy.elements();\n    layout.run();\n    cy.center();\n    cy.resize();\n}\n\nfunction mp_reset()\n{\n    clear_local_storage();\n}\n\nfunction set_analyst_name()\n{\n    analyst_name = document.getElementById('analyst_name_textarea').value;\n    update_analyst_name(analyst_name);\n}\n\nfunction set_analyst_email()\n{\n    analyst_email = document.getElementById('analyst_email_textarea').value;\n    update_analyst_email(analyst_email);\n}\n\n\n\n\n\n\nclass GraphContainer extends React.Component{\n    constructor(props){\n        super(props);\n        \n\n        this.state = {\n        \t\n        }\n        this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n        }\n    \n\n\n    \n\n    initialise_monkeypuzzle(){\n          //load diagram if there is one in localStorage\n        if (localStorage.getItem(\"state\"))\n        {\n          //  this.loadJSON(localStorage.getItem(\"state\"));\n            this.initCytoscape();\n        //else use default\n        } else\n        {\n            this.setState({current_sadface_doc: this.setDefault()})\n            localStorage.setItem(\"state\", this.state.current_sadface_doc);\n         //   cy_data = export_cytoscape({import_json(current_sadface_doc)});\n            this.initCytoscape();\n        }\n    }\n\n\n\n\n   \n\n  setDefault(){\n    this.setState({\n        analyst_email: \"Default Analyst Email\",\n        analyst_name: \"Default Analsyst Name\",\n        created: this.props.now(),\n        edges:[],\n        edited: this.props.now(),\n        id: this.props.new_uuid(),\n        metadata:{},\n        nodes:[],\n        resources: [],\n\n\n\n    });\n}\n\n\n    componentDidMount(){\n        this.initialise_monkeypuzzle();\n        this.setState({\n            cy: this.cy,\n            layout: this.layout,\n            position: this.position,\n        })\n   \n    }\n\n    render(){\n        return(\n            <div id=\"cy\" ondrop=\"drop_handler(event);\" ondragover=\"dragover_handler(event);\"></div>\n        )\n    }\n}\n\n\n\n\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}