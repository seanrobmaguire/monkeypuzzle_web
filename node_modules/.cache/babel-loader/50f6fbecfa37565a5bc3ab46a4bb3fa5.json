{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar TreeBase = function () {\n  function TreeBase() {\n    this.findIter = function (data) {\n      var res = this._root;\n      var iter = this.iterator();\n\n      while (res !== null) {\n        var c = this._comparator(data, res.data);\n\n        if (c === 0) {\n          iter._cursor = res;\n          return iter;\n        } else {\n          iter._ancestors.push(res);\n\n          res = res.get_child(c > 0);\n        }\n      }\n\n      return null;\n    };\n  }\n\n  TreeBase.prototype.clear = function () {\n    this._root = null;\n    this.size = 0;\n  };\n\n  ;\n\n  TreeBase.prototype.find = function (data) {\n    var res = this._root;\n\n    while (res !== null) {\n      var c = this._comparator(data, res.data);\n\n      if (c === 0) {\n        return res.data;\n      } else {\n        res = res.get_child(c > 0);\n      }\n    }\n\n    return null;\n  };\n\n  ;\n\n  TreeBase.prototype.lowerBound = function (data) {\n    return this._bound(data, this._comparator);\n  };\n\n  ;\n\n  TreeBase.prototype.upperBound = function (data) {\n    var cmp = this._comparator;\n\n    function reverse_cmp(a, b) {\n      return cmp(b, a);\n    }\n\n    return this._bound(data, reverse_cmp);\n  };\n\n  ;\n\n  TreeBase.prototype.min = function () {\n    var res = this._root;\n\n    if (res === null) {\n      return null;\n    }\n\n    while (res.left !== null) {\n      res = res.left;\n    }\n\n    return res.data;\n  };\n\n  ;\n\n  TreeBase.prototype.max = function () {\n    var res = this._root;\n\n    if (res === null) {\n      return null;\n    }\n\n    while (res.right !== null) {\n      res = res.right;\n    }\n\n    return res.data;\n  };\n\n  ;\n\n  TreeBase.prototype.iterator = function () {\n    return new Iterator(this);\n  };\n\n  ;\n\n  TreeBase.prototype.each = function (cb) {\n    var it = this.iterator(),\n        data;\n\n    while ((data = it.next()) !== null) {\n      cb(data);\n    }\n  };\n\n  ;\n\n  TreeBase.prototype.reach = function (cb) {\n    var it = this.iterator(),\n        data;\n\n    while ((data = it.prev()) !== null) {\n      cb(data);\n    }\n  };\n\n  ;\n\n  TreeBase.prototype._bound = function (data, cmp) {\n    var cur = this._root;\n    var iter = this.iterator();\n\n    while (cur !== null) {\n      var c = this._comparator(data, cur.data);\n\n      if (c === 0) {\n        iter._cursor = cur;\n        return iter;\n      }\n\n      iter._ancestors.push(cur);\n\n      cur = cur.get_child(c > 0);\n    }\n\n    for (var i = iter._ancestors.length - 1; i >= 0; --i) {\n      cur = iter._ancestors[i];\n\n      if (cmp(data, cur.data) > 0) {\n        iter._cursor = cur;\n        iter._ancestors.length = i;\n        return iter;\n      }\n    }\n\n    iter._ancestors.length = 0;\n    return iter;\n  };\n\n  ;\n  return TreeBase;\n}();\n\nexports.TreeBase = TreeBase;\n\nvar Iterator = function () {\n  function Iterator(tree) {\n    this._tree = tree;\n    this._ancestors = [];\n    this._cursor = null;\n  }\n\n  Iterator.prototype.data = function () {\n    return this._cursor !== null ? this._cursor.data : null;\n  };\n\n  ;\n\n  Iterator.prototype.next = function () {\n    if (this._cursor === null) {\n      var root = this._tree._root;\n\n      if (root !== null) {\n        this._minNode(root);\n      }\n    } else {\n      if (this._cursor.right === null) {\n        var save;\n\n        do {\n          save = this._cursor;\n\n          if (this._ancestors.length) {\n            this._cursor = this._ancestors.pop();\n          } else {\n            this._cursor = null;\n            break;\n          }\n        } while (this._cursor.right === save);\n      } else {\n        this._ancestors.push(this._cursor);\n\n        this._minNode(this._cursor.right);\n      }\n    }\n\n    return this._cursor !== null ? this._cursor.data : null;\n  };\n\n  ;\n\n  Iterator.prototype.prev = function () {\n    if (this._cursor === null) {\n      var root = this._tree._root;\n\n      if (root !== null) {\n        this._maxNode(root);\n      }\n    } else {\n      if (this._cursor.left === null) {\n        var save;\n\n        do {\n          save = this._cursor;\n\n          if (this._ancestors.length) {\n            this._cursor = this._ancestors.pop();\n          } else {\n            this._cursor = null;\n            break;\n          }\n        } while (this._cursor.left === save);\n      } else {\n        this._ancestors.push(this._cursor);\n\n        this._maxNode(this._cursor.left);\n      }\n    }\n\n    return this._cursor !== null ? this._cursor.data : null;\n  };\n\n  ;\n\n  Iterator.prototype._minNode = function (start) {\n    while (start.left !== null) {\n      this._ancestors.push(start);\n\n      start = start.left;\n    }\n\n    this._cursor = start;\n  };\n\n  ;\n\n  Iterator.prototype._maxNode = function (start) {\n    while (start.right !== null) {\n      this._ancestors.push(start);\n\n      start = start.right;\n    }\n\n    this._cursor = start;\n  };\n\n  ;\n  return Iterator;\n}();\n\nexports.Iterator = Iterator;\n\nvar Node = function () {\n  function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n    this.red = true;\n  }\n\n  Node.prototype.get_child = function (dir) {\n    return dir ? this.right : this.left;\n  };\n\n  ;\n\n  Node.prototype.set_child = function (dir, val) {\n    if (dir) {\n      this.right = val;\n    } else {\n      this.left = val;\n    }\n  };\n\n  ;\n  return Node;\n}();\n\nvar RBTree = function (_super) {\n  __extends(RBTree, _super);\n\n  function RBTree(comparator) {\n    var _this = _super.call(this) || this;\n\n    _this._root = null;\n    _this._comparator = comparator;\n    _this.size = 0;\n    return _this;\n  }\n\n  RBTree.prototype.insert = function (data) {\n    var ret = false;\n\n    if (this._root === null) {\n      this._root = new Node(data);\n      ret = true;\n      this.size++;\n    } else {\n      var head = new Node(undefined);\n      var dir = false;\n      var last = false;\n      var gp = null;\n      var ggp = head;\n      var p = null;\n      var node = this._root;\n      ggp.right = this._root;\n\n      while (true) {\n        if (node === null) {\n          node = new Node(data);\n          p.set_child(dir, node);\n          ret = true;\n          this.size++;\n        } else if (RBTree.is_red(node.left) && RBTree.is_red(node.right)) {\n          node.red = true;\n          node.left.red = false;\n          node.right.red = false;\n        }\n\n        if (RBTree.is_red(node) && RBTree.is_red(p)) {\n          var dir2 = ggp.right === gp;\n\n          if (node === p.get_child(last)) {\n            ggp.set_child(dir2, RBTree.single_rotate(gp, !last));\n          } else {\n            ggp.set_child(dir2, RBTree.double_rotate(gp, !last));\n          }\n        }\n\n        var cmp = this._comparator(node.data, data);\n\n        if (cmp === 0) {\n          break;\n        }\n\n        last = dir;\n        dir = cmp < 0;\n\n        if (gp !== null) {\n          ggp = gp;\n        }\n\n        gp = p;\n        p = node;\n        node = node.get_child(dir);\n      }\n\n      this._root = head.right;\n    }\n\n    this._root.red = false;\n    return ret;\n  };\n\n  ;\n\n  RBTree.prototype.remove = function (data) {\n    if (this._root === null) {\n      return false;\n    }\n\n    var head = new Node(undefined);\n    var node = head;\n    node.right = this._root;\n    var p = null;\n    var gp = null;\n    var found = null;\n    var dir = true;\n\n    while (node.get_child(dir) !== null) {\n      var last = dir;\n      gp = p;\n      p = node;\n      node = node.get_child(dir);\n\n      var cmp = this._comparator(data, node.data);\n\n      dir = cmp > 0;\n\n      if (cmp === 0) {\n        found = node;\n      }\n\n      if (!RBTree.is_red(node) && !RBTree.is_red(node.get_child(dir))) {\n        if (RBTree.is_red(node.get_child(!dir))) {\n          var sr = RBTree.single_rotate(node, dir);\n          p.set_child(last, sr);\n          p = sr;\n        } else if (!RBTree.is_red(node.get_child(!dir))) {\n          var sibling = p.get_child(!last);\n\n          if (sibling !== null) {\n            if (!RBTree.is_red(sibling.get_child(!last)) && !RBTree.is_red(sibling.get_child(last))) {\n              p.red = false;\n              sibling.red = true;\n              node.red = true;\n            } else {\n              var dir2 = gp.right === p;\n\n              if (RBTree.is_red(sibling.get_child(last))) {\n                gp.set_child(dir2, RBTree.double_rotate(p, last));\n              } else if (RBTree.is_red(sibling.get_child(!last))) {\n                gp.set_child(dir2, RBTree.single_rotate(p, last));\n              }\n\n              var gpc = gp.get_child(dir2);\n              gpc.red = true;\n              node.red = true;\n              gpc.left.red = false;\n              gpc.right.red = false;\n            }\n          }\n        }\n      }\n    }\n\n    if (found !== null) {\n      found.data = node.data;\n      p.set_child(p.right === node, node.get_child(node.left === null));\n      this.size--;\n    }\n\n    this._root = head.right;\n\n    if (this._root !== null) {\n      this._root.red = false;\n    }\n\n    return found !== null;\n  };\n\n  ;\n\n  RBTree.is_red = function (node) {\n    return node !== null && node.red;\n  };\n\n  RBTree.single_rotate = function (root, dir) {\n    var save = root.get_child(!dir);\n    root.set_child(!dir, save.get_child(dir));\n    save.set_child(dir, root);\n    root.red = true;\n    save.red = false;\n    return save;\n  };\n\n  RBTree.double_rotate = function (root, dir) {\n    root.set_child(!dir, RBTree.single_rotate(root.get_child(!dir), !dir));\n    return RBTree.single_rotate(root, dir);\n  };\n\n  return RBTree;\n}(TreeBase);\n\nexports.RBTree = RBTree;","map":null,"metadata":{},"sourceType":"script"}