{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport cytoscape from 'cytoscape';\nvar cy = null;\n\nclass Cytoscape extends Component {\n  constructor(props) {\n    super(props);\n    this.initCytoscape = this.initCytoscape.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n  }\n\n  initCytoscape() {\n    console.log(\"test\");\n    cy = cytoscape({\n      container: document.getElementById('cy'),\n      elements: {\n        nodes: [{\n          data: {\n            id: 'cat'\n          }\n        }, {\n          data: {\n            id: 'bird'\n          }\n        }, {\n          data: {\n            id: 'ladybug'\n          }\n        }, {\n          data: {\n            id: 'aphid'\n          }\n        }, {\n          data: {\n            id: 'rose'\n          }\n        }, {\n          data: {\n            id: 'grasshopper'\n          }\n        }, {\n          data: {\n            id: 'plant'\n          }\n        }, {\n          data: {\n            id: 'wheat'\n          }\n        }],\n        edges: [{\n          data: {\n            source: 'cat',\n            target: 'bird'\n          }\n        }, {\n          data: {\n            source: 'bird',\n            target: 'ladybug'\n          }\n        }, {\n          data: {\n            source: 'bird',\n            target: 'grasshopper'\n          }\n        }, {\n          data: {\n            source: 'grasshopper',\n            target: 'plant'\n          }\n        }, {\n          data: {\n            source: 'grasshopper',\n            target: 'wheat'\n          }\n        }, {\n          data: {\n            source: 'ladybug',\n            target: 'aphid'\n          }\n        }, {\n          data: {\n            source: 'aphid',\n            target: 'rose'\n          }\n        }]\n      },\n      style: [{\n        selector: \"node\",\n        style: {\n          \"content\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          \"width\": \"auto\",\n          \"height\": \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    });\n    this.layout = this.build_cola_layout();\n    this.layout.run();\n    this.cy.edgehandles({\n      toggleOffOnLeave: true,\n      handleNodes: \"node\",\n      handleSize: 10,\n      handleColor: \"orange\",\n      handleHitThreshold: 8,\n      handleLineWidth: 5,\n      //handleLineType: \"flat\",\n      handleOutlineColor: \"grey\",\n      edgeType: function () {\n        return \"flat\";\n      },\n      complete: function (event, sourceNode, targetNode, addedEles) {\n        if (targetNode.length !== 0) {\n          var source_id = targetNode[0].source().id();\n          var target_id = targetNode[0].target().id(); //get the mid point between source node and target node\n\n          var source_position = targetNode[0].source().position();\n          var target_position = targetNode[0].target().position();\n          position = {};\n          position.x = (source_position.x + target_position.x) / 2;\n          position.y = (source_position.y + target_position.y) / 2;\n\n          if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\") {\n            var scheme = add_scheme(\"Support\");\n            var scheme_id = scheme.id;\n            var scheme_content = scheme.name; //remove the automatically generated edge\n\n            targetNode.remove();\n            cy.add([{\n              group: \"nodes\",\n              data: {\n                id: scheme_id.toString(),\n                content: scheme_content,\n                typeshape: \"diamond\"\n              },\n              classes: \"scheme-label\",\n              locked: false,\n              position: position\n            }]);\n            var edge1 = add_edge(source_id, scheme_id);\n            var edge2 = add_edge(scheme_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge1.id.toString(),\n                source: source_id,\n                target: scheme_id\n              }\n            }, {\n              group: \"edges\",\n              data: {\n                id: edge2.id.toString(),\n                source: scheme_id,\n                target: target_id\n              }\n            }]);\n          } else {\n            targetNode.remove();\n            var edge = add_edge(source_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge.id.toString(),\n                source: source_id,\n                target: target_id\n              }\n            }]);\n          }\n\n          update_local_storage();\n        } else {\n          targetNode.remove();\n        }\n      }\n    });\n  }\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return this.cy.makeLayout(cola_params);\n  }\n\n  componentDidMount() {\n    this.initCytoscape();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"cy\",\n      style: {\n        height: '600px',\n        width: '600px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Cytoscape;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js"],"names":["React","Component","ReactDOM","cytoscape","cy","Cytoscape","constructor","props","initCytoscape","bind","build_cola_layout","console","log","container","document","getElementById","elements","nodes","data","id","edges","source","target","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","layout","run","edgehandles","toggleOffOnLeave","handleNodes","handleSize","handleColor","handleHitThreshold","handleLineWidth","handleOutlineColor","edgeType","complete","event","sourceNode","targetNode","addedEles","length","source_id","target_id","source_position","position","target_position","x","y","type","scheme","add_scheme","scheme_id","scheme_content","name","remove","add","group","toString","content","typeshape","classes","locked","edge1","add_edge","edge2","edge","update_local_storage","opts","cola_params","animate","randomize","padding","fit","maxSimulationTime","i","undefined","forEach","opt","makeLayout","componentDidMount","render","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,IAAIC,EAAE,GAAE,IAAR;;AAGA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAChCK,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACD;;AAEDD,EAAAA,aAAa,GAAE;AACjBG,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACGR,IAAAA,EAAE,GAAGD,SAAS,CAAC;AACdU,MAAAA,SAAS,EAAEC,QAAQ,CAACC,cAAT,CAAwB,IAAxB,CADG;AAEbC,MAAAA,QAAQ,EAAE;AACCC,QAAAA,KAAK,EAAE,CACH;AAAEC,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SADG,EAEH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SAFG,EAGH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SAHG,EAIH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SAJG,EAKH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SALG,EAMH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SANG,EAOH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SAPG,EAQH;AAAED,UAAAA,IAAI,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAAR,SARG,CADR;AAWCC,QAAAA,KAAK,EAAE,CACH;AAAEF,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,KAAV;AAAiBC,YAAAA,MAAM,EAAE;AAAzB;AAAR,SADG,EAEH;AAAEJ,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,MAAV;AAAkBC,YAAAA,MAAM,EAAE;AAA1B;AAAR,SAFG,EAGH;AAAEJ,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,MAAV;AAAkBC,YAAAA,MAAM,EAAE;AAA1B;AAAR,SAHG,EAIH;AAAEJ,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,aAAV;AAAyBC,YAAAA,MAAM,EAAE;AAAjC;AAAR,SAJG,EAKH;AAAEJ,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,aAAV;AAAyBC,YAAAA,MAAM,EAAE;AAAjC;AAAR,SALG,EAMH;AAAEJ,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,SAAV;AAAqBC,YAAAA,MAAM,EAAE;AAA7B;AAAR,SANG,EAOH;AAAEJ,UAAAA,IAAI,EAAE;AAAEG,YAAAA,MAAM,EAAE,OAAV;AAAmBC,YAAAA,MAAM,EAAE;AAA3B;AAAR,SAPG;AAXR,OAFG;AAwBVC,MAAAA,KAAK,EAAC,CACF;AAAIC,QAAAA,QAAQ,EAAE,MAAd;AACID,QAAAA,KAAK,EAAE;AACH,qBAAW,eADR;AAEH,0BAAgB,GAFb;AAGH,mBAAU,MAHP;AAIH,oBAAW,MAJR;AAKH,yBAAe,QALZ;AAMH,yBAAe,OANZ;AAOH,gCAAsB,MAPnB;AAQH,gCAAsB;AARnB;AADX,OADE,EAaF;AAAIC,QAAAA,QAAQ,EAAE,aAAd;AACID,QAAAA,KAAK,EAAE;AACH,mBAAQ;AADL;AADX,OAbE,EAkBF;AAAIC,QAAAA,QAAQ,EAAE,2BAAd;AACID,QAAAA,KAAK,EAAE;AACH,8BAAoB;AADjB;AADX,OAlBE,EAuBF;AACIC,QAAAA,QAAQ,EAAE,+CADd;AAEID,QAAAA,KAAK,EAAE;AACH,8BAAoB;AADjB;AAFX,OAvBE,EA6BF;AACIC,QAAAA,QAAQ,EAAE,8CADd;AAEID,QAAAA,KAAK,EAAE;AACH,8BAAoB;AADjB;AAFX,OA7BE,EAmCF;AAAIC,QAAAA,QAAQ,EAAE,MAAd;AACID,QAAAA,KAAK,EAAE;AACH,wBAAc,SADX;AAEH,gCAAsB,UAFnB;AAGH,gCAAsB,SAHnB;AAIH,yBAAe;AAJZ;AADX,OAnCE,EA2CF;AAAIC,QAAAA,QAAQ,EAAE,WAAd;AACID,QAAAA,KAAK,EAAE;AACH,0BAAe,GADZ;AAEH,0BAAe,OAFZ;AAGH,8BAAoB;AAHjB;AADX,OA3CE,EAkDF;AAAIC,QAAAA,QAAQ,EAAE,aAAd;AACID,QAAAA,KAAK,EAAC;AACF,uBAAa,MADX;AAEF,4BAAkB;AAFhB;AADV,OAlDE,EAwDF;AAAIC,QAAAA,QAAQ,EAAE,eAAd;AACID,QAAAA,KAAK,EAAC;AACF,uBAAa,MADX;AAEF,4BAAkB;AAFhB;AADV,OAxDE,CAxBI;AAuFNE,MAAAA,mBAAmB,EAAE,KAvFf;AAwFNC,MAAAA,eAAe,EAAE,KAxFX;AAyFNC,MAAAA,aAAa,EAAE,QAzFT;AA0FNC,MAAAA,OAAO,EAAE,GA1FH;AA2FNC,MAAAA,OAAO,EAAE;AA3FH,KAAD,CAAd;AA+FA,SAAKC,MAAL,GAAc,KAAKpB,iBAAL,EAAd;AACC,SAAKoB,MAAL,CAAYC,GAAZ;AAEA,SAAK3B,EAAL,CAAQ4B,WAAR,CAAoB;AAChBC,MAAAA,gBAAgB,EAAE,IADF;AAEhBC,MAAAA,WAAW,EAAE,MAFG;AAGhBC,MAAAA,UAAU,EAAE,EAHI;AAIhBC,MAAAA,WAAW,EAAE,QAJG;AAKhBC,MAAAA,kBAAkB,EAAE,CALJ;AAMhBC,MAAAA,eAAe,EAAE,CAND;AAOhB;AACAC,MAAAA,kBAAkB,EAAE,MARJ;AAShBC,MAAAA,QAAQ,EAAE,YAAU;AAAE,eAAO,MAAP;AAAgB,OATtB;AAUhBC,MAAAA,QAAQ,EAAE,UAASC,KAAT,EAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAkD;AACxD,YAAID,UAAU,CAACE,MAAX,KAAsB,CAA1B,EAA6B;AACzB,cAAIC,SAAS,GAAGH,UAAU,CAAC,CAAD,CAAV,CAAcvB,MAAd,GAAuBF,EAAvB,EAAhB;AACA,cAAI6B,SAAS,GAAGJ,UAAU,CAAC,CAAD,CAAV,CAActB,MAAd,GAAuBH,EAAvB,EAAhB,CAFyB,CAIzB;;AACA,cAAI8B,eAAe,GAAGL,UAAU,CAAC,CAAD,CAAV,CAAcvB,MAAd,GAAuB6B,QAAvB,EAAtB;AACA,cAAIC,eAAe,GAAGP,UAAU,CAAC,CAAD,CAAV,CAActB,MAAd,GAAuB4B,QAAvB,EAAtB;AAEAA,UAAAA,QAAQ,GAAG,EAAX;AACAA,UAAAA,QAAQ,CAACE,CAAT,GAAc,CAACH,eAAe,CAACG,CAAhB,GAAoBD,eAAe,CAACC,CAArC,IAAwC,CAAtD;AACAF,UAAAA,QAAQ,CAACG,CAAT,GAAc,CAACJ,eAAe,CAACI,CAAhB,GAAoBF,eAAe,CAACE,CAArC,IAAwC,CAAtD;;AAEA,cAAIT,UAAU,CAAC,CAAD,CAAV,CAAcvB,MAAd,GAAuBH,IAAvB,GAA8BoC,IAA9B,IAAsC,MAAtC,IAAgDV,UAAU,CAAC,CAAD,CAAV,CAActB,MAAd,GAAuBJ,IAAvB,GAA8BoC,IAA9B,IAAsC,MAA1F,EACA;AACI,gBAAIC,MAAM,GAAGC,UAAU,CAAC,SAAD,CAAvB;AACA,gBAAIC,SAAS,GAAGF,MAAM,CAACpC,EAAvB;AACA,gBAAIuC,cAAc,GAAGH,MAAM,CAACI,IAA5B,CAHJ,CAII;;AACAf,YAAAA,UAAU,CAACgB,MAAX;AACAxD,YAAAA,EAAE,CAACyD,GAAH,CAAO,CACH;AAACC,cAAAA,KAAK,EAAE,OAAR;AAAiB5C,cAAAA,IAAI,EAAE;AAACC,gBAAAA,EAAE,EAAEsC,SAAS,CAACM,QAAV,EAAL;AACnBC,gBAAAA,OAAO,EAAEN,cADU;AACMO,gBAAAA,SAAS,EAAE;AADjB,eAAvB;AACqDC,cAAAA,OAAO,EAAE,cAD9D;AAC8EC,cAAAA,MAAM,EAAE,KADtF;AAC6FjB,cAAAA,QAAQ,EAAEA;AADvG,aADG,CAAP;AAIA,gBAAIkB,KAAK,GAAGC,QAAQ,CAACtB,SAAD,EAAYU,SAAZ,CAApB;AACA,gBAAIa,KAAK,GAAGD,QAAQ,CAACZ,SAAD,EAAYT,SAAZ,CAApB;AACA5C,YAAAA,EAAE,CAACyD,GAAH,CAAO,CACL;AAAEC,cAAAA,KAAK,EAAE,OAAT;AAAkB5C,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,EAAE,EAAEiD,KAAK,CAACjD,EAAN,CAAS4C,QAAT,EAAN;AAA2B1C,gBAAAA,MAAM,EAAE0B,SAAnC;AAA8CzB,gBAAAA,MAAM,EAAEmC;AAAtD;AAAxB,aADK,EAEL;AAAEK,cAAAA,KAAK,EAAE,OAAT;AAAkB5C,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,EAAE,EAAEmD,KAAK,CAACnD,EAAN,CAAS4C,QAAT,EAAN;AAA2B1C,gBAAAA,MAAM,EAAEoC,SAAnC;AAA8CnC,gBAAAA,MAAM,EAAE0B;AAAtD;AAAxB,aAFK,CAAP;AAIH,WAjBD,MAiBO;AACHJ,YAAAA,UAAU,CAACgB,MAAX;AACA,gBAAIW,IAAI,GAAGF,QAAQ,CAACtB,SAAD,EAAYC,SAAZ,CAAnB;AACA5C,YAAAA,EAAE,CAACyD,GAAH,CAAO,CACL;AAAEC,cAAAA,KAAK,EAAE,OAAT;AAAkB5C,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,EAAE,EAAEoD,IAAI,CAACpD,EAAL,CAAQ4C,QAAR,EAAN;AAA0B1C,gBAAAA,MAAM,EAAE0B,SAAlC;AAA6CzB,gBAAAA,MAAM,EAAE0B;AAArD;AAAxB,aADK,CAAP;AAGH;;AACDwB,UAAAA,oBAAoB;AACvB,SArCD,MAqCO;AACH5B,UAAAA,UAAU,CAACgB,MAAX;AACH;AACJ;AAnDe,KAApB;AAsDD;;AAEDlD,EAAAA,iBAAiB,CAAE+D,IAAF,EAAS;AACxB,QAAIC,WAAW,GAAG;AACdf,MAAAA,IAAI,EAAE,MADQ;AAEdgB,MAAAA,OAAO,EAAE,IAFK;AAGdC,MAAAA,SAAS,EAAE,IAHG;AAIdC,MAAAA,OAAO,EAAE,GAJK;AAKdC,MAAAA,GAAG,EAAE,KALS;AAMdC,MAAAA,iBAAiB,EAAE;AANL,KAAlB;AAQA,QAAIC,CAAC,GAAG,CAAR;;AACA,QAAIP,IAAI,KAAKQ,SAAb,EAAwB;AACpBR,MAAAA,IAAI,CAACS,OAAL,CAAa,UAASC,GAAT,EAAc;AACxBT,QAAAA,WAAW,CAACM,CAAD,CAAX,GAAiBP,IAAI,CAACO,CAAD,CAArB;AACA,UAAEA,CAAF;AACF,OAHD;AAIH;;AACD,WAAO,KAAK5E,EAAL,CAAQgF,UAAR,CAAoBV,WAApB,CAAP;AACH;;AACCW,EAAAA,iBAAiB,GAAE;AAClB,SAAK7E,aAAL;AACA;;AAEA8E,EAAAA,MAAM,GAAE;AAIP,WACC;AAAK,MAAA,EAAE,EAAC,IAAR;AAAa,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAC,OAAR;AAAiBC,QAAAA,KAAK,EAAC;AAAvB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAGC;;AAhM6B;;AAmM9B,eAAenF,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport cytoscape from 'cytoscape';\n\nvar cy =null;\n\n\nclass Cytoscape extends Component {\n  constructor(props){\n    super(props);\n    this.initCytoscape = this.initCytoscape.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n  }\n\n  initCytoscape(){\nconsole.log(\"test\");\n  \tcy = cytoscape({\n  \t\tcontainer: document.getElementById('cy'),\n  \t\t elements: {\n                nodes: [\n                    { data: { id: 'cat' } },\n                    { data: { id: 'bird' } },\n                    { data: { id: 'ladybug' } },\n                    { data: { id: 'aphid' } },\n                    { data: { id: 'rose' } },\n                    { data: { id: 'grasshopper' } },\n                    { data: { id: 'plant' } },\n                    { data: { id: 'wheat' } }\n                ],\n                edges: [\n                    { data: { source: 'cat', target: 'bird' } },\n                    { data: { source: 'bird', target: 'ladybug' } },\n                    { data: { source: 'bird', target: 'grasshopper' } },\n                    { data: { source: 'grasshopper', target: 'plant' } },\n                    { data: { source: 'grasshopper', target: 'wheat' } },\n                    { data: { source: 'ladybug', target: 'aphid' } },\n                    { data: { source: 'aphid', target: 'rose' } }\n                ]\n            },\n\n        style:[\n            {   selector: \"node\", \n                style: {\n                    \"content\": \"data(content)\",\n                    \"text-opacity\": 0.7,\n                    \"width\" : \"auto\",\n                    \"height\" : \"auto\",\n                    \"text-valign\": \"bottom\",\n                    \"text-halign\": \"right\",\n                    \"text-outline-color\": \"#eee\",\n                    \"text-outline-width\": 1\n              }\n            },\n            {   selector: \"[typeshape]\", \n                style: {\n                    \"shape\":\"data(typeshape)\"\n                }\n            },\n            {   selector: \"node[typeshape='diamond']\", \n                style: {\n                    'background-color': '#CC9900'\n                }\n            },\n            {\n                selector: \"node[typeshape='diamond'][content='Conflict']\",\n                style: {\n                    'background-color': 'red'\n                }\n            },\n            {\n                selector: \"node[typeshape='diamond'][content='Support']\",\n                style: {\n                    'background-color': 'green'\n                }\n            },\n            {   selector: \"edge\", \n                style: {\n                    \"line-color\": \"#9dbaea\",\n                    \"target-arrow-shape\": \"triangle\",\n                    \"target-arrow-color\": \"#9dbaea\",\n                    \"curve-style\": \"bezier\"\n                }\n            },\n            {   selector: \":selected\", \n                style: {\n                    \"border-width\":\"1\",\n                    \"border-color\":\"black\",\n                    \"background-color\": \"#3399CC\"\n                }\n            },\n            {   selector: \".atom-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n            },\n            {   selector: \".scheme-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n            }\n            ],\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n                \n    });\n\n  \tthis.layout = this.build_cola_layout();\n    this.layout.run();\n\n    this.cy.edgehandles({\n        toggleOffOnLeave: true,\n        handleNodes: \"node\",\n        handleSize: 10,\n        handleColor: \"orange\",\n        handleHitThreshold: 8,\n        handleLineWidth: 5,\n        //handleLineType: \"flat\",\n        handleOutlineColor: \"grey\",\n        edgeType: function(){ return \"flat\"; },\n        complete: function(event, sourceNode, targetNode, addedEles){\n            if (targetNode.length !== 0) {\n                var source_id = targetNode[0].source().id();\n                var target_id = targetNode[0].target().id();\n\n                //get the mid point between source node and target node\n                var source_position = targetNode[0].source().position();\n                var target_position = targetNode[0].target().position();\n\n                position = {};\n                position.x = ((source_position.x + target_position.x)/2);\n                position.y = ((source_position.y + target_position.y)/2);\n\n                if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\")\n                {\n                    var scheme = add_scheme(\"Support\");\n                    var scheme_id = scheme.id;\n                    var scheme_content = scheme.name;\n                    //remove the automatically generated edge\n                    targetNode.remove();\n                    cy.add([\n                        {group: \"nodes\", data: {id: scheme_id.toString(),\n                            content: scheme_content, typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n                    ]);\n                    var edge1 = add_edge(source_id, scheme_id);\n                    var edge2 = add_edge(scheme_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge1.id.toString(), source: source_id, target: scheme_id } },\n                      { group: \"edges\", data: { id: edge2.id.toString(), source: scheme_id, target: target_id } }\n                    ]);\n                } else {\n                    targetNode.remove();\n                    var edge = add_edge(source_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge.id.toString(), source: source_id, target: target_id } }\n                    ]);\n                }\n                update_local_storage();\n            } else {\n                targetNode.remove();\n            }\n        }\n    });\n\n  }\n\n  build_cola_layout( opts ) {\n    var cola_params = {\n        name: \"cola\",\n        animate: true,\n        randomize: true,\n        padding: 100,\n        fit: false,\n        maxSimulationTime: 1500\n    };\n    var i = 0;\n    if (opts !== undefined) {\n        opts.forEach(function(opt) {\n           cola_params[i] = opts[i];\n           ++i;\n        });\n    }\n    return this.cy.makeLayout( cola_params );\n}\n  componentDidMount(){\n  \tthis.initCytoscape();\n  }\n\n   render(){\n\n  \n\n    return (\n    \t<div id=\"cy\" style={{height:'600px', width:'600px'}}></div>\n    );\n    }\n    }\n\n    export default Cytoscape;"]},"metadata":{},"sourceType":"module"}