{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport cytoscape from 'cytoscape';\nimport edgehandles from 'cytoscape-edgehandles';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\nimport $ from 'jquery';\nimport { sd, add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source } from '../lib/Sadface';\nimport Modal from './Modal';\nimport modalData from './ModalData';\nvar ModalData = modalData.data;\ncytoscape.use(edgehandles);\ncytoscape.use(contextMenus, $);\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\" + analyst_email + \"\\\",\\\"analyst_name\\\":\\\"\" + analyst_email + \"\\\",\\\"created\\\":\\\"\" + created_date + \"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\" + edited_date + \"\\\",\\\"id\\\":\\\"\" + document_id + \"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\nclass Cytoscape extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cy_data: this.props.cy_data\n    };\n    this.initCytoscape = this.initCytoscape.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n    this.edit_atom_content = this.edit_atom_content.bind(this);\n    this.delete_nodes = this.delete_nodes.bind(this);\n    this.update_local_storage = this.update_local_storage.bind(this);\n    this.redraw_visualisation = this.redraw_visualisation.bind(this);\n    this.undo = this.undo.bind(this);\n    this.redo = this.redo.bind(this);\n    this.merge_nodes = this.merge_nodes.bind(this);\n    this.delete_atom = this.delete_atom.bind(this); //    this.dragover_handler = this.dragover_handler.bind(this);\n  }\n\n  initCytoscape() {\n    console.log(\"initCyto\");\n    console.log(this.state.cy_data);\n    cy = cytoscape({\n      container: document.getElementById('cy'),\n      elements: this.state.cy_data,\n      style: [{\n        selector: \"node\",\n        style: {\n          \"label\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          \"width\": \"auto\",\n          \"height\": \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][name='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    });\n    layout = this.build_cola_layout();\n    layout.run();\n    cy.edgehandles({\n      toggleOffOnLeave: true,\n      handleNodes: \"node\",\n      handleSize: 10,\n      handleColor: \"orange\",\n      handleHitThreshold: 8,\n      handleLineWidth: 5,\n      //handleLineType: \"flat\",\n      handleOutlineColor: \"pink\",\n      edgeType: function () {\n        return \"flat\";\n      },\n      complete: function (event, sourceNode, targetNode, addedEles) {\n        if (targetNode.length !== 0) {\n          var source_id = targetNode[0].source().id();\n          var target_id = targetNode[0].target().id(); //get the mid point between source node and target node\n\n          var source_position = targetNode[0].source().position();\n          var target_position = targetNode[0].target().position();\n          position = {};\n          position.x = (source_position.x + target_position.x) / 2;\n          position.y = (source_position.y + target_position.y) / 2;\n\n          if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\") {\n            var scheme = add_scheme(\"Support\");\n            var scheme_id = scheme.id;\n            var scheme_content = scheme.name; //remove the automatically generated edge\n\n            targetNode.remove();\n            cy.add([{\n              group: \"nodes\",\n              data: {\n                id: scheme_id.toString(),\n                content: scheme_content,\n                typeshape: \"diamond\"\n              },\n              classes: \"scheme-label\",\n              locked: false,\n              position: position\n            }]);\n            var edge1 = add_edge(source_id, scheme_id);\n            var edge2 = add_edge(scheme_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge1.id.toString(),\n                source: source_id,\n                target: scheme_id\n              }\n            }, {\n              group: \"edges\",\n              data: {\n                id: edge2.id.toString(),\n                source: scheme_id,\n                target: target_id\n              }\n            }]);\n          } else {\n            targetNode.remove();\n            var edge = add_edge(source_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge.id.toString(),\n                source: source_id,\n                target: target_id\n              }\n            }]);\n          }\n\n          this.update_local_storage();\n        } else {\n          targetNode.remove();\n        }\n      }\n    });\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n\n    cm = cy.contextMenus({\n      menuItems: [{\n        id: \"edit-content\",\n        title: \"edit content\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget; //    $(\"#editContentModal\").modal(\"show\");\n          //  $(\"#edit_atom_content\").val(target.data().content);\n\n          this.edit_atom = target;\n        },\n        hasTrailingDivider: false\n      }, {\n        id: \"edit-metadata\",\n        title: \"edit metadata\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          //  $(\"#edit_metadata\").empty();\n          var target = event.target || event.cyTarget;\n          var atom = get_atom(target.id()); //  var textArea = $(\"<textarea id=\\\"\"+target.id()+\"_metadata\\\" class=\\\"form-control\\\" rows=\\\"2\\\" >\"+JSON.stringify(atom.metadata)+\"</textarea>\");\n          //   $(\"#edit_metadata\").append(textArea);\n          //   $(\"#editMetadataModal\").modal(\"show\");\n\n          edit_atom = target;\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"change-scheme\",\n        title: \"change scheme\",\n        selector: \"node[typeshape = \\\"diamond\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget; //                $(\"#editSchemeModal\").modal(\"show\");\n\n          edit_atom = target;\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"remove\",\n        title: \"remove\",\n        selector: \"node, edge\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n\n          if (selected.length !== 0) {\n            selected.forEach(function (node) {\n              this.delete_nodes(node);\n            });\n            selected = [];\n          } else {\n            if (target.data().type == \"atom\") {\n              this.delete_nodes(event);\n              target.remove();\n            } else if (target.data().typeshape == \"diamond\") {\n              this.delete_nodes(event);\n              target.remove();\n            } else {\n              this.delete_edge(target.id());\n              this.update_local_storage();\n              target.remove();\n            }\n          }\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"add-atom\",\n        content: \"add atom\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          position = event.renderedPosition; //                $(\"#newAtomModal\").modal(\"show\");\n        }\n      }, {\n        id: \"add-scheme\",\n        content: \"add scheme\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          position = event.position || event.cyPosition;\n          document.getElementById(\"sel1\").options.selectedIndex = 0; //                $(\"#newSchemeModal\").modal(\"show\");\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"redraw\",\n        content: \"redraw\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.redraw_visualisation();\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"undo\",\n        content: \"undo\",\n        selector: \"node, edge\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.undo();\n        },\n        hasTrailingDivider: false\n      }, {\n        id: \"redo\",\n        content: \"redo\",\n        selector: \"node, edge\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.redo();\n\n          if (redo_stack == []) {\n            cm.hideMenuItem(\"redo\");\n          }\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"merge_nodes\",\n        content: \"merge nodes\",\n        selector: \"node\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.merge_nodes();\n        }\n      }]\n    });\n  }\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return cy.makeLayout(cola_params);\n  }\n\n  edit_atom_content() {\n    var content = document.getElementById(\"edit_atom_content\").value;\n    var atom = cy.$(\"#\" + edit_atom.id());\n    update_atom_text(edit_atom.id(), content);\n    this.update_local_storage();\n    atom.data(\"content\", content);\n    edit_atom = null;\n  }\n\n  delete_nodes(event) {\n    var target = event.target || event.cyTarget;\n    var id = target.id(); //removed = target.remove();\n\n    this.delete_atom(id);\n    var i = 0;\n    var sds = get_sd();\n    var edges = sds.edges;\n    edges.forEach(function (edge) {\n      if (edges[i] !== undefined) {\n        if (edges[i].source_id === id || edges[i].target_id === id) {\n          delete_edge(edges[i].id);\n        }\n\n        ++i;\n      }\n    });\n    this.update_local_storage();\n  }\n\n  update_local_storage() {\n    var undo_item = JSON.parse(current_sadface_doc);\n    undo_stack.push(undo_item);\n    redo_stack = [];\n    cm.showMenuItem(\"undo\");\n    cm.hideMenuItem(\"redo\");\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    current_sadface_doc = JSON.stringify(get_sd());\n    update();\n  }\n\n  redraw_visualisation() {\n    layout.stop();\n    layout.options.eles = cy.elements();\n    layout.run();\n    cy.center();\n    cy.resize();\n  }\n\n  undo() {\n    if (undo_stack.length != 0) {\n      var redo_item = get_sd();\n      redo_stack.push(redo_item);\n      var state = undo_stack.pop();\n      this.loadJSON(JSON.stringify(state));\n\n      if (undo_stack.length == 0) {\n        cm.hideMenuItem(\"undo\");\n      }\n\n      cm.showMenuItem(\"redo\");\n    }\n  }\n\n  redo() {\n    if (redo_stack.length != 0) {\n      var undo_item = get_sd();\n      undo_stack.push(undo_item);\n      var state = redo_stack.pop();\n      this.loadJSON(JSON.stringify(state));\n\n      if (redo_stack.length == 0) {\n        cm.hideMenuItem(\"redo\");\n      }\n\n      cm.showMenuItem(\"undo\");\n    }\n  }\n\n  merge_nodes() {\n    //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n    var target;\n    var id;\n    var atom;\n    var baseNode = selected[0].target || selected[0].cyTarget;\n    var baseId = baseNode.id();\n    var baseAtom = get_atom(baseId);\n    var edge;\n\n    if (baseAtom.type == \"atom\") {\n      var sds = get_sd();\n      var i = 0;\n      selected.forEach(function (node) {\n        var j = 0;\n\n        if (i > 0) {\n          target = selected[i].target || selected[i].cyTarget;\n          id = target.id();\n          atom = get_atom(id);\n\n          if (atom.type == \"atom\") {\n            atom.sources.forEach(function (source) {\n              add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n              ++j;\n            });\n            j = 0;\n            sds.edges.forEach(function (edge) {\n              if (sds.edges[j].source_id == id) {\n                edge = add_edge(baseId, sds.edges[j].target_id);\n                cy.add([{\n                  group: \"edges\",\n                  data: {\n                    id: edge.id.toString(),\n                    source: baseId,\n                    target: sds.edges[j].target_id\n                  }\n                }]);\n              }\n\n              if (sds.edges[j].target_id == id) {\n                edge = add_edge(sds.edges[j].source_id, baseId);\n                cy.add([{\n                  group: \"edges\",\n                  data: {\n                    id: edge.id.toString(),\n                    source: sds.edges[j].source_id,\n                    target: baseId\n                  }\n                }]);\n              }\n\n              ++j;\n            });\n            this.delete_nodes(selected[i]);\n          } else {\n            alert(\"cannot merge scheme nodes\");\n          }\n        }\n\n        ++i;\n      });\n      selected = [];\n      cm.hideMenuItem(\"merge_nodes\");\n    } else {\n      alert(\"cannot merge scheme nodes\");\n    }\n  }\n\n  delete_atom(atom_id) {\n    /*\n    Remove the atom from the sadface document identified by the\n    supplied atom ID\n    */\n    if (atom_id) {\n      var atom = get_atom(atom_id);\n\n      if (atom !== null && atom !== undefined) {\n        var size = Object.keys(sd.nodes).length;\n\n        for (var i = 0; i < size; ++i) {\n          if (sd.nodes[i].id === atom.id) {\n            delete sd.nodes[i]; //                    sd.nodes = remove_falsy(sd.nodes);\n\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.initCytoscape();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      cy_data: nextProps.cy_data\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    if (this.props.cy_data !== prevProps.cy_data) {\n      this.setState({\n        cy_data: this.props.cy_data\n      });\n      this.initCytoscape();\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"cy\",\n      style: {\n        height: '600px',\n        width: '600px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Cytoscape;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js"],"names":["React","Component","ReactDOM","cytoscape","edgehandles","contextMenus","$","sd","add_scheme","add_edge","get_atom","now","new_uuid","update_atom_text","get_sd","delete_edge","update","add_source","Modal","modalData","ModalData","data","use","cy","cm","selected","position","layout","running","json","created_date","edited_date","analyst_email","analyst_name","document_id","default_sadface_doc","current_sadface_doc","focused","undo_stack","redo_stack","edit_atom","resource_pane_viewable_state","Cytoscape","constructor","props","state","cy_data","initCytoscape","bind","build_cola_layout","edit_atom_content","delete_nodes","update_local_storage","redraw_visualisation","undo","redo","merge_nodes","delete_atom","console","log","container","document","getElementById","elements","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","run","toggleOffOnLeave","handleNodes","handleSize","handleColor","handleHitThreshold","handleLineWidth","handleOutlineColor","edgeType","complete","event","sourceNode","targetNode","addedEles","length","source_id","source","id","target_id","target","source_position","target_position","x","y","type","scheme","scheme_id","scheme_content","name","remove","add","group","toString","content","typeshape","classes","locked","edge1","edge2","edge","menuItems","title","onClickFunction","cyTarget","hasTrailingDivider","atom","forEach","node","coreAsWell","renderedPosition","cyPosition","options","selectedIndex","show","hideMenuItem","opts","cola_params","animate","randomize","padding","fit","maxSimulationTime","i","undefined","opt","makeLayout","value","sds","edges","undo_item","JSON","parse","push","showMenuItem","localStorage","setItem","stringify","stop","eles","center","resize","redo_item","pop","loadJSON","baseNode","baseId","baseAtom","j","sources","resource_id","text","offset","alert","atom_id","size","Object","keys","nodes","componentDidMount","componentWillReceiveProps","nextProps","setState","componentDidUpdate","prevProps","render","height","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport cytoscape from 'cytoscape';\nimport edgehandles from 'cytoscape-edgehandles';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\n\nimport $ from 'jquery';\n\n\nimport {sd,add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source} from '../lib/Sadface'; \n\nimport Modal from  './Modal';\n\nimport modalData from './ModalData';\n\nvar ModalData = modalData.data;\n\ncytoscape.use( edgehandles );\ncytoscape.use(contextMenus, $);\n\n\n\n\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+edited_date+\"\\\",\\\"id\\\":\\\"\"+document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\n\n\nclass Cytoscape extends Component {\n  constructor(props){\n    super(props);\n\t\tthis.state={\n\t\t\tcy_data: this.props.cy_data,\n\t\t}\n    this.initCytoscape = this.initCytoscape.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n    this.edit_atom_content = this.edit_atom_content.bind(this);\n    this. delete_nodes =this.delete_nodes.bind(this);\n    this.update_local_storage = this.update_local_storage.bind(this);\n    this.redraw_visualisation = this.redraw_visualisation.bind(this);\n    this.undo = this.undo.bind(this);\n    this.redo = this.redo.bind(this);\n    this.merge_nodes = this.merge_nodes.bind(this);\n    this.delete_atom =this.delete_atom.bind(this);\n//    this.dragover_handler = this.dragover_handler.bind(this);\n  }\n\n  initCytoscape(){\n  \t\tconsole.log(\"initCyto\");\n\t\tconsole.log(this.state.cy_data);\n  \t\tcy = cytoscape({\n  \t\tcontainer: document.getElementById('cy'),\n  \t\t elements:this.state.cy_data,\n\n\n  \t\t \t\n\n        style:[\n            {   selector: \"node\", \n                style: {\n                    \"label\": \"data(content)\",\n                    \"text-opacity\": 0.7,\n                    \"width\" : \"auto\",\n                    \"height\" : \"auto\",\n                    \"text-valign\": \"bottom\",\n                    \"text-halign\": \"right\",\n                    \"text-outline-color\": \"#eee\",\n                    \"text-outline-width\": 1\n              }\n            },\n            {   selector: \"[typeshape]\", \n                style: {\n                    \"shape\":\"data(typeshape)\"\n                }\n            },\n            {   selector: \"node[typeshape='diamond']\", \n                style: {\n                    'background-color': '#CC9900'\n                }\n            },\n            {\n                selector: \"node[typeshape='diamond'][content='Conflict']\",\n                style: {\n                    'background-color': 'red'\n                }\n            },\n            {\n                selector: \"node[typeshape='diamond'][name='Support']\",\n                style: {\n                    'background-color': 'green'\n                }\n            },\n            {   selector: \"edge\", \n                style: {\n                    \"line-color\": \"#9dbaea\",\n                    \"target-arrow-shape\": \"triangle\",\n                    \"target-arrow-color\": \"#9dbaea\",\n                    \"curve-style\": \"bezier\"\n                }\n            },\n            {   selector: \":selected\", \n                style: {\n                    \"border-width\":\"1\",\n                    \"border-color\":\"black\",\n                    \"background-color\": \"#3399CC\"\n                }\n            },\n            {   selector: \".atom-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n            },\n            {   selector: \".scheme-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n            }\n            ],\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n                \n    });\n\n  \tlayout = this.build_cola_layout();\n    layout.run();\n\n    cy.edgehandles({\n        toggleOffOnLeave: true,\n        handleNodes: \"node\",\n        handleSize: 10,\n        handleColor: \"orange\",\n        handleHitThreshold: 8,\n        handleLineWidth: 5,\n        //handleLineType: \"flat\",\n        handleOutlineColor: \"pink\",\n        edgeType: function(){ return \"flat\"; },\n        complete: function(event, sourceNode, targetNode, addedEles){\n            if (targetNode.length !== 0) {\n                var source_id = targetNode[0].source().id();\n                var target_id = targetNode[0].target().id();\n\n                //get the mid point between source node and target node\n                var source_position = targetNode[0].source().position();\n                var target_position = targetNode[0].target().position();\n\n                position = {};\n                position.x = ((source_position.x + target_position.x)/2);\n                position.y = ((source_position.y + target_position.y)/2);\n\n                if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\")\n                {\n                    var scheme = add_scheme(\"Support\");\n                    var scheme_id = scheme.id;\n                    var scheme_content = scheme.name;\n                    //remove the automatically generated edge\n                    targetNode.remove();\n                    cy.add([\n                        {group: \"nodes\", data: {id: scheme_id.toString(),\n                            content: scheme_content, typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n                    ]);\n                    var edge1 = add_edge(source_id, scheme_id);\n                    var edge2 = add_edge(scheme_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge1.id.toString(), source: source_id, target: scheme_id } },\n                      { group: \"edges\", data: { id: edge2.id.toString(), source: scheme_id, target: target_id } }\n                    ]);\n                } else {\n                    targetNode.remove();\n                    var edge = add_edge(source_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge.id.toString(), source: source_id, target: target_id } }\n                    ]);\n                }\n             this.update_local_storage();\n            } else {\n                targetNode.remove();\n            }\n        }\n    });\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n     cm = cy.contextMenus({\n        \tmenuItems: [\n          {\n            id: \"edit-content\",\n            title: \"edit content\",\n            selector: \"node[type = \\\"atom\\\"]\",\n            onClickFunction: function (event) {\n              var target = event.target || event.cyTarget;\n          //    $(\"#editContentModal\").modal(\"show\");\n            //  $(\"#edit_atom_content\").val(target.data().content);\n              this.edit_atom = target;\n            },\n            hasTrailingDivider: false\n          },\n          {\n            id: \"edit-metadata\",\n            title: \"edit metadata\",\n            selector: \"node[type = \\\"atom\\\"]\",\n            onClickFunction: function (event) {\n              //  $(\"#edit_metadata\").empty();\n                var target = event.target || event.cyTarget;\n                var atom = get_atom(target.id());\n              //  var textArea = $(\"<textarea id=\\\"\"+target.id()+\"_metadata\\\" class=\\\"form-control\\\" rows=\\\"2\\\" >\"+JSON.stringify(atom.metadata)+\"</textarea>\");\n             //   $(\"#edit_metadata\").append(textArea);\n             //   $(\"#editMetadataModal\").modal(\"show\");\n                edit_atom = target;\n            },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"change-scheme\",\n            title: \"change scheme\",\n            selector: \"node[typeshape = \\\"diamond\\\"]\",\n            onClickFunction: function (event) {\n                var target = event.target || event.cyTarget;\n//                $(\"#editSchemeModal\").modal(\"show\");\n                edit_atom = target;\n            },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"remove\",\n            title: \"remove\",\n            selector: \"node, edge\",\n            onClickFunction: function (event) {\n                var target = event.target || event.cyTarget;\n                if (selected.length !== 0) {\n                    selected.forEach(function(node) {\n                        this.delete_nodes(node);\n                    });\n                    selected = [];\n                } else {\n                    if (target.data().type==\"atom\") {\n                        this.delete_nodes(event);\n                        target.remove();\n                    } else if (target.data().typeshape==\"diamond\"){\n                        this.delete_nodes(event);\n                        target.remove();\n                    } else {\n                        this.delete_edge(target.id());\n                        this.update_local_storage();\n                        target.remove();\n                    }\n                }\n            },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"add-atom\",\n            content: \"add atom\",\n            coreAsWell: true,\n\t\t\t\n            onClickFunction: function (event) {\n                position = event.renderedPosition;\n//                $(\"#newAtomModal\").modal(\"show\");\n            }\n          },\n          {\n            id: \"add-scheme\",\n            content: \"add scheme\",\n            coreAsWell: true,\n            onClickFunction: function (event) {\n\n                position = event.position || event.cyPosition;\n\n                document.getElementById(\"sel1\").options.selectedIndex=0;\n//                $(\"#newSchemeModal\").modal(\"show\");\n            },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"redraw\",\n            content: \"redraw\",\n            coreAsWell: true,\n            onClickFunction: function (event) { this.redraw_visualisation(); },\n            hasTrailingDivider: true\n          },\n          {\n            id: \"undo\",\n            content: \"undo\",\n            selector: \"node, edge\",\n            show: false,\n            coreAsWell: true,\n            onClickFunction: function (event) {\n              this.undo();\n            },\n            hasTrailingDivider: false\n          },\n          {\n            id: \"redo\",\n            content: \"redo\",\n            selector: \"node, edge\",\n            show: false,\n            coreAsWell: true,\n            onClickFunction: function (event) {\n              this.redo();\n              if (redo_stack == []) {\n                cm.hideMenuItem(\"redo\");\n              }\n            },\n            hasTrailingDivider: true\n          },\n          {\n              id: \"merge_nodes\",\n              content: \"merge nodes\",\n              selector: \"node\",\n              show: false,\n              coreAsWell: true,\n              onClickFunction: function (event) {\n                  this.merge_nodes();\n              }\n          }\n        ]\n    });\n}\n\n  build_cola_layout( opts ) {\n    var cola_params = {\n        name: \"cola\",\n        animate: true,\n        randomize: true,\n        padding: 100,\n        fit: false,\n        maxSimulationTime: 1500\n    };\n    var i = 0;\n    if (opts !== undefined) {\n        opts.forEach(function(opt) {\n           cola_params[i] = opts[i];\n           ++i;\n        });\n    }\n    return cy.makeLayout( cola_params );\n}\n\nedit_atom_content() {\n    var content = document.getElementById(\"edit_atom_content\").value;\n    var atom = cy.$(\"#\"+edit_atom.id());\n    update_atom_text(edit_atom.id(), content);\n    this.update_local_storage();\n    atom.data(\"content\", content);\n    edit_atom = null;\n}\n\n delete_nodes(event) {\n    var target = event.target || event.cyTarget;\n    var id = target.id();\n    //removed = target.remove();\n    this.delete_atom(id);\n    var i = 0;\n    var sds = get_sd();\n    var edges = sds.edges;\n    edges.forEach(function(edge) {\n        if (edges[i] !== undefined) {\n            if (edges[i].source_id === id || edges[i].target_id === id) {\n                delete_edge(edges[i].id);\n            }\n            ++i;\n        }\n    });\n    this.update_local_storage();\n}\n\nupdate_local_storage() {\n    var undo_item = JSON.parse(current_sadface_doc);\n    undo_stack.push(undo_item);\n    redo_stack = [];\n    cm.showMenuItem(\"undo\");\n    cm.hideMenuItem(\"redo\");\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    current_sadface_doc = JSON.stringify(get_sd());\n    update();\n}\n\nredraw_visualisation() {\n    layout.stop();\n    layout.options.eles = cy.elements();\n    layout.run();\n    cy.center();\n    cy.resize();\n}\n\n undo() {\n    if (undo_stack.length != 0) {\n        var redo_item = get_sd();\n        redo_stack.push(redo_item);\n        var state = undo_stack.pop();\n        this.loadJSON(JSON.stringify(state));\n        if (undo_stack.length == 0) {\n            cm.hideMenuItem(\"undo\");\n        }\n        cm.showMenuItem(\"redo\");\n    }\n}\n\n redo() {\n    if (redo_stack.length != 0) {\n        var undo_item = get_sd();\n        undo_stack.push(undo_item);\n        var state = redo_stack.pop();\n        this.loadJSON(JSON.stringify(state));\n        if (redo_stack.length == 0) {\n            cm.hideMenuItem(\"redo\");\n        }\n        cm.showMenuItem(\"undo\");\n    }\n}\n\nmerge_nodes() {\n    //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n    var target;\n    var id;\n    var atom;\n    var baseNode = selected[0].target || selected[0].cyTarget;\n    var baseId = baseNode.id();\n    var baseAtom = get_atom(baseId);\n    var edge;\n    if (baseAtom.type == \"atom\") {\n        var sds = get_sd();\n        var i = 0;\n        selected.forEach(function(node){\n            var j = 0;\n            if (i > 0) {\n                target = selected[i].target || selected[i].cyTarget;\n                id = target.id();\n                atom = get_atom(id);\n                if (atom.type == \"atom\") {\n                    atom.sources.forEach(function(source) {\n                        add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n                        ++j;\n                    });\n                    j = 0;\n                    sds.edges.forEach(function(edge) {\n                        if (sds.edges[j].source_id == id) {\n                            edge = add_edge(baseId,sds.edges[j].target_id);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: baseId, target: sds.edges[j].target_id } }\n                            ]);\n                        }\n                        if (sds.edges[j].target_id == id) {\n                            edge = add_edge(sds.edges[j].source_id, baseId);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: sds.edges[j].source_id, target: baseId } }\n                            ]);\n                        }\n                        ++j;\n                    });\n                this.delete_nodes(selected[i]);\n                } else {\n                    alert(\"cannot merge scheme nodes\");\n                }\n            }\n            ++i;\n        });\n        selected = [];\n        cm.hideMenuItem(\"merge_nodes\");\n    } else {\n        alert(\"cannot merge scheme nodes\");\n    }\n}\n\ndelete_atom(atom_id) {\n    /*\n    Remove the atom from the sadface document identified by the\n    supplied atom ID\n    */\n    if (atom_id) {\n        var atom = get_atom(atom_id);\n        if (atom !== null && atom !== undefined) {\n            var size = Object.keys(sd.nodes).length;\n            for (var i = 0; i < size; ++i) {\n                if (sd.nodes[i].id === atom.id) {\n                    delete sd.nodes[i];\n//                    sd.nodes = remove_falsy(sd.nodes);\n                    return;\n                }\n            }\n        }\n    }\n}\n\n\n  componentDidMount(){\n  \tthis.initCytoscape();\n  }\ncomponentWillReceiveProps(nextProps) {\n         this.setState({ cy_data: nextProps.cy_data })\n    }\n   \n     componentDidUpdate(prevProps) {\n  // Typical usage (don't forget to compare props):\n  if (this.props.cy_data !== prevProps.cy_data) {\n  \tthis.setState({cy_data: this.props.cy_data});\n  \tthis.initCytoscape();\n  }\n}\n\n\n   render(){\n\n  \n\n    return (\n    \t<div id=\"cy\"  style={{height:'600px', width:'600px'}}>\n    \t<Modal />\n    \t</div>\n    );\n    }\n    }\n\n    export default Cytoscape;"]},"metadata":{},"sourceType":"module"}