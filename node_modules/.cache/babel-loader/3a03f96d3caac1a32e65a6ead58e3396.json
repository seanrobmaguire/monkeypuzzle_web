{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _cytoscape = require('cytoscape');\n\nvar _cytoscape2 = _interopRequireDefault(_cytoscape);\n\nvar _cytoscapeCola = require('cytoscape-cola');\n\nvar _cytoscapeCola2 = _interopRequireDefault(_cytoscapeCola);\n\nvar _cytoscapeDagre = require('cytoscape-dagre');\n\nvar _cytoscapeDagre2 = _interopRequireDefault(_cytoscapeDagre);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n_cytoscape2.default.use(_cytoscapeCola2.default);\n\n_cytoscape2.default.use(_cytoscapeDagre2.default);\n/** React cytoscape component\r\n * props : style, elements, layout, cyRef,styleContainer, cytoscapeOptions\r\n */\n\n\nvar ReactCytoscape = function (_Component) {\n  _inherits(ReactCytoscape, _Component);\n\n  function ReactCytoscape() {\n    _classCallCheck(this, ReactCytoscape);\n\n    return _possibleConstructorReturn(this, (ReactCytoscape.__proto__ || Object.getPrototypeOf(ReactCytoscape)).apply(this, arguments));\n  }\n\n  _createClass(ReactCytoscape, [{\n    key: 'getCyID',\n    value: function getCyID() {\n      return this.props.containerID || 'cy';\n    }\n  }, {\n    key: 'getContainer',\n    value: function getContainer() {\n      var c = this.container; // console.log(\"container\", c);\n\n      return c;\n    }\n  }, {\n    key: 'defaultStyle',\n    value: function defaultStyle() {\n      return [{\n        selector: 'node',\n        css: {\n          'content': function content(ele) {\n            return ele.data('label') || ele.data('id');\n          },\n          'text-valign': 'center',\n          'text-halign': 'center'\n        }\n      }, {\n        selector: '$node > node',\n        css: {\n          'padding-top': '10px',\n          'padding-left': '10px',\n          'padding-bottom': '10px',\n          'padding-right': '10px',\n          'text-valign': 'top',\n          'text-halign': 'center',\n          'background-color': '#bbb'\n        }\n      }, {\n        selector: 'edge',\n        css: {\n          'target-arrow-shape': 'triangle'\n        }\n      }, {\n        selector: ':selected',\n        css: {\n          'background-color': 'black',\n          'line-color': 'black',\n          'target-arrow-color': 'black',\n          'source-arrow-color': 'black'\n        }\n      }];\n    }\n  }, {\n    key: 'style',\n    value: function style() {\n      return this.props.style || this.defaultStyle();\n    }\n  }, {\n    key: 'elements',\n    value: function elements() {\n      return this.props.elements || {};\n    }\n  }, {\n    key: 'layout',\n    value: function layout() {\n      return this.props.layout || {\n        name: 'cola'\n      };\n    }\n  }, {\n    key: 'cytoscapeOptions',\n    value: function cytoscapeOptions() {\n      return this.props.cytoscapeOptions || {};\n    }\n  }, {\n    key: 'build',\n    value: function build() {\n      var opts = Object.assign({\n        container: this.getContainer(),\n        boxSelectionEnabled: false,\n        autounselectify: true,\n        style: this.style(),\n        elements: this.elements(),\n        layout: this.layout()\n      }, this.cytoscapeOptions());\n      this.cy = (0, _cytoscape2.default)(opts);\n\n      if (this.props.cyRef) {\n        this.props.cyRef(this.cy);\n      }\n\n      return this.cy;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.clean();\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.build();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.clean();\n      this.build();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var style = this.props.styleContainer || {};\n      var styleContainer = Object.assign({\n        height: \"100%\",\n        width: \"100%\",\n        display: \"block\"\n      }, style);\n      return _react2.default.createElement('div', {\n        className: 'graph',\n        id: this.getCyID(),\n        ref: function ref(elt) {\n          _this2.container = elt;\n        },\n        style: styleContainer\n      });\n    }\n  }, {\n    key: 'clean',\n    value: function clean() {\n      if (this.cy) {\n        this.cy.destroy();\n      }\n    }\n  }]);\n\n  return ReactCytoscape;\n}(_react.Component);\n\nexports.default = ReactCytoscape;","map":null,"metadata":{},"sourceType":"script"}