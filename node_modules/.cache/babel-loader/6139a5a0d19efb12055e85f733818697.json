{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles'; //import functions\n\nimport { import_json } from '../lib/Sadface';\nimport { export_cytoscape } from '../lib/Sadface';\ncytoscape.use(edgehandles);\ncytoscape.use(cola);\n\nclass GraphContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cy: null,\n      cm: null,\n      selected: [],\n      position: [],\n      layout: null,\n      running: false,\n      cy_data: {\n        nodes: [{\n          data: {\n            id: 'cat'\n          }\n        }, {\n          data: {\n            id: 'bird'\n          }\n        }, {\n          data: {\n            id: 'ladybug'\n          }\n        }, {\n          data: {\n            id: 'aphid'\n          }\n        }, {\n          data: {\n            id: 'rose'\n          }\n        }, {\n          data: {\n            id: 'grasshopper'\n          }\n        }, {\n          data: {\n            id: 'plant'\n          }\n        }, {\n          data: {\n            id: 'wheat'\n          }\n        }],\n        edges: [{\n          data: {\n            source: 'cat',\n            target: 'bird'\n          }\n        }, {\n          data: {\n            source: 'bird',\n            target: 'ladybug'\n          }\n        }, {\n          data: {\n            source: 'bird',\n            target: 'grasshopper'\n          }\n        }, {\n          data: {\n            source: 'grasshopper',\n            target: 'plant'\n          }\n        }, {\n          data: {\n            source: 'grasshopper',\n            target: 'wheat'\n          }\n        }, {\n          data: {\n            source: 'ladybug',\n            target: 'aphid'\n          }\n        }, {\n          data: {\n            source: 'aphid',\n            target: 'rose'\n          }\n        }]\n      },\n      json: '',\n      created_date: '',\n      edited_date: '',\n      analyst_email: \"Default Analyst Email\",\n      analyst_name: '',\n      document_id: '',\n      default_sadface_doc: {},\n      current_sadface_doc: null,\n      focused: null,\n      undo_stack: [],\n      redo_stack: [],\n      edit_atom: null,\n      resource_pane_viewable_state: true,\n      sd: {}\n    };\n    this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n  }\n\n  initialise_monkeypuzzle() {\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\")) {\n      this.loadJSON(localStorage.getItem(\"state\"));\n      this.initCytoscape(); //else use default\n    } else {\n      this.setState({\n        current_sadface_doc: this.setDefault()\n      });\n      localStorage.setItem(\"state\", this.state.current_sadface_doc); //   cy_data = export_cytoscape({import_json(current_sadface_doc)});\n\n      this.initCytoscape();\n    }\n  }\n\n  initCytoscape() {\n    console.log('* Cytoscape.js is rendering the graph..');\n    this.setState({\n      cy: cytoscape({\n        container: document.getElementById(\"cy\"),\n        ready: function () {\n          window.cy = this;\n        },\n        elements: JSON.parse(this.state.cy_data)\n      })\n    }); //close setstate\n  } //close init cytoscape\n\n\n  setDefault() {\n    this.setState({\n      analyst_email: \"Default Analyst Email\",\n      analyst_name: \"Default Analsyst Name\",\n      created: this.props.now(),\n      edges: [],\n      edited: this.props.now(),\n      id: this.props.new_uuid(),\n      metadata: {},\n      nodes: [],\n      resources: []\n    });\n  }\n\n  loadJSON(json_value) {\n    /*  json = import_json(json_value);\n      localStorage.setItem(\"state\",JSON.stringify(this.state.sd));\n      current_sadface_doc = JSON.stringify(this.state.sd);\n      //load any sources in the stored diagram state\n      window.onload = function () {\n          this.props.loadTabs(json.resources);\n      };\n      cy_data = export_cytoscape(json);\n      if(cy !== null)\n      {\n          cy.elements().remove();\n          cy.json({elements: JSON.parse(cy_data)});\n          this.redraw_visualisation();\n      }*/\n  }\n\n  redraw_visualisation() {} //  this.state.layout.stop();\n  //  layout.options.eles = cy.elements();\n  // layout.run();\n  // cy.center();\n  //  cy.resize();\n  //End Redo\n\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return this.state.cy.makeLayout(cola_params);\n  }\n\n  componentDidMount() {\n    this.initialise_monkeypuzzle();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"cy\",\n      ondrop: \"drop_handler(event);\",\n      ondragover: \"dragover_handler(event);\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nexport default GraphContainer;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js"],"names":["React","Component","cytoscape","cola","edgehandles","import_json","export_cytoscape","use","GraphContainer","constructor","props","state","cy","cm","selected","position","layout","running","cy_data","nodes","data","id","edges","source","target","json","created_date","edited_date","analyst_email","analyst_name","document_id","default_sadface_doc","current_sadface_doc","focused","undo_stack","redo_stack","edit_atom","resource_pane_viewable_state","sd","initialise_monkeypuzzle","bind","build_cola_layout","localStorage","getItem","loadJSON","initCytoscape","setState","setDefault","setItem","console","log","container","document","getElementById","ready","window","elements","JSON","parse","created","now","edited","new_uuid","metadata","resources","json_value","redraw_visualisation","opts","cola_params","name","animate","randomize","padding","fit","maxSimulationTime","i","undefined","forEach","opt","makeLayout","componentDidMount","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\n\n//import functions\nimport {import_json} from '../lib/Sadface';\nimport {export_cytoscape} from '../lib/Sadface';\n\n\n\n\ncytoscape.use( edgehandles );\ncytoscape.use( cola );\n\n\n\n\n\nclass GraphContainer extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n        \tcy:null,\n            cm: null,\n            selected: [],\n            position: [],\n            layout: null,\n            running: false,\n            cy_data: {\n                nodes: [\n                    { data: { id: 'cat' } },\n                    { data: { id: 'bird' } },\n                    { data: { id: 'ladybug' } },\n                    { data: { id: 'aphid' } },\n                    { data: { id: 'rose' } },\n                    { data: { id: 'grasshopper' } },\n                    { data: { id: 'plant' } },\n                    { data: { id: 'wheat' } }\n                ],\n                edges: [\n                    { data: { source: 'cat', target: 'bird' } },\n                    { data: { source: 'bird', target: 'ladybug' } },\n                    { data: { source: 'bird', target: 'grasshopper' } },\n                    { data: { source: 'grasshopper', target: 'plant' } },\n                    { data: { source: 'grasshopper', target: 'wheat' } },\n                    { data: { source: 'ladybug', target: 'aphid' } },\n                    { data: { source: 'aphid', target: 'rose' } }\n                ]\n            },\n            json: '',\n            created_date: '',\n            edited_date:'',\n            analyst_email: \"Default Analyst Email\",\n            analyst_name:'',\n            document_id: '',\n            default_sadface_doc: {},\n            current_sadface_doc: null,\n            focused: null,\n            undo_stack: [],\n            redo_stack: [],\n            edit_atom: null,\n            resource_pane_viewable_state: true,\n\n            sd:{},\n\n\n\n\n        \t\n        }\n        this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n        this.build_cola_layout = this.build_cola_layout.bind(this);\n    }\n\n    initialise_monkeypuzzle(){\n          //load diagram if there is one in localStorage\n        if (localStorage.getItem(\"state\"))\n        {\n            this.loadJSON(localStorage.getItem(\"state\"));\n            this.initCytoscape();\n        //else use default\n        } else\n        {\n            this.setState({current_sadface_doc: this.setDefault()})\n            localStorage.setItem(\"state\", this.state.current_sadface_doc);\n         //   cy_data = export_cytoscape({import_json(current_sadface_doc)});\n            this.initCytoscape();\n        }\n    }\n\n\n    initCytoscape(){\n\n        console.log('* Cytoscape.js is rendering the graph..');\n        this.setState({\n        cy: cytoscape({\n            container: document.getElementById(\"cy\"),\n            ready: function(){ window.cy = this; },\n            elements: JSON.parse(this.state.cy_data),\n        })\n    })//close setstate\n        \n    }//close init cytoscape\n\nsetDefault(){\n    this.setState({\n        analyst_email: \"Default Analyst Email\",\n        analyst_name: \"Default Analsyst Name\",\n        created: this.props.now(),\n        edges:[],\n        edited: this.props.now(),\n        id: this.props.new_uuid(),\n        metadata:{},\n        nodes:[],\n        resources: [],\n\n\n\n    });\n}\n\nloadJSON(json_value) {\n  /*  json = import_json(json_value);\n    localStorage.setItem(\"state\",JSON.stringify(this.state.sd));\n    current_sadface_doc = JSON.stringify(this.state.sd);\n    //load any sources in the stored diagram state\n    window.onload = function () {\n        this.props.loadTabs(json.resources);\n    };\n    cy_data = export_cytoscape(json);\n    if(cy !== null)\n    {\n        cy.elements().remove();\n        cy.json({elements: JSON.parse(cy_data)});\n        this.redraw_visualisation();\n    }*/\n}\n\nredraw_visualisation() {\n  //  this.state.layout.stop();\n  //  layout.options.eles = cy.elements();\n   // layout.run();\n   // cy.center();\n  //  cy.resize();\n}\n\n\n//End Redo\n\n    build_cola_layout( opts ) {\n        var cola_params = {\n            name: \"cola\",\n            animate: true,\n            randomize: true,\n            padding: 100,\n            fit: false,\n            maxSimulationTime: 1500\n        };\n        var i = 0;\n        if (opts !== undefined) {\n            opts.forEach(function(opt) {\n               cola_params[i] = opts[i];\n               ++i;\n            });\n        }\n        return this.state.cy.makeLayout( cola_params );\n    }\n\n  \n\n\n    componentDidMount(){\n        this.initialise_monkeypuzzle();\n   \n    }\n\n    render(){\n        return(\n            <div id=\"cy\" ondrop=\"drop_handler(event);\" ondragover=\"dragover_handler(event);\"></div>\n        )\n    }\n}\n\nfunction mapStateToProps(state){\n    return {};\n}\n\n\nexport default GraphContainer;"]},"metadata":{},"sourceType":"module"}