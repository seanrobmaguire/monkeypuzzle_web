{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar PowerEdge = function () {\n  function PowerEdge(source, target, type) {\n    this.source = source;\n    this.target = target;\n    this.type = type;\n  }\n\n  return PowerEdge;\n}();\n\nexports.PowerEdge = PowerEdge;\n\nvar Configuration = function () {\n  function Configuration(n, edges, linkAccessor, rootGroup) {\n    var _this = this;\n\n    this.linkAccessor = linkAccessor;\n    this.modules = new Array(n);\n    this.roots = [];\n\n    if (rootGroup) {\n      this.initModulesFromGroup(rootGroup);\n    } else {\n      this.roots.push(new ModuleSet());\n\n      for (var i = 0; i < n; ++i) this.roots[0].add(this.modules[i] = new Module(i));\n    }\n\n    this.R = edges.length;\n    edges.forEach(function (e) {\n      var s = _this.modules[linkAccessor.getSourceIndex(e)],\n          t = _this.modules[linkAccessor.getTargetIndex(e)],\n          type = linkAccessor.getType(e);\n\n      s.outgoing.add(type, t);\n      t.incoming.add(type, s);\n    });\n  }\n\n  Configuration.prototype.initModulesFromGroup = function (group) {\n    var moduleSet = new ModuleSet();\n    this.roots.push(moduleSet);\n\n    for (var i = 0; i < group.leaves.length; ++i) {\n      var node = group.leaves[i];\n      var module = new Module(node.id);\n      this.modules[node.id] = module;\n      moduleSet.add(module);\n    }\n\n    if (group.groups) {\n      for (var j = 0; j < group.groups.length; ++j) {\n        var child = group.groups[j];\n        var definition = {};\n\n        for (var prop in child) if (prop !== \"leaves\" && prop !== \"groups\" && child.hasOwnProperty(prop)) definition[prop] = child[prop];\n\n        moduleSet.add(new Module(-1 - j, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));\n      }\n    }\n\n    return moduleSet;\n  };\n\n  Configuration.prototype.merge = function (a, b, k) {\n    if (k === void 0) {\n      k = 0;\n    }\n\n    var inInt = a.incoming.intersection(b.incoming),\n        outInt = a.outgoing.intersection(b.outgoing);\n    var children = new ModuleSet();\n    children.add(a);\n    children.add(b);\n    var m = new Module(this.modules.length, outInt, inInt, children);\n    this.modules.push(m);\n\n    var update = function (s, i, o) {\n      s.forAll(function (ms, linktype) {\n        ms.forAll(function (n) {\n          var nls = n[i];\n          nls.add(linktype, m);\n          nls.remove(linktype, a);\n          nls.remove(linktype, b);\n          a[o].remove(linktype, n);\n          b[o].remove(linktype, n);\n        });\n      });\n    };\n\n    update(outInt, \"incoming\", \"outgoing\");\n    update(inInt, \"outgoing\", \"incoming\");\n    this.R -= inInt.count() + outInt.count();\n    this.roots[k].remove(a);\n    this.roots[k].remove(b);\n    this.roots[k].add(m);\n    return m;\n  };\n\n  Configuration.prototype.rootMerges = function (k) {\n    if (k === void 0) {\n      k = 0;\n    }\n\n    var rs = this.roots[k].modules();\n    var n = rs.length;\n    var merges = new Array(n * (n - 1));\n    var ctr = 0;\n\n    for (var i = 0, i_ = n - 1; i < i_; ++i) {\n      for (var j = i + 1; j < n; ++j) {\n        var a = rs[i],\n            b = rs[j];\n        merges[ctr] = {\n          id: ctr,\n          nEdges: this.nEdges(a, b),\n          a: a,\n          b: b\n        };\n        ctr++;\n      }\n    }\n\n    return merges;\n  };\n\n  Configuration.prototype.greedyMerge = function () {\n    for (var i = 0; i < this.roots.length; ++i) {\n      if (this.roots[i].modules().length < 2) continue;\n      var ms = this.rootMerges(i).sort(function (a, b) {\n        return a.nEdges == b.nEdges ? a.id - b.id : a.nEdges - b.nEdges;\n      });\n      var m = ms[0];\n      if (m.nEdges >= this.R) continue;\n      this.merge(m.a, m.b, i);\n      return true;\n    }\n  };\n\n  Configuration.prototype.nEdges = function (a, b) {\n    var inInt = a.incoming.intersection(b.incoming),\n        outInt = a.outgoing.intersection(b.outgoing);\n    return this.R - inInt.count() - outInt.count();\n  };\n\n  Configuration.prototype.getGroupHierarchy = function (retargetedEdges) {\n    var _this = this;\n\n    var groups = [];\n    var root = {};\n    toGroups(this.roots[0], root, groups);\n    var es = this.allEdges();\n    es.forEach(function (e) {\n      var a = _this.modules[e.source];\n      var b = _this.modules[e.target];\n      retargetedEdges.push(new PowerEdge(typeof a.gid === \"undefined\" ? e.source : groups[a.gid], typeof b.gid === \"undefined\" ? e.target : groups[b.gid], e.type));\n    });\n    return groups;\n  };\n\n  Configuration.prototype.allEdges = function () {\n    var es = [];\n    Configuration.getEdges(this.roots[0], es);\n    return es;\n  };\n\n  Configuration.getEdges = function (modules, es) {\n    modules.forAll(function (m) {\n      m.getEdges(es);\n      Configuration.getEdges(m.children, es);\n    });\n  };\n\n  return Configuration;\n}();\n\nexports.Configuration = Configuration;\n\nfunction toGroups(modules, group, groups) {\n  modules.forAll(function (m) {\n    if (m.isLeaf()) {\n      if (!group.leaves) group.leaves = [];\n      group.leaves.push(m.id);\n    } else {\n      var g = group;\n      m.gid = groups.length;\n\n      if (!m.isIsland() || m.isPredefined()) {\n        g = {\n          id: m.gid\n        };\n        if (m.isPredefined()) for (var prop in m.definition) g[prop] = m.definition[prop];\n        if (!group.groups) group.groups = [];\n        group.groups.push(m.gid);\n        groups.push(g);\n      }\n\n      toGroups(m.children, g, groups);\n    }\n  });\n}\n\nvar Module = function () {\n  function Module(id, outgoing, incoming, children, definition) {\n    if (outgoing === void 0) {\n      outgoing = new LinkSets();\n    }\n\n    if (incoming === void 0) {\n      incoming = new LinkSets();\n    }\n\n    if (children === void 0) {\n      children = new ModuleSet();\n    }\n\n    this.id = id;\n    this.outgoing = outgoing;\n    this.incoming = incoming;\n    this.children = children;\n    this.definition = definition;\n  }\n\n  Module.prototype.getEdges = function (es) {\n    var _this = this;\n\n    this.outgoing.forAll(function (ms, edgetype) {\n      ms.forAll(function (target) {\n        es.push(new PowerEdge(_this.id, target.id, edgetype));\n      });\n    });\n  };\n\n  Module.prototype.isLeaf = function () {\n    return this.children.count() === 0;\n  };\n\n  Module.prototype.isIsland = function () {\n    return this.outgoing.count() === 0 && this.incoming.count() === 0;\n  };\n\n  Module.prototype.isPredefined = function () {\n    return typeof this.definition !== \"undefined\";\n  };\n\n  return Module;\n}();\n\nexports.Module = Module;\n\nfunction intersection(m, n) {\n  var i = {};\n\n  for (var v in m) if (v in n) i[v] = m[v];\n\n  return i;\n}\n\nvar ModuleSet = function () {\n  function ModuleSet() {\n    this.table = {};\n  }\n\n  ModuleSet.prototype.count = function () {\n    return Object.keys(this.table).length;\n  };\n\n  ModuleSet.prototype.intersection = function (other) {\n    var result = new ModuleSet();\n    result.table = intersection(this.table, other.table);\n    return result;\n  };\n\n  ModuleSet.prototype.intersectionCount = function (other) {\n    return this.intersection(other).count();\n  };\n\n  ModuleSet.prototype.contains = function (id) {\n    return id in this.table;\n  };\n\n  ModuleSet.prototype.add = function (m) {\n    this.table[m.id] = m;\n  };\n\n  ModuleSet.prototype.remove = function (m) {\n    delete this.table[m.id];\n  };\n\n  ModuleSet.prototype.forAll = function (f) {\n    for (var mid in this.table) {\n      f(this.table[mid]);\n    }\n  };\n\n  ModuleSet.prototype.modules = function () {\n    var vs = [];\n    this.forAll(function (m) {\n      if (!m.isPredefined()) vs.push(m);\n    });\n    return vs;\n  };\n\n  return ModuleSet;\n}();\n\nexports.ModuleSet = ModuleSet;\n\nvar LinkSets = function () {\n  function LinkSets() {\n    this.sets = {};\n    this.n = 0;\n  }\n\n  LinkSets.prototype.count = function () {\n    return this.n;\n  };\n\n  LinkSets.prototype.contains = function (id) {\n    var result = false;\n    this.forAllModules(function (m) {\n      if (!result && m.id == id) {\n        result = true;\n      }\n    });\n    return result;\n  };\n\n  LinkSets.prototype.add = function (linktype, m) {\n    var s = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();\n    s.add(m);\n    ++this.n;\n  };\n\n  LinkSets.prototype.remove = function (linktype, m) {\n    var ms = this.sets[linktype];\n    ms.remove(m);\n\n    if (ms.count() === 0) {\n      delete this.sets[linktype];\n    }\n\n    --this.n;\n  };\n\n  LinkSets.prototype.forAll = function (f) {\n    for (var linktype in this.sets) {\n      f(this.sets[linktype], Number(linktype));\n    }\n  };\n\n  LinkSets.prototype.forAllModules = function (f) {\n    this.forAll(function (ms, lt) {\n      return ms.forAll(f);\n    });\n  };\n\n  LinkSets.prototype.intersection = function (other) {\n    var result = new LinkSets();\n    this.forAll(function (ms, lt) {\n      if (lt in other.sets) {\n        var i = ms.intersection(other.sets[lt]),\n            n = i.count();\n\n        if (n > 0) {\n          result.sets[lt] = i;\n          result.n += n;\n        }\n      }\n    });\n    return result;\n  };\n\n  return LinkSets;\n}();\n\nexports.LinkSets = LinkSets;\n\nfunction intersectionCount(m, n) {\n  return Object.keys(intersection(m, n)).length;\n}\n\nfunction getGroups(nodes, links, la, rootGroup) {\n  var n = nodes.length,\n      c = new Configuration(n, links, la, rootGroup);\n\n  while (c.greedyMerge());\n\n  var powerEdges = [];\n  var g = c.getGroupHierarchy(powerEdges);\n  powerEdges.forEach(function (e) {\n    var f = function (end) {\n      var g = e[end];\n      if (typeof g == \"number\") e[end] = nodes[g];\n    };\n\n    f(\"source\");\n    f(\"target\");\n  });\n  return {\n    groups: g,\n    powerEdges: powerEdges\n  };\n}\n\nexports.getGroups = getGroups;","map":null,"metadata":{},"sourceType":"script"}