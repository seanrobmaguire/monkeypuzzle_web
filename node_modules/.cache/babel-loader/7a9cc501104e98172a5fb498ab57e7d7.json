{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js\";\nimport React, { Component } from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cola from 'cytoscape-cola';\nimport Tooltip from 'react-qtip';\n\nclass CytoContainer extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const elements = Immutable.List([Immutable.Map({\n      data: Immutable.Map({\n        id: 'foo',\n        label: 'bar'\n      })\n    })]);\n    return React.createElement(CytoscapeComponent, {\n      elements: elements,\n      style: {\n        width: '600px',\n        height: '600px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default CytoContainer;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js"],"names":["React","Component","CytoscapeComponent","cola","Tooltip","CytoContainer","constructor","props","render","elements","Immutable","List","Map","data","id","label","width","height"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,kBAAP,MAA+B,mBAA/B;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,OAAP,MAAoB,YAApB;;AAMA,MAAMC,aAAN,SAA4BJ,SAA5B,CAAqC;AACjCK,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AAEC;;AAKPC,EAAAA,MAAM,GAAE;AACN,UAAMC,QAAQ,GAAGC,SAAS,CAACC,IAAV,CAAe,CAClCD,SAAS,CAACE,GAAV,CAAc;AAAEC,MAAAA,IAAI,EAAEH,SAAS,CAACE,GAAV,CAAc;AAAEE,QAAAA,EAAE,EAAE,KAAN;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAAd;AAAR,KAAd,CADkC,CAAf,CAAjB;AAIA,WAAO,oBAAC,kBAAD;AAAoB,MAAA,QAAQ,EAAEN,QAA9B;AAAwC,MAAA,KAAK,EAAG;AAAEO,QAAAA,KAAK,EAAE,OAAT;AAAkBC,QAAAA,MAAM,EAAE;AAA1B,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAfkC;;AAmBrC,eAAeZ,aAAf","sourcesContent":["import React, {Component} from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport cola from 'cytoscape-cola';\nimport Tooltip from 'react-qtip';\n\n\n\n\n\nclass CytoContainer extends Component{\n    constructor(props){\n        super(props);\n        \n        }\n        \n\n  \n\n  render(){\n    const elements = Immutable.List([\n  Immutable.Map({ data: Immutable.Map({ id: 'foo', label: 'bar' }) })\n]);\n\n    return <CytoscapeComponent elements={elements} style={ { width: '600px', height: '600px' } } />;\n  }\n}\n\n\nexport default CytoContainer;"]},"metadata":{},"sourceType":"module"}