{"ast":null,"code":"'use strict';\n/**\n * Module dependencies\n */\n\nvar decouple = require('decouple');\n\nvar Emitter = require('emitter');\n/**\n * Privates\n */\n\n\nvar scrollTimeout;\nvar scrolling = false;\nvar doc = window.document;\nvar html = doc.documentElement;\nvar msPointerSupported = window.navigator.msPointerEnabled;\nvar touch = {\n  'start': msPointerSupported ? 'MSPointerDown' : 'touchstart',\n  'move': msPointerSupported ? 'MSPointerMove' : 'touchmove',\n  'end': msPointerSupported ? 'MSPointerUp' : 'touchend'\n};\n\nvar prefix = function prefix() {\n  var regex = /^(Webkit|Khtml|Moz|ms|O)(?=[A-Z])/;\n  var styleDeclaration = doc.getElementsByTagName('script')[0].style;\n\n  for (var prop in styleDeclaration) {\n    if (regex.test(prop)) {\n      return '-' + prop.match(regex)[0].toLowerCase() + '-';\n    }\n  } // Nothing found so far? Webkit does not enumerate over the CSS properties of the style object.\n  // However (prop in style) returns the correct value, so we'll have to test for\n  // the precence of a specific property\n\n\n  if ('WebkitOpacity' in styleDeclaration) {\n    return '-webkit-';\n  }\n\n  if ('KhtmlOpacity' in styleDeclaration) {\n    return '-khtml-';\n  }\n\n  return '';\n}();\n\nfunction extend(destination, from) {\n  for (var prop in from) {\n    if (from[prop]) {\n      destination[prop] = from[prop];\n    }\n  }\n\n  return destination;\n}\n\nfunction inherits(child, uber) {\n  child.prototype = extend(child.prototype || {}, uber.prototype);\n}\n\nfunction hasIgnoredElements(el) {\n  while (el.parentNode) {\n    if (el.getAttribute('data-slideout-ignore') !== null) {\n      return el;\n    }\n\n    el = el.parentNode;\n  }\n\n  return null;\n}\n/**\n * Slideout constructor\n */\n\n\nfunction Slideout(options) {\n  options = options || {}; // Sets default values\n\n  this._startOffsetX = 0;\n  this._currentOffsetX = 0;\n  this._opening = false;\n  this._moved = false;\n  this._opened = false;\n  this._preventOpen = false;\n  this._touch = options.touch === undefined ? true : options.touch && true;\n  this._side = options.side || 'left'; // Sets panel\n\n  this.panel = options.panel;\n  this.menu = options.menu; // Sets  classnames\n\n  if (!this.panel.classList.contains('slideout-panel')) {\n    this.panel.classList.add('slideout-panel');\n  }\n\n  if (!this.panel.classList.contains('slideout-panel-' + this._side)) {\n    this.panel.classList.add('slideout-panel-' + this._side);\n  }\n\n  if (!this.menu.classList.contains('slideout-menu')) {\n    this.menu.classList.add('slideout-menu');\n  }\n\n  if (!this.menu.classList.contains('slideout-menu-' + this._side)) {\n    this.menu.classList.add('slideout-menu-' + this._side);\n  } // Sets options\n\n\n  this._fx = options.fx || 'ease';\n  this._duration = parseInt(options.duration, 10) || 300;\n  this._tolerance = parseInt(options.tolerance, 10) || 70;\n  this._padding = this._translateTo = parseInt(options.padding, 10) || 256;\n  this._orientation = this._side === 'right' ? -1 : 1;\n  this._translateTo *= this._orientation; // Init touch events\n\n  if (this._touch) {\n    this._initTouchEvents();\n  }\n}\n/**\n * Inherits from Emitter\n */\n\n\ninherits(Slideout, Emitter);\n/**\n * Opens the slideout menu.\n */\n\nSlideout.prototype.open = function () {\n  var self = this;\n  this.emit('beforeopen');\n\n  if (!html.classList.contains('slideout-open')) {\n    html.classList.add('slideout-open');\n  }\n\n  this._setTransition();\n\n  this._translateXTo(this._translateTo);\n\n  this._opened = true;\n  setTimeout(function () {\n    self.panel.style.transition = self.panel.style['-webkit-transition'] = '';\n    self.emit('open');\n  }, this._duration + 50);\n  return this;\n};\n/**\n * Closes slideout menu.\n */\n\n\nSlideout.prototype.close = function () {\n  var self = this;\n\n  if (!this.isOpen() && !this._opening) {\n    return this;\n  }\n\n  this.emit('beforeclose');\n\n  this._setTransition();\n\n  this._translateXTo(0);\n\n  this._opened = false;\n  setTimeout(function () {\n    html.classList.remove('slideout-open');\n    self.panel.style.transition = self.panel.style['-webkit-transition'] = self.panel.style[prefix + 'transform'] = self.panel.style.transform = '';\n    self.emit('close');\n  }, this._duration + 50);\n  return this;\n};\n/**\n * Toggles (open/close) slideout menu.\n */\n\n\nSlideout.prototype.toggle = function () {\n  return this.isOpen() ? this.close() : this.open();\n};\n/**\n * Returns true if the slideout is currently open, and false if it is closed.\n */\n\n\nSlideout.prototype.isOpen = function () {\n  return this._opened;\n};\n/**\n * Translates panel and updates currentOffset with a given X point\n */\n\n\nSlideout.prototype._translateXTo = function (translateX) {\n  this._currentOffsetX = translateX;\n  this.panel.style[prefix + 'transform'] = this.panel.style.transform = 'translateX(' + translateX + 'px)';\n  return this;\n};\n/**\n * Set transition properties\n */\n\n\nSlideout.prototype._setTransition = function () {\n  this.panel.style[prefix + 'transition'] = this.panel.style.transition = prefix + 'transform ' + this._duration + 'ms ' + this._fx;\n  return this;\n};\n/**\n * Initializes touch event\n */\n\n\nSlideout.prototype._initTouchEvents = function () {\n  var self = this;\n  /**\n   * Decouple scroll event\n   */\n\n  this._onScrollFn = decouple(doc, 'scroll', function () {\n    if (!self._moved) {\n      clearTimeout(scrollTimeout);\n      scrolling = true;\n      scrollTimeout = setTimeout(function () {\n        scrolling = false;\n      }, 250);\n    }\n  });\n  /**\n   * Prevents touchmove event if slideout is moving\n   */\n\n  this._preventMove = function (eve) {\n    if (self._moved) {\n      eve.preventDefault();\n    }\n  };\n\n  doc.addEventListener(touch.move, this._preventMove);\n  /**\n   * Resets values on touchstart\n   */\n\n  this._resetTouchFn = function (eve) {\n    if (typeof eve.touches === 'undefined') {\n      return;\n    }\n\n    self._moved = false;\n    self._opening = false;\n    self._startOffsetX = eve.touches[0].pageX;\n    self._preventOpen = !self._touch || !self.isOpen() && self.menu.clientWidth !== 0;\n  };\n\n  this.panel.addEventListener(touch.start, this._resetTouchFn);\n  /**\n   * Resets values on touchcancel\n   */\n\n  this._onTouchCancelFn = function () {\n    self._moved = false;\n    self._opening = false;\n  };\n\n  this.panel.addEventListener('touchcancel', this._onTouchCancelFn);\n  /**\n   * Toggles slideout on touchend\n   */\n\n  this._onTouchEndFn = function () {\n    if (self._moved) {\n      self.emit('translateend');\n      self._opening && Math.abs(self._currentOffsetX) > self._tolerance ? self.open() : self.close();\n    }\n\n    self._moved = false;\n  };\n\n  this.panel.addEventListener(touch.end, this._onTouchEndFn);\n  /**\n   * Translates panel on touchmove\n   */\n\n  this._onTouchMoveFn = function (eve) {\n    if (scrolling || self._preventOpen || typeof eve.touches === 'undefined' || hasIgnoredElements(eve.target)) {\n      return;\n    }\n\n    var dif_x = eve.touches[0].clientX - self._startOffsetX;\n    var translateX = self._currentOffsetX = dif_x;\n\n    if (Math.abs(translateX) > self._padding) {\n      return;\n    }\n\n    if (Math.abs(dif_x) > 20) {\n      self._opening = true;\n      var oriented_dif_x = dif_x * self._orientation;\n\n      if (self._opened && oriented_dif_x > 0 || !self._opened && oriented_dif_x < 0) {\n        return;\n      }\n\n      if (!self._moved) {\n        self.emit('translatestart');\n      }\n\n      if (oriented_dif_x <= 0) {\n        translateX = dif_x + self._padding * self._orientation;\n        self._opening = false;\n      }\n\n      if (!(self._moved && html.classList.contains('slideout-open'))) {\n        html.classList.add('slideout-open');\n      }\n\n      self.panel.style[prefix + 'transform'] = self.panel.style.transform = 'translateX(' + translateX + 'px)';\n      self.emit('translate', translateX);\n      self._moved = true;\n    }\n  };\n\n  this.panel.addEventListener(touch.move, this._onTouchMoveFn);\n  return this;\n};\n/**\n * Enable opening the slideout via touch events.\n */\n\n\nSlideout.prototype.enableTouch = function () {\n  this._touch = true;\n  return this;\n};\n/**\n * Disable opening the slideout via touch events.\n */\n\n\nSlideout.prototype.disableTouch = function () {\n  this._touch = false;\n  return this;\n};\n/**\n * Destroy an instance of slideout.\n */\n\n\nSlideout.prototype.destroy = function () {\n  // Close before clean\n  this.close(); // Remove event listeners\n\n  doc.removeEventListener(touch.move, this._preventMove);\n  this.panel.removeEventListener(touch.start, this._resetTouchFn);\n  this.panel.removeEventListener('touchcancel', this._onTouchCancelFn);\n  this.panel.removeEventListener(touch.end, this._onTouchEndFn);\n  this.panel.removeEventListener(touch.move, this._onTouchMoveFn);\n  doc.removeEventListener('scroll', this._onScrollFn); // Remove methods\n\n  this.open = this.close = function () {}; // Return the instance so it can be easily dereferenced\n\n\n  return this;\n};\n/**\n * Expose Slideout\n */\n\n\nmodule.exports = Slideout;","map":null,"metadata":{},"sourceType":"script"}