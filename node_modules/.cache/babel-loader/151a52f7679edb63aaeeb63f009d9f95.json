{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/ResourcePane.js\";\nimport React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons'; //Import Components\n\nimport Modal from './Modal';\nimport TabBody from './TabBody';\nimport { add_resource, add_resource_metadata, get_sd } from '../lib/Sadface';\n\nclass ResourcePane extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      resourceType: 'text',\n      current_tab: null\n    };\n    this.setType = this.setType.bind(this);\n    this.addTab = this.addTab.bind(this);\n    this.setActiveTab = this.setActiveTab.bind(this);\n  }\n\n  addTab() {\n    let newTab = {};\n    console.log('load tab null');\n    newTab = add_resource(' ');\n    console.log(newTab, 'newTab');\n    add_resource_metadata(newTab.id, 'title', '');\n    newTab.metadata = {\n      title: ''\n    };\n    console.log(newTab, 'newTab with metadata');\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    newTab.type = this.state.resourceType;\n    this.props.add_tab_to_tab_array(newTab);\n  }\n\n  setActiveTab(value) {\n    console.log(\"setActiveTabs\");\n    this.setState({\n      current_tab: value\n    }, function () {\n      console.log(this.state.current_tab, 'active');\n    });\n  }\n\n  setType(e) {\n    this.setState({\n      resourceType: e.target.value.toLowerCase()\n    }, () => console.log(this.state.resourceType, 'type set'));\n  }\n\n  change_title(tab_id, val) {\n    this.set_text_resource_title(tab_id, val);\n    this.updateTab(val, '');\n  } // handleNewAtomText(){\n  //      if(this.props.focused !== null || this.props.focused !== undefined){\n  //         if(this.props.focused.parentNode.id === \"textarea\"){\n  //             var elem = document.getElementById(this.props.focused.id);\n  //             var selection = elem.value.substring(elem.selectionStart, elem.selectionEnd);\n  //             console.log(selection, 'selection');\n  //             console.log(elem, 'elem');\n  //           //  if(selection != null || selection != undefined){\n  //             //   add_new_atom_node(selection);\n  //              //   elem.selectionStart = elem.selectionEnd;\n  //              //   clear_focus();\n  //            // }\n  //         }\n  //     }\n  //     else { console.log(\"Not a valid text source\") }\n  // }\n\n\n  componentDidMount() {\n    //this.setActiveTab(this.props.tabs[this.props.tabs.length - 1].id);\n    console.log(this.props.tabs, \"COMPONET\");\n  }\n\n  componentWillMount() {\n    console.log(this.props.tab, \"will mount\");\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    console.log(\"DERIVED\");\n\n    if (nextProps.tabs !== prevState.tabs) {\n      return {\n        tabs: nextProps.tabs\n      };\n    } else return null;\n  }\n\n  componentDidUpdate(prevProps, prevSate) {\n    if (prevProps.tabs !== this.props.tabs) {\n      console.log(this.state.tabs, 'UPDATE TABS');\n      this.setState({\n        tabs: this.props.tabs\n      });\n      this.setActiveTab(this.props.tabs.length.id);\n    } // if(this.props.selectedText !== prevProps.selectedText){\n    //       this.setModalValue(this.props.selectedText);\n    // }\n\n  }\n\n  render() {\n    let num = 0;\n    const newResourceModal = {\n      trigger: {\n        triggerText: React.createElement(FontAwesomeIcon, {\n          icon: faPlusSquare,\n          size: \"lg\",\n          color: \"#cbc5c1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }),\n        className: 'add_tab_button',\n        triggerId: \"add_tab_button\"\n      },\n      id: \"resource_pane_selection_modal\",\n      title: 'New Resource Pane',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Select a resource type\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"resource_type\",\n        onChange: this.setType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Text\"))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: \"btn btn-primary\",\n          value: \"Add\"\n        }\n      }\n    };\n    return React.createElement(\"div\", {\n      className: \"resource-pane\",\n      id: \"resource-pane\",\n      style: {\n        display: this.props.showResourcePane ? \"block\" : \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"resource_pane_tab_head\",\n      id: \"resource_pane_tab_head\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      modalProps: newResourceModal,\n      onClick: this.addTab,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), this.props.tabs.map((item, i) => {\n      const onSetActiveTab = () => this.setActiveTab(item.id);\n\n      return React.createElement(\"button\", {\n        key: item.id + '_btn',\n        onClick: onSetActiveTab,\n        className: this.state.current_tab === item.id ? \"tablinks active\" : \"tablinks\",\n        id: item.id + \"_btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, ++num);\n    })), React.createElement(\"div\", {\n      className: \"tab_body\",\n      id: \"tab_body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, this.props.tabs.map((item, i) => {\n      if (item.type === \"text\") {\n        this.loadTxtRef = React.createRef();\n\n        const handleRemove = () => this.props.remove_tab(i);\n\n        const clickLoad = () => {\n          this.loadTxtRef.current.click();\n        };\n\n        const handleFileUpload = () => {\n          var files = this.loadTxtRef.current.files;\n          this.props.fileManager('load', 'txt', item.tab_id, files);\n        };\n\n        const handleFileDownload = () => {\n          this.props.fileManager('save', 'txt', item.tab_id);\n        };\n\n        const handleChange_title = e => {\n          var titleValue = e.target.value;\n          this.props.change_title(item.tab_id, titleValue);\n        };\n\n        const handleChangeContent = e => {\n          var contentValue = e.target.value;\n          this.props.change_content(item.tab_id, contentValue);\n        };\n\n        const handleAtomFromText = e => {\n          console.log(\"atom from text\");\n          console.log(this.props.selectedText, \"atom from text selected\");\n          this.props.addAtomFromText();\n        };\n\n        return React.createElement(TabBody, {\n          id: item.id,\n          key: item.id + '_bdy',\n          i: i,\n          style: {\n            display: this.state.current_tab === item.id ? 'block' : 'none'\n          },\n          handleremove: handleRemove,\n          handleFileUpload: handleFileUpload,\n          handleFileDownload: handleFileDownload,\n          clickLoad: clickLoad,\n          handleAtomFromText: handleAtomFromText,\n          focus: this.props.focus,\n          clearSelection: this.props.clearSelection,\n          titleValue: item.metadata.title,\n          contentValue: item.content,\n          handleChange_title: handleChange_title,\n          handleChangeContent: handleChangeContent,\n          set_focus: this.props.set_focus,\n          loadTxtRef: this.loadTxtRef,\n          setSelectedText: this.props.setSelectedText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        });\n      }\n    })));\n  }\n\n}\n\nexport default ResourcePane;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/ResourcePane.js"],"names":["React","Component","FontAwesomeIcon","faPlusSquare","Modal","TabBody","add_resource","add_resource_metadata","get_sd","ResourcePane","constructor","props","state","resourceType","current_tab","setType","bind","addTab","setActiveTab","newTab","console","log","id","metadata","title","localStorage","setItem","JSON","stringify","type","add_tab_to_tab_array","value","setState","e","target","toLowerCase","change_title","tab_id","val","set_text_resource_title","updateTab","componentDidMount","tabs","componentWillMount","tab","getDerivedStateFromProps","nextProps","prevState","componentDidUpdate","prevProps","prevSate","length","render","num","newResourceModal","trigger","triggerText","className","triggerId","content","footer","buttonNo","button1","button2","display","showResourcePane","map","item","i","onSetActiveTab","loadTxtRef","createRef","handleRemove","remove_tab","clickLoad","current","click","handleFileUpload","files","fileManager","handleFileDownload","handleChange_title","titleValue","handleChangeContent","contentValue","change_content","handleAtomFromText","selectedText","addAtomFromText","focus","clearSelection","set_focus","setSelectedText"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,YAAT,QAA6B,mCAA7B,C,CACA;;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,SAAOC,YAAP,EAAqBC,qBAArB,EAA4CC,MAA5C,QAAyD,gBAAzD;;AAOA,MAAMC,YAAN,SAA2BR,SAA3B,CAAqC;AACjCS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,YAAY,EAAE,MADP;AAEPC,MAAAA,WAAW,EAAE;AAFN,KAAX;AAKA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AAGH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,QAAIE,MAAM,GAAG,EAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAF,IAAAA,MAAM,GAAGb,YAAY,CAAC,GAAD,CAArB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoB,QAApB;AACAZ,IAAAA,qBAAqB,CAACY,MAAM,CAACG,EAAR,EAAY,OAAZ,EAAqB,EAArB,CAArB;AAEAH,IAAAA,MAAM,CAACI,QAAP,GAAkB;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAlB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoB,sBAApB;AAGAM,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAepB,MAAM,EAArB,CAA9B;AACAW,IAAAA,MAAM,CAACU,IAAP,GAAc,KAAKjB,KAAL,CAAWC,YAAzB;AACA,SAAKF,KAAL,CAAWmB,oBAAX,CAAgCX,MAAhC;AACH;;AAEDD,EAAAA,YAAY,CAACa,KAAD,EAAO;AACfX,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,SAAKW,QAAL,CAAc;AACVlB,MAAAA,WAAW,EAAEiB;AADH,KAAd,EAEG,YAAW;AACVX,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWE,WAAvB,EAAoC,QAApC;AACH,KAJD;AAKH;;AAEAC,EAAAA,OAAO,CAACkB,CAAD,EAAG;AACP,SAAKD,QAAL,CAAc;AAACnB,MAAAA,YAAY,EAAEoB,CAAC,CAACC,MAAF,CAASH,KAAT,CAAeI,WAAf;AAAf,KAAd,EAA4D,MACxDf,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWC,YAAvB,EAAqC,UAArC,CADJ;AAEH;;AAQDuB,EAAAA,YAAY,CAACC,MAAD,EAASC,GAAT,EAAc;AACtB,SAAKC,uBAAL,CAA6BF,MAA7B,EAAqCC,GAArC;AACA,SAAKE,SAAL,CAAeF,GAAf,EAAoB,EAApB;AACH,GAtDgC,CA0DjC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACAG,EAAAA,iBAAiB,GAAE;AACf;AACArB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAW+B,IAAvB,EAA6B,UAA7B;AACH;;AAEDC,EAAAA,kBAAkB,GAAE;AAChBvB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWiC,GAAvB,EAA4B,YAA5B;AACH;;AAGA,SAAOC,wBAAP,CAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AACnD3B,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AACJ,QAAGyB,SAAS,CAACJ,IAAV,KAAmBK,SAAS,CAACL,IAAhC,EAAqC;AACjC,aAAM;AAACA,QAAAA,IAAI,EAAEI,SAAS,CAACJ;AAAjB,OAAN;AACH,KAFD,MAGK,OAAO,IAAP;AACR;;AAEGM,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AAEtC,QAAID,SAAS,CAACP,IAAV,KAAmB,KAAK/B,KAAL,CAAW+B,IAAlC,EAAwC;AACtCtB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAW8B,IAAvB,EAA6B,aAA7B;AACA,WAAKV,QAAL,CAAc;AAACU,QAAAA,IAAI,EAAE,KAAK/B,KAAL,CAAW+B;AAAlB,OAAd;AACA,WAAKxB,YAAL,CAAkB,KAAKP,KAAL,CAAW+B,IAAX,CAAgBS,MAAhB,CAAuB7B,EAAzC;AACD,KANqC,CAOvC;AACA;AACA;;AACA;;AAMD8B,EAAAA,MAAM,GAAG;AACL,QAAIC,GAAG,GAAE,CAAT;AAOA,UAAMC,gBAAgB,GAAG;AACrBC,MAAAA,OAAO,EAAE;AACLC,QAAAA,WAAW,EAAE,oBAAC,eAAD;AAAiB,UAAA,IAAI,EAAErD,YAAvB;AAAqC,UAAA,IAAI,EAAC,IAA1C;AAA+C,UAAA,KAAK,EAAC,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADR;AAELsD,QAAAA,SAAS,EAAE,gBAFN;AAGLC,QAAAA,SAAS,EAAE;AAHN,OADY;AAMrBpC,MAAAA,EAAE,EAAC,+BANkB;AAOrBE,MAAAA,KAAK,EAAE,mBAPc;AAQrBmC,MAAAA,OAAO,EAAG;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADM,EAEN;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAiC,QAAA,EAAE,EAAC,eAApC;AAAoD,QAAA,QAAQ,EAAE,KAAK5C,OAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,CAFM,CARW;AAcrB6C,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAE,CADN;AAEJC,QAAAA,OAAO,EAAE;AACLL,UAAAA,SAAS,EAAE,mBADN;AAEL1B,UAAAA,KAAK,EAAE;AAFF,SAFL;AAMJgC,QAAAA,OAAO,EAAE;AACLN,UAAAA,SAAS,EAAE,iBADN;AAEL1B,UAAAA,KAAK,EAAE;AAFF;AANL;AAda,KAAzB;AA4BA,WACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,EAAE,EAAC,eAAlC;AAAkD,MAAA,KAAK,EAAE;AAACiC,QAAAA,OAAO,EAAE,KAAKrD,KAAL,CAAWsD,gBAAX,GAA8B,OAA9B,GAAwC;AAAlD,OAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAwC,MAAA,EAAE,EAAC,wBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AACI,MAAA,UAAU,EAAIX,gBADlB;AAEI,MAAA,OAAO,EAAI,KAAKrC,MAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAOQ,KAAKN,KAAL,CAAW+B,IAAX,CAAgBwB,GAAhB,CAAoB,CAACC,IAAD,EAAOC,CAAP,KAAY;AAC5B,YAAMC,cAAc,GAAG,MACnB,KAAKnD,YAAL,CAAkBiD,IAAI,CAAC7C,EAAvB,CADJ;;AAEQ,aACI;AACI,QAAA,GAAG,EAAE6C,IAAI,CAAC7C,EAAL,GAAU,MADnB;AAEI,QAAA,OAAO,EAAE+C,cAFb;AAGI,QAAA,SAAS,EAAE,KAAKzD,KAAL,CAAWE,WAAX,KAA2BqD,IAAI,CAAC7C,EAAhC,GAAqC,iBAArC,GAAyD,UAHxE;AAII,QAAA,EAAE,EAAE6C,IAAI,CAAC7C,EAAL,GAAQ,MAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMK,EAAE+B,GANP,CADJ;AAUX,KAbD,CAPR,CADJ,EAyBY;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,EAAE,EAAC,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK1C,KAAL,CAAW+B,IAAX,CAAgBwB,GAAhB,CAAoB,CAACC,IAAD,EAAMC,CAAN,KAAY;AAC7B,UAAGD,IAAI,CAACtC,IAAL,KAAc,MAAjB,EAAwB;AACxB,aAAKyC,UAAL,GAAkBtE,KAAK,CAACuE,SAAN,EAAlB;;AAGA,cAAMC,YAAY,GAAG,MACjB,KAAK7D,KAAL,CAAW8D,UAAX,CAAsBL,CAAtB,CADJ;;AAGA,cAAMM,SAAS,GAAE,MAAM;AAEnB,eAAKJ,UAAL,CAAgBK,OAAhB,CAAwBC,KAAxB;AAEH,SAJD;;AAMA,cAAMC,gBAAgB,GAAG,MAAK;AAC9B,cAAIC,KAAK,GAAG,KAAKR,UAAL,CAAgBK,OAAhB,CAAwBG,KAApC;AACA,eAAKnE,KAAL,CAAWoE,WAAX,CAAuB,MAAvB,EAA8B,KAA9B,EAAsCZ,IAAI,CAAC9B,MAA3C,EAAmDyC,KAAnD;AAEC,SAJD;;AAKA,cAAME,kBAAkB,GAAG,MAAK;AAE5B,eAAKrE,KAAL,CAAWoE,WAAX,CAAuB,MAAvB,EAA+B,KAA/B,EAAsCZ,IAAI,CAAC9B,MAA3C;AACH,SAHD;;AAIA,cAAM4C,kBAAkB,GAAIhD,CAAD,IAAM;AAC7B,cAAIiD,UAAU,GAAGjD,CAAC,CAACC,MAAF,CAASH,KAA1B;AACA,eAAKpB,KAAL,CAAWyB,YAAX,CAAwB+B,IAAI,CAAC9B,MAA7B,EAAqC6C,UAArC;AACH,SAHD;;AAKA,cAAMC,mBAAmB,GAAIlD,CAAD,IAAM;AAC9B,cAAImD,YAAY,GAAGnD,CAAC,CAACC,MAAF,CAASH,KAA5B;AACA,eAAKpB,KAAL,CAAW0E,cAAX,CAA0BlB,IAAI,CAAC9B,MAA/B,EAAuC+C,YAAvC;AACH,SAHD;;AAIA,cAAME,kBAAkB,GAAIrD,CAAD,IAAM;AAC7Bb,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAW4E,YAAvB,EAAqC,yBAArC;AACA,eAAK5E,KAAL,CAAW6E,eAAX;AACH,SAJD;;AAKA,eACI,oBAAC,OAAD;AACI,UAAA,EAAE,EAAErB,IAAI,CAAC7C,EADb;AAEI,UAAA,GAAG,EAAE6C,IAAI,CAAC7C,EAAL,GAAU,MAFnB;AAGI,UAAA,CAAC,EAAE8C,CAHP;AAII,UAAA,KAAK,EAAE;AAACJ,YAAAA,OAAO,EAAE,KAAKpD,KAAL,CAAWE,WAAX,KAA2BqD,IAAI,CAAC7C,EAAhC,GAAqC,OAArC,GAA+C;AAAzD,WAJX;AAMI,UAAA,YAAY,EAAEkD,YANlB;AAOI,UAAA,gBAAgB,EAAEK,gBAPtB;AAQI,UAAA,kBAAkB,EAAEG,kBARxB;AASI,UAAA,SAAS,EAAEN,SATf;AAUI,UAAA,kBAAkB,EAAIY,kBAV1B;AAWI,UAAA,KAAK,EAAE,KAAK3E,KAAL,CAAW8E,KAXtB;AAYI,UAAA,cAAc,EAAE,KAAK9E,KAAL,CAAW+E,cAZ/B;AAeI,UAAA,UAAU,EAAEvB,IAAI,CAAC5C,QAAL,CAAcC,KAf9B;AAgBI,UAAA,YAAY,EAAI2C,IAAI,CAACR,OAhBzB;AAkBI,UAAA,kBAAkB,EAAEsB,kBAlBxB;AAmBI,UAAA,mBAAmB,EAAEE,mBAnBzB;AAoBI,UAAA,SAAS,EAAE,KAAKxE,KAAL,CAAWgF,SApB1B;AAuBI,UAAA,UAAU,EAAE,KAAKrB,UAvBrB;AAwBI,UAAA,eAAe,EAAE,KAAK3D,KAAL,CAAWiF,eAxBhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6BH;AACA,KAnEA,CADL,CAzBZ,CADJ;AAkGH;;AApPgC;;AAqQrC,eAAenF,YAAf","sourcesContent":["import React, {Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons';\n//Import Components\nimport Modal from './Modal';\nimport TabBody from './TabBody';\n\nimport{add_resource, add_resource_metadata, get_sd} from '../lib/Sadface'; \n\n\n\n\n\n\nclass ResourcePane extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            resourceType: 'text',\n            current_tab: null,\n        }\n        \n        this.setType = this.setType.bind(this);\n        this.addTab = this.addTab.bind(this);\n        this.setActiveTab = this.setActiveTab.bind(this);\n\n\n    };\n\n    addTab(){\n        let newTab = {}\n        console.log('load tab null')\n        newTab = add_resource(' ');\n        console.log(newTab, 'newTab');\n        add_resource_metadata(newTab.id, 'title', '');\n\n        newTab.metadata = {title: ''}\n        console.log(newTab, 'newTab with metadata')\n\n\n        localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n        newTab.type = this.state.resourceType;\n        this.props.add_tab_to_tab_array(newTab);   \n    }\n\n    setActiveTab(value){\n        console.log(\"setActiveTabs\");\n        this.setState({\n            current_tab: value\n        }, function (){\n            console.log(this.state.current_tab, 'active');\n        });\n    }\n\n     setType(e){\n        this.setState({resourceType: e.target.value.toLowerCase()}, () =>\n            console.log(this.state.resourceType, 'type set'));\n    }\n\n\n\n\n\n    \n\n    change_title(tab_id, val) {\n        this.set_text_resource_title(tab_id, val);\n        this.updateTab(val, '');\n    }\n\n  \n\n    // handleNewAtomText(){\n    //      if(this.props.focused !== null || this.props.focused !== undefined){\n    //         if(this.props.focused.parentNode.id === \"textarea\"){\n    //             var elem = document.getElementById(this.props.focused.id);\n\n    //             var selection = elem.value.substring(elem.selectionStart, elem.selectionEnd);\n    //             console.log(selection, 'selection');\n    //             console.log(elem, 'elem');\n    //           //  if(selection != null || selection != undefined){\n    //             //   add_new_atom_node(selection);\n    //              //   elem.selectionStart = elem.selectionEnd;\n    //              //   clear_focus();\n    //            // }\n    //         }\n    //     }\n    //     else { console.log(\"Not a valid text source\") }\n\n    // }\n    componentDidMount(){\n        //this.setActiveTab(this.props.tabs[this.props.tabs.length - 1].id);\n        console.log(this.props.tabs, \"COMPONET\");\n    }\n\n    componentWillMount(){\n        console.log(this.props.tab, \"will mount\");\n    }\n\n      \n     static getDerivedStateFromProps(nextProps, prevState) {\n        console.log(\"DERIVED\");\n    if(nextProps.tabs !== prevState.tabs){\n        return{tabs: nextProps.tabs};\n    }\n    else return null;\n}\n\n    componentDidUpdate(prevProps, prevSate) {\n        \n      if (prevProps.tabs !== this.props.tabs) {\n        console.log(this.state.tabs, 'UPDATE TABS');\n        this.setState({tabs: this.props.tabs})\n        this.setActiveTab(this.props.tabs.length.id);\n      }\n     // if(this.props.selectedText !== prevProps.selectedText){\n     //       this.setModalValue(this.props.selectedText);\n     // }\n    }\n\n\n\n\n\n    render() {\n        let num =0;\n         \n\n\n    \n\n\n        const newResourceModal = {\n            trigger: {\n                triggerText: <FontAwesomeIcon icon={faPlusSquare} size=\"lg\" color=\"#cbc5c1\"/>,\n                className: 'add_tab_button',\n                triggerId: \"add_tab_button\",\n            },\n            id:\"resource_pane_selection_modal\",\n            title: 'New Resource Pane',\n            content:  <div className=\"modal-body\">\n                <p>Select a resource type</p>\n                <select className=\"form-control\" id=\"resource_type\" onChange={this.setType}>\n                <option>Text</option>\n                </select>\n                </div>,\n            footer: {\n                buttonNo: 2,\n                button1: {\n                    className: \"btn btn-secondary\",\n                    value: \"Close\"\n                },\n                button2: {\n                    className: \"btn btn-primary\",\n                    value: \"Add\"\n                }\n            }\n        };\n\n\n        return ( \n            <div className=\"resource-pane\" id=\"resource-pane\" style={{display: this.props.showResourcePane ? \"block\" : \"none\"}}> \n                <div className=\"resource_pane_tab_head\" id=\"resource_pane_tab_head\">\n                    <Modal\n                        modalProps = {newResourceModal}  \n                        onClick = {this.addTab} \n\n                    />\n                    {\n                        this.props.tabs.map((item, i)=> {\n                            const onSetActiveTab = () =>\n                                this.setActiveTab(item.id);\n                                    return(\n                                        <button  \n                                            key={item.id + '_btn'}\n                                            onClick={onSetActiveTab} \n                                            className={this.state.current_tab === item.id ? \"tablinks active\" : \"tablinks\"}\n                                            id={item.id+\"_btn\"}\n                                        >\n                                            {++num}\n                                        </button>\n                                    );\n                        })\n                    }\n                </div>\n                            \n                        <div className=\"tab_body\" id=\"tab_body\">\n                            {this.props.tabs.map((item,i) => {\n                                if(item.type === \"text\"){\n                                this.loadTxtRef = React.createRef();\n                                \n\n                                const handleRemove = () =>\n                                    this.props.remove_tab(i);\n\n                                const clickLoad =() => {\n                                    \n                                    this.loadTxtRef.current.click();\n\n                                }\n\n                                const handleFileUpload = () =>{\n                                var files = this.loadTxtRef.current.files;\n                                this.props.fileManager('load','txt',  item.tab_id ,files);\n\n                                }\n                                const handleFileDownload = () =>{\n\n                                    this.props.fileManager('save', 'txt', item.tab_id); \n                                }\n                                const handleChange_title = (e) =>{\n                                    var titleValue = e.target.value;\n                                    this.props.change_title(item.tab_id, titleValue);\n                                }\n\n                                const handleChangeContent = (e) =>{\n                                    var contentValue = e.target.value;\n                                    this.props.change_content(item.tab_id, contentValue);\n                                }\n                                const handleAtomFromText = (e) =>{\n                                    console.log(\"atom from text\")\n                                    console.log(this.props.selectedText, \"atom from text selected\");\n                                    this.props.addAtomFromText();\n                                }\n                                return(\n                                    <TabBody\n                                        id={item.id}\n                                        key={item.id + '_bdy'}\n                                        i={i}\n                                        style={{display: this.state.current_tab === item.id ? 'block' : 'none'}}\n\n                                        handleremove={handleRemove}\n                                        handleFileUpload={handleFileUpload}\n                                        handleFileDownload={handleFileDownload}\n                                        clickLoad={clickLoad}\n                                        handleAtomFromText = {handleAtomFromText}\n                                        focus={this.props.focus}\n                                        clearSelection={this.props.clearSelection}\n\n\n                                        titleValue={item.metadata.title}\n                                        contentValue = {item.content}\n                                    \n                                        handleChange_title={handleChange_title}\n                                        handleChangeContent={handleChangeContent}\n                                        set_focus={this.props.set_focus}\n\n\n                                        loadTxtRef={this.loadTxtRef}\n                                        setSelectedText={this.props.setSelectedText}\n                                       \n                                    />\n                                );\n                            }\n                            })}\n                        </div>\n            </div>\n        );\n    }\n}\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\nexport default ResourcePane;\n"]},"metadata":{},"sourceType":"module"}