{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/ResourcePane.js\";\nimport React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons'; //Import Components\n\nimport Modal from './Modal';\nimport TabBody from './TabBody';\nimport { newResourceModal } from './ModalData.jsx';\n\nclass ResourcePane extends Component {\n  constructor(props) {\n    super(props);\n    this.handlegetType = this.handlegetType.bind(this);\n    this.handleNewAtomText = this.handleNewAtomText.bind(this);\n  }\n\n  componentDidMount() {// this.setState({activeTab: this.props.activeTab})\n    //  console.log(this.state.activeTab, 'active tabs');\n  }\n\n  componentDidUpdate(prevProps) {// Typical usage (don't forget to compare props):\n    //if (this.props.remove_all_tabs !== prevProps.remove_all_tabs) {\n    //  this.remove_all_tabs();\n    // }\n  }\n\n  handlegetType(e) {\n    let type = e.target.value.toLowerCase();\n    console.log(type, 'resourcePane type');\n    this.props.setType(type);\n  }\n\n  handleNewAtomText() {\n    if (this.props.focused != null || this.props.focused != undefined) {\n      if (this.props.focused.parentNode.id == \"textarea\") {\n        var elem = document.getElementById(this.props.focused.id);\n        var selection = elem.value.substring(elem.selectionStart, elem.selectionEnd);\n        console.log(selection, 'selection');\n        console.log(elem, 'elem'); //  if(selection != null || selection != undefined){\n        //   add_new_atom_node(selection);\n        //   elem.selectionStart = elem.selectionEnd;\n        //   clear_focus();\n        // }\n      }\n    } else {\n      console.log(\"Not a valid text source\");\n    }\n  }\n\n  render() {\n    const newResourceModal = {\n      trigger: {\n        triggerText: React.createElement(FontAwesomeIcon, {\n          icon: faPlusSquare,\n          size: \"lg\",\n          color: \"#cbc5c1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }),\n        className: 'add_tab_button',\n        triggerId: \"add_tab_button\"\n      },\n      id: \"resource_pane_selection_modal\",\n      title: 'New Resource Pane',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Select a resource type\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"resource_type\",\n        onChange: this.handlegetType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Text\"))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: \"btn btn-primary\",\n          value: \"Add\"\n        }\n      }\n    };\n    return React.createElement(\"div\", {\n      className: \"resource-pane\",\n      id: \"resource-pane\",\n      style: {\n        display: this.props.showResourcePane ? \"block\" : \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"resource_pane_tab_head\",\n      id: \"resource_pane_tab_head\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      modalProps: newResourceModal,\n      onClick: this.props.addTab,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), this.props.tabs.map((item, i) => {\n      const onSetActiveTab = () => this.props.setActiveTab(item.id);\n\n      return React.createElement(\"button\", {\n        key: item.id + '_btn',\n        onClick: onSetActiveTab,\n        className: this.props.current_tab === item.id ? \"tablinks active\" : \"tablinks\",\n        id: item.id + \"_btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, item.tab_number);\n    })), React.createElement(\"div\", {\n      className: \"tab_body\",\n      id: \"tab_body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.props.tabs.map((item, i) => {\n      if (item.type === \"text\") {\n        this.loadTxtRef = React.createRef();\n        this.contentRef = React.createRef();\n        this.titleRef = React.createRef();\n\n        const handleRemove = () => this.props.remove_tab(i);\n\n        const clickLoad = () => {\n          this.loadTxtRef.current.click();\n        };\n\n        const handleFileUpload = () => {\n          var files = this.loadTxtRef.current.files;\n          this.props.fileManager('load', 'txt', item.tab_id, files);\n        };\n\n        const handleFileDownload = () => {\n          this.props.fileManager('save', 'txt', item.tab_id);\n        };\n\n        const handleChange_title = e => {\n          var titleValue = this.titleRef.current.value;\n          this.props.change_title(item.tab_id, titleValue);\n        };\n\n        const handleChange_content = () => {\n          var contentValue = this.contentRef.current.value;\n          this.props.change_content(item.tab_id, contentValue);\n        };\n\n        return React.createElement(TabBody, {\n          id: item.id,\n          key: item.id + '_bdy',\n          i: i,\n          style: {\n            display: this.props.current_tab === item.id ? 'block' : 'none'\n          },\n          handleremove: handleRemove,\n          handleFileUpload: handleFileUpload,\n          handleFileDownload: handleFileDownload,\n          clickLoad: clickLoad,\n          handleNewAtomText: this.handleNewAtomText,\n          titleValue: item.metadata.title,\n          contentValue: item.content,\n          handleChange_title: handleChange_title,\n          handleChange_content: handleChange_content,\n          set_focus: this.props.set_focus,\n          loadTxtRef: this.loadTxtRef,\n          titleRef: this.titleRef,\n          contentRef: this.contentRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        });\n      }\n    })));\n  }\n\n}\n\nexport default ResourcePane;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/ResourcePane.js"],"names":["React","Component","FontAwesomeIcon","faPlusSquare","Modal","TabBody","newResourceModal","ResourcePane","constructor","props","handlegetType","bind","handleNewAtomText","componentDidMount","componentDidUpdate","prevProps","e","type","target","value","toLowerCase","console","log","setType","focused","undefined","parentNode","id","elem","document","getElementById","selection","substring","selectionStart","selectionEnd","render","trigger","triggerText","className","triggerId","title","content","footer","buttonNo","button1","button2","display","showResourcePane","addTab","tabs","map","item","i","onSetActiveTab","setActiveTab","current_tab","tab_number","loadTxtRef","createRef","contentRef","titleRef","handleRemove","remove_tab","clickLoad","current","click","handleFileUpload","files","fileManager","tab_id","handleFileDownload","handleChange_title","titleValue","change_title","handleChange_content","contentValue","change_content","metadata","set_focus"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons';\n//Import Components\nimport Modal from './Modal';\nimport TabBody from './TabBody';\nimport { newResourceModal} from './ModalData.jsx';\n\n\n\n\n\n\nclass ResourcePane extends Component {\n    constructor(props) {\n        super(props);\n        \n\n        this.handlegetType = this.handlegetType.bind(this);\n        this.handleNewAtomText = this.handleNewAtomText.bind(this);\n\n\n    };\n\n\n    componentDidMount(){\n       // this.setState({activeTab: this.props.activeTab})\n      //  console.log(this.state.activeTab, 'active tabs');\n    }\n\n    componentDidUpdate(prevProps) {\n        // Typical usage (don't forget to compare props):\n        //if (this.props.remove_all_tabs !== prevProps.remove_all_tabs) {\n        //  this.remove_all_tabs();\n        // }\n    }\n\n    handlegetType(e){\n        let type = e.target.value.toLowerCase();\n        console.log(type,'resourcePane type');\n        this.props.setType(type);\n\n    }\n\n    handleNewAtomText(){\n         if(this.props.focused != null || this.props.focused != undefined){\n            if(this.props.focused.parentNode.id == \"textarea\"){\n                var elem = document.getElementById(this.props.focused.id);\n\n                var selection = elem.value.substring(elem.selectionStart, elem.selectionEnd);\n                console.log(selection, 'selection');\n                console.log(elem, 'elem');\n              //  if(selection != null || selection != undefined){\n                //   add_new_atom_node(selection);\n                 //   elem.selectionStart = elem.selectionEnd;\n                 //   clear_focus();\n               // }\n            }\n        }\n        else { console.log(\"Not a valid text source\") }\n\n    }\n\n\n\n\n\n    render() {\n    \n\n\n        const newResourceModal = {\n            trigger: {\n                triggerText: <FontAwesomeIcon icon={faPlusSquare} size=\"lg\" color=\"#cbc5c1\"/>,\n                className: 'add_tab_button',\n                triggerId: \"add_tab_button\",\n            },\n            id:\"resource_pane_selection_modal\",\n            title: 'New Resource Pane',\n            content:  <div className=\"modal-body\">\n                <p>Select a resource type</p>\n                <select className=\"form-control\" id=\"resource_type\" onChange={this.handlegetType}>\n                <option>Text</option>\n                </select>\n                </div>,\n            footer: {\n                buttonNo: 2,\n                button1: {\n                    className: \"btn btn-secondary\",\n                    value: \"Close\"\n                },\n                button2: {\n                    className: \"btn btn-primary\",\n                    value: \"Add\"\n                }\n            }\n        };\n\n\n        return ( \n            <div className=\"resource-pane\" id=\"resource-pane\" style={{display: this.props.showResourcePane ? \"block\" : \"none\"}}> \n                <div className=\"resource_pane_tab_head\" id=\"resource_pane_tab_head\">\n                            <Modal\n                                modalProps = {newResourceModal}  \n                                onClick = {this.props.addTab} \n\n                             />\n                            {\n                                this.props.tabs.map((item, i)=> {\n                                    const onSetActiveTab = () =>\n                                        this.props.setActiveTab(item.id);\n                                    return(\n                                        <button  \n                                            key={item.id + '_btn'}\n                                            onClick={onSetActiveTab} \n                                            className={this.props.current_tab === item.id ? \"tablinks active\" : \"tablinks\"}\n                                            id={item.id+\"_btn\"}\n                                        >\n                                            {item.tab_number}\n                                        </button>\n                                    );\n                                })\n                            }\n                        </div>\n                            \n                        <div className=\"tab_body\" id=\"tab_body\">\n                            {this.props.tabs.map((item,i) => {\n                                if(item.type === \"text\"){\n                                this.loadTxtRef = React.createRef();\n                                this.contentRef = React.createRef();\n                                this.titleRef = React.createRef();\n\n                                const handleRemove = () =>\n                                    this.props.remove_tab(i);\n\n                                const clickLoad =() => {\n                                    \n                                    this.loadTxtRef.current.click();\n\n                                }\n\n                                const handleFileUpload = () =>{\n                                var files = this.loadTxtRef.current.files;\n                                this.props.fileManager('load','txt',  item.tab_id ,files);\n\n                                }\n                                const handleFileDownload = () =>{\n\n                                    this.props.fileManager('save', 'txt', item.tab_id); \n                                }\n                                const handleChange_title = (e) =>{\n                                    var titleValue = this.titleRef.current.value;\n                                    this.props.change_title(item.tab_id, titleValue);\n                                }\n\n                                const handleChange_content = () =>{\n                                    var contentValue = this.contentRef.current.value;\n                                    this.props.change_content(item.tab_id, contentValue);\n                                }\n\n                                return(\n                                    <TabBody\n                                        id={item.id}\n                                        key={item.id + '_bdy'}\n                                        i={i}\n                                        style={{display: this.props.current_tab === item.id ? 'block' : 'none'}}\n\n                                        handleremove={handleRemove}\n                                        handleFileUpload={handleFileUpload}\n                                        handleFileDownload={handleFileDownload}\n                                        clickLoad={clickLoad}\n                                        handleNewAtomText = {this.handleNewAtomText}\n\n\n                                        titleValue={item.metadata.title}\n                                        contentValue = {item.content}\n                                    \n                                        handleChange_title={handleChange_title}\n                                        handleChange_content={handleChange_content}\n                                        set_focus={this.props.set_focus}\n\n\n                                        loadTxtRef={this.loadTxtRef}\n                                        titleRef={this.titleRef}\n                                        contentRef={this.contentRef}\n                                    />\n                                );\n                            }\n                            })}\n                        </div>\n            </div>\n        );\n    }\n}\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\nexport default ResourcePane;\n"]},"metadata":{},"sourceType":"module"}