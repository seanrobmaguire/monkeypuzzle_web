{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/VisualisationPane/Cytoscape.js\";\nimport React, { Component } from 'react'; //Import Components\n\nimport Modal from '../Modal/Modal';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport $ from 'jquery';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\nimport { remove_falsy, update_scheme, update_atom_metadata, import_json, export_cytoscape, add_atom, sd, add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source } from '../../lib/Sadface';\n\nvar cyqtip = require('cytoscape-qtip');\n\ncyqtip(cytoscape); // register extension\n\ncytoscape.use(edgehandles);\ncytoscape.use(contextMenus, $);\ncytoscape.use(cola);\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\" + analyst_email + \"\\\",\\\"analyst_name\\\":\\\"\" + analyst_email + \"\\\",\\\"created\\\":\\\"\" + created_date + \"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\" + edited_date + \"\\\",\\\"id\\\":\\\"\" + document_id + \"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\"; //var current_sadface_doc = null;\n\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\nclass Cytoscape extends Component {\n  constructor(props) {\n    super(props); //create Refs\n\n    this.newAtomRef = React.createRef();\n    this.newSchemeRef = React.createRef();\n    this.editContentRef = React.createRef();\n    this.state = {\n      modalValue: ' ',\n      dropDownValue: ' ' //set up cytoscape \n\n    };\n    this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n    this.initCytoscape = this.initCytoscape.bind(this); // this.build_cola_layout = this.build_cola_layout.bind(this);\n    // //interact with Nodes\n    // this.addAtom = this.addAtom.bind(this);\n    // this.addScheme = this.addScheme.bind(this);\n    // this.editAtomContent = this.editAtomContent.bind(this);\n    // this.editAtomMetadata = this.editAtomMetadata.bind(this);\n    // this.editScheme = this.editScheme.bind(this);\n    // this.deleteNodes = this.deleteNodes.bind(this);\n    // this.mergeNodes = this.mergeNodes.bind(this);\n    // this.redrawVisualisation = this.redrawVisualisation.bind(this);\n    // this.undo = this.undo.bind(this);\n    // this.redo = this.redo.bind(this);\n    // this.updateLocalStorage = this.updateLocalStorage.bind(this);\n    // this.dragoverHandler = this.dragoverHandler.bind(this);\n    // this.dropHandler = this.dropHandler.bind(this);\n    // this.handledropDownValue = this.handledropDownValue.bind(this);\n    // this.handleModalValueChange = this.handleModalValueChange.bind(this);\n    // this.setDropDownValue = this.setDropDownValue.bind(this);\n    // this.setModalValue = this.setModalValue.bind(this);\n    //    this.setFocus = this.setFocus.bind(this);\n    //    this.clearFocus = this.clearFocus.bind(this);\n    //    this.clearLocalStorage = this.clearLocalStorage.bind(this);\n  }\n\n  initialise_monkeypuzzle() {\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\")) {\n      this.props.loadJSON(localStorage.getItem(\"state\"));\n      this.initCytoscape(); //else use default\n    } else {\n      this.props.setCurrentSadFaceDoc(default_sadface_doc);\n      localStorage.setItem(\"state\", this.props.current_sadface_doc);\n      this.props.setCyData(export_cytoscape(import_json(this.props.current_sadface_doc)));\n      this.initCytoscape();\n    }\n  }\n\n  initCytoscape() {\n    console.log(\"initCyto\"); //change cy to state of APP\n\n    cy = cytoscape({\n      container: document.getElementById('cy'),\n      elements: JSON.parse(this.props.cyData),\n      style: [{\n        selector: \"node\",\n        style: {\n          \"label\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          // \"width\" : \"auto\",\n          //    \"height\" : \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: '.eh-handle',\n        style: {\n          'background-color': 'orange',\n          'width': 10,\n          'height': 10,\n          'shape': 'ellipse',\n          'overlay-opacity': 0,\n          'border-width': 8,\n          // makes the handle easier to hit\n          'border-opacity': 0,\n          'label': ''\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    }); //close cy = cytoscape()\n\n    layout = this.build_cola_layout();\n    layout.run();\n    cy.edgehandles({\n      toggleOffOnLeave: true,\n      handleNodes: \"node\",\n      handleSize: 10,\n      handleColor: \"#DF0085\",\n      handleHitThreshold: 8,\n      handleLineWidth: 5,\n      //handleLineType: \"flat\",\n      edgeType: function () {\n        return \"flat\";\n      },\n      complete: function (event, sourceNode, targetNode, addedEles) {\n        if (targetNode.length !== 0) {\n          var source_id = targetNode[0].source().id();\n          var target_id = targetNode[0].target().id(); //get the mid point between source node and target node\n\n          var source_position = targetNode[0].source().position();\n          var target_position = targetNode[0].target().position();\n          position = {};\n          position.x = (source_position.x + target_position.x) / 2;\n          position.y = (source_position.y + target_position.y) / 2;\n\n          if (targetNode[0].source().data().type === \"atom\" && targetNode[0].target().data().type === \"atom\") {\n            var scheme = add_scheme(\"Support\");\n            var scheme_id = scheme.id;\n            var scheme_content = scheme.name; //remove the automatically generated edge\n\n            targetNode.remove();\n            cy.add([{\n              group: \"nodes\",\n              data: {\n                id: scheme_id.toString(),\n                content: scheme_content,\n                typeshape: \"diamond\"\n              },\n              classes: \"scheme-label\",\n              locked: false,\n              position: position\n            }]);\n            var edge1 = add_edge(source_id, scheme_id);\n            var edge2 = add_edge(scheme_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge1.id.toString(),\n                source: source_id,\n                target: scheme_id\n              }\n            }, {\n              group: \"edges\",\n              data: {\n                id: edge2.id.toString(),\n                source: scheme_id,\n                target: target_id\n              }\n            }]);\n          } else {\n            targetNode.remove();\n            var edge = add_edge(source_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge.id.toString(),\n                source: source_id,\n                target: target_id\n              }\n            }]);\n          }\n\n          this.updateLocalStorage();\n        } else {\n          targetNode.remove();\n        }\n      }.bind(this)\n    }); //edgehandles\n\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n\n    cm = cy.contextMenus({// menuItems: [\n      //      {\n      //          id: \"edit-content\",\n      //          content: \"edit content\",\n      //          selector: \"node[type = \\\"atom\\\"]\",\n      //          onClickFunction: function (event) {\n      //              let target = event.target || event.cyTarget;\n      //              document.getElementById(\"editContentTrigger\").click();\n      //               this.setModalValue(target.data().content);\n      //              edit_atom = target;\n      //          }.bind(this),\n      //          hasTrailingDivider: false\n      //      },\n      //      {\n      //          id: \"edit-metadata\",\n      //          content: \"edit metadata\",\n      //          selector: \"node[type = \\\"atom\\\"]\",\n      //          onClickFunction: function (event) {\n      //                let target = event.target || event.cyTarget;\n      //                let meta = JSON.stringify(target.data().metadata);\n      //                document.getElementById(\"editMetaTrigger\").click();\n      //                this.setModalValue(meta);\n      //               edit_atom = target;\n      //           }.bind(this),\n      //           hasTrailingDivider: true\n      //      },\n      //      {\n      //          id: \"change-scheme\",\n      //          content: \"change scheme\",\n      //          selector: \"node[typeshape = \\\"diamond\\\"]\",\n      //          onClickFunction: function (event) {\n      //              var target = event.target || event.cyTarget;\n      //              this.setDropDownValue(target.data().content);\n      //              document.getElementById(\"editSchemeTrigger\").click();\n      //              edit_atom = target;\n      //          }.bind(this),\n      //          hasTrailingDivider: true\n      //      },\n      //      {\n      //          id: \"remove\",\n      //          content: \"remove\",\n      //          selector: \"node, edge\",\n      //          onClickFunction: function (event) {\n      //              var target = event.target || event.cyTarget;\n      //              if (selected.length !== 0) {\n      //                  selected.forEach(function(node) {\n      //                      console.log(node, \"SELECTED\");\n      //                      this.deleteNodes(node);\n      //                  }.bind(this));\n      //                  selected = [];\n      //              } else {\n      //                  if (target.data().type === \"atom\") {\n      //                      this.deleteNodes(event);\n      //                      target.remove();\n      //                  } else if (target.data().typeshape === \"diamond\"){\n      //                      this.deleteNodes(event);\n      //                      target.remove();\n      //                  } else {\n      //                      delete_edge(target.id());\n      //                      this.updateLocalStorage();\n      //                      target.remove();\n      //                  }\n      //              }\n      //          }.bind(this),\n      //          hasTrailingDivider: true\n      //      },\n      //      {\n      //          id: \"add-atom\",\n      //          content: \"add atom\",\n      //          coreAsWell: true,\n      //          onClickFunction: function (event) {\n      //              position = event.renderedPosition;\n      //           this.setModalValue(\"\");\n      //              document.getElementById(\"newAtomTrigger\").click();\n      //          }.bind(this)\n      //      },\n      //      {\n      //          id: \"add-scheme\",\n      //          content: \"add scheme\",\n      //          coreAsWell: true,\n      //          onClickFunction: function (event) {\n      //              position = event.position || event.cyPosition;\n      //              this.setDropDownValue(\"Support\");\n      //                  document.getElementById(\"new_scheme\").click();\n      //          }.bind(this),\n      //          hasTrailingDivider: true\n      //      },\n      //      {\n      //          id: \"redraw\",\n      //          content: \"redraw\",\n      //          coreAsWell: true,\n      //          onClickFunction:  (event) => this.redrawVisualisation(),\n      //          hasTrailingDivider: true\n      //      },\n      //      {\n      //          id: \"undo\",\n      //          content: \"undo\",\n      //          selector: \"node, edge\",\n      //          show: true,\n      //          coreAsWell: true,\n      //          onClickFunction:  (event) => this.undo(),\n      //          hasTrailingDivider: false\n      //      },\n      //      {\n      //          id: \"redo\",\n      //          content: \"redo\",\n      //          selector: \"node, edge\",\n      //          show: false,\n      //          coreAsWell: true,\n      //          onClickFunction: function (event) {\n      //            this.redo();\n      //            if (redo_stack === []) {\n      //              cm.hideMenuItem(\"redo\");\n      //          }\n      //          }.bind(this),\n      //          hasTrailingDivider: true\n      //      },\n      //      {\n      //        id: \"merge_nodes\",\n      //        content: \"merge nodes\",\n      //        selector: \"node\",\n      //        tooltipText: \"hello\",\n      //        show: false,\n      //        coreAsWell: true,\n      //        onClickFunction:  (event) => this.merge_nodes()\n      //      }\n      //  ],//menuitems\n    }); //close context menues\n    // cy.on(\"select\", \"node\", function(e){\n    //     console.log(undo_stack, \"tap element undo stack\");\n    //     cm.showMenuItem(\"hello\");\n    // }.bind(this));\n    //  cy.on(\"unselect\", \"node\", function (e){\n    //      selected.pop(e);\n    //      cm.hideMenuItem(\"merge_nodes\");\n    //  });\n    // cy.on(\"select\", \"node\", function (e){\n    //     console.log(e.target.id(), \"SELECT NODE\");\n    //     selected.push(e);\n    //     console.log(selected.length, \"selected length\");\n    //      if(selected.length>1) {\n    //           console.log(selected.length, \"selcted lentth\")\n    //           cm.showMenuItem(\"merge_nodes\");\n    //      } else {\n    //          cm.hideMenuItem(\"merge_nodes\");\n    //       }\n    // }.bind(this));\n    // cy.on(\"tap\", function (e){\n    //     //when cytoscape is tapped remove any focus from HTML elements like the tab textareas\n    //     //this mainly helps with keybinds\n    //   //  $(\":focus\").blur();\n    // });\n    // cy.on(\"layoutstart\", function(){\n    //     running = true;\n    // });\n    // cy.on(\"layoutstop\", function(){\n    //     running = false;\n    //     var png = cy.png({ full: true });\n    //     this.props.handleSetPng(png);\n    //     var jpg = cy.jpg({ full: true });\n    //     this.props.handleSetJpg(jpg);\n    // }.bind(this));\n    //     /*\n    //  $(\".resource-pane\").resizable({\n    //     handleSelector: \".splitter\",\n    //     resizeHeight: false,\n    //     resizeWidthFrom: \"right\",\n    //     //onDragStart: function (e, $el, opt) {},\n    //     onDragEnd: function (e, $el, opt) {\n    //     cy.resize();\n    //     }\n    // });*/\n  } //init cyto\n  //  build_cola_layout( opts ) {\n  //     var cola_params = {\n  //         name: \"cola\",\n  //         animate: true,\n  //         randomize: true,\n  //         padding: 100,\n  //         fit: false,\n  //         maxSimulationTime: 1500\n  //     };\n  //     var i = 0;\n  //     if (opts !== undefined) {\n  //         opts.forEach(function(opt) {\n  //          cola_params[i] = opts[i];\n  //          ++i;\n  //      });\n  //     }\n  //     return cy.makeLayout( cola_params );\n  // }\n  // deleteAtom(atom_id) {\n  //     /*\n  //     Remove the atom from the sadface document identified by the\n  //     supplied atom ID\n  //     */\n  //     console.log(atom_id, \"AtomID\");\n  //     if (atom_id) {\n  //         var atom = get_atom(atom_id);\n  //         console.log(atom, \"ATOM\");\n  //         if (atom !== null && atom !== undefined) {\n  //             var size = Object.keys(sd.nodes).length;\n  //             for (var i = 0; i < size; ++i) {\n  //                 if (sd.nodes[i].id === atom.id) {\n  //                     delete sd.nodes[i];\n  //                    sd.nodes = remove_falsy(sd.nodes);\n  //                         return;\n  //                 }\n  //             }\n  //         }\n  //     }\n  // }\n  // dragoverHandler(ev) {\n  //     console.log(\"dragoverHandler\");\n  //      ev.preventDefault();\n  //      ev.dataTransfer.dropEffect = \"move\";\n  // }\n  // dropHandler(ev) {\n  //     console.log(\"drop handler\");\n  //     ev.preventDefault();\n  //     position = {x: ev.clientX-300, y: ev.clientY};\n  //     if(this.props.selectedText !== null || this.props.selectedText != undefined){\n  //         console.log(this.props.selectedText, 'TEXT');\n  //         this.addAtom(this.props.selectedText);\n  //         this.props.clearSelection();\n  //         this.clearFocus();\n  //     }\n  //     else { console.log(\"Not a valid text selection.\"); }\n  // }\n  // clearFocus(){\n  //     console.log(\"clear Foocus\");\n  // }\n  // addAtom(content=null) {\n  //     if(content === null){\n  //         content = this.state.modalValue;\n  //     }\n  //     if(content === \"\"){\n  //         content = \"New Atom\";\n  //     }\n  //     console.log(content, \"content\");\n  //     var meta = {\"hello\":\"world\"};\n  //     var new_atom = add_atom(content);\n  //     console.log(get_sd(), \"NEW ATOM\");\n  //     var atom_id = new_atom.id;\n  //     if (focused != null) {\n  //         add_source(atom_id, focused.id, content, 0, 0);\n  //     }\n  //     if (position == null) {\n  //         position = {\"x\": cy.width()/2, \"y\": cy.height()/2};\n  //     }\n  //     cy.add([\n  //         {group: \"nodes\", data: {id: atom_id.toString(),\n  //             content: content, type: \"atom\", typeshape: \"roundrectangle\", metadata: meta }, \n  //             classes: \"atom-label\", locked: false, renderedPosition: position}\n  //     ]);\n  //     let node = cy.getElementById(atom_id.toString() );\n  //  /*   node.qtip({\n  //         content: function(){return 'ID: '+this.id()},\n  //         position: {\n  //             my: \"top center\",\n  //             at: \"bottom center\"\n  //         },\n  //         style: {\n  //             classes: \"qtip-bootstrap\",\n  //             tip: {\n  //                 width: 16,\n  //                 height: 8\n  //             }\n  //         }\n  //     });*/\n  //     position = null;\n  //     this.updateLocalStorage();\n  // }\n  // addScheme() {\n  //     let scheme = this.state.dropDownValue;\n  //     var new_scheme = add_scheme(scheme);\n  //     var scheme_id = new_scheme.id;\n  //     cy.add([\n  //         {group: \"nodes\", data: {id: scheme_id.toString(),\n  //             content: scheme, type: \"scheme\", typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n  //     ]);\n  //     this.updateLocalStorage();\n  // }\n  // editAtomContent() {\n  //     let editContent = this.state.modalValue;\n  //     let atom = cy.$(\"#\"+edit_atom.id());\n  //     update_atom_text(edit_atom.id(), editContent);\n  //     this.updateLocalStorage();\n  //     atom.data(\"content\", editContent);\n  //     edit_atom = null;\n  // }\n  // editAtomMetadata() {\n  //    console.log(\"META\");\n  //    // if(JSON.parse(newMeta)){\n  //    //     console.log(newMeta, 'newMetadata');\n  //   //  }else{\n  //     //    console.log('fail');\n  //    // }\n  //   /*  if (JSON.parse(content)) {\n  //         var metadata = JSON.parse(content);\n  //         update_atom_metadata(atom.id(), metadata);\n  //         this.update_local_storage();\n  //         edit_atom=null;\n  //     } else {\n  //         alert(\"Metadata not in JSON format, unable to update\");\n  //     }\n  //         this.setState({modalValue: ' '}, () =>\n  //         console.log('modalValue reset', this.state.modalValue));\n  //         var target = event.target || event.cyTarget;\n  //               var atom = get_atom(target.id());\n  //               console.log(JSON.stringify(atom.metadata), 'atom metadata');\n  //               document.getElementById(\"editMetaTrigger\").click();\n  //               this.setState({modalValue: JSON.stringify(atom.metadata)})\n  //              edit_atom = target;*/\n  // }\n  // editScheme(){\n  //     let content = this.state.dropDownValue;\n  //     let scheme = cy.$(\"#\"+edit_atom.id());\n  //     update_scheme(edit_atom.id(), content);\n  //     this.updateLocalStorage();\n  //     scheme.data(\"content\", content);\n  //     edit_atom = null;\n  // }\n  // deleteNodes(event) {\n  //     var target = event.target || event.cyTarget;\n  //     var id = target.id();\n  //     let removed = target.remove();\n  //     this.deleteAtom(id);\n  //     var i = 0;\n  //     var sds = get_sd();\n  //     var edges = sds.edges;\n  //     edges.forEach(function(edge) {\n  //         if (edges[i] !== undefined) {\n  //             if (edges[i].source_id === id || edges[i].target_id === id) {\n  //                 delete_edge(edges[i].id);\n  //             }\n  //             ++i;\n  //         }\n  //     });\n  //     this.updateLocalStorage();\n  // }\n  // mergeNodes() {\n  //     //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n  //     var target;\n  //     var id;\n  //     var atom;\n  //     var baseNode = selected[0].target || selected[0].cyTarget;\n  //     var baseId = baseNode.id();\n  //     var baseAtom = get_atom(baseId);\n  //     var edge;\n  //     if (baseAtom.type === \"atom\") {\n  //         var sds = get_sd();\n  //         var i = 0;\n  //         selected.forEach(function(node){\n  //             var j = 0;\n  //             if (i > 0) {\n  //                 target = selected[i].target || selected[i].cyTarget;\n  //                 id = target.id();\n  //                 atom = get_atom(id);\n  //                 if (atom.type === \"atom\") {\n  //                     atom.sources.forEach(function(source) {\n  //                         add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n  //                         ++j;\n  //                     });\n  //                     j = 0;\n  //                     sds.edges.forEach(function(edge) {\n  //                         if (sds.edges[j].source_id === id) {\n  //                             edge = add_edge(baseId,sds.edges[j].target_id);\n  //                             cy.add([\n  //                               { group: \"edges\", data: { id: edge.id.toString(), source: baseId, target: sds.edges[j].target_id } }\n  //                               ]);\n  //                         }\n  //                         if (sds.edges[j].target_id === id) {\n  //                             edge = add_edge(sds.edges[j].source_id, baseId);\n  //                             cy.add([\n  //                               { group: \"edges\", data: { id: edge.id.toString(), source: sds.edges[j].source_id, target: baseId } }\n  //                               ]);\n  //                         }\n  //                         ++j;\n  //                     });\n  //                     this.delete_nodes(selected[i]);\n  //                 } else {\n  //                     alert(\"cannot merge scheme nodes\");\n  //                 }\n  //             }\n  //             ++i;\n  //         });\n  //         selected = [];\n  //         cm.hideMenuItem(\"merge_nodes\");\n  //     } else {\n  //         alert(\"cannot merge scheme nodes\");\n  //     }\n  // }\n  // updateLocalStorage() {\n  //     var undo_item = JSON.parse(this.props.current_sadface_doc);\n  //     undo_stack.push(undo_item);\n  //     redo_stack = [];\n  //     cm.showMenuItem(\"undo\");\n  //     cm.hideMenuItem(\"redo\");\n  //     localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n  //     this.props.setCurrentSadFaceDoc(JSON.stringify(get_sd()));\n  //     console.log(this.props.current_sadface_doc, \"Current sd localStorage\")\n  //     update();\n  //       console.log(undo_stack, \"update_local_storage\");\n  // }\n  // redrawVisualisation() {\n  //     console.log(\"redraw Visualistaion\");\n  //     layout.stop();\n  //     layout.options.eles = cy.elements();\n  //     layout.run();\n  //     cy.center();\n  //     cy.resize();\n  // }\n  // undo() {\n  //         console.log(undo_stack, \"undo_stack undo\");\n  //         if(undo_stack.length !== 0){\n  //             console.log(undo_stack.length, \"LENGTH\");\n  //             let redo_item = get_sd();\n  //             redo_stack.push(redo_item);\n  //             let state = undo_stack.pop();\n  //             console.log(state, \"state\");\n  //             console.log(this.state.cy_data, \"CYDATA\")\n  //             this.props.loadJSON(JSON.stringify(state));\n  //             console.log(undo_stack, \"END\")\n  //         }\n  //     //     var redo_item = get_sd();\n  //     //     redo_stack.push(redo_item);\n  //     //     console.log(undo_stack, \"undo stack\");\n  //     //     console.log(undo_stack.pop(), 'Undo pop');\n  //     //     var state = undo_stack.pop();\n  //     //     this.props.loadJSON(JSON.stringify(state));\n  //     //     if (undo_stack.length === 0) {\n  //     //         cm.hideMenuItem(\"undo\");\n  //     //     }\n  //     //     cm.showMenuItem(\"redo\");\n  // //    }\n  // }\n  // redo() {\n  //     if (redo_stack.length !== 0) {\n  //         var undo_item = get_sd();\n  //         undo_stack.push(undo_item);\n  //         var state = redo_stack.pop();\n  //         this.loadJSON(JSON.stringify(state));\n  //         if (redo_stack.length === 0) {\n  //             cm.hideMenuItem(\"redo\");\n  //         }\n  //         cm.showMenuItem(\"undo\");\n  //     }\n  // }\n  // handleModalValueChange(e) {\n  //     this.setState({modalValue: e.target.value}, () =>\n  //         console.log(this.state.modalValue,  \"modal value set\"));\n  // }\n  // setModalValue(newModalValue){\n  //     this.setState({modalValue: newModalValue}, () =>\n  //         console.log(this.state.modalValue, 'modal value set'));\n  // }\n  // handledropDownValue(e){\n  //     console.log(e, \"eeeeee\");\n  //     this.setState({dropDownValue: e.target.value}, () =>\n  //     console.log(this.state.dropDownValue, 'dropdown value'));\n  // }\n  // setDropDownValue(newDropDownValue){\n  //     this.setState({dropDownValue: newDropDownValue}, () =>\n  //         console.log(this.state.dropDownValue, 'modal value set'));\n  // }\n\n\n  componentDidMount() {\n    this.initialise_monkeypuzzle(); // }\n    // static getDerivedStateFromProps(nextProps, prevState) {\n    //     if(nextProps.cy_data !== prevState.cy_data){\n    //         return{cy_data: nextProps.cy_data};\n    //     }\n    //    else return null;\n  }\n\n  componentDidUpdate(prevProps, prevSate) {// if (prevProps.demo !== this.props.demo) {\n    //   this.setState({cy_data: this.props.demo})\n    //   this.initCytoscape();\n    // }\n    // if(prevProps.showResourcePane !== this.props.showResourcePane){\n    //   this.redrawVisualisation();\n    // }\n    // if (prevProps.newAtomFromText !== this.props.newAtomFromText){\n    //   console.log(cy,  \"Cytopkjdnfkjsdnf\");\n    //   this.addAtom(this.props.selectedText);\n    // }\n    // if (prevProps.current_sadface_doc !== this.props.current_sadface_doc){\n    //       this.setState({cy_data: export_cytoscape(import_json(this.props.current_sadface_doc))});\n    //     }\n  }\n\n  render() {\n    /* New Atom Modal */\n    const newAtomModal = {\n      trigger: {\n        triggerText: 'New Atom',\n        triggerId: 'newAtomTrigger'\n      },\n      title: 'New Atom',\n      id: 'newAtomModal',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 855\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 856\n        },\n        __self: this\n      }, \"Add some content to the new atom\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 857\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control\",\n        rows: \"2\",\n        id: \"new_atom_content\",\n        onChange: this.handleModalValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 858\n        },\n        __self: this\n      }))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Create'\n        }\n      }\n    };\n    /* New Scheme Modal*/\n\n    var newSchemeModal = {\n      trigger: {\n        triggerText: 'New Scheme',\n        className: \"new_scheme\",\n        triggerId: \"new_scheme\"\n      },\n      id: \"newSchemeModal\",\n      title: 'New Scheme',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 887\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 888\n        },\n        __self: this\n      }, \"Select a scheme\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"sel1\",\n        value: this.state.dropDownValue,\n        onChange: this.handledropDownValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 889\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 895\n        },\n        __self: this\n      }, \"Support\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 896\n        },\n        __self: this\n      }, \"Conflict\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 897\n        },\n        __self: this\n      }, \"Argument from Sign\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 898\n        },\n        __self: this\n      }, \"Argument from an Exceptional Case\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 899\n        },\n        __self: this\n      }, \"Argument from Analogy\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 900\n        },\n        __self: this\n      }, \"Argument from Bias\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 901\n        },\n        __self: this\n      }, \"Argument from Cause to Effect\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 902\n        },\n        __self: this\n      }, \"Argument from Correlation to Causes\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 903\n        },\n        __self: this\n      }, \"Argument from Established Rule\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 904\n        },\n        __self: this\n      }, \"Argument from Evidence to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 905\n        },\n        __self: this\n      }, \"Argument from Falsification to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 906\n        },\n        __self: this\n      }, \"Argument from Example\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 907\n        },\n        __self: this\n      }, \"Argument from Commitment\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 908\n        },\n        __self: this\n      }, \"Circumstantial Argument Against the Person\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 909\n        },\n        __self: this\n      }, \"Argument from Popular Practice\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910\n        },\n        __self: this\n      }, \"Argument from Popularity\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 911\n        },\n        __self: this\n      }, \"Argument from Position to Know\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 912\n        },\n        __self: this\n      }, \"Argument from Expert Opinion\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 913\n        },\n        __self: this\n      }, \"Argument from Precedent\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 914\n        },\n        __self: this\n      }, \"Argument from Consequences\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 915\n        },\n        __self: this\n      }, \"Argument from Waste\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 916\n        },\n        __self: this\n      }, \"Causal Slippery Slope Argument\"))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: \"btn btn-primary\",\n          value: \"Create\"\n        }\n      }\n    };\n    /* Edit Content Modal */\n\n    var editContentModal = {\n      trigger: {\n        triggerText: 'editContentTrigger',\n        className: \"editContentTrigger\",\n        triggerId: \"editContentTrigger\"\n      },\n      id: 'editContentModal',\n      title: 'Edit Atom Content',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 941\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 942\n        },\n        __self: this\n      }, \"Edit atom content\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 943\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control\",\n        rows: \"2\",\n        id: \"edit_atom_content_textarea\",\n        ref: this.editContentRef,\n        value: this.state.modalValue,\n        onChange: this.handleModalValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 944\n        },\n        __self: this\n      }))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Save'\n        }\n      }\n    };\n    /* Edit Metadata Modal  */\n\n    var editMetaDataModal = {\n      trigger: {\n        triggerText: 'Edit Meta',\n        className: 'editMeta',\n        triggerId: 'editMetaTrigger'\n      },\n      id: 'editMetadataModal',\n      title: 'Edit Metadata',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 977\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 978\n        },\n        __self: this\n      }, \"Edit atom content\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        id: \"edit_metadata\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 979\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control\",\n        rows: \"2\",\n        id: \"edit_atom_content\",\n        value: this.state.modalValue,\n        onChange: this.handleModalValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 980\n        },\n        __self: this\n      }))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: 'btn btn-secondary',\n          value: 'Close'\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Save'\n        }\n      }\n    };\n    /* Edit Scheme Type Modal */\n\n    var editSchemeTypeModal = {\n      trigger: {\n        triggerText: 'Edit Scheme Type',\n        className: 'editScheme',\n        triggerId: 'editSchemeTrigger'\n      },\n      id: 'editSchemeModal',\n      title: 'Edit Scheme',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1014\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1015\n        },\n        __self: this\n      }, \"Select a scheme\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"sel2\",\n        onChange: this.handledropDownValue,\n        value: this.state.dropDownValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1016\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1022\n        },\n        __self: this\n      }, \"Support\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1023\n        },\n        __self: this\n      }, \"Conflict\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1024\n        },\n        __self: this\n      }, \"Argument from Sign\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1025\n        },\n        __self: this\n      }, \"Argument from an Exceptional Case\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1026\n        },\n        __self: this\n      }, \"Argument from Analogy\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1027\n        },\n        __self: this\n      }, \"Argument from Bias\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1028\n        },\n        __self: this\n      }, \"Argument from Cause to Effect\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1029\n        },\n        __self: this\n      }, \"Argument from Correlation to Causes\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1030\n        },\n        __self: this\n      }, \"Argument from Established Rule\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1031\n        },\n        __self: this\n      }, \"Argument from Evidence to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1032\n        },\n        __self: this\n      }, \"Argument from Falsification to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1033\n        },\n        __self: this\n      }, \"Argument from Example\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1034\n        },\n        __self: this\n      }, \"Argument from Commitment\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1035\n        },\n        __self: this\n      }, \"Circumstantial Argument Against the Person\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1036\n        },\n        __self: this\n      }, \"Argument from Popular Practice\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1037\n        },\n        __self: this\n      }, \"Argument from Popularity\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1038\n        },\n        __self: this\n      }, \"Argument from Position to Know\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1039\n        },\n        __self: this\n      }, \"Argument from Expert Opinion\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1040\n        },\n        __self: this\n      }, \"Argument from Precedent\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1041\n        },\n        __self: this\n      }, \"Argument from Consequences\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1042\n        },\n        __self: this\n      }, \"Argument from Waste\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1043\n        },\n        __self: this\n      }, \"Causal Slippery Slope Argument\"))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: 'btn btn-secondary',\n          value: 'Close'\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Save'\n        }\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1062\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      modalProps: newAtomModal,\n      show: \"none\",\n      onClick: this.addAtom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1064\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: newSchemeModal,\n      show: \"none\",\n      onClick: this.addScheme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1069\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: editContentModal,\n      show: \"none\",\n      onClick: this.editAtomContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: editMetaDataModal,\n      show: \"none\",\n      onClick: this.editAtomMetadata,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: editSchemeTypeModal,\n      show: \"none\",\n      onClick: this.editScheme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"cy\",\n      onDrop: this.dropHandler,\n      onDragOver: this.dragoverHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1095\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Cytoscape;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/VisualisationPane/Cytoscape.js"],"names":["React","Component","Modal","cytoscape","cola","edgehandles","$","contextMenus","remove_falsy","update_scheme","update_atom_metadata","import_json","export_cytoscape","add_atom","sd","add_scheme","add_edge","get_atom","now","new_uuid","update_atom_text","get_sd","delete_edge","update","add_source","cyqtip","require","use","cy","cm","selected","position","layout","running","json","created_date","edited_date","analyst_email","analyst_name","document_id","default_sadface_doc","focused","undo_stack","redo_stack","edit_atom","resource_pane_viewable_state","Cytoscape","constructor","props","newAtomRef","createRef","newSchemeRef","editContentRef","state","modalValue","dropDownValue","initialise_monkeypuzzle","bind","initCytoscape","localStorage","getItem","loadJSON","setCurrentSadFaceDoc","setItem","current_sadface_doc","setCyData","console","log","container","document","getElementById","elements","JSON","parse","cyData","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","build_cola_layout","run","toggleOffOnLeave","handleNodes","handleSize","handleColor","handleHitThreshold","handleLineWidth","edgeType","complete","event","sourceNode","targetNode","addedEles","length","source_id","source","id","target_id","target","source_position","target_position","x","y","data","type","scheme","scheme_id","scheme_content","name","remove","add","group","toString","content","typeshape","classes","locked","edge1","edge2","edge","updateLocalStorage","componentDidMount","componentDidUpdate","prevProps","prevSate","render","newAtomModal","trigger","triggerText","triggerId","title","handleModalValueChange","footer","buttonNo","button1","className","value","button2","newSchemeModal","handledropDownValue","editContentModal","editMetaDataModal","editSchemeTypeModal","addAtom","addScheme","editAtomContent","editAtomMetadata","editScheme","dropHandler","dragoverHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//Import Components\nimport Modal from  '../Modal/Modal';\n\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport $ from 'jquery';\nimport contextMenus from 'cytoscape-context-menus';\n\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\n\n\n\n\n\n\nimport {remove_falsy,update_scheme, update_atom_metadata, import_json,export_cytoscape,add_atom, sd,add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source} from '../../lib/Sadface'; \n\nvar cyqtip = require('cytoscape-qtip');\n\ncyqtip( cytoscape ); // register extension\n\n\ncytoscape.use( edgehandles );\ncytoscape.use(contextMenus, $);\ncytoscape.use( cola );\n\n\n\n\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+edited_date+\"\\\",\\\"id\\\":\\\"\"+document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\n//var current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\n\n\nclass Cytoscape extends Component {\n  constructor(props){\n        super(props);\n        //create Refs\n        this.newAtomRef = React.createRef()\n        this.newSchemeRef = React.createRef();\n        this.editContentRef = React.createRef();\n\n        this.state={\n         modalValue: ' ',\n         dropDownValue: ' ',\n        }\n            //set up cytoscape \n            this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n            this.initCytoscape = this.initCytoscape.bind(this);\n            // this.build_cola_layout = this.build_cola_layout.bind(this);\n            \n            // //interact with Nodes\n            // this.addAtom = this.addAtom.bind(this);\n            // this.addScheme = this.addScheme.bind(this);\n            // this.editAtomContent = this.editAtomContent.bind(this);\n            // this.editAtomMetadata = this.editAtomMetadata.bind(this);\n            // this.editScheme = this.editScheme.bind(this);\n            // this.deleteNodes = this.deleteNodes.bind(this);\n            // this.mergeNodes = this.mergeNodes.bind(this);\n            \n\n            // this.redrawVisualisation = this.redrawVisualisation.bind(this);\n            // this.undo = this.undo.bind(this);\n            // this.redo = this.redo.bind(this);\n\n\n            // this.updateLocalStorage = this.updateLocalStorage.bind(this);\n            // this.dragoverHandler = this.dragoverHandler.bind(this);\n            // this.dropHandler = this.dropHandler.bind(this);\n\n            // this.handledropDownValue = this.handledropDownValue.bind(this);\n            // this.handleModalValueChange = this.handleModalValueChange.bind(this);\n            // this.setDropDownValue = this.setDropDownValue.bind(this);\n            // this.setModalValue = this.setModalValue.bind(this);\n\n        //    this.setFocus = this.setFocus.bind(this);\n        //    this.clearFocus = this.clearFocus.bind(this);\n        //    this.clearLocalStorage = this.clearLocalStorage.bind(this);\n    }\n\n    initialise_monkeypuzzle() {\n        //load diagram if there is one in localStorage\n        if (localStorage.getItem(\"state\"))\n        {\n            this.props.loadJSON(localStorage.getItem(\"state\"));\n            this.initCytoscape();\n        //else use default\n        } else\n        {\n            this.props.setCurrentSadFaceDoc(default_sadface_doc);\n            localStorage.setItem(\"state\", this.props.current_sadface_doc);\n            this.props.setCyData(export_cytoscape(import_json(this.props.current_sadface_doc)));\n            this.initCytoscape();\n        }\n    }\n\n    initCytoscape(){\n        console.log(\"initCyto\");\n        //change cy to state of APP\n        cy = cytoscape({\n            container: document.getElementById('cy'),\n            elements: JSON.parse(this.props.cyData),\n\n            style:[\n                {   selector: \"node\", \n                    style: {\n                        \"label\": \"data(content)\",\n                        \"text-opacity\": 0.7,\n                       // \"width\" : \"auto\",\n                    //    \"height\" : \"auto\",\n                        \"text-valign\": \"bottom\",\n                        \"text-halign\": \"right\",\n                        \"text-outline-color\": \"#eee\",\n                        \"text-outline-width\": 1\n                    }\n                },\n                \n                {   selector: \"[typeshape]\", \n                    style: {\n                        \"shape\":\"data(typeshape)\"\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond']\", \n                    style: {\n                        'background-color': '#CC9900'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][content='Conflict']\",\n                    style: {\n                        'background-color': 'red'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][content='Support']\",\n                    style: {\n                        'background-color': 'green'\n                    }\n                },\n\n                {   selector: \"edge\", \n                    style: {\n                        \"line-color\": \"#9dbaea\",\n                        \"target-arrow-shape\": \"triangle\",\n                        \"target-arrow-color\": \"#9dbaea\",\n                        \"curve-style\": \"bezier\"\n                    }\n                },\n\n\n                {   selector: \":selected\", \n                    style: {\n                        \"border-width\":\"1\",\n                        \"border-color\":\"black\",\n                        \"background-color\": \"#3399CC\"\n                    }\n                },\n\n\n                {   selector: \".atom-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n\n                {   selector: \".scheme-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n                {   selector: '.eh-handle',\n                    style: {\n                        'background-color': 'orange',\n                        'width': 10,\n                        'height': 10,\n                        'shape': 'ellipse',\n                        'overlay-opacity': 0,\n                        'border-width': 8, // makes the handle easier to hit\n                        'border-opacity': 0,\n                        'label': '',\n                    }\n                }\n                \n            ],\n\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n        });//close cy = cytoscape()\n\n\n\n            layout = this.build_cola_layout();\n            layout.run();\n    \n            cy.edgehandles({\n                toggleOffOnLeave: true,\n                handleNodes: \"node\",\n                handleSize: 10,\n                handleColor: \"#DF0085\",\n                handleHitThreshold: 8,\n                handleLineWidth: 5,\n                //handleLineType: \"flat\",\n                edgeType: function(){ return \"flat\"; },\n                complete: function(event, sourceNode, targetNode, addedEles){\n                    if (targetNode.length !== 0) {\n                        var source_id = targetNode[0].source().id();\n                        var target_id = targetNode[0].target().id();\n\n                        //get the mid point between source node and target node\n                        var source_position = targetNode[0].source().position();\n                        var target_position = targetNode[0].target().position();\n\n                        position = {};\n                        position.x = ((source_position.x + target_position.x)/2);\n                        position.y = ((source_position.y + target_position.y)/2);\n\n                        if (targetNode[0].source().data().type === \"atom\" && targetNode[0].target().data().type === \"atom\")\n                        {\n                            var scheme = add_scheme(\"Support\");\n                            var scheme_id = scheme.id;\n                            var scheme_content = scheme.name;\n                            //remove the automatically generated edge\n                            targetNode.remove();\n                            cy.add([\n                                {group: \"nodes\", data: {id: scheme_id.toString(),\n                                    content: scheme_content, typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n                                    ]);\n                            var edge1 = add_edge(source_id, scheme_id);\n                            var edge2 = add_edge(scheme_id, target_id);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge1.id.toString(), source: source_id, target: scheme_id } },\n                              { group: \"edges\", data: { id: edge2.id.toString(), source: scheme_id, target: target_id } }\n                              ]);\n                        } else {\n                            targetNode.remove();\n                            var edge = add_edge(source_id, target_id);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: source_id, target: target_id } }\n                              ]);\n                        }\n                        this.updateLocalStorage();\n                    } else {\n                        targetNode.remove();\n                    }\n                }.bind(this)\n            });\n            //edgehandles\n\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n    cm = cy.contextMenus({\n               // menuItems: [\n               //      {\n               //          id: \"edit-content\",\n               //          content: \"edit content\",\n               //          selector: \"node[type = \\\"atom\\\"]\",\n               //          onClickFunction: function (event) {\n               //              let target = event.target || event.cyTarget;\n               //              document.getElementById(\"editContentTrigger\").click();\n               //               this.setModalValue(target.data().content);\n               //              edit_atom = target;\n               //          }.bind(this),\n               //          hasTrailingDivider: false\n               //      },\n\n               //      {\n               //          id: \"edit-metadata\",\n               //          content: \"edit metadata\",\n               //          selector: \"node[type = \\\"atom\\\"]\",\n               //          onClickFunction: function (event) {\n               //                let target = event.target || event.cyTarget;\n               //                let meta = JSON.stringify(target.data().metadata);\n               //                document.getElementById(\"editMetaTrigger\").click();\n               //                this.setModalValue(meta);\n               //               edit_atom = target;\n               //           }.bind(this),\n               //           hasTrailingDivider: true\n               //      },\n               //      {\n               //          id: \"change-scheme\",\n               //          content: \"change scheme\",\n               //          selector: \"node[typeshape = \\\"diamond\\\"]\",\n               //          onClickFunction: function (event) {\n               //              var target = event.target || event.cyTarget;\n               //              this.setDropDownValue(target.data().content);\n               //              document.getElementById(\"editSchemeTrigger\").click();\n               //              edit_atom = target;\n               //          }.bind(this),\n               //          hasTrailingDivider: true\n               //      },\n               //      {\n               //          id: \"remove\",\n               //          content: \"remove\",\n               //          selector: \"node, edge\",\n               //          onClickFunction: function (event) {\n               //              var target = event.target || event.cyTarget;\n               //              if (selected.length !== 0) {\n               //                  selected.forEach(function(node) {\n               //                      console.log(node, \"SELECTED\");\n               //                      this.deleteNodes(node);\n               //                  }.bind(this));\n               //                  selected = [];\n               //              } else {\n               //                  if (target.data().type === \"atom\") {\n               //                      this.deleteNodes(event);\n               //                      target.remove();\n               //                  } else if (target.data().typeshape === \"diamond\"){\n               //                      this.deleteNodes(event);\n               //                      target.remove();\n               //                  } else {\n               //                      delete_edge(target.id());\n               //                      this.updateLocalStorage();\n               //                      target.remove();\n               //                  }\n               //              }\n               //          }.bind(this),\n               //          hasTrailingDivider: true\n               //      },\n               //      {\n               //          id: \"add-atom\",\n               //          content: \"add atom\",\n               //          coreAsWell: true,\n\n               //          onClickFunction: function (event) {\n               //              position = event.renderedPosition;\n               //           this.setModalValue(\"\");\n               //              document.getElementById(\"newAtomTrigger\").click();\n               //          }.bind(this)\n               //      },\n               //      {\n               //          id: \"add-scheme\",\n               //          content: \"add scheme\",\n               //          coreAsWell: true,\n               //          onClickFunction: function (event) {\n\n               //              position = event.position || event.cyPosition;\n               //              this.setDropDownValue(\"Support\");\n               //                  document.getElementById(\"new_scheme\").click();\n               //          }.bind(this),\n               //          hasTrailingDivider: true\n               //      },\n               //      {\n               //          id: \"redraw\",\n               //          content: \"redraw\",\n               //          coreAsWell: true,\n               //          onClickFunction:  (event) => this.redrawVisualisation(),\n               //          hasTrailingDivider: true\n               //      },\n               //      {\n               //          id: \"undo\",\n               //          content: \"undo\",\n               //          selector: \"node, edge\",\n               //          show: true,\n               //          coreAsWell: true,\n               //          onClickFunction:  (event) => this.undo(),\n               //          hasTrailingDivider: false\n               //      },\n               //      {\n               //          id: \"redo\",\n               //          content: \"redo\",\n               //          selector: \"node, edge\",\n               //          show: false,\n               //          coreAsWell: true,\n               //          onClickFunction: function (event) {\n               //            this.redo();\n               //            if (redo_stack === []) {\n               //              cm.hideMenuItem(\"redo\");\n               //          }\n               //          }.bind(this),\n               //          hasTrailingDivider: true\n               //      },\n               //      {\n               //        id: \"merge_nodes\",\n               //        content: \"merge nodes\",\n               //        selector: \"node\",\n               //        tooltipText: \"hello\",\n               //        show: false,\n               //        coreAsWell: true,\n               //        onClickFunction:  (event) => this.merge_nodes()\n               //      }\n               //  ],//menuitems\n            });//close context menues\n           \n\n\n\n            // cy.on(\"select\", \"node\", function(e){\n            //     console.log(undo_stack, \"tap element undo stack\");\n            //     cm.showMenuItem(\"hello\");\n            \n\n            // }.bind(this));\n\n            //  cy.on(\"unselect\", \"node\", function (e){\n            //      selected.pop(e);\n            //      cm.hideMenuItem(\"merge_nodes\");\n            //  });\n            \n\n            // cy.on(\"select\", \"node\", function (e){\n            //     console.log(e.target.id(), \"SELECT NODE\");\n            //     selected.push(e);\n            //     console.log(selected.length, \"selected length\");\n\n            //      if(selected.length>1) {\n            //           console.log(selected.length, \"selcted lentth\")\n            //           cm.showMenuItem(\"merge_nodes\");\n\n            //      } else {\n            //          cm.hideMenuItem(\"merge_nodes\");\n            //       }\n            // }.bind(this));\n\n            // cy.on(\"tap\", function (e){\n            //     //when cytoscape is tapped remove any focus from HTML elements like the tab textareas\n            //     //this mainly helps with keybinds\n            //   //  $(\":focus\").blur();\n            // });\n\n            // cy.on(\"layoutstart\", function(){\n            //     running = true;\n            // });\n\n\n            // cy.on(\"layoutstop\", function(){\n            //     running = false;\n        \n            //     var png = cy.png({ full: true });\n            //     this.props.handleSetPng(png);\n\n            //     var jpg = cy.jpg({ full: true });\n            //     this.props.handleSetJpg(jpg);\n            // }.bind(this));\n            //     /*\n            //  $(\".resource-pane\").resizable({\n            //     handleSelector: \".splitter\",\n            //     resizeHeight: false,\n            //     resizeWidthFrom: \"right\",\n            //     //onDragStart: function (e, $el, opt) {},\n            //     onDragEnd: function (e, $el, opt) {\n            //     cy.resize();\n            //     }\n            // });*/\n        }//init cyto\n\n//  build_cola_layout( opts ) {\n//     var cola_params = {\n//         name: \"cola\",\n//         animate: true,\n//         randomize: true,\n//         padding: 100,\n//         fit: false,\n//         maxSimulationTime: 1500\n//     };\n//     var i = 0;\n//     if (opts !== undefined) {\n//         opts.forEach(function(opt) {\n//          cola_params[i] = opts[i];\n//          ++i;\n//      });\n//     }\n//     return cy.makeLayout( cola_params );\n// }\n\n// deleteAtom(atom_id) {\n//     /*\n//     Remove the atom from the sadface document identified by the\n//     supplied atom ID\n//     */\n//     console.log(atom_id, \"AtomID\");\n//     if (atom_id) {\n//         var atom = get_atom(atom_id);\n//         console.log(atom, \"ATOM\");\n//         if (atom !== null && atom !== undefined) {\n//             var size = Object.keys(sd.nodes).length;\n//             for (var i = 0; i < size; ++i) {\n//                 if (sd.nodes[i].id === atom.id) {\n//                     delete sd.nodes[i];\n//                    sd.nodes = remove_falsy(sd.nodes);\n//                         return;\n//                 }\n//             }\n//         }\n//     }\n// }\n\n// dragoverHandler(ev) {\n//     console.log(\"dragoverHandler\");\n//      ev.preventDefault();\n//      ev.dataTransfer.dropEffect = \"move\";\n// }\n\n// dropHandler(ev) {\n//     console.log(\"drop handler\");\n//     ev.preventDefault();\n//     position = {x: ev.clientX-300, y: ev.clientY};\n \n//     if(this.props.selectedText !== null || this.props.selectedText != undefined){\n//         console.log(this.props.selectedText, 'TEXT');\n//         this.addAtom(this.props.selectedText);\n//         this.props.clearSelection();\n//         this.clearFocus();\n//     }\n//     else { console.log(\"Not a valid text selection.\"); }\n// }\n\n\n\n// clearFocus(){\n//     console.log(\"clear Foocus\");\n// }\n\n\n\n// addAtom(content=null) {\n//     if(content === null){\n//         content = this.state.modalValue;\n//     }\n//     if(content === \"\"){\n//         content = \"New Atom\";\n//     }\n//     console.log(content, \"content\");\n//     var meta = {\"hello\":\"world\"};\n//     var new_atom = add_atom(content);\n//     console.log(get_sd(), \"NEW ATOM\");\n//     var atom_id = new_atom.id;\n//     if (focused != null) {\n//         add_source(atom_id, focused.id, content, 0, 0);\n//     }\n//     if (position == null) {\n//         position = {\"x\": cy.width()/2, \"y\": cy.height()/2};\n//     }\n//     cy.add([\n//         {group: \"nodes\", data: {id: atom_id.toString(),\n//             content: content, type: \"atom\", typeshape: \"roundrectangle\", metadata: meta }, \n//             classes: \"atom-label\", locked: false, renderedPosition: position}\n//     ]);\n\n//     let node = cy.getElementById(atom_id.toString() );\n//  /*   node.qtip({\n//         content: function(){return 'ID: '+this.id()},\n//         position: {\n//             my: \"top center\",\n//             at: \"bottom center\"\n//         },\n//         style: {\n//             classes: \"qtip-bootstrap\",\n//             tip: {\n//                 width: 16,\n//                 height: 8\n//             }\n//         }\n//     });*/\n//     position = null;\n//     this.updateLocalStorage();\n\n// }\n\n\n\n// addScheme() {\n//     let scheme = this.state.dropDownValue;\n//     var new_scheme = add_scheme(scheme);\n//     var scheme_id = new_scheme.id;\n\n//     cy.add([\n//         {group: \"nodes\", data: {id: scheme_id.toString(),\n//             content: scheme, type: \"scheme\", typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n//     ]);\n//     this.updateLocalStorage();\n// }\n\n// editAtomContent() {\n//     let editContent = this.state.modalValue;\n//     let atom = cy.$(\"#\"+edit_atom.id());\n//     update_atom_text(edit_atom.id(), editContent);\n//     this.updateLocalStorage();\n//     atom.data(\"content\", editContent);\n//     edit_atom = null;\n// }\n\n// editAtomMetadata() {\n//    console.log(\"META\");\n//    // if(JSON.parse(newMeta)){\n//    //     console.log(newMeta, 'newMetadata');\n//   //  }else{\n//     //    console.log('fail');\n//    // }\n\n//   /*  if (JSON.parse(content)) {\n//         var metadata = JSON.parse(content);\n//         update_atom_metadata(atom.id(), metadata);\n//         this.update_local_storage();\n//         edit_atom=null;\n//     } else {\n//         alert(\"Metadata not in JSON format, unable to update\");\n//     }\n\n//         this.setState({modalValue: ' '}, () =>\n//         console.log('modalValue reset', this.state.modalValue));\n\n\n\n//         var target = event.target || event.cyTarget;\n//               var atom = get_atom(target.id());\n//               console.log(JSON.stringify(atom.metadata), 'atom metadata');\n//               document.getElementById(\"editMetaTrigger\").click();\n//               this.setState({modalValue: JSON.stringify(atom.metadata)})\n//              edit_atom = target;*/\n             \n// }\n\n// editScheme(){\n//     let content = this.state.dropDownValue;\n//     let scheme = cy.$(\"#\"+edit_atom.id());\n//     update_scheme(edit_atom.id(), content);\n//     this.updateLocalStorage();\n//     scheme.data(\"content\", content);\n//     edit_atom = null;\n\n// }\n\n// deleteNodes(event) {\n//     var target = event.target || event.cyTarget;\n//     var id = target.id();\n//     let removed = target.remove();\n//     this.deleteAtom(id);\n//     var i = 0;\n//     var sds = get_sd();\n//     var edges = sds.edges;\n//     edges.forEach(function(edge) {\n//         if (edges[i] !== undefined) {\n//             if (edges[i].source_id === id || edges[i].target_id === id) {\n//                 delete_edge(edges[i].id);\n//             }\n//             ++i;\n//         }\n//     });\n//     this.updateLocalStorage();\n// }\n\n\n\n\n// mergeNodes() {\n//     //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n//     var target;\n//     var id;\n//     var atom;\n//     var baseNode = selected[0].target || selected[0].cyTarget;\n//     var baseId = baseNode.id();\n//     var baseAtom = get_atom(baseId);\n//     var edge;\n//     if (baseAtom.type === \"atom\") {\n//         var sds = get_sd();\n//         var i = 0;\n//         selected.forEach(function(node){\n//             var j = 0;\n//             if (i > 0) {\n//                 target = selected[i].target || selected[i].cyTarget;\n//                 id = target.id();\n//                 atom = get_atom(id);\n//                 if (atom.type === \"atom\") {\n//                     atom.sources.forEach(function(source) {\n//                         add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n//                         ++j;\n//                     });\n//                     j = 0;\n//                     sds.edges.forEach(function(edge) {\n//                         if (sds.edges[j].source_id === id) {\n//                             edge = add_edge(baseId,sds.edges[j].target_id);\n//                             cy.add([\n//                               { group: \"edges\", data: { id: edge.id.toString(), source: baseId, target: sds.edges[j].target_id } }\n//                               ]);\n//                         }\n//                         if (sds.edges[j].target_id === id) {\n//                             edge = add_edge(sds.edges[j].source_id, baseId);\n//                             cy.add([\n//                               { group: \"edges\", data: { id: edge.id.toString(), source: sds.edges[j].source_id, target: baseId } }\n//                               ]);\n//                         }\n//                         ++j;\n//                     });\n//                     this.delete_nodes(selected[i]);\n//                 } else {\n//                     alert(\"cannot merge scheme nodes\");\n//                 }\n//             }\n//             ++i;\n//         });\n//         selected = [];\n//         cm.hideMenuItem(\"merge_nodes\");\n//     } else {\n//         alert(\"cannot merge scheme nodes\");\n//     }\n// }\n\n// updateLocalStorage() {\n//     var undo_item = JSON.parse(this.props.current_sadface_doc);\n    \n//     undo_stack.push(undo_item);\n  \n//     redo_stack = [];\n//     cm.showMenuItem(\"undo\");\n//     cm.hideMenuItem(\"redo\");\n//     localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n//     this.props.setCurrentSadFaceDoc(JSON.stringify(get_sd()));\n//     console.log(this.props.current_sadface_doc, \"Current sd localStorage\")\n//     update();\n//       console.log(undo_stack, \"update_local_storage\");\n// }\n\n// redrawVisualisation() {\n//     console.log(\"redraw Visualistaion\");\n//     layout.stop();\n//     layout.options.eles = cy.elements();\n//     layout.run();\n//     cy.center();\n//     cy.resize();\n// }\n\n// undo() {\n//         console.log(undo_stack, \"undo_stack undo\");\n//         if(undo_stack.length !== 0){\n//             console.log(undo_stack.length, \"LENGTH\");\n//             let redo_item = get_sd();\n//             redo_stack.push(redo_item);\n//             let state = undo_stack.pop();\n//             console.log(state, \"state\");\n//             console.log(this.state.cy_data, \"CYDATA\")\n//             this.props.loadJSON(JSON.stringify(state));\n//             console.log(undo_stack, \"END\")\n//         }\n\n\n//     //     var redo_item = get_sd();\n//     //     redo_stack.push(redo_item);\n//     //     console.log(undo_stack, \"undo stack\");\n//     //     console.log(undo_stack.pop(), 'Undo pop');\n//     //     var state = undo_stack.pop();\n//     //     this.props.loadJSON(JSON.stringify(state));\n//     //     if (undo_stack.length === 0) {\n//     //         cm.hideMenuItem(\"undo\");\n//     //     }\n//     //     cm.showMenuItem(\"redo\");\n// //    }\n// }\n\n// redo() {\n//     if (redo_stack.length !== 0) {\n//         var undo_item = get_sd();\n//         undo_stack.push(undo_item);\n//         var state = redo_stack.pop();\n//         this.loadJSON(JSON.stringify(state));\n//         if (redo_stack.length === 0) {\n//             cm.hideMenuItem(\"redo\");\n//         }\n//         cm.showMenuItem(\"undo\");\n//     }\n// }\n\n// handleModalValueChange(e) {\n//     this.setState({modalValue: e.target.value}, () =>\n//         console.log(this.state.modalValue,  \"modal value set\"));\n// }\n\n// setModalValue(newModalValue){\n//     this.setState({modalValue: newModalValue}, () =>\n//         console.log(this.state.modalValue, 'modal value set'));\n// }\n\n// handledropDownValue(e){\n//     console.log(e, \"eeeeee\");\n//     this.setState({dropDownValue: e.target.value}, () =>\n//     console.log(this.state.dropDownValue, 'dropdown value'));\n// }\n\n// setDropDownValue(newDropDownValue){\n//     this.setState({dropDownValue: newDropDownValue}, () =>\n//         console.log(this.state.dropDownValue, 'modal value set'));\n// }\n\n\n\n\n\ncomponentDidMount(){\n this.initialise_monkeypuzzle();\n// }\n// static getDerivedStateFromProps(nextProps, prevState) {\n//     if(nextProps.cy_data !== prevState.cy_data){\n//         return{cy_data: nextProps.cy_data};\n//     }\n//    else return null;\n}\n\ncomponentDidUpdate(prevProps, prevSate) {\n  // if (prevProps.demo !== this.props.demo) {\n  //   this.setState({cy_data: this.props.demo})\n  //   this.initCytoscape();\n  // }\n  // if(prevProps.showResourcePane !== this.props.showResourcePane){\n  //   this.redrawVisualisation();\n  // }\n  // if (prevProps.newAtomFromText !== this.props.newAtomFromText){\n  //   console.log(cy,  \"Cytopkjdnfkjsdnf\");\n  //   this.addAtom(this.props.selectedText);\n  // }\n  // if (prevProps.current_sadface_doc !== this.props.current_sadface_doc){\n  //       this.setState({cy_data: export_cytoscape(import_json(this.props.current_sadface_doc))});\n  //     }\n\n}\n\n\n\n\nrender(){\n     /* New Atom Modal */\n        const newAtomModal = {\n            trigger: {\n                triggerText: 'New Atom',\n                triggerId: 'newAtomTrigger'\n            },\n              title: 'New Atom',\n              id: 'newAtomModal',\n              content: <div className=\"modal-body\">\n              <p>Add some content to the new atom</p>\n              <div className=\"form-group\">\n              <textarea \n                className=\"form-control\" \n                rows=\"2\" \n                id=\"new_atom_content\" \n                onChange={this.handleModalValueChange}\n                >\n              </textarea></div></div>,\n            footer: {\n                buttonNo:2,\n                button1: {\n                  className: \"btn btn-secondary\",\n                  value: \"Close\"\n                },\n                button2: {\n                  className: 'btn btn-primary',\n                  value: 'Create',\n                },\n            }\n        };\n\n        /* New Scheme Modal*/\n        var newSchemeModal = {\n            trigger: {\n                triggerText: 'New Scheme',\n                className: \"new_scheme\",\n                triggerId: \"new_scheme\",\n            },\n              id:\"newSchemeModal\",\n              title: 'New Scheme',\n              content: <div className=\"modal-body\">\n              <p>Select a scheme</p>\n              <select \n                className=\"form-control\" \n                id=\"sel1\" \n                value={this.state.dropDownValue}\n                onChange={this.handledropDownValue}\n                >\n              <option>Support</option>\n              <option>Conflict</option>\n              <option>Argument from Sign</option>\n              <option>Argument from an Exceptional Case</option>\n              <option>Argument from Analogy</option>\n              <option>Argument from Bias</option>\n              <option>Argument from Cause to Effect</option>\n              <option>Argument from Correlation to Causes</option>\n              <option>Argument from Established Rule</option>\n              <option>Argument from Evidence to a Hypothesis</option>\n              <option>Argument from Falsification to a Hypothesis</option>\n              <option>Argument from Example</option>\n              <option>Argument from Commitment</option>\n              <option>Circumstantial Argument Against the Person</option>\n              <option>Argument from Popular Practice</option>\n              <option>Argument from Popularity</option>\n              <option>Argument from Position to Know</option>\n              <option>Argument from Expert Opinion</option>\n              <option>Argument from Precedent</option>\n              <option>Argument from Consequences</option>\n              <option>Argument from Waste</option>\n              <option>Causal Slippery Slope Argument</option>\n              </select>\n              </div>,\n            footer: {\n                buttonNo: 2,\n                button1: {\n                  className: \"btn btn-secondary\",\n                  value: \"Close\"\n                },\n                button2: {\n                  className: \"btn btn-primary\",\n                  value: \"Create\"\n                }\n            }\n        };\n\n        /* Edit Content Modal */\n        var editContentModal = {\n            trigger: {\n                triggerText: 'editContentTrigger',\n                className: \"editContentTrigger\",\n                triggerId: \"editContentTrigger\",\n            },\n            id: 'editContentModal',\n            title: 'Edit Atom Content',\n            content: <div className=\"modal-body\">\n            <p>Edit atom content</p>\n            <div className=\"form-group\">\n            <textarea \n                className=\"form-control\" \n                rows=\"2\" \n                id=\"edit_atom_content_textarea\"\n                ref={this.editContentRef}\n                value={this.state.modalValue}\n                onChange={this.handleModalValueChange}\n                ></textarea>\n                </div>\n                </div>,\n            footer: {\n                buttonNo: 2,\n                button1:{\n                    className: \"btn btn-secondary\",\n                    value: \"Close\"\n                },\n                button2: {\n                    className: 'btn btn-primary',\n                    value: 'Save',\n                }\n            }\n        };\n\n        /* Edit Metadata Modal  */\n\n            var editMetaDataModal = {\n                trigger:{\n                    triggerText: 'Edit Meta',\n                    className: 'editMeta',\n                    triggerId: 'editMetaTrigger',\n                },\n                id: 'editMetadataModal',\n                title: 'Edit Metadata',\n                content: <div className=\"modal-body\">\n                <p>Edit atom content</p>\n                <div className=\"form-group\" id=\"edit_metadata\">\n                <textarea \n                    className=\"form-control\" \n                    rows=\"2\" \n                    id=\"edit_atom_content\"\n                    value={this.state.modalValue}\n                    onChange={this.handleModalValueChange}\n\n                    >\n                </textarea>\n                </div>\n                </div>,\n                footer: {\n                    buttonNo: 2,\n                    button1: {\n                        className: 'btn btn-secondary',\n                        value: 'Close',\n                    },\n                    button2: {\n                        className: 'btn btn-primary',\n                        value: 'Save',\n                    },  \n                },\n            };\n\n            /* Edit Scheme Type Modal */\n\n                var editSchemeTypeModal = {\n                  trigger:{\n                    triggerText: 'Edit Scheme Type',\n                    className: 'editScheme',\n                    triggerId: 'editSchemeTrigger',\n                  },\n                  id: 'editSchemeModal',\n                  title: 'Edit Scheme',\n                  content: <div className=\"modal-body\">\n                  <p>Select a scheme</p>\n                  <select \n                    className=\"form-control\" \n                    id=\"sel2\"\n                    onChange={this.handledropDownValue}\n                    value={this.state.dropDownValue}\n                        >\n                  <option>Support</option>\n                  <option>Conflict</option>\n                  <option>Argument from Sign</option>\n                  <option>Argument from an Exceptional Case</option>\n                  <option>Argument from Analogy</option>\n                  <option>Argument from Bias</option>\n                  <option>Argument from Cause to Effect</option>\n                  <option>Argument from Correlation to Causes</option>\n                  <option>Argument from Established Rule</option>\n                  <option>Argument from Evidence to a Hypothesis</option>\n                  <option>Argument from Falsification to a Hypothesis</option>\n                  <option>Argument from Example</option>\n                  <option>Argument from Commitment</option>\n                  <option>Circumstantial Argument Against the Person</option>\n                  <option>Argument from Popular Practice</option>\n                  <option>Argument from Popularity</option>\n                  <option>Argument from Position to Know</option>\n                  <option>Argument from Expert Opinion</option>\n                  <option>Argument from Precedent</option>\n                  <option>Argument from Consequences</option>\n                  <option>Argument from Waste</option>\n                  <option>Causal Slippery Slope Argument</option>\n                  </select>\n                  </div>,\n                  footer: {\n                    buttonNo: 2,\n                    button1: {\n                      className: 'btn btn-secondary',\n                      value: 'Close',\n                    },\n                    button2: {\n                      className:'btn btn-primary',\n                      value: 'Save',\n                    },\n                  } \n                };\n\n\n\n    return (\n    \t<div>\n\n    \t<Modal\n            modalProps={newAtomModal}\n            show=\"none\"\n            onClick={this.addAtom}\n        />\n      <Modal\n            modalProps={newSchemeModal}\n            show=\"none\"\n            onClick={this.addScheme}\n        />\n\n        <Modal\n            modalProps={editContentModal}\n            show=\"none\"\n            onClick={this.editAtomContent}\n        />\n\n        <Modal\n            modalProps={editMetaDataModal}\n            show=\"none\"\n            onClick={this.editAtomMetadata}\n        />\n\n         <Modal\n            modalProps={editSchemeTypeModal}\n            show=\"none\"\n            onClick={this.editScheme}\n        />\n\n\n\n      <div id=\"cy\" onDrop={this.dropHandler} onDragOver={this.dragoverHandler}>\n\n      </div>\n      </div>\n      );\n}\n}\n\nexport default Cytoscape;"]},"metadata":{},"sourceType":"module"}