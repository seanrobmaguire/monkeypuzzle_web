{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\nimport $ from 'jquery';\nimport { update_atom_metadata, import_json, export_cytoscape, add_atom, sd, add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source } from '../lib/Sadface'; //Import Components\n\nimport Modal from './Modal';\n\nvar cyqtip = require('cytoscape-qtip');\n\ncyqtip(cytoscape); // register extension\n\ncytoscape.use(edgehandles);\ncytoscape.use(contextMenus, $);\ncytoscape.use(cola);\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\" + analyst_email + \"\\\",\\\"analyst_name\\\":\\\"\" + analyst_email + \"\\\",\\\"created\\\":\\\"\" + created_date + \"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\" + edited_date + \"\\\",\\\"id\\\":\\\"\" + document_id + \"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\nclass Cytoscape extends Component {\n  constructor(props) {\n    super(props); //create Refs\n\n    this.edit_atom_content = () => {\n      var content = document.getElementById(\"edit_atom_content\").value;\n      var atom = cy.$(\"#\" + edit_atom.id());\n      update_atom_text(edit_atom.id(), content);\n      this.update_local_storage();\n      atom.data(\"content\", content);\n      edit_atom = null;\n    };\n\n    this.handleEditContent = () => {\n      let editContent = this.state.modalValue;\n      let atom = cy.$(\"#\" + edit_atom.id());\n      this.update_local_storage();\n      atom.data(\"content\", editContent);\n      edit_atom = null;\n      this.setState({\n        modalValue: ' '\n      }, () => console.log('modalValue reset', this.state.modalValue));\n    };\n\n    this.newAtomRef = React.createRef();\n    this.newSchemeRef = React.createRef();\n    this.editContentRef = React.createRef();\n    this.state = {\n      png: '',\n      jpg: '',\n      NewAtomText: '',\n      modalValue: ' ',\n      dropDownValue: ' '\n    };\n    this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n    this.initCytoscape = this.initCytoscape.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n    this.edit_atom_content = this.edit_atom_content.bind(this);\n    this.delete_nodes = this.delete_nodes.bind(this);\n    this.update_local_storage = this.update_local_storage.bind(this);\n    this.redraw_visualisation = this.redraw_visualisation.bind(this);\n    this.undo = this.undo.bind(this);\n    this.redo = this.redo.bind(this);\n    this.merge_nodes = this.merge_nodes.bind(this);\n    this.delete_atom = this.delete_atom.bind(this);\n    this.dragover_handler = this.dragover_handler.bind(this);\n    this.drop_handler = this.drop_handler.bind(this);\n    this.get_selected_text = this.get_selected_text.bind(this);\n    this.add_new_atom_node = this.add_new_atom_node.bind(this);\n    this.handledropDownValue = this.handledropDownValue.bind(this);\n    this.handleAddScheme = this.handleAddScheme.bind(this);\n    this.handleModalValueChange = this.handleModalValueChange.bind(this);\n    this.edit_atom_metadata = this.edit_atom_metadata.bind(this);\n  }\n\n  initialise_monkeypuzzle() {\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\")) {\n      console.log(localStorage.getItem(\"state\"), 'localstorage');\n      this.props.loadJSON(localStorage.getItem(\"state\"));\n      this.initCytoscape(); //else use default\n    } else {\n      current_sadface_doc = default_sadface_doc;\n      localStorage.setItem(\"state\", current_sadface_doc);\n      console.log(current_sadface_doc, 'current sadface');\n      this.props.setCyData(export_cytoscape(import_json(current_sadface_doc)));\n      this.initCytoscape();\n    }\n  }\n\n  initCytoscape() {\n    console.log(\"initCyto\"); //change cy to state of APP\n\n    cy = cytoscape({\n      container: document.getElementById('cy'),\n      elements: JSON.parse(this.props.cy_data),\n      style: [{\n        selector: \"node\",\n        style: {\n          \"label\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          \"width\": \"auto\",\n          \"height\": \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: '.eh-handle',\n        style: {\n          'background-color': 'orange',\n          'width': 10,\n          'height': 10,\n          'shape': 'ellipse',\n          'overlay-opacity': 0,\n          'border-width': 8,\n          // makes the handle easier to hit\n          'border-opacity': 0,\n          'toggleOffOnLeave': true\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    }); //close cy = cytoscape()\n\n    layout = this.build_cola_layout();\n    layout.run();\n    cy.edgehandles({\n      toggleOffOnLeave: true,\n      handleNodes: \"node\",\n      handleSize: 10,\n      handleColor: \"#DF0085\",\n      handleHitThreshold: 8,\n      handleLineWidth: 5,\n      //handleLineType: \"flat\",\n      edgeType: function () {\n        return \"flat\";\n      },\n      complete: function (event, sourceNode, targetNode, addedEles) {\n        if (targetNode.length !== 0) {\n          var source_id = targetNode[0].source().id();\n          var target_id = targetNode[0].target().id(); //get the mid point between source node and target node\n\n          var source_position = targetNode[0].source().position();\n          var target_position = targetNode[0].target().position();\n          position = {};\n          position.x = (source_position.x + target_position.x) / 2;\n          position.y = (source_position.y + target_position.y) / 2;\n\n          if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\") {\n            var scheme = add_scheme(\"Support\");\n            var scheme_id = scheme.id;\n            var scheme_content = scheme.name; //remove the automatically generated edge\n\n            targetNode.remove();\n            cy.add([{\n              group: \"nodes\",\n              data: {\n                id: scheme_id.toString(),\n                content: scheme_content,\n                typeshape: \"diamond\"\n              },\n              classes: \"scheme-label\",\n              locked: false,\n              position: position\n            }]);\n            var edge1 = add_edge(source_id, scheme_id);\n            var edge2 = add_edge(scheme_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge1.id.toString(),\n                source: source_id,\n                target: scheme_id\n              }\n            }, {\n              group: \"edges\",\n              data: {\n                id: edge2.id.toString(),\n                source: scheme_id,\n                target: target_id\n              }\n            }]);\n          } else {\n            targetNode.remove();\n            var edge = add_edge(source_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge.id.toString(),\n                source: source_id,\n                target: target_id\n              }\n            }]);\n          }\n\n          this.update_local_storage();\n        } else {\n          targetNode.remove();\n        }\n      }.bind(this)\n    }); //edgehandles\n\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n\n    cm = cy.contextMenus({\n      menuItems: [{\n        id: \"edit-content\",\n        content: \"edit content\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          let target = event.target || event.cyTarget;\n          document.getElementById(\"editContentTrigger\").click();\n          this.setState({\n            modalValue: target.data().content\n          }, () => console.log(\"modal value set\", this.state.modalValue));\n          edit_atom = target;\n        }.bind(this),\n        hasTrailingDivider: false\n      }, {\n        id: \"edit-metadata\",\n        content: \"edit metadata\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          let target = event.target || event.cyTarget;\n          let meta = JSON.stringify(target.data().metadata);\n          document.getElementById(\"editMetaTrigger\").click();\n          this.setState({\n            modalValue: meta\n          }, () => console.log(this.state.modalValue, \"modal value as meta\"));\n          edit_atom = target;\n        }.bind(this),\n        hasTrailingDivider: true\n      }, {\n        id: \"change-scheme\",\n        content: \"change scheme\",\n        selector: \"node[typeshape = \\\"diamond\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n          this.setState({\n            dropDownValue: target.data().content\n          }, () => console.log(this.state.dropDownValue, 'drop down value set'));\n          document.getElementById(\"editSchemeTrigger\").click();\n          edit_atom = target;\n        }.bind(this),\n        hasTrailingDivider: true\n      }, {\n        id: \"remove\",\n        content: \"remove\",\n        selector: \"node, edge\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n\n          if (selected.length !== 0) {\n            selected.forEach(function (node) {\n              this.delete_nodes(node);\n            });\n            selected = [];\n          } else {\n            if (target.data().type == \"atom\") {\n              this.delete_nodes(event);\n              target.remove();\n            } else if (target.data().typeshape == \"diamond\") {\n              this.delete_nodes(event);\n              target.remove();\n            } else {\n              this.delete_edge(target.id());\n              this.update_local_storage();\n              target.remove();\n            }\n          }\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"add-atom\",\n        content: \"add atom\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          position = event.renderedPosition;\n          document.getElementById(\"newAtomTrigger\").click();\n        }\n      }, {\n        id: \"add-scheme\",\n        content: \"add scheme\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          position = event.position || event.cyPosition;\n          this.setState({\n            dropDownValue: \"Support\"\n          }, () => console.log(this.state.dropDownValue, 'drop down value set'));\n          document.getElementById(\"new_scheme\").click();\n        }.bind(this),\n        hasTrailingDivider: true\n      }, {\n        id: \"redraw\",\n        content: \"redraw\",\n        coreAsWell: true,\n        onClickFunction: function () {\n          this.redraw_visualisation();\n        }.bind(this),\n        hasTrailingDivider: true\n      }, {\n        id: \"undo\",\n        content: \"undo\",\n        selector: \"node, edge\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.undo();\n        }.bind(this),\n        hasTrailingDivider: false\n      }, {\n        id: \"redo\",\n        content: \"redo\",\n        selector: \"node, edge\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.redo();\n\n          if (redo_stack == []) {\n            cm.hideMenuItem(\"redo\");\n          }\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"merge_nodes\",\n        content: \"merge nodes\",\n        selector: \"node\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.merge_nodes();\n        }\n      }]\n    }); //close context menues\n\n    cy.on('click', 'node', function (evt) {\n      var item = evt.cyTarget || evt.target;\n      let data = JSON.stringify(item.data());\n      console.log('mouse on node ' + data);\n    });\n    cy.on(\"unselect\", \"node\", function (e) {\n      selected.pop(e);\n      cm.hideMenuItem(\"merge_nodes\");\n    });\n    cy.on(\"select\", \"node\", function (e) {\n      selected.push(e);\n\n      if (selected.length > 1) {\n        cm.showMenuItem(\"merge_nodes\");\n      } else {\n        cm.hideMenuItem(\"merge_nodes\");\n      }\n    });\n    cy.on(\"tap\", function (e) {\n      //when cytoscape is tapped remove any focus from HTML elements like the tab textareas\n      //this mainly helps with keybinds\n      $(\":focus\").blur();\n    });\n    cy.on(\"layoutstart\", function () {\n      running = true;\n    });\n    cy.on(\"layoutstop\", function () {\n      running = false;\n      var png = cy.png({\n        full: true\n      });\n      this.props.handleSetPng(png);\n      var jpg = cy.jpg({\n        full: true\n      });\n      this.props.handleSetJpg(jpg);\n    }.bind(this));\n    /*\n    $(\".resource-pane\").resizable({\n    handleSelector: \".splitter\",\n    resizeHeight: false,\n    resizeWidthFrom: \"right\",\n    //onDragStart: function (e, $el, opt) {},\n    onDragEnd: function (e, $el, opt) {\n    cy.resize();\n    }\n    });*/\n  }\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return cy.makeLayout(cola_params);\n  }\n\n  delete_nodes(event) {\n    var target = event.target || event.cyTarget;\n    var id = target.id(); //removed = target.remove();\n\n    this.delete_atom(id);\n    var i = 0;\n    var sds = get_sd();\n    var edges = sds.edges;\n    edges.forEach(function (edge) {\n      if (edges[i] !== undefined) {\n        if (edges[i].source_id === id || edges[i].target_id === id) {\n          delete_edge(edges[i].id);\n        }\n\n        ++i;\n      }\n    });\n    this.update_local_storage();\n  }\n\n  update_local_storage() {\n    console.log(current_sadface_doc);\n    var undo_item = JSON.parse(current_sadface_doc);\n    console.log(undo_item, 'undoitem');\n    undo_stack.push(undo_item);\n    redo_stack = [];\n    cm.showMenuItem(\"undo\");\n    cm.hideMenuItem(\"redo\");\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    current_sadface_doc = JSON.stringify(get_sd());\n    update();\n  }\n\n  redraw_visualisation() {\n    layout.stop();\n    layout.options.eles = cy.elements();\n    layout.run();\n    cy.center();\n    cy.resize();\n  }\n\n  undo() {\n    if (undo_stack.length != 0) {\n      var redo_item = get_sd();\n      console.log(redo_item, 'redo item');\n      redo_stack.push(redo_item);\n      console.log(redo_stack, 'redo stack');\n      var state = undo_stack.pop();\n      console.log(state, 'state');\n      this.loadJSON(JSON.stringify(state));\n\n      if (undo_stack.length == 0) {\n        cm.hideMenuItem(\"undo\");\n      }\n\n      cm.showMenuItem(\"redo\");\n    }\n  }\n\n  redo() {\n    if (redo_stack.length != 0) {\n      var undo_item = get_sd();\n      undo_stack.push(undo_item);\n      var state = redo_stack.pop();\n      this.loadJSON(JSON.stringify(state));\n\n      if (redo_stack.length == 0) {\n        cm.hideMenuItem(\"redo\");\n      }\n\n      cm.showMenuItem(\"undo\");\n    }\n  }\n\n  merge_nodes() {\n    //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n    var target;\n    var id;\n    var atom;\n    var baseNode = selected[0].target || selected[0].cyTarget;\n    var baseId = baseNode.id();\n    var baseAtom = get_atom(baseId);\n    var edge;\n\n    if (baseAtom.type == \"atom\") {\n      var sds = get_sd();\n      var i = 0;\n      selected.forEach(function (node) {\n        var j = 0;\n\n        if (i > 0) {\n          target = selected[i].target || selected[i].cyTarget;\n          id = target.id();\n          atom = get_atom(id);\n\n          if (atom.type == \"atom\") {\n            atom.sources.forEach(function (source) {\n              add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n              ++j;\n            });\n            j = 0;\n            sds.edges.forEach(function (edge) {\n              if (sds.edges[j].source_id == id) {\n                edge = add_edge(baseId, sds.edges[j].target_id);\n                cy.add([{\n                  group: \"edges\",\n                  data: {\n                    id: edge.id.toString(),\n                    source: baseId,\n                    target: sds.edges[j].target_id\n                  }\n                }]);\n              }\n\n              if (sds.edges[j].target_id == id) {\n                edge = add_edge(sds.edges[j].source_id, baseId);\n                cy.add([{\n                  group: \"edges\",\n                  data: {\n                    id: edge.id.toString(),\n                    source: sds.edges[j].source_id,\n                    target: baseId\n                  }\n                }]);\n              }\n\n              ++j;\n            });\n            this.delete_nodes(selected[i]);\n          } else {\n            alert(\"cannot merge scheme nodes\");\n          }\n        }\n\n        ++i;\n      });\n      selected = [];\n      cm.hideMenuItem(\"merge_nodes\");\n    } else {\n      alert(\"cannot merge scheme nodes\");\n    }\n  }\n\n  delete_atom(atom_id) {\n    /*\n    Remove the atom from the sadface document identified by the\n    supplied atom ID\n    */\n    if (atom_id) {\n      var atom = get_atom(atom_id);\n\n      if (atom !== null && atom !== undefined) {\n        var size = Object.keys(sd.nodes).length;\n\n        for (var i = 0; i < size; ++i) {\n          if (sd.nodes[i].id === atom.id) {\n            delete sd.nodes[i]; //                    sd.nodes = remove_falsy(sd.nodes);\n\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  dragover_handler(ev) {\n    ev.preventDefault();\n    ev.dataTransfer.dropEffect = \"move\";\n  }\n\n  drop_handler() {\n    ev.preventDefault();\n    position = {\n      x: ev.clientX - 280,\n      y: ev.clientY + 200\n    };\n    var selection = this.get_selected_text();\n\n    if (selection != null || selection != undefined) {\n      this.add_new_atom_node(selection);\n      this.clear_selection();\n      this.clear_focus();\n    } else {\n      console.log(\"Not a valid text selection.\");\n    }\n  }\n\n  get_selected_text() {\n    if (document.activeElement.tagName.toLowerCase() == \"textarea\") {\n      var selectedTextArea = document.activeElement;\n      var selection = selectedTextArea.value.substring(selectedTextArea.selectionStart, selectedTextArea.selectionEnd);\n      selectedTextArea.selectionStart = selectedTextArea.selectionEnd;\n    }\n\n    return selection;\n  }\n\n  componentDidMount() {\n    this.initialise_monkeypuzzle();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      cy_data: nextProps.cy_data\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    if (this.props.cy_data !== prevProps.cy_data) {\n      this.initCytoscape();\n    }\n  }\n\n  add_new_atom_node() {\n    let content = this.state.modalValue;\n    console.log(content);\n    var meta = {\n      \"hello\": \"world\"\n    };\n    var new_atom = add_atom(content);\n    var atom_id = new_atom.id;\n\n    if (focused != null) {\n      add_source(atom_id, focused.id, content, 0, 0);\n    }\n\n    if (position == null) {\n      position = {\n        \"x\": cy.width() / 2,\n        \"y\": cy.height() / 2\n      };\n    }\n\n    cy.add([{\n      group: \"nodes\",\n      data: {\n        id: atom_id.toString(),\n        content: content,\n        type: \"atom\",\n        typeshape: \"roundrectangle\",\n        metadata: meta\n      },\n      classes: \"atom-label\",\n      locked: false,\n      renderedPosition: position\n    }]);\n    let node = cy.getElementById(atom_id.toString());\n    /*   node.qtip({\n           content: function(){return 'ID: '+this.id()},\n           position: {\n               my: \"top center\",\n               at: \"bottom center\"\n           },\n           style: {\n               classes: \"qtip-bootstrap\",\n               tip: {\n                   width: 16,\n                   height: 8\n               }\n           }\n       });*/\n\n    position = null;\n    this.update_local_storage();\n  }\n\n  handleAddScheme() {\n    let scheme = this.state.dropDownValue;\n    console.log(scheme, 'new_scheme');\n    this.add_new_scheme_node(scheme);\n  }\n\n  add_new_scheme_node(scheme) {\n    // var scheme_idx = document.getElementById(\"sel1\").options.selectedIndex;\n    //  var scheme = document.getElementById(\"sel1\").options[scheme_idx].text;\n    var new_scheme = add_scheme(scheme);\n    var scheme_id = new_scheme.id;\n    cy.add([{\n      group: \"nodes\",\n      data: {\n        id: scheme_id.toString(),\n        content: scheme,\n        type: \"scheme\",\n        typeshape: \"diamond\"\n      },\n      classes: \"scheme-label\",\n      locked: false,\n      position: position\n    }]);\n    this.update_local_storage();\n  }\n\n  edit_atom_metadata() {\n    let atom = cy.$(\"#\" + edit_atom.id());\n    console.log(atom, \"ATOM\");\n    let newMeta = this.state.modalValue;\n    console.log(newMeta);\n\n    if (JSON.parse(newMeta)) {\n      console.log(newMeta, 'newMetadata');\n    } else {\n      console.log('fail');\n    }\n    /*  if (JSON.parse(content)) {\n          var metadata = JSON.parse(content);\n          update_atom_metadata(atom.id(), metadata);\n          this.update_local_storage();\n          edit_atom=null;\n      } else {\n          alert(\"Metadata not in JSON format, unable to update\");\n      }\n           this.setState({modalValue: ' '}, () =>\n          console.log('modalValue reset', this.state.modalValue));\n    \n          var target = event.target || event.cyTarget;\n                var atom = get_atom(target.id());\n                console.log(JSON.stringify(atom.metadata), 'atom metadata');\n                document.getElementById(\"editMetaTrigger\").click();\n                this.setState({modalValue: JSON.stringify(atom.metadata)})\n               edit_atom = target;*/\n\n  }\n\n  handleModalValueChange(e) {\n    this.setState({\n      modalValue: e.target.value\n    }, () => console.log(this.state.modalValue, \"modal value set\"));\n  }\n\n  handledropDownValue(e) {\n    this.setState({\n      dropDownValue: e.target.value\n    }, () => console.log(this.state.dropDownValue, 'dropdown value'));\n  }\n\n  render() {\n    /* New Atom Modal */\n    const newAtomModal = {\n      trigger: {\n        triggerText: 'New Atom',\n        triggerId: 'newAtomTrigger'\n      },\n      title: 'New Atom',\n      id: 'newAtomModal',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 808\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 809\n        },\n        __self: this\n      }, \"Add some content to the new atom\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 810\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control\",\n        rows: \"2\",\n        id: \"new_atom_content\",\n        onChange: this.handleModalValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 811\n        },\n        __self: this\n      }))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Create'\n        }\n      }\n    };\n    /* New Scheme Modal*/\n\n    var newSchemeModal = {\n      trigger: {\n        triggerText: 'New Scheme',\n        className: \"new_scheme\",\n        triggerId: \"new_scheme\"\n      },\n      id: \"newSchemeModal\",\n      title: 'New Scheme',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 840\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 841\n        },\n        __self: this\n      }, \"Select a scheme\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"sel1\",\n        value: this.state.dropDownValue,\n        onChange: this.handledropDownValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 842\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 848\n        },\n        __self: this\n      }, \"Support\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 849\n        },\n        __self: this\n      }, \"Conflict\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 850\n        },\n        __self: this\n      }, \"Argument from Sign\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 851\n        },\n        __self: this\n      }, \"Argument from an Exceptional Case\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 852\n        },\n        __self: this\n      }, \"Argument from Analogy\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 853\n        },\n        __self: this\n      }, \"Argument from Bias\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 854\n        },\n        __self: this\n      }, \"Argument from Cause to Effect\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 855\n        },\n        __self: this\n      }, \"Argument from Correlation to Causes\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 856\n        },\n        __self: this\n      }, \"Argument from Established Rule\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 857\n        },\n        __self: this\n      }, \"Argument from Evidence to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 858\n        },\n        __self: this\n      }, \"Argument from Falsification to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 859\n        },\n        __self: this\n      }, \"Argument from Example\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 860\n        },\n        __self: this\n      }, \"Argument from Commitment\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 861\n        },\n        __self: this\n      }, \"Circumstantial Argument Against the Person\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 862\n        },\n        __self: this\n      }, \"Argument from Popular Practice\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 863\n        },\n        __self: this\n      }, \"Argument from Popularity\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 864\n        },\n        __self: this\n      }, \"Argument from Position to Know\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 865\n        },\n        __self: this\n      }, \"Argument from Expert Opinion\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 866\n        },\n        __self: this\n      }, \"Argument from Precedent\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 867\n        },\n        __self: this\n      }, \"Argument from Consequences\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 868\n        },\n        __self: this\n      }, \"Argument from Waste\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 869\n        },\n        __self: this\n      }, \"Causal Slippery Slope Argument\"))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: \"btn btn-primary\",\n          value: \"Create\"\n        }\n      }\n    };\n    /* Edit Content Modal */\n\n    var editContentModal = {\n      trigger: {\n        triggerText: 'editContentTrigger',\n        className: \"editContentTrigger\",\n        triggerId: \"editContentTrigger\"\n      },\n      id: 'editContentModal',\n      title: 'Edit Atom Content',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 894\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 895\n        },\n        __self: this\n      }, \"Edit atom content\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 896\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control\",\n        rows: \"2\",\n        id: \"edit_atom_content_textarea\",\n        ref: this.editContentRef,\n        value: this.state.modalValue,\n        onChange: this.handleModalValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 897\n        },\n        __self: this\n      }))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Save'\n        }\n      }\n    };\n    /* Edit Metadata Modal  */\n\n    var editMetaDataModal = {\n      trigger: {\n        triggerText: 'Edit Meta',\n        className: 'editMeta',\n        triggerId: 'editMetaTrigger'\n      },\n      id: 'editMetadataModal',\n      title: 'Edit Metadata',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 930\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 931\n        },\n        __self: this\n      }, \"Edit atom content\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        id: \"edit_metadata\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 932\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control\",\n        rows: \"2\",\n        id: \"edit_atom_content\",\n        value: this.state.modalValue,\n        onChange: this.handleModalValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 933\n        },\n        __self: this\n      }))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: 'btn btn-secondary',\n          value: 'Close'\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Save'\n        }\n      }\n    };\n    /* Edit Scheme Type Modal */\n\n    var editSchemeTypeModal = {\n      trigger: {\n        triggerText: 'Edit Scheme Type',\n        className: 'editScheme',\n        triggerId: 'editSchemeTrigger'\n      },\n      id: 'editSchemeModal',\n      title: 'Edit Scheme',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 967\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 968\n        },\n        __self: this\n      }, \"Select a scheme\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"sel2\",\n        onChange: this.handledropDownValue,\n        value: this.state.dropDownValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 969\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 975\n        },\n        __self: this\n      }, \"Support\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 976\n        },\n        __self: this\n      }, \"Conflict\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 977\n        },\n        __self: this\n      }, \"Argument from Sign\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 978\n        },\n        __self: this\n      }, \"Argument from an Exceptional Case\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 979\n        },\n        __self: this\n      }, \"Argument from Analogy\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 980\n        },\n        __self: this\n      }, \"Argument from Bias\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 981\n        },\n        __self: this\n      }, \"Argument from Cause to Effect\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 982\n        },\n        __self: this\n      }, \"Argument from Correlation to Causes\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 983\n        },\n        __self: this\n      }, \"Argument from Established Rule\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 984\n        },\n        __self: this\n      }, \"Argument from Evidence to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 985\n        },\n        __self: this\n      }, \"Argument from Falsification to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 986\n        },\n        __self: this\n      }, \"Argument from Example\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 987\n        },\n        __self: this\n      }, \"Argument from Commitment\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 988\n        },\n        __self: this\n      }, \"Circumstantial Argument Against the Person\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 989\n        },\n        __self: this\n      }, \"Argument from Popular Practice\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 990\n        },\n        __self: this\n      }, \"Argument from Popularity\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 991\n        },\n        __self: this\n      }, \"Argument from Position to Know\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 992\n        },\n        __self: this\n      }, \"Argument from Expert Opinion\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 993\n        },\n        __self: this\n      }, \"Argument from Precedent\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 994\n        },\n        __self: this\n      }, \"Argument from Consequences\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 995\n        },\n        __self: this\n      }, \"Argument from Waste\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 996\n        },\n        __self: this\n      }, \"Causal Slippery Slope Argument\"))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: 'btn btn-secondary',\n          value: 'Close'\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Save'\n        }\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      modalProps: newAtomModal,\n      style: \"\",\n      onClick: this.add_new_atom_node,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: newSchemeModal,\n      style: \"\",\n      onClick: this.handleAddScheme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: editContentModal,\n      style: \"\",\n      onClick: this.handleEditContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1028\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: editMetaDataModal,\n      style: \"\",\n      onClick: this.edit_atom_metadata,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1034\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: editSchemeTypeModal,\n      style: \"\",\n      onClick: this.edit_atom_metadata,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1040\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"cy\",\n      onDrop: this.drop_handler(),\n      onDragOver: this.dragover_handler(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1048\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Cytoscape;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js"],"names":["React","Component","cytoscape","cola","edgehandles","contextMenus","$","update_atom_metadata","import_json","export_cytoscape","add_atom","sd","add_scheme","add_edge","get_atom","now","new_uuid","update_atom_text","get_sd","delete_edge","update","add_source","Modal","cyqtip","require","use","cy","cm","selected","position","layout","running","json","created_date","edited_date","analyst_email","analyst_name","document_id","default_sadface_doc","current_sadface_doc","focused","undo_stack","redo_stack","edit_atom","resource_pane_viewable_state","Cytoscape","constructor","props","edit_atom_content","content","document","getElementById","value","atom","id","update_local_storage","data","handleEditContent","editContent","state","modalValue","setState","console","log","newAtomRef","createRef","newSchemeRef","editContentRef","png","jpg","NewAtomText","dropDownValue","initialise_monkeypuzzle","bind","initCytoscape","build_cola_layout","delete_nodes","redraw_visualisation","undo","redo","merge_nodes","delete_atom","dragover_handler","drop_handler","get_selected_text","add_new_atom_node","handledropDownValue","handleAddScheme","handleModalValueChange","edit_atom_metadata","localStorage","getItem","loadJSON","setItem","setCyData","container","elements","JSON","parse","cy_data","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","run","toggleOffOnLeave","handleNodes","handleSize","handleColor","handleHitThreshold","handleLineWidth","edgeType","complete","event","sourceNode","targetNode","addedEles","length","source_id","source","target_id","target","source_position","target_position","x","y","type","scheme","scheme_id","scheme_content","name","remove","add","group","toString","typeshape","classes","locked","edge1","edge2","edge","menuItems","onClickFunction","cyTarget","click","hasTrailingDivider","meta","stringify","metadata","forEach","node","coreAsWell","renderedPosition","cyPosition","show","hideMenuItem","on","evt","item","e","pop","push","showMenuItem","blur","full","handleSetPng","handleSetJpg","opts","cola_params","animate","randomize","padding","fit","maxSimulationTime","i","undefined","opt","makeLayout","sds","edges","undo_item","stop","options","eles","center","resize","redo_item","baseNode","baseId","baseAtom","j","sources","resource_id","text","offset","alert","atom_id","size","Object","keys","nodes","ev","preventDefault","dataTransfer","dropEffect","clientX","clientY","selection","clear_selection","clear_focus","activeElement","tagName","toLowerCase","selectedTextArea","substring","selectionStart","selectionEnd","componentDidMount","componentWillReceiveProps","nextProps","componentDidUpdate","prevProps","new_atom","width","height","add_new_scheme_node","new_scheme","newMeta","render","newAtomModal","trigger","triggerText","triggerId","title","footer","buttonNo","button1","className","button2","newSchemeModal","editContentModal","editMetaDataModal","editSchemeTypeModal"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAO,qDAAP;AAGA,OAAOC,CAAP,MAAc,QAAd;AAGA,SAAQC,oBAAR,EAA8BC,WAA9B,EAA0CC,gBAA1C,EAA2DC,QAA3D,EAAqEC,EAArE,EAAwEC,UAAxE,EAAoFC,QAApF,EAA8FC,QAA9F,EAAwGC,GAAxG,EAA6GC,QAA7G,EAAuHC,gBAAvH,EAAyIC,MAAzI,EAAiJC,WAAjJ,EAA8JC,MAA9J,EAAsKC,UAAtK,QAAuL,gBAAvL,C,CACA;;AACA,OAAOC,KAAP,MAAmB,SAAnB;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AAEAD,MAAM,CAAErB,SAAF,CAAN,C,CAAqB;;AAGrBA,SAAS,CAACuB,GAAV,CAAerB,WAAf;AACAF,SAAS,CAACuB,GAAV,CAAcpB,YAAd,EAA4BC,CAA5B;AACAJ,SAAS,CAACuB,GAAV,CAAetB,IAAf;AAKA,IAAIuB,EAAE,GAAG,IAAT;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,QAAQ,GAAG,EAAf;AACA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,MAAM,GAAG,IAAb;AACA,IAAIC,OAAO,GAAG,KAAd;AACA,IAAIC,IAAJ;AACA,IAAIC,YAAY,GAAGlB,GAAG,EAAtB;AACA,IAAImB,WAAW,GAAGnB,GAAG,EAArB;AACA,IAAIoB,aAAa,GAAG,uBAApB;AACA,IAAIC,YAAY,GAAG,uBAAnB;AACA,IAAIC,WAAW,GAAGrB,QAAQ,EAA1B;AACA,IAAIsB,mBAAmB,GAAG,0BAAwBH,aAAxB,GAAsC,wBAAtC,GAA+DA,aAA/D,GAA6E,mBAA7E,GAAiGF,YAAjG,GAA8G,+BAA9G,GAA8IC,WAA9I,GAA0J,cAA1J,GAAyKG,WAAzK,GAAqL,oDAA/M;AACA,IAAIE,mBAAmB,GAAG,IAA1B;AACA,IAAIC,OAAO,GAAG,IAAd;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,4BAA4B,GAAG,IAAnC;;AAIA,MAAMC,SAAN,SAAwB5C,SAAxB,CAAkC;AAChC6C,EAAAA,WAAW,CAACC,KAAD,EAAO;AACZ,UAAMA,KAAN,EADY,CAEZ;;AAFY,SAkbpBC,iBAlboB,GAkbA,MAAM;AACtB,UAAIC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,EAA6CC,KAA3D;AACA,UAAIC,IAAI,GAAG3B,EAAE,CAACpB,CAAH,CAAK,MAAIqC,SAAS,CAACW,EAAV,EAAT,CAAX;AACArC,MAAAA,gBAAgB,CAAC0B,SAAS,CAACW,EAAV,EAAD,EAAiBL,OAAjB,CAAhB;AACA,WAAKM,oBAAL;AACAF,MAAAA,IAAI,CAACG,IAAL,CAAU,SAAV,EAAqBP,OAArB;AACAN,MAAAA,SAAS,GAAG,IAAZ;AACH,KAzbmB;;AAAA,SAorBpBc,iBAprBoB,GAorBA,MAAM;AACtB,UAAIC,WAAW,GAAG,KAAKC,KAAL,CAAWC,UAA7B;AACA,UAAIP,IAAI,GAAG3B,EAAE,CAACpB,CAAH,CAAK,MAAIqC,SAAS,CAACW,EAAV,EAAT,CAAX;AACA,WAAKC,oBAAL;AACAF,MAAAA,IAAI,CAACG,IAAL,CAAU,SAAV,EAAqBE,WAArB;AACAf,MAAAA,SAAS,GAAG,IAAZ;AACA,WAAKkB,QAAL,CAAc;AAACD,QAAAA,UAAU,EAAE;AAAb,OAAd,EAAiC,MAC7BE,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC,KAAKJ,KAAL,CAAWC,UAA3C,CADJ;AAEH,KA5rBmB;;AAGZ,SAAKI,UAAL,GAAiBhE,KAAK,CAACiE,SAAN,EAAjB;AACA,SAAKC,YAAL,GAAoBlE,KAAK,CAACiE,SAAN,EAApB;AACA,SAAKE,cAAL,GAAqBnE,KAAK,CAACiE,SAAN,EAArB;AAEA,SAAKN,KAAL,GAAW;AACVS,MAAAA,GAAG,EAAC,EADM;AAEVC,MAAAA,GAAG,EAAC,EAFM;AAGVC,MAAAA,WAAW,EAAE,EAHH;AAIVV,MAAAA,UAAU,EAAE,GAJF;AAKVW,MAAAA,aAAa,EAAE;AALL,KAAX;AAOI,SAAKC,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAA/B;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBF,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKzB,iBAAL,GAAyB,KAAKA,iBAAL,CAAuByB,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAMG,YAAN,GAAoB,KAAKA,YAAL,CAAkBH,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKlB,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BkB,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKI,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BJ,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKK,IAAL,GAAY,KAAKA,IAAL,CAAUL,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKM,IAAL,GAAY,KAAKA,IAAL,CAAUN,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKO,WAAL,GAAmB,KAAKA,WAAL,CAAiBP,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKQ,WAAL,GAAkB,KAAKA,WAAL,CAAiBR,IAAjB,CAAsB,IAAtB,CAAlB;AACA,SAAKS,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBT,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKU,YAAL,GAAoB,KAAKA,YAAL,CAAkBV,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKW,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBX,IAAvB,CAA4B,IAA5B,CAAzB;AAEA,SAAKY,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBZ,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKa,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBb,IAAzB,CAA8B,IAA9B,CAA3B;AACA,SAAKc,eAAL,GAAuB,KAAKA,eAAL,CAAqBd,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKe,sBAAL,GAA8B,KAAKA,sBAAL,CAA4Bf,IAA5B,CAAiC,IAAjC,CAA9B;AACA,SAAKgB,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBhB,IAAxB,CAA6B,IAA7B,CAA1B;AACP;;AAEDD,EAAAA,uBAAuB,GAAG;AAEtB;AACA,QAAIkB,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EACA;AACI7B,MAAAA,OAAO,CAACC,GAAR,CAAY2B,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ,EAA2C,cAA3C;AACA,WAAK5C,KAAL,CAAW6C,QAAX,CAAoBF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AACA,WAAKjB,aAAL,GAHJ,CAIA;AACC,KAND,MAOA;AACInC,MAAAA,mBAAmB,GAAGD,mBAAtB;AACAoD,MAAAA,YAAY,CAACG,OAAb,CAAqB,OAArB,EAA8BtD,mBAA9B;AACAuB,MAAAA,OAAO,CAACC,GAAR,CAAYxB,mBAAZ,EAAiC,iBAAjC;AACA,WAAKQ,KAAL,CAAW+C,SAAX,CAAqBrF,gBAAgB,CAACD,WAAW,CAAC+B,mBAAD,CAAZ,CAArC;AACA,WAAKmC,aAAL;AACH;AACJ;;AAEDA,EAAAA,aAAa,GAAE;AACXZ,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EADW,CAEX;;AACArC,IAAAA,EAAE,GAAGxB,SAAS,CAAC;AACX6F,MAAAA,SAAS,EAAE7C,QAAQ,CAACC,cAAT,CAAwB,IAAxB,CADA;AAEX6C,MAAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAKnD,KAAL,CAAWoD,OAAtB,CAFC;AAIXC,MAAAA,KAAK,EAAC,CACF;AAAIC,QAAAA,QAAQ,EAAE,MAAd;AACID,QAAAA,KAAK,EAAE;AACH,mBAAS,eADN;AAEH,0BAAgB,GAFb;AAGH,mBAAU,MAHP;AAIH,oBAAW,MAJR;AAKH,yBAAe,QALZ;AAMH,yBAAe,OANZ;AAOH,gCAAsB,MAPnB;AAQH,gCAAsB;AARnB;AADX,OADE,EAcF;AAAIC,QAAAA,QAAQ,EAAE,aAAd;AACID,QAAAA,KAAK,EAAE;AACH,mBAAQ;AADL;AADX,OAdE,EAoBF;AAAIC,QAAAA,QAAQ,EAAE,2BAAd;AACID,QAAAA,KAAK,EAAE;AACH,8BAAoB;AADjB;AADX,OApBE,EA0BF;AAAIC,QAAAA,QAAQ,EAAE,+CAAd;AACID,QAAAA,KAAK,EAAE;AACH,8BAAoB;AADjB;AADX,OA1BE,EAgCF;AAAIC,QAAAA,QAAQ,EAAE,8CAAd;AACID,QAAAA,KAAK,EAAE;AACH,8BAAoB;AADjB;AADX,OAhCE,EAsCF;AAAIC,QAAAA,QAAQ,EAAE,MAAd;AACID,QAAAA,KAAK,EAAE;AACH,wBAAc,SADX;AAEH,gCAAsB,UAFnB;AAGH,gCAAsB,SAHnB;AAIH,yBAAe;AAJZ;AADX,OAtCE,EAgDF;AAAIC,QAAAA,QAAQ,EAAE,WAAd;AACID,QAAAA,KAAK,EAAE;AACH,0BAAe,GADZ;AAEH,0BAAe,OAFZ;AAGH,8BAAoB;AAHjB;AADX,OAhDE,EAyDF;AAAIC,QAAAA,QAAQ,EAAE,aAAd;AACID,QAAAA,KAAK,EAAC;AACF,uBAAa,MADX;AAEF,4BAAkB;AAFhB;AADV,OAzDE,EAgEF;AAAIC,QAAAA,QAAQ,EAAE,eAAd;AACID,QAAAA,KAAK,EAAC;AACF,uBAAa,MADX;AAEF,4BAAkB;AAFhB;AADV,OAhEE,EAsEF;AAAIC,QAAAA,QAAQ,EAAE,YAAd;AACID,QAAAA,KAAK,EAAE;AACH,8BAAoB,QADjB;AAEH,mBAAS,EAFN;AAGH,oBAAU,EAHP;AAIH,mBAAS,SAJN;AAKH,6BAAmB,CALhB;AAMH,0BAAgB,CANb;AAMgB;AACnB,4BAAkB,CAPf;AAQH,8BAAoB;AARjB;AADX,OAtEE,CAJK;AAyFXE,MAAAA,mBAAmB,EAAE,KAzFV;AA0FXC,MAAAA,eAAe,EAAE,KA1FN;AA2FXC,MAAAA,aAAa,EAAE,QA3FJ;AA4FXC,MAAAA,OAAO,EAAE,GA5FE;AA6FXC,MAAAA,OAAO,EAAE;AA7FE,KAAD,CAAd,CAHW,CAiGR;;AAIC5E,IAAAA,MAAM,GAAG,KAAK6C,iBAAL,EAAT;AACA7C,IAAAA,MAAM,CAAC6E,GAAP;AAEAjF,IAAAA,EAAE,CAACtB,WAAH,CAAe;AACXwG,MAAAA,gBAAgB,EAAE,IADP;AAEXC,MAAAA,WAAW,EAAE,MAFF;AAGXC,MAAAA,UAAU,EAAE,EAHD;AAIXC,MAAAA,WAAW,EAAE,SAJF;AAKXC,MAAAA,kBAAkB,EAAE,CALT;AAMXC,MAAAA,eAAe,EAAE,CANN;AAOX;AACAC,MAAAA,QAAQ,EAAE,YAAU;AAAE,eAAO,MAAP;AAAgB,OAR3B;AASXC,MAAAA,QAAQ,EAAE,UAASC,KAAT,EAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAkD;AACxD,YAAID,UAAU,CAACE,MAAX,KAAsB,CAA1B,EAA6B;AACzB,cAAIC,SAAS,GAAGH,UAAU,CAAC,CAAD,CAAV,CAAcI,MAAd,GAAuBpE,EAAvB,EAAhB;AACA,cAAIqE,SAAS,GAAGL,UAAU,CAAC,CAAD,CAAV,CAAcM,MAAd,GAAuBtE,EAAvB,EAAhB,CAFyB,CAIzB;;AACA,cAAIuE,eAAe,GAAGP,UAAU,CAAC,CAAD,CAAV,CAAcI,MAAd,GAAuB7F,QAAvB,EAAtB;AACA,cAAIiG,eAAe,GAAGR,UAAU,CAAC,CAAD,CAAV,CAAcM,MAAd,GAAuB/F,QAAvB,EAAtB;AAEAA,UAAAA,QAAQ,GAAG,EAAX;AACAA,UAAAA,QAAQ,CAACkG,CAAT,GAAc,CAACF,eAAe,CAACE,CAAhB,GAAoBD,eAAe,CAACC,CAArC,IAAwC,CAAtD;AACAlG,UAAAA,QAAQ,CAACmG,CAAT,GAAc,CAACH,eAAe,CAACG,CAAhB,GAAoBF,eAAe,CAACE,CAArC,IAAwC,CAAtD;;AAEA,cAAIV,UAAU,CAAC,CAAD,CAAV,CAAcI,MAAd,GAAuBlE,IAAvB,GAA8ByE,IAA9B,IAAsC,MAAtC,IAAgDX,UAAU,CAAC,CAAD,CAAV,CAAcM,MAAd,GAAuBpE,IAAvB,GAA8ByE,IAA9B,IAAsC,MAA1F,EACA;AACI,gBAAIC,MAAM,GAAGtH,UAAU,CAAC,SAAD,CAAvB;AACA,gBAAIuH,SAAS,GAAGD,MAAM,CAAC5E,EAAvB;AACA,gBAAI8E,cAAc,GAAGF,MAAM,CAACG,IAA5B,CAHJ,CAII;;AACAf,YAAAA,UAAU,CAACgB,MAAX;AACA5G,YAAAA,EAAE,CAAC6G,GAAH,CAAO,CACH;AAACC,cAAAA,KAAK,EAAE,OAAR;AAAiBhF,cAAAA,IAAI,EAAE;AAACF,gBAAAA,EAAE,EAAE6E,SAAS,CAACM,QAAV,EAAL;AACnBxF,gBAAAA,OAAO,EAAEmF,cADU;AACMM,gBAAAA,SAAS,EAAE;AADjB,eAAvB;AACqDC,cAAAA,OAAO,EAAE,cAD9D;AAC8EC,cAAAA,MAAM,EAAE,KADtF;AAC6F/G,cAAAA,QAAQ,EAAEA;AADvG,aADG,CAAP;AAIA,gBAAIgH,KAAK,GAAGhI,QAAQ,CAAC4G,SAAD,EAAYU,SAAZ,CAApB;AACA,gBAAIW,KAAK,GAAGjI,QAAQ,CAACsH,SAAD,EAAYR,SAAZ,CAApB;AACAjG,YAAAA,EAAE,CAAC6G,GAAH,CAAO,CACL;AAAEC,cAAAA,KAAK,EAAE,OAAT;AAAkBhF,cAAAA,IAAI,EAAE;AAAEF,gBAAAA,EAAE,EAAEuF,KAAK,CAACvF,EAAN,CAASmF,QAAT,EAAN;AAA2Bf,gBAAAA,MAAM,EAAED,SAAnC;AAA8CG,gBAAAA,MAAM,EAAEO;AAAtD;AAAxB,aADK,EAEL;AAAEK,cAAAA,KAAK,EAAE,OAAT;AAAkBhF,cAAAA,IAAI,EAAE;AAAEF,gBAAAA,EAAE,EAAEwF,KAAK,CAACxF,EAAN,CAASmF,QAAT,EAAN;AAA2Bf,gBAAAA,MAAM,EAAES,SAAnC;AAA8CP,gBAAAA,MAAM,EAAED;AAAtD;AAAxB,aAFK,CAAP;AAIH,WAjBD,MAiBO;AACHL,YAAAA,UAAU,CAACgB,MAAX;AACA,gBAAIS,IAAI,GAAGlI,QAAQ,CAAC4G,SAAD,EAAYE,SAAZ,CAAnB;AACAjG,YAAAA,EAAE,CAAC6G,GAAH,CAAO,CACL;AAAEC,cAAAA,KAAK,EAAE,OAAT;AAAkBhF,cAAAA,IAAI,EAAE;AAAEF,gBAAAA,EAAE,EAAEyF,IAAI,CAACzF,EAAL,CAAQmF,QAAR,EAAN;AAA0Bf,gBAAAA,MAAM,EAAED,SAAlC;AAA6CG,gBAAAA,MAAM,EAAED;AAArD;AAAxB,aADK,CAAP;AAGH;;AACD,eAAKpE,oBAAL;AACH,SArCD,MAqCO;AACH+D,UAAAA,UAAU,CAACgB,MAAX;AACH;AACJ,OAzCS,CAyCR7D,IAzCQ,CAyCH,IAzCG;AATC,KAAf,EAxGO,CA4JP;;AAER;;;;;;AAKA9C,IAAAA,EAAE,GAAGD,EAAE,CAACrB,YAAH,CAAgB;AAClB2I,MAAAA,SAAS,EAAE,CACN;AACI1F,QAAAA,EAAE,EAAE,cADR;AAEIL,QAAAA,OAAO,EAAE,cAFb;AAGIoD,QAAAA,QAAQ,EAAE,uBAHd;AAII4C,QAAAA,eAAe,EAAE,UAAU7B,KAAV,EAAiB;AAC9B,cAAIQ,MAAM,GAAGR,KAAK,CAACQ,MAAN,IAAgBR,KAAK,CAAC8B,QAAnC;AACAhG,UAAAA,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,EAA8CgG,KAA9C;AACA,eAAKtF,QAAL,CAAc;AAACD,YAAAA,UAAU,EAACgE,MAAM,CAACpE,IAAP,GAAcP;AAA1B,WAAd,EAAkD,MAClDa,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B,KAAKJ,KAAL,CAAWC,UAA1C,CADA;AAEAjB,UAAAA,SAAS,GAAGiF,MAAZ;AACH,SANgB,CAMfnD,IANe,CAMV,IANU,CAJrB;AAWI2E,QAAAA,kBAAkB,EAAE;AAXxB,OADM,EAeN;AACI9F,QAAAA,EAAE,EAAE,eADR;AAEIL,QAAAA,OAAO,EAAE,eAFb;AAGIoD,QAAAA,QAAQ,EAAE,uBAHd;AAII4C,QAAAA,eAAe,EAAE,UAAU7B,KAAV,EAAiB;AAC5B,cAAIQ,MAAM,GAAGR,KAAK,CAACQ,MAAN,IAAgBR,KAAK,CAAC8B,QAAnC;AACA,cAAIG,IAAI,GAAGpD,IAAI,CAACqD,SAAL,CAAe1B,MAAM,CAACpE,IAAP,GAAc+F,QAA7B,CAAX;AACArG,UAAAA,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,EAA2CgG,KAA3C;AACA,eAAKtF,QAAL,CAAc;AAACD,YAAAA,UAAU,EAAEyF;AAAb,WAAd,EAAkC,MAChCvF,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWC,UAAvB,EAAmC,qBAAnC,CADF;AAEDjB,UAAAA,SAAS,GAAGiF,MAAZ;AACH,SAPe,CAOdnD,IAPc,CAOT,IAPS,CAJrB;AAYK2E,QAAAA,kBAAkB,EAAE;AAZzB,OAfM,EA6BN;AACI9F,QAAAA,EAAE,EAAE,eADR;AAEIL,QAAAA,OAAO,EAAE,eAFb;AAGIoD,QAAAA,QAAQ,EAAE,+BAHd;AAII4C,QAAAA,eAAe,EAAE,UAAU7B,KAAV,EAAiB;AAC9B,cAAIQ,MAAM,GAAGR,KAAK,CAACQ,MAAN,IAAgBR,KAAK,CAAC8B,QAAnC;AACA,eAAKrF,QAAL,CAAc;AAACU,YAAAA,aAAa,EAAEqD,MAAM,CAACpE,IAAP,GAAcP;AAA9B,WAAd,EAAqD,MAErDa,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWY,aAAvB,EAAsC,qBAAtC,CAFA;AAKArB,UAAAA,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,EAA6CgG,KAA7C;AACAxG,UAAAA,SAAS,GAAGiF,MAAZ;AACH,SATgB,CASfnD,IATe,CASV,IATU,CAJrB;AAcI2E,QAAAA,kBAAkB,EAAE;AAdxB,OA7BM,EA6CN;AACI9F,QAAAA,EAAE,EAAE,QADR;AAEIL,QAAAA,OAAO,EAAE,QAFb;AAGIoD,QAAAA,QAAQ,EAAE,YAHd;AAII4C,QAAAA,eAAe,EAAE,UAAU7B,KAAV,EAAiB;AAC9B,cAAIQ,MAAM,GAAGR,KAAK,CAACQ,MAAN,IAAgBR,KAAK,CAAC8B,QAAnC;;AACA,cAAItH,QAAQ,CAAC4F,MAAT,KAAoB,CAAxB,EAA2B;AACvB5F,YAAAA,QAAQ,CAAC4H,OAAT,CAAiB,UAASC,IAAT,EAAe;AAC5B,mBAAK7E,YAAL,CAAkB6E,IAAlB;AACH,aAFD;AAGA7H,YAAAA,QAAQ,GAAG,EAAX;AACH,WALD,MAKO;AACH,gBAAIgG,MAAM,CAACpE,IAAP,GAAcyE,IAAd,IAAoB,MAAxB,EAAgC;AAC5B,mBAAKrD,YAAL,CAAkBwC,KAAlB;AACAQ,cAAAA,MAAM,CAACU,MAAP;AACH,aAHD,MAGO,IAAIV,MAAM,CAACpE,IAAP,GAAckF,SAAd,IAAyB,SAA7B,EAAuC;AAC1C,mBAAK9D,YAAL,CAAkBwC,KAAlB;AACAQ,cAAAA,MAAM,CAACU,MAAP;AACH,aAHM,MAGA;AACH,mBAAKnH,WAAL,CAAiByG,MAAM,CAACtE,EAAP,EAAjB;AACA,mBAAKC,oBAAL;AACAqE,cAAAA,MAAM,CAACU,MAAP;AACH;AACJ;AACJ,SAxBL;AAyBIc,QAAAA,kBAAkB,EAAE;AAzBxB,OA7CM,EAwEN;AACI9F,QAAAA,EAAE,EAAE,UADR;AAEIL,QAAAA,OAAO,EAAE,UAFb;AAGIyG,QAAAA,UAAU,EAAE,IAHhB;AAKIT,QAAAA,eAAe,EAAE,UAAU7B,KAAV,EAAiB;AAC9BvF,UAAAA,QAAQ,GAAGuF,KAAK,CAACuC,gBAAjB;AACAzG,UAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CgG,KAA1C;AACH;AARL,OAxEM,EAkFN;AACI7F,QAAAA,EAAE,EAAE,YADR;AAEIL,QAAAA,OAAO,EAAE,YAFb;AAGIyG,QAAAA,UAAU,EAAE,IAHhB;AAIIT,QAAAA,eAAe,EAAE,UAAU7B,KAAV,EAAiB;AAE9BvF,UAAAA,QAAQ,GAAGuF,KAAK,CAACvF,QAAN,IAAkBuF,KAAK,CAACwC,UAAnC;AACA,eAAK/F,QAAL,CAAc;AAACU,YAAAA,aAAa,EAAE;AAAhB,WAAd,EAA0C,MACtCT,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWY,aAAvB,EAAsC,qBAAtC,CADJ;AAEIrB,UAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCgG,KAAtC;AACP,SANgB,CAMf1E,IANe,CAMV,IANU,CAJrB;AAWI2E,QAAAA,kBAAkB,EAAE;AAXxB,OAlFM,EA+FN;AACI9F,QAAAA,EAAE,EAAE,QADR;AAEIL,QAAAA,OAAO,EAAE,QAFb;AAGIyG,QAAAA,UAAU,EAAE,IAHhB;AAIIT,QAAAA,eAAe,EAAE,YAAY;AAAE,eAAKpE,oBAAL;AAA8B,SAA5C,CAA6CJ,IAA7C,CAAkD,IAAlD,CAJrB;AAKI2E,QAAAA,kBAAkB,EAAE;AALxB,OA/FM,EAsGN;AACI9F,QAAAA,EAAE,EAAE,MADR;AAEIL,QAAAA,OAAO,EAAE,MAFb;AAGIoD,QAAAA,QAAQ,EAAE,YAHd;AAIIwD,QAAAA,IAAI,EAAE,KAJV;AAKIH,QAAAA,UAAU,EAAE,IALhB;AAMIT,QAAAA,eAAe,EAAE,UAAU7B,KAAV,EAAiB;AAChC,eAAKtC,IAAL;AACH,SAFkB,CAEjBL,IAFiB,CAEZ,IAFY,CANrB;AASE2E,QAAAA,kBAAkB,EAAE;AATtB,OAtGM,EAiHN;AACI9F,QAAAA,EAAE,EAAE,MADR;AAEIL,QAAAA,OAAO,EAAE,MAFb;AAGIoD,QAAAA,QAAQ,EAAE,YAHd;AAIIwD,QAAAA,IAAI,EAAE,KAJV;AAKIH,QAAAA,UAAU,EAAE,IALhB;AAMIT,QAAAA,eAAe,EAAE,UAAU7B,KAAV,EAAiB;AAChC,eAAKrC,IAAL;;AACA,cAAIrC,UAAU,IAAI,EAAlB,EAAsB;AACpBf,YAAAA,EAAE,CAACmI,YAAH,CAAgB,MAAhB;AACH;AACA,SAXL;AAYIV,QAAAA,kBAAkB,EAAE;AAZxB,OAjHM,EA+HN;AACE9F,QAAAA,EAAE,EAAE,aADN;AAEEL,QAAAA,OAAO,EAAE,aAFX;AAGEoD,QAAAA,QAAQ,EAAE,MAHZ;AAIEwD,QAAAA,IAAI,EAAE,KAJR;AAKEH,QAAAA,UAAU,EAAE,IALd;AAMET,QAAAA,eAAe,EAAE,UAAU7B,KAAV,EAAiB;AAC9B,eAAKpC,WAAL;AACH;AARH,OA/HM;AADO,KAAhB,CAAL,CAnKe,CA8SR;;AAECtD,IAAAA,EAAE,CAACqI,EAAH,CAAM,OAAN,EAAe,MAAf,EAAuB,UAASC,GAAT,EAAa;AAChC,UAAIC,IAAI,GAAGD,GAAG,CAACd,QAAJ,IAAgBc,GAAG,CAACpC,MAA/B;AACA,UAAIpE,IAAI,GAAGyC,IAAI,CAACqD,SAAL,CAAeW,IAAI,CAACzG,IAAL,EAAf,CAAX;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAa,mBAAmBP,IAAhC;AACH,KAJD;AAQA9B,IAAAA,EAAE,CAACqI,EAAH,CAAM,UAAN,EAAkB,MAAlB,EAA0B,UAAUG,CAAV,EAAY;AAClCtI,MAAAA,QAAQ,CAACuI,GAAT,CAAaD,CAAb;AACAvI,MAAAA,EAAE,CAACmI,YAAH,CAAgB,aAAhB;AACH,KAHD;AAKApI,IAAAA,EAAE,CAACqI,EAAH,CAAM,QAAN,EAAgB,MAAhB,EAAwB,UAAUG,CAAV,EAAY;AAChCtI,MAAAA,QAAQ,CAACwI,IAAT,CAAcF,CAAd;;AAEA,UAAGtI,QAAQ,CAAC4F,MAAT,GAAgB,CAAnB,EAAsB;AAClB7F,QAAAA,EAAE,CAAC0I,YAAH,CAAgB,aAAhB;AACH,OAFD,MAEO;AACH1I,QAAAA,EAAE,CAACmI,YAAH,CAAgB,aAAhB;AACH;AACJ,KARD;AAUApI,IAAAA,EAAE,CAACqI,EAAH,CAAM,KAAN,EAAa,UAAUG,CAAV,EAAY;AACrB;AACA;AACA5J,MAAAA,CAAC,CAAC,QAAD,CAAD,CAAYgK,IAAZ;AACH,KAJD;AAMA5I,IAAAA,EAAE,CAACqI,EAAH,CAAM,aAAN,EAAqB,YAAU;AAC3BhI,MAAAA,OAAO,GAAG,IAAV;AACH,KAFD;AAKAL,IAAAA,EAAE,CAACqI,EAAH,CAAM,YAAN,EAAoB,YAAU;AAC1BhI,MAAAA,OAAO,GAAG,KAAV;AAEA,UAAIqC,GAAG,GAAG1C,EAAE,CAAC0C,GAAH,CAAO;AAAEmG,QAAAA,IAAI,EAAE;AAAR,OAAP,CAAV;AACA,WAAKxH,KAAL,CAAWyH,YAAX,CAAwBpG,GAAxB;AAEA,UAAIC,GAAG,GAAG3C,EAAE,CAAC2C,GAAH,CAAO;AAAEkG,QAAAA,IAAI,EAAE;AAAR,OAAP,CAAV;AACA,WAAKxH,KAAL,CAAW0H,YAAX,CAAwBpG,GAAxB;AACH,KARmB,CAQlBI,IARkB,CAQb,IARa,CAApB;AASI;;;;;;;;;;AAWd;;AAEDE,EAAAA,iBAAiB,CAAE+F,IAAF,EAAS;AACvB,QAAIC,WAAW,GAAG;AACdtC,MAAAA,IAAI,EAAE,MADQ;AAEduC,MAAAA,OAAO,EAAE,IAFK;AAGdC,MAAAA,SAAS,EAAE,IAHG;AAIdC,MAAAA,OAAO,EAAE,GAJK;AAKdC,MAAAA,GAAG,EAAE,KALS;AAMdC,MAAAA,iBAAiB,EAAE;AANL,KAAlB;AAQA,QAAIC,CAAC,GAAG,CAAR;;AACA,QAAIP,IAAI,KAAKQ,SAAb,EAAwB;AACpBR,MAAAA,IAAI,CAAClB,OAAL,CAAa,UAAS2B,GAAT,EAAc;AAC1BR,QAAAA,WAAW,CAACM,CAAD,CAAX,GAAiBP,IAAI,CAACO,CAAD,CAArB;AACA,UAAEA,CAAF;AACH,OAHE;AAIH;;AACD,WAAOvJ,EAAE,CAAC0J,UAAH,CAAeT,WAAf,CAAP;AACH;;AAWD/F,EAAAA,YAAY,CAACwC,KAAD,EAAQ;AAChB,QAAIQ,MAAM,GAAGR,KAAK,CAACQ,MAAN,IAAgBR,KAAK,CAAC8B,QAAnC;AACA,QAAI5F,EAAE,GAAGsE,MAAM,CAACtE,EAAP,EAAT,CAFgB,CAGhB;;AACA,SAAK2B,WAAL,CAAiB3B,EAAjB;AACA,QAAI2H,CAAC,GAAG,CAAR;AACA,QAAII,GAAG,GAAGnK,MAAM,EAAhB;AACA,QAAIoK,KAAK,GAAGD,GAAG,CAACC,KAAhB;AACAA,IAAAA,KAAK,CAAC9B,OAAN,CAAc,UAAST,IAAT,EAAe;AACzB,UAAIuC,KAAK,CAACL,CAAD,CAAL,KAAaC,SAAjB,EAA4B;AACxB,YAAII,KAAK,CAACL,CAAD,CAAL,CAASxD,SAAT,KAAuBnE,EAAvB,IAA6BgI,KAAK,CAACL,CAAD,CAAL,CAAStD,SAAT,KAAuBrE,EAAxD,EAA4D;AACxDnC,UAAAA,WAAW,CAACmK,KAAK,CAACL,CAAD,CAAL,CAAS3H,EAAV,CAAX;AACH;;AACD,UAAE2H,CAAF;AACH;AACJ,KAPD;AAQA,SAAK1H,oBAAL;AACH;;AAEDA,EAAAA,oBAAoB,GAAG;AACnBO,IAAAA,OAAO,CAACC,GAAR,CAAYxB,mBAAZ;AACA,QAAIgJ,SAAS,GAAGtF,IAAI,CAACC,KAAL,CAAW3D,mBAAX,CAAhB;AACAuB,IAAAA,OAAO,CAACC,GAAR,CAAYwH,SAAZ,EAAuB,UAAvB;AACA9I,IAAAA,UAAU,CAAC2H,IAAX,CAAgBmB,SAAhB;AACA7I,IAAAA,UAAU,GAAG,EAAb;AACAf,IAAAA,EAAE,CAAC0I,YAAH,CAAgB,MAAhB;AACA1I,IAAAA,EAAE,CAACmI,YAAH,CAAgB,MAAhB;AACApE,IAAAA,YAAY,CAACG,OAAb,CAAqB,OAArB,EAA8BI,IAAI,CAACqD,SAAL,CAAepI,MAAM,EAArB,CAA9B;AACAqB,IAAAA,mBAAmB,GAAG0D,IAAI,CAACqD,SAAL,CAAepI,MAAM,EAArB,CAAtB;AACAE,IAAAA,MAAM;AACT;;AAEDyD,EAAAA,oBAAoB,GAAG;AACnB/C,IAAAA,MAAM,CAAC0J,IAAP;AACA1J,IAAAA,MAAM,CAAC2J,OAAP,CAAeC,IAAf,GAAsBhK,EAAE,CAACsE,QAAH,EAAtB;AACAlE,IAAAA,MAAM,CAAC6E,GAAP;AACAjF,IAAAA,EAAE,CAACiK,MAAH;AACAjK,IAAAA,EAAE,CAACkK,MAAH;AACH;;AAED9G,EAAAA,IAAI,GAAG;AACH,QAAIrC,UAAU,CAAC+E,MAAX,IAAqB,CAAzB,EAA4B;AACxB,UAAIqE,SAAS,GAAG3K,MAAM,EAAtB;AACA4C,MAAAA,OAAO,CAACC,GAAR,CAAY8H,SAAZ,EAAuB,WAAvB;AACAnJ,MAAAA,UAAU,CAAC0H,IAAX,CAAgByB,SAAhB;AACA/H,MAAAA,OAAO,CAACC,GAAR,CAAYrB,UAAZ,EAAwB,YAAxB;AACA,UAAIiB,KAAK,GAAGlB,UAAU,CAAC0H,GAAX,EAAZ;AACArG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAmB,OAAnB;AACA,WAAKiC,QAAL,CAAcK,IAAI,CAACqD,SAAL,CAAe3F,KAAf,CAAd;;AACA,UAAIlB,UAAU,CAAC+E,MAAX,IAAqB,CAAzB,EAA4B;AACxB7F,QAAAA,EAAE,CAACmI,YAAH,CAAgB,MAAhB;AACH;;AACDnI,MAAAA,EAAE,CAAC0I,YAAH,CAAgB,MAAhB;AACH;AACJ;;AAEDtF,EAAAA,IAAI,GAAG;AACH,QAAIrC,UAAU,CAAC8E,MAAX,IAAqB,CAAzB,EAA4B;AACxB,UAAI+D,SAAS,GAAGrK,MAAM,EAAtB;AACAuB,MAAAA,UAAU,CAAC2H,IAAX,CAAgBmB,SAAhB;AACA,UAAI5H,KAAK,GAAGjB,UAAU,CAACyH,GAAX,EAAZ;AACA,WAAKvE,QAAL,CAAcK,IAAI,CAACqD,SAAL,CAAe3F,KAAf,CAAd;;AACA,UAAIjB,UAAU,CAAC8E,MAAX,IAAqB,CAAzB,EAA4B;AACxB7F,QAAAA,EAAE,CAACmI,YAAH,CAAgB,MAAhB;AACH;;AACDnI,MAAAA,EAAE,CAAC0I,YAAH,CAAgB,MAAhB;AACH;AACJ;;AAGDrF,EAAAA,WAAW,GAAG;AACV;AACA,QAAI4C,MAAJ;AACA,QAAItE,EAAJ;AACA,QAAID,IAAJ;AACA,QAAIyI,QAAQ,GAAGlK,QAAQ,CAAC,CAAD,CAAR,CAAYgG,MAAZ,IAAsBhG,QAAQ,CAAC,CAAD,CAAR,CAAYsH,QAAjD;AACA,QAAI6C,MAAM,GAAGD,QAAQ,CAACxI,EAAT,EAAb;AACA,QAAI0I,QAAQ,GAAGlL,QAAQ,CAACiL,MAAD,CAAvB;AACA,QAAIhD,IAAJ;;AACA,QAAIiD,QAAQ,CAAC/D,IAAT,IAAiB,MAArB,EAA6B;AACzB,UAAIoD,GAAG,GAAGnK,MAAM,EAAhB;AACA,UAAI+J,CAAC,GAAG,CAAR;AACArJ,MAAAA,QAAQ,CAAC4H,OAAT,CAAiB,UAASC,IAAT,EAAc;AAC3B,YAAIwC,CAAC,GAAG,CAAR;;AACA,YAAIhB,CAAC,GAAG,CAAR,EAAW;AACPrD,UAAAA,MAAM,GAAGhG,QAAQ,CAACqJ,CAAD,CAAR,CAAYrD,MAAZ,IAAsBhG,QAAQ,CAACqJ,CAAD,CAAR,CAAY/B,QAA3C;AACA5F,UAAAA,EAAE,GAAGsE,MAAM,CAACtE,EAAP,EAAL;AACAD,UAAAA,IAAI,GAAGvC,QAAQ,CAACwC,EAAD,CAAf;;AACA,cAAID,IAAI,CAAC4E,IAAL,IAAa,MAAjB,EAAyB;AACrB5E,YAAAA,IAAI,CAAC6I,OAAL,CAAa1C,OAAb,CAAqB,UAAS9B,MAAT,EAAiB;AAClCrG,cAAAA,UAAU,CAAC0K,MAAD,EAAS1I,IAAI,CAAC6I,OAAL,CAAaD,CAAb,EAAgBE,WAAzB,EAAsC9I,IAAI,CAAC6I,OAAL,CAAaD,CAAb,EAAgBG,IAAtD,EAA4D/I,IAAI,CAAC6I,OAAL,CAAaD,CAAb,EAAgBI,MAA5E,EAAoFhJ,IAAI,CAAC6I,OAAL,CAAaD,CAAb,EAAgBzE,MAApG,CAAV;AACA,gBAAEyE,CAAF;AACH,aAHD;AAIAA,YAAAA,CAAC,GAAG,CAAJ;AACAZ,YAAAA,GAAG,CAACC,KAAJ,CAAU9B,OAAV,CAAkB,UAAST,IAAT,EAAe;AAC7B,kBAAIsC,GAAG,CAACC,KAAJ,CAAUW,CAAV,EAAaxE,SAAb,IAA0BnE,EAA9B,EAAkC;AAC9ByF,gBAAAA,IAAI,GAAGlI,QAAQ,CAACkL,MAAD,EAAQV,GAAG,CAACC,KAAJ,CAAUW,CAAV,EAAatE,SAArB,CAAf;AACAjG,gBAAAA,EAAE,CAAC6G,GAAH,CAAO,CACL;AAAEC,kBAAAA,KAAK,EAAE,OAAT;AAAkBhF,kBAAAA,IAAI,EAAE;AAAEF,oBAAAA,EAAE,EAAEyF,IAAI,CAACzF,EAAL,CAAQmF,QAAR,EAAN;AAA0Bf,oBAAAA,MAAM,EAAEqE,MAAlC;AAA0CnE,oBAAAA,MAAM,EAAEyD,GAAG,CAACC,KAAJ,CAAUW,CAAV,EAAatE;AAA/D;AAAxB,iBADK,CAAP;AAGH;;AACD,kBAAI0D,GAAG,CAACC,KAAJ,CAAUW,CAAV,EAAatE,SAAb,IAA0BrE,EAA9B,EAAkC;AAC9ByF,gBAAAA,IAAI,GAAGlI,QAAQ,CAACwK,GAAG,CAACC,KAAJ,CAAUW,CAAV,EAAaxE,SAAd,EAAyBsE,MAAzB,CAAf;AACArK,gBAAAA,EAAE,CAAC6G,GAAH,CAAO,CACL;AAAEC,kBAAAA,KAAK,EAAE,OAAT;AAAkBhF,kBAAAA,IAAI,EAAE;AAAEF,oBAAAA,EAAE,EAAEyF,IAAI,CAACzF,EAAL,CAAQmF,QAAR,EAAN;AAA0Bf,oBAAAA,MAAM,EAAE2D,GAAG,CAACC,KAAJ,CAAUW,CAAV,EAAaxE,SAA/C;AAA0DG,oBAAAA,MAAM,EAAEmE;AAAlE;AAAxB,iBADK,CAAP;AAGH;;AACD,gBAAEE,CAAF;AACH,aAdD;AAeA,iBAAKrH,YAAL,CAAkBhD,QAAQ,CAACqJ,CAAD,CAA1B;AACH,WAtBD,MAsBO;AACHqB,YAAAA,KAAK,CAAC,2BAAD,CAAL;AACH;AACJ;;AACD,UAAErB,CAAF;AACH,OAjCD;AAkCArJ,MAAAA,QAAQ,GAAG,EAAX;AACAD,MAAAA,EAAE,CAACmI,YAAH,CAAgB,aAAhB;AACH,KAvCD,MAuCO;AACHwC,MAAAA,KAAK,CAAC,2BAAD,CAAL;AACH;AACJ;;AAEDrH,EAAAA,WAAW,CAACsH,OAAD,EAAU;AACjB;;;;AAIA,QAAIA,OAAJ,EAAa;AACT,UAAIlJ,IAAI,GAAGvC,QAAQ,CAACyL,OAAD,CAAnB;;AACA,UAAIlJ,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK6H,SAA9B,EAAyC;AACrC,YAAIsB,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAY/L,EAAE,CAACgM,KAAf,EAAsBnF,MAAjC;;AACA,aAAK,IAAIyD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuB,IAApB,EAA0B,EAAEvB,CAA5B,EAA+B;AAC3B,cAAItK,EAAE,CAACgM,KAAH,CAAS1B,CAAT,EAAY3H,EAAZ,KAAmBD,IAAI,CAACC,EAA5B,EAAgC;AAC5B,mBAAO3C,EAAE,CAACgM,KAAH,CAAS1B,CAAT,CAAP,CAD4B,CAEhD;;AACwB;AACP;AACJ;AACJ;AACJ;AACJ;;AAED/F,EAAAA,gBAAgB,CAAC0H,EAAD,EAAK;AAChBA,IAAAA,EAAE,CAACC,cAAH;AACAD,IAAAA,EAAE,CAACE,YAAH,CAAgBC,UAAhB,GAA6B,MAA7B;AACJ;;AAED5H,EAAAA,YAAY,GAAG;AACXyH,IAAAA,EAAE,CAACC,cAAH;AACAhL,IAAAA,QAAQ,GAAG;AAACkG,MAAAA,CAAC,EAAE6E,EAAE,CAACI,OAAH,GAAW,GAAf;AAAoBhF,MAAAA,CAAC,EAAE4E,EAAE,CAACK,OAAH,GAAW;AAAlC,KAAX;AACA,QAAIC,SAAS,GAAG,KAAK9H,iBAAL,EAAhB;;AACA,QAAG8H,SAAS,IAAI,IAAb,IAAqBA,SAAS,IAAIhC,SAArC,EAA+C;AAC3C,WAAK7F,iBAAL,CAAuB6H,SAAvB;AACA,WAAKC,eAAL;AACA,WAAKC,WAAL;AACH,KAJD,MAKK;AAAEtJ,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AAA6C;AACvD;;AAEDqB,EAAAA,iBAAiB,GAAG;AAChB,QAAGlC,QAAQ,CAACmK,aAAT,CAAuBC,OAAvB,CAA+BC,WAA/B,MAAgD,UAAnD,EACA;AACI,UAAIC,gBAAgB,GAAGtK,QAAQ,CAACmK,aAAhC;AACA,UAAIH,SAAS,GAAGM,gBAAgB,CAACpK,KAAjB,CAAuBqK,SAAvB,CACZD,gBAAgB,CAACE,cADL,EACqBF,gBAAgB,CAACG,YADtC,CAAhB;AAEAH,MAAAA,gBAAgB,CAACE,cAAjB,GAAkCF,gBAAgB,CAACG,YAAnD;AACH;;AACD,WAAOT,SAAP;AACH;;AAODU,EAAAA,iBAAiB,GAAE;AAClB,SAAKpJ,uBAAL;AACA;;AACDqJ,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AAClC,SAAKjK,QAAL,CAAc;AAAEsC,MAAAA,OAAO,EAAE2H,SAAS,CAAC3H;AAArB,KAAd;AACF;;AAED4H,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B;AACA,QAAI,KAAKjL,KAAL,CAAWoD,OAAX,KAAuB6H,SAAS,CAAC7H,OAArC,EAA8C;AAC7C,WAAKzB,aAAL;AACA;AACF;;AAIDW,EAAAA,iBAAiB,GAAG;AAChB,QAAIpC,OAAO,GAAG,KAAKU,KAAL,CAAWC,UAAzB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ;AACA,QAAIoG,IAAI,GAAG;AAAC,eAAQ;AAAT,KAAX;AACA,QAAI4E,QAAQ,GAAGvN,QAAQ,CAACuC,OAAD,CAAvB;AACA,QAAIsJ,OAAO,GAAG0B,QAAQ,CAAC3K,EAAvB;;AACA,QAAId,OAAO,IAAI,IAAf,EAAqB;AACjBnB,MAAAA,UAAU,CAACkL,OAAD,EAAU/J,OAAO,CAACc,EAAlB,EAAsBL,OAAtB,EAA+B,CAA/B,EAAkC,CAAlC,CAAV;AACH;;AACD,QAAIpB,QAAQ,IAAI,IAAhB,EAAsB;AAClBA,MAAAA,QAAQ,GAAG;AAAC,aAAKH,EAAE,CAACwM,KAAH,KAAW,CAAjB;AAAoB,aAAKxM,EAAE,CAACyM,MAAH,KAAY;AAArC,OAAX;AACH;;AACDzM,IAAAA,EAAE,CAAC6G,GAAH,CAAO,CACH;AAACC,MAAAA,KAAK,EAAE,OAAR;AAAiBhF,MAAAA,IAAI,EAAE;AAACF,QAAAA,EAAE,EAAEiJ,OAAO,CAAC9D,QAAR,EAAL;AACnBxF,QAAAA,OAAO,EAAEA,OADU;AACDgF,QAAAA,IAAI,EAAE,MADL;AACaS,QAAAA,SAAS,EAAE,gBADxB;AAC0Ca,QAAAA,QAAQ,EAAEF;AADpD,OAAvB;AAEIV,MAAAA,OAAO,EAAE,YAFb;AAE2BC,MAAAA,MAAM,EAAE,KAFnC;AAE0Ce,MAAAA,gBAAgB,EAAE9H;AAF5D,KADG,CAAP;AAMA,QAAI4H,IAAI,GAAG/H,EAAE,CAACyB,cAAH,CAAkBoJ,OAAO,CAAC9D,QAAR,EAAlB,CAAX;AACH;;;;;;;;;;;;;;;AAcG5G,IAAAA,QAAQ,GAAG,IAAX;AACA,SAAK0B,oBAAL;AAEH;;AAEDgC,EAAAA,eAAe,GAAE;AACb,QAAI2C,MAAM,GAAG,KAAKvE,KAAL,CAAWY,aAAxB;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYmE,MAAZ,EAAoB,YAApB;AACA,SAAKkG,mBAAL,CAAyBlG,MAAzB;AACH;;AAEAkG,EAAAA,mBAAmB,CAAClG,MAAD,EAAS;AAC1B;AACD;AACE,QAAImG,UAAU,GAAGzN,UAAU,CAACsH,MAAD,CAA3B;AACA,QAAIC,SAAS,GAAGkG,UAAU,CAAC/K,EAA3B;AAEA5B,IAAAA,EAAE,CAAC6G,GAAH,CAAO,CACH;AAACC,MAAAA,KAAK,EAAE,OAAR;AAAiBhF,MAAAA,IAAI,EAAE;AAACF,QAAAA,EAAE,EAAE6E,SAAS,CAACM,QAAV,EAAL;AACnBxF,QAAAA,OAAO,EAAEiF,MADU;AACFD,QAAAA,IAAI,EAAE,QADJ;AACcS,QAAAA,SAAS,EAAE;AADzB,OAAvB;AAC6DC,MAAAA,OAAO,EAAE,cADtE;AACsFC,MAAAA,MAAM,EAAE,KAD9F;AACqG/G,MAAAA,QAAQ,EAAEA;AAD/G,KADG,CAAP;AAIA,SAAK0B,oBAAL;AACH;;AAYDkC,EAAAA,kBAAkB,GAAG;AACjB,QAAIpC,IAAI,GAAG3B,EAAE,CAACpB,CAAH,CAAK,MAAIqC,SAAS,CAACW,EAAV,EAAT,CAAX;AACCQ,IAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ,EAAkB,MAAlB;AACD,QAAIiL,OAAO,GAAG,KAAK3K,KAAL,CAAWC,UAAzB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYuK,OAAZ;;AACA,QAAGrI,IAAI,CAACC,KAAL,CAAWoI,OAAX,CAAH,EAAuB;AACnBxK,MAAAA,OAAO,CAACC,GAAR,CAAYuK,OAAZ,EAAqB,aAArB;AACH,KAFD,MAEK;AACDxK,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH;AAEH;;;;;;;;;;;;;;;;;;AAoBD;;AAEDyB,EAAAA,sBAAsB,CAAC0E,CAAD,EAAI;AACtB,SAAKrG,QAAL,CAAc;AAACD,MAAAA,UAAU,EAAEsG,CAAC,CAACtC,MAAF,CAASxE;AAAtB,KAAd,EAA4C,MACxCU,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWC,UAAvB,EAAoC,iBAApC,CADJ;AAEH;;AAED0B,EAAAA,mBAAmB,CAAC4E,CAAD,EAAG;AAClB,SAAKrG,QAAL,CAAc;AAACU,MAAAA,aAAa,EAAE2F,CAAC,CAACtC,MAAF,CAASxE;AAAzB,KAAd,EAA+C,MAC/CU,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWY,aAAvB,EAAsC,gBAAtC,CADA;AAEF;;AAKFgK,EAAAA,MAAM,GAAE;AACH;AACG,UAAMC,YAAY,GAAG;AACjBC,MAAAA,OAAO,EAAE;AACLC,QAAAA,WAAW,EAAE,UADR;AAELC,QAAAA,SAAS,EAAE;AAFN,OADQ;AAKfC,MAAAA,KAAK,EAAE,UALQ;AAMftL,MAAAA,EAAE,EAAE,cANW;AAOfL,MAAAA,OAAO,EAAE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADS,EAET;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AACE,QAAA,SAAS,EAAC,cADZ;AAEE,QAAA,IAAI,EAAC,GAFP;AAGE,QAAA,EAAE,EAAC,kBAHL;AAIE,QAAA,QAAQ,EAAE,KAAKuC,sBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAFS,CAPM;AAiBjBqJ,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAC,CADL;AAEJC,QAAAA,OAAO,EAAE;AACPC,UAAAA,SAAS,EAAE,mBADJ;AAEP5L,UAAAA,KAAK,EAAE;AAFA,SAFL;AAMJ6L,QAAAA,OAAO,EAAE;AACPD,UAAAA,SAAS,EAAE,iBADJ;AAEP5L,UAAAA,KAAK,EAAE;AAFA;AANL;AAjBS,KAArB;AA8BA;;AACA,QAAI8L,cAAc,GAAG;AACjBT,MAAAA,OAAO,EAAE;AACLC,QAAAA,WAAW,EAAE,YADR;AAELM,QAAAA,SAAS,EAAE,YAFN;AAGLL,QAAAA,SAAS,EAAE;AAHN,OADQ;AAMfrL,MAAAA,EAAE,EAAC,gBANY;AAOfsL,MAAAA,KAAK,EAAE,YAPQ;AAQf3L,MAAAA,OAAO,EAAE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADS,EAET;AACE,QAAA,SAAS,EAAC,cADZ;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,KAAK,EAAE,KAAKU,KAAL,CAAWY,aAHpB;AAIE,QAAA,QAAQ,EAAE,KAAKe,mBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBANA,EAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPA,EAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BARA,EASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CATA,EAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAVA,EAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAXA,EAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAZA,EAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAbA,EAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAdA,EAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAfA,EAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAhBA,EAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAjBA,EAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAlBA,EAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAnBA,EAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CApBA,EAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCArBA,EAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAtBA,EAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAvBA,EAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAxBA,EAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAzBA,EA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BA1BA,EA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CA3BA,CAFS,CARM;AAwCjBuJ,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAE,CADN;AAEJC,QAAAA,OAAO,EAAE;AACPC,UAAAA,SAAS,EAAE,mBADJ;AAEP5L,UAAAA,KAAK,EAAE;AAFA,SAFL;AAMJ6L,QAAAA,OAAO,EAAE;AACPD,UAAAA,SAAS,EAAE,iBADJ;AAEP5L,UAAAA,KAAK,EAAE;AAFA;AANL;AAxCS,KAArB;AAqDA;;AACA,QAAI+L,gBAAgB,GAAG;AACnBV,MAAAA,OAAO,EAAE;AACLC,QAAAA,WAAW,EAAE,oBADR;AAELM,QAAAA,SAAS,EAAE,oBAFN;AAGLL,QAAAA,SAAS,EAAE;AAHN,OADU;AAMnBrL,MAAAA,EAAE,EAAE,kBANe;AAOnBsL,MAAAA,KAAK,EAAE,mBAPY;AAQnB3L,MAAAA,OAAO,EAAE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADS,EAET;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AACI,QAAA,SAAS,EAAC,cADd;AAEI,QAAA,IAAI,EAAC,GAFT;AAGI,QAAA,EAAE,EAAC,4BAHP;AAII,QAAA,GAAG,EAAE,KAAKkB,cAJd;AAKI,QAAA,KAAK,EAAE,KAAKR,KAAL,CAAWC,UALtB;AAMI,QAAA,QAAQ,EAAE,KAAK4B,sBANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAFS,CARU;AAqBnBqJ,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAE,CADN;AAEJC,QAAAA,OAAO,EAAC;AACJC,UAAAA,SAAS,EAAE,mBADP;AAEJ5L,UAAAA,KAAK,EAAE;AAFH,SAFJ;AAMJ6L,QAAAA,OAAO,EAAE;AACLD,UAAAA,SAAS,EAAE,iBADN;AAEL5L,UAAAA,KAAK,EAAE;AAFF;AANL;AArBW,KAAvB;AAkCA;;AAEI,QAAIgM,iBAAiB,GAAG;AACpBX,MAAAA,OAAO,EAAC;AACJC,QAAAA,WAAW,EAAE,WADT;AAEJM,QAAAA,SAAS,EAAE,UAFP;AAGJL,QAAAA,SAAS,EAAE;AAHP,OADY;AAMpBrL,MAAAA,EAAE,EAAE,mBANgB;AAOpBsL,MAAAA,KAAK,EAAE,eAPa;AAQpB3L,MAAAA,OAAO,EAAE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADS,EAET;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,EAAE,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AACI,QAAA,SAAS,EAAC,cADd;AAEI,QAAA,IAAI,EAAC,GAFT;AAGI,QAAA,EAAE,EAAC,mBAHP;AAII,QAAA,KAAK,EAAE,KAAKU,KAAL,CAAWC,UAJtB;AAKI,QAAA,QAAQ,EAAE,KAAK4B,sBALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAFS,CARW;AAsBpBqJ,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAE,CADN;AAEJC,QAAAA,OAAO,EAAE;AACLC,UAAAA,SAAS,EAAE,mBADN;AAEL5L,UAAAA,KAAK,EAAE;AAFF,SAFL;AAMJ6L,QAAAA,OAAO,EAAE;AACLD,UAAAA,SAAS,EAAE,iBADN;AAEL5L,UAAAA,KAAK,EAAE;AAFF;AANL;AAtBY,KAAxB;AAmCA;;AAEI,QAAIiM,mBAAmB,GAAG;AACxBZ,MAAAA,OAAO,EAAC;AACNC,QAAAA,WAAW,EAAE,kBADP;AAENM,QAAAA,SAAS,EAAE,YAFL;AAGNL,QAAAA,SAAS,EAAE;AAHL,OADgB;AAMxBrL,MAAAA,EAAE,EAAE,iBANoB;AAOxBsL,MAAAA,KAAK,EAAE,aAPiB;AAQxB3L,MAAAA,OAAO,EAAE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADS,EAET;AACE,QAAA,SAAS,EAAC,cADZ;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,QAAQ,EAAE,KAAKqC,mBAHjB;AAIE,QAAA,KAAK,EAAE,KAAK3B,KAAL,CAAWY,aAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBANA,EAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPA,EAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BARA,EASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CATA,EAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAVA,EAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAXA,EAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAZA,EAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAbA,EAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAdA,EAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAfA,EAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAhBA,EAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAjBA,EAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAlBA,EAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAnBA,EAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CApBA,EAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCArBA,EAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAtBA,EAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAvBA,EAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAxBA,EAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAzBA,EA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BA1BA,EA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CA3BA,CAFS,CARe;AAwCxBsK,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE,CADJ;AAENC,QAAAA,OAAO,EAAE;AACPC,UAAAA,SAAS,EAAE,mBADJ;AAEP5L,UAAAA,KAAK,EAAE;AAFA,SAFH;AAMN6L,QAAAA,OAAO,EAAE;AACPD,UAAAA,SAAS,EAAC,iBADH;AAEP5L,UAAAA,KAAK,EAAE;AAFA;AANH;AAxCgB,KAA1B;AAuDZ,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBAAC,KAAD;AACO,MAAA,UAAU,EAAEoL,YADnB;AAEO,MAAA,KAAK,EAAC,EAFb;AAGO,MAAA,OAAO,EAAE,KAAKnJ,iBAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,EAOC,oBAAC,KAAD;AACM,MAAA,UAAU,EAAE6J,cADlB;AAEM,MAAA,KAAK,EAAC,EAFZ;AAGM,MAAA,OAAO,EAAE,KAAK3J,eAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPD,EAaG,oBAAC,KAAD;AACI,MAAA,UAAU,EAAE4J,gBADhB;AAEI,MAAA,KAAK,EAAC,EAFV;AAGI,MAAA,OAAO,EAAE,KAAK1L,iBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbH,EAmBG,oBAAC,KAAD;AACI,MAAA,UAAU,EAAE2L,iBADhB;AAEI,MAAA,KAAK,EAAC,EAFV;AAGI,MAAA,OAAO,EAAE,KAAK3J,kBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBH,EAyBI,oBAAC,KAAD;AACG,MAAA,UAAU,EAAE4J,mBADf;AAEG,MAAA,KAAK,EAAC,EAFT;AAGG,MAAA,OAAO,EAAE,KAAK5J,kBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBJ,EAiCC;AAAK,MAAA,EAAE,EAAC,IAAR;AAAa,MAAA,MAAM,EAAE,KAAKN,YAAL,EAArB;AAA0C,MAAA,UAAU,EAAE,KAAKD,gBAAL,EAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjCD,CADD;AAuCH;;AA3+BiC;;AA8+BlC,eAAerC,SAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\n\n\nimport $ from 'jquery';\n\n\nimport {update_atom_metadata, import_json,export_cytoscape,add_atom, sd,add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source} from '../lib/Sadface'; \n//Import Components\nimport Modal from  './Modal';\nvar cyqtip = require('cytoscape-qtip');\n\ncyqtip( cytoscape ); // register extension\n\n\ncytoscape.use( edgehandles );\ncytoscape.use(contextMenus, $);\ncytoscape.use( cola );\n\n\n\n\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+edited_date+\"\\\",\\\"id\\\":\\\"\"+document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\n\n\nclass Cytoscape extends Component {\n  constructor(props){\n        super(props);\n        //create Refs\n        this.newAtomRef =React.createRef()\n        this.newSchemeRef = React.createRef();\n        this.editContentRef =React.createRef();\n\n        this.state={\n         png:'',\n         jpg:'',\n         NewAtomText: '',\n         modalValue: ' ',\n         dropDownValue: ' ',\n        }\n            this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n            this.initCytoscape = this.initCytoscape.bind(this);\n            this.build_cola_layout = this.build_cola_layout.bind(this);\n            this.edit_atom_content = this.edit_atom_content.bind(this);\n            this. delete_nodes =this.delete_nodes.bind(this);\n            this.update_local_storage = this.update_local_storage.bind(this);\n            this.redraw_visualisation = this.redraw_visualisation.bind(this);\n            this.undo = this.undo.bind(this);\n            this.redo = this.redo.bind(this);\n            this.merge_nodes = this.merge_nodes.bind(this);\n            this.delete_atom =this.delete_atom.bind(this);\n            this.dragover_handler = this.dragover_handler.bind(this);\n            this.drop_handler = this.drop_handler.bind(this);\n            this.get_selected_text = this.get_selected_text.bind(this);\n\n            this.add_new_atom_node = this.add_new_atom_node.bind(this);\n            this.handledropDownValue = this.handledropDownValue.bind(this);\n            this.handleAddScheme = this.handleAddScheme.bind(this);\n            this.handleModalValueChange = this.handleModalValueChange.bind(this);\n            this.edit_atom_metadata = this.edit_atom_metadata.bind(this);\n    }\n\n    initialise_monkeypuzzle() {\n\n        //load diagram if there is one in localStorage\n        if (localStorage.getItem(\"state\"))\n        {\n            console.log(localStorage.getItem(\"state\"), 'localstorage')\n            this.props.loadJSON(localStorage.getItem(\"state\"));\n            this.initCytoscape();\n        //else use default\n        } else\n        {\n            current_sadface_doc = default_sadface_doc;\n            localStorage.setItem(\"state\", current_sadface_doc);\n            console.log(current_sadface_doc, 'current sadface');\n            this.props.setCyData(export_cytoscape(import_json(current_sadface_doc)));\n            this.initCytoscape();\n        }\n    }\n\n    initCytoscape(){\n        console.log(\"initCyto\");\n        //change cy to state of APP\n        cy = cytoscape({\n            container: document.getElementById('cy'),\n            elements: JSON.parse(this.props.cy_data),\n\n            style:[\n                {   selector: \"node\", \n                    style: {\n                        \"label\": \"data(content)\",\n                        \"text-opacity\": 0.7,\n                        \"width\" : \"auto\",\n                        \"height\" : \"auto\",\n                        \"text-valign\": \"bottom\",\n                        \"text-halign\": \"right\",\n                        \"text-outline-color\": \"#eee\",\n                        \"text-outline-width\": 1\n                    }\n                },\n                \n                {   selector: \"[typeshape]\", \n                    style: {\n                        \"shape\":\"data(typeshape)\"\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond']\", \n                    style: {\n                        'background-color': '#CC9900'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][content='Conflict']\",\n                    style: {\n                        'background-color': 'red'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][content='Support']\",\n                    style: {\n                        'background-color': 'green'\n                    }\n                },\n\n                {   selector: \"edge\", \n                    style: {\n                        \"line-color\": \"#9dbaea\",\n                        \"target-arrow-shape\": \"triangle\",\n                        \"target-arrow-color\": \"#9dbaea\",\n                        \"curve-style\": \"bezier\"\n                    }\n                },\n\n\n                {   selector: \":selected\", \n                    style: {\n                        \"border-width\":\"1\",\n                        \"border-color\":\"black\",\n                        \"background-color\": \"#3399CC\"\n                    }\n                },\n\n\n                {   selector: \".atom-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n\n                {   selector: \".scheme-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n                {   selector: '.eh-handle',\n                    style: {\n                        'background-color': 'orange',\n                        'width': 10,\n                        'height': 10,\n                        'shape': 'ellipse',\n                        'overlay-opacity': 0,\n                        'border-width': 8, // makes the handle easier to hit\n                        'border-opacity': 0,\n                        'toggleOffOnLeave': true,\n                    }\n                }\n                \n            ],\n\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n        });//close cy = cytoscape()\n\n\n\n            layout = this.build_cola_layout();\n            layout.run();\n    \n            cy.edgehandles({\n                toggleOffOnLeave: true,\n                handleNodes: \"node\",\n                handleSize: 10,\n                handleColor: \"#DF0085\",\n                handleHitThreshold: 8,\n                handleLineWidth: 5,\n                //handleLineType: \"flat\",\n                edgeType: function(){ return \"flat\"; },\n                complete: function(event, sourceNode, targetNode, addedEles){\n                    if (targetNode.length !== 0) {\n                        var source_id = targetNode[0].source().id();\n                        var target_id = targetNode[0].target().id();\n\n                        //get the mid point between source node and target node\n                        var source_position = targetNode[0].source().position();\n                        var target_position = targetNode[0].target().position();\n\n                        position = {};\n                        position.x = ((source_position.x + target_position.x)/2);\n                        position.y = ((source_position.y + target_position.y)/2);\n\n                        if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\")\n                        {\n                            var scheme = add_scheme(\"Support\");\n                            var scheme_id = scheme.id;\n                            var scheme_content = scheme.name;\n                            //remove the automatically generated edge\n                            targetNode.remove();\n                            cy.add([\n                                {group: \"nodes\", data: {id: scheme_id.toString(),\n                                    content: scheme_content, typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n                                    ]);\n                            var edge1 = add_edge(source_id, scheme_id);\n                            var edge2 = add_edge(scheme_id, target_id);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge1.id.toString(), source: source_id, target: scheme_id } },\n                              { group: \"edges\", data: { id: edge2.id.toString(), source: scheme_id, target: target_id } }\n                              ]);\n                        } else {\n                            targetNode.remove();\n                            var edge = add_edge(source_id, target_id);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: source_id, target: target_id } }\n                              ]);\n                        }\n                        this.update_local_storage();\n                    } else {\n                        targetNode.remove();\n                    }\n                }.bind(this)\n            });\n            //edgehandles\n\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n    cm = cy.contextMenus({\n       menuItems: [\n            {\n                id: \"edit-content\",\n                content: \"edit content\",\n                selector: \"node[type = \\\"atom\\\"]\",\n                onClickFunction: function (event) {\n                    let target = event.target || event.cyTarget;\n                    document.getElementById(\"editContentTrigger\").click();\n                    this.setState({modalValue:target.data().content}, () =>\n                    console.log(\"modal value set\", this.state.modalValue));\n                    edit_atom = target;\n                }.bind(this),\n                hasTrailingDivider: false\n            },\n\n            {\n                id: \"edit-metadata\",\n                content: \"edit metadata\",\n                selector: \"node[type = \\\"atom\\\"]\",\n                onClickFunction: function (event) {\n                      let target = event.target || event.cyTarget;\n                      let meta = JSON.stringify(target.data().metadata);\n                      document.getElementById(\"editMetaTrigger\").click();\n                      this.setState({modalValue: meta}, () => \n                        console.log(this.state.modalValue, \"modal value as meta\"));\n                     edit_atom = target;\n                 }.bind(this),\n                 hasTrailingDivider: true\n            },\n            {\n                id: \"change-scheme\",\n                content: \"change scheme\",\n                selector: \"node[typeshape = \\\"diamond\\\"]\",\n                onClickFunction: function (event) {\n                    var target = event.target || event.cyTarget;\n                    this.setState({dropDownValue: target.data().content},() =>\n\n                    console.log(this.state.dropDownValue, 'drop down value set')\n                    );\n\n                    document.getElementById(\"editSchemeTrigger\").click();\n                    edit_atom = target;\n                }.bind(this),\n                hasTrailingDivider: true\n            },\n            {\n                id: \"remove\",\n                content: \"remove\",\n                selector: \"node, edge\",\n                onClickFunction: function (event) {\n                    var target = event.target || event.cyTarget;\n                    if (selected.length !== 0) {\n                        selected.forEach(function(node) {\n                            this.delete_nodes(node);\n                        });\n                        selected = [];\n                    } else {\n                        if (target.data().type==\"atom\") {\n                            this.delete_nodes(event);\n                            target.remove();\n                        } else if (target.data().typeshape==\"diamond\"){\n                            this.delete_nodes(event);\n                            target.remove();\n                        } else {\n                            this.delete_edge(target.id());\n                            this.update_local_storage();\n                            target.remove();\n                        }\n                    }\n                },\n                hasTrailingDivider: true\n            },\n            {\n                id: \"add-atom\",\n                content: \"add atom\",\n                coreAsWell: true,\n\n                onClickFunction: function (event) {\n                    position = event.renderedPosition;\n                    document.getElementById(\"newAtomTrigger\").click();\n                }\n            },\n            {\n                id: \"add-scheme\",\n                content: \"add scheme\",\n                coreAsWell: true,\n                onClickFunction: function (event) {\n\n                    position = event.position || event.cyPosition;\n                    this.setState({dropDownValue: \"Support\"}, () =>\n                        console.log(this.state.dropDownValue, 'drop down value set'));\n                        document.getElementById(\"new_scheme\").click()\n                }.bind(this),\n                hasTrailingDivider: true\n            },\n            {\n                id: \"redraw\",\n                content: \"redraw\",\n                coreAsWell: true,\n                onClickFunction: function () { this.redraw_visualisation(); }.bind(this),\n                hasTrailingDivider: true\n            },\n            {\n                id: \"undo\",\n                content: \"undo\",\n                selector: \"node, edge\",\n                show: false,\n                coreAsWell: true,\n                onClickFunction: function (event) {\n                  this.undo();\n              }.bind(this),\n              hasTrailingDivider: false\n            },\n            {\n                id: \"redo\",\n                content: \"redo\",\n                selector: \"node, edge\",\n                show: false,\n                coreAsWell: true,\n                onClickFunction: function (event) {\n                  this.redo();\n                  if (redo_stack == []) {\n                    cm.hideMenuItem(\"redo\");\n                }\n                },\n                hasTrailingDivider: true\n            },\n            {\n              id: \"merge_nodes\",\n              content: \"merge nodes\",\n              selector: \"node\",\n              show: false,\n              coreAsWell: true,\n              onClickFunction: function (event) {\n                  this.merge_nodes();\n              }\n            }\n            ]\n        });//close context menues\n\n            cy.on('click', 'node', function(evt){\n                var item = evt.cyTarget || evt.target;\n                let data = JSON.stringify(item.data());\n                console.log( 'mouse on node ' + data );\n            });\n\n\n        \n            cy.on(\"unselect\", \"node\", function (e){\n                selected.pop(e);\n                cm.hideMenuItem(\"merge_nodes\");\n            });\n\n            cy.on(\"select\", \"node\", function (e){\n                selected.push(e);\n\n                if(selected.length>1) {\n                    cm.showMenuItem(\"merge_nodes\");\n                } else {\n                    cm.hideMenuItem(\"merge_nodes\");\n                }\n            });\n\n            cy.on(\"tap\", function (e){\n                //when cytoscape is tapped remove any focus from HTML elements like the tab textareas\n                //this mainly helps with keybinds\n                $(\":focus\").blur();\n            });\n\n            cy.on(\"layoutstart\", function(){\n                running = true;\n            });\n\n\n            cy.on(\"layoutstop\", function(){\n                running = false;\n        \n                var png = cy.png({ full: true });\n                this.props.handleSetPng(png);\n\n                var jpg = cy.jpg({ full: true });\n                this.props.handleSetJpg(jpg);\n            }.bind(this));\n                /*\n             $(\".resource-pane\").resizable({\n                handleSelector: \".splitter\",\n                resizeHeight: false,\n                resizeWidthFrom: \"right\",\n                //onDragStart: function (e, $el, opt) {},\n                onDragEnd: function (e, $el, opt) {\n                cy.resize();\n                }\n            });*/\n\n }\n\n build_cola_layout( opts ) {\n    var cola_params = {\n        name: \"cola\",\n        animate: true,\n        randomize: true,\n        padding: 100,\n        fit: false,\n        maxSimulationTime: 1500\n    };\n    var i = 0;\n    if (opts !== undefined) {\n        opts.forEach(function(opt) {\n         cola_params[i] = opts[i];\n         ++i;\n     });\n    }\n    return cy.makeLayout( cola_params );\n}\n\nedit_atom_content = () => {\n    var content = document.getElementById(\"edit_atom_content\").value;\n    var atom = cy.$(\"#\"+edit_atom.id());\n    update_atom_text(edit_atom.id(), content);\n    this.update_local_storage();\n    atom.data(\"content\", content);\n    edit_atom = null;\n}\n\ndelete_nodes(event) {\n    var target = event.target || event.cyTarget;\n    var id = target.id();\n    //removed = target.remove();\n    this.delete_atom(id);\n    var i = 0;\n    var sds = get_sd();\n    var edges = sds.edges;\n    edges.forEach(function(edge) {\n        if (edges[i] !== undefined) {\n            if (edges[i].source_id === id || edges[i].target_id === id) {\n                delete_edge(edges[i].id);\n            }\n            ++i;\n        }\n    });\n    this.update_local_storage();\n}\n\nupdate_local_storage() {\n    console.log(current_sadface_doc);\n    var undo_item = JSON.parse(current_sadface_doc);\n    console.log(undo_item, 'undoitem');\n    undo_stack.push(undo_item);\n    redo_stack = [];\n    cm.showMenuItem(\"undo\");\n    cm.hideMenuItem(\"redo\");\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    current_sadface_doc = JSON.stringify(get_sd());\n    update();\n}\n\nredraw_visualisation() {\n    layout.stop();\n    layout.options.eles = cy.elements();\n    layout.run();\n    cy.center();\n    cy.resize();\n}\n\nundo() {\n    if (undo_stack.length != 0) {\n        var redo_item = get_sd();\n        console.log(redo_item, 'redo item');\n        redo_stack.push(redo_item);\n        console.log(redo_stack, 'redo stack');\n        var state = undo_stack.pop();\n        console.log(state, 'state');\n        this.loadJSON(JSON.stringify(state));\n        if (undo_stack.length == 0) {\n            cm.hideMenuItem(\"undo\");\n        }\n        cm.showMenuItem(\"redo\");\n    }\n}\n\nredo() {\n    if (redo_stack.length != 0) {\n        var undo_item = get_sd();\n        undo_stack.push(undo_item);\n        var state = redo_stack.pop();\n        this.loadJSON(JSON.stringify(state));\n        if (redo_stack.length == 0) {\n            cm.hideMenuItem(\"redo\");\n        }\n        cm.showMenuItem(\"undo\");\n    }\n}\n\n\nmerge_nodes() {\n    //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n    var target;\n    var id;\n    var atom;\n    var baseNode = selected[0].target || selected[0].cyTarget;\n    var baseId = baseNode.id();\n    var baseAtom = get_atom(baseId);\n    var edge;\n    if (baseAtom.type == \"atom\") {\n        var sds = get_sd();\n        var i = 0;\n        selected.forEach(function(node){\n            var j = 0;\n            if (i > 0) {\n                target = selected[i].target || selected[i].cyTarget;\n                id = target.id();\n                atom = get_atom(id);\n                if (atom.type == \"atom\") {\n                    atom.sources.forEach(function(source) {\n                        add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n                        ++j;\n                    });\n                    j = 0;\n                    sds.edges.forEach(function(edge) {\n                        if (sds.edges[j].source_id == id) {\n                            edge = add_edge(baseId,sds.edges[j].target_id);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: baseId, target: sds.edges[j].target_id } }\n                              ]);\n                        }\n                        if (sds.edges[j].target_id == id) {\n                            edge = add_edge(sds.edges[j].source_id, baseId);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: sds.edges[j].source_id, target: baseId } }\n                              ]);\n                        }\n                        ++j;\n                    });\n                    this.delete_nodes(selected[i]);\n                } else {\n                    alert(\"cannot merge scheme nodes\");\n                }\n            }\n            ++i;\n        });\n        selected = [];\n        cm.hideMenuItem(\"merge_nodes\");\n    } else {\n        alert(\"cannot merge scheme nodes\");\n    }\n}\n\ndelete_atom(atom_id) {\n    /*\n    Remove the atom from the sadface document identified by the\n    supplied atom ID\n    */\n    if (atom_id) {\n        var atom = get_atom(atom_id);\n        if (atom !== null && atom !== undefined) {\n            var size = Object.keys(sd.nodes).length;\n            for (var i = 0; i < size; ++i) {\n                if (sd.nodes[i].id === atom.id) {\n                    delete sd.nodes[i];\n//                    sd.nodes = remove_falsy(sd.nodes);\n                        return;\n                }\n            }\n        }\n    }\n}\n\ndragover_handler(ev) {\n     ev.preventDefault();\n     ev.dataTransfer.dropEffect = \"move\";\n}\n\ndrop_handler() {\n    ev.preventDefault();\n    position = {x: ev.clientX-280, y: ev.clientY+200};\n    var selection = this.get_selected_text();\n    if(selection != null || selection != undefined){\n        this.add_new_atom_node(selection);\n        this.clear_selection();\n        this.clear_focus();\n    }\n    else { console.log(\"Not a valid text selection.\"); }\n}\n\nget_selected_text() {\n    if(document.activeElement.tagName.toLowerCase() == \"textarea\")\n    {\n        var selectedTextArea = document.activeElement;\n        var selection = selectedTextArea.value.substring(\n            selectedTextArea.selectionStart, selectedTextArea.selectionEnd);\n        selectedTextArea.selectionStart = selectedTextArea.selectionEnd;\n    }\n    return selection;\n}\n\n\n\n\n\n\ncomponentDidMount(){\n this.initialise_monkeypuzzle();\n}\ncomponentWillReceiveProps(nextProps) {\n   this.setState({ cy_data: nextProps.cy_data })\n}\n\ncomponentDidUpdate(prevProps) {\n  // Typical usage (don't forget to compare props):\n  if (this.props.cy_data !== prevProps.cy_data) {\n  \tthis.initCytoscape();\n  }\n}\n\n\n\nadd_new_atom_node() {\n    let content = this.state.modalValue;\n    console.log(content);\n    var meta = {\"hello\":\"world\"};\n    var new_atom = add_atom(content);\n    var atom_id = new_atom.id;\n    if (focused != null) {\n        add_source(atom_id, focused.id, content, 0, 0);\n    }\n    if (position == null) {\n        position = {\"x\": cy.width()/2, \"y\": cy.height()/2};\n    }\n    cy.add([\n        {group: \"nodes\", data: {id: atom_id.toString(),\n            content: content, type: \"atom\", typeshape: \"roundrectangle\", metadata: meta }, \n            classes: \"atom-label\", locked: false, renderedPosition: position}\n    ]);\n\n    let node = cy.getElementById(atom_id.toString() );\n /*   node.qtip({\n        content: function(){return 'ID: '+this.id()},\n        position: {\n            my: \"top center\",\n            at: \"bottom center\"\n        },\n        style: {\n            classes: \"qtip-bootstrap\",\n            tip: {\n                width: 16,\n                height: 8\n            }\n        }\n    });*/\n    position = null;\n    this.update_local_storage();\n\n}\n\nhandleAddScheme(){\n    let scheme = this.state.dropDownValue;\n    console.log(scheme, 'new_scheme');\n    this.add_new_scheme_node(scheme)\n}\n\n add_new_scheme_node(scheme) {\n   // var scheme_idx = document.getElementById(\"sel1\").options.selectedIndex;\n  //  var scheme = document.getElementById(\"sel1\").options[scheme_idx].text;\n    var new_scheme = add_scheme(scheme);\n    var scheme_id = new_scheme.id;\n\n    cy.add([\n        {group: \"nodes\", data: {id: scheme_id.toString(),\n            content: scheme, type: \"scheme\", typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n    ]);\n    this.update_local_storage();\n}\n\nhandleEditContent = () => {\n    let editContent = this.state.modalValue;\n    let atom = cy.$(\"#\"+edit_atom.id());\n    this.update_local_storage();\n    atom.data(\"content\", editContent);\n    edit_atom = null;\n    this.setState({modalValue: ' '}, () =>\n        console.log('modalValue reset', this.state.modalValue));\n}\n\nedit_atom_metadata() {\n    let atom = cy.$(\"#\"+edit_atom.id());\n     console.log(atom, \"ATOM\");\n    let newMeta = this.state.modalValue;\n    console.log(newMeta);\n    if(JSON.parse(newMeta)){\n        console.log(newMeta, 'newMetadata');\n    }else{\n        console.log('fail');\n    }\n\n  /*  if (JSON.parse(content)) {\n        var metadata = JSON.parse(content);\n        update_atom_metadata(atom.id(), metadata);\n        this.update_local_storage();\n        edit_atom=null;\n    } else {\n        alert(\"Metadata not in JSON format, unable to update\");\n    }\n\n        this.setState({modalValue: ' '}, () =>\n        console.log('modalValue reset', this.state.modalValue));\n\n\n\n        var target = event.target || event.cyTarget;\n              var atom = get_atom(target.id());\n              console.log(JSON.stringify(atom.metadata), 'atom metadata');\n              document.getElementById(\"editMetaTrigger\").click();\n              this.setState({modalValue: JSON.stringify(atom.metadata)})\n             edit_atom = target;*/\n}\n\nhandleModalValueChange(e) {\n    this.setState({modalValue: e.target.value}, () =>\n        console.log(this.state.modalValue,  \"modal value set\"));\n}\n\nhandledropDownValue(e){\n    this.setState({dropDownValue: e.target.value}, () =>\n    console.log(this.state.dropDownValue, 'dropdown value')\n)}\n\n\n\n\nrender(){\n     /* New Atom Modal */\n        const newAtomModal = {\n            trigger: {\n                triggerText: 'New Atom',\n                triggerId: 'newAtomTrigger'\n            },\n              title: 'New Atom',\n              id: 'newAtomModal',\n              content: <div className=\"modal-body\">\n              <p>Add some content to the new atom</p>\n              <div className=\"form-group\">\n              <textarea \n                className=\"form-control\" \n                rows=\"2\" \n                id=\"new_atom_content\" \n                onChange={this.handleModalValueChange}\n                >\n              </textarea></div></div>,\n            footer: {\n                buttonNo:2,\n                button1: {\n                  className: \"btn btn-secondary\",\n                  value: \"Close\"\n                },\n                button2: {\n                  className: 'btn btn-primary',\n                  value: 'Create',\n                },\n            }\n        };\n\n        /* New Scheme Modal*/\n        var newSchemeModal = {\n            trigger: {\n                triggerText: 'New Scheme',\n                className: \"new_scheme\",\n                triggerId: \"new_scheme\",\n            },\n              id:\"newSchemeModal\",\n              title: 'New Scheme',\n              content: <div className=\"modal-body\">\n              <p>Select a scheme</p>\n              <select \n                className=\"form-control\" \n                id=\"sel1\" \n                value={this.state.dropDownValue}\n                onChange={this.handledropDownValue}\n                >\n              <option>Support</option>\n              <option>Conflict</option>\n              <option>Argument from Sign</option>\n              <option>Argument from an Exceptional Case</option>\n              <option>Argument from Analogy</option>\n              <option>Argument from Bias</option>\n              <option>Argument from Cause to Effect</option>\n              <option>Argument from Correlation to Causes</option>\n              <option>Argument from Established Rule</option>\n              <option>Argument from Evidence to a Hypothesis</option>\n              <option>Argument from Falsification to a Hypothesis</option>\n              <option>Argument from Example</option>\n              <option>Argument from Commitment</option>\n              <option>Circumstantial Argument Against the Person</option>\n              <option>Argument from Popular Practice</option>\n              <option>Argument from Popularity</option>\n              <option>Argument from Position to Know</option>\n              <option>Argument from Expert Opinion</option>\n              <option>Argument from Precedent</option>\n              <option>Argument from Consequences</option>\n              <option>Argument from Waste</option>\n              <option>Causal Slippery Slope Argument</option>\n              </select>\n              </div>,\n            footer: {\n                buttonNo: 2,\n                button1: {\n                  className: \"btn btn-secondary\",\n                  value: \"Close\"\n                },\n                button2: {\n                  className: \"btn btn-primary\",\n                  value: \"Create\"\n                }\n            }\n        };\n\n        /* Edit Content Modal */\n        var editContentModal = {\n            trigger: {\n                triggerText: 'editContentTrigger',\n                className: \"editContentTrigger\",\n                triggerId: \"editContentTrigger\",\n            },\n            id: 'editContentModal',\n            title: 'Edit Atom Content',\n            content: <div className=\"modal-body\">\n            <p>Edit atom content</p>\n            <div className=\"form-group\">\n            <textarea \n                className=\"form-control\" \n                rows=\"2\" \n                id=\"edit_atom_content_textarea\"\n                ref={this.editContentRef}\n                value={this.state.modalValue}\n                onChange={this.handleModalValueChange}\n                ></textarea>\n                </div>\n                </div>,\n            footer: {\n                buttonNo: 2,\n                button1:{\n                    className: \"btn btn-secondary\",\n                    value: \"Close\"\n                },\n                button2: {\n                    className: 'btn btn-primary',\n                    value: 'Save',\n                }\n            }\n        };\n\n        /* Edit Metadata Modal  */\n\n            var editMetaDataModal = {\n                trigger:{\n                    triggerText: 'Edit Meta',\n                    className: 'editMeta',\n                    triggerId: 'editMetaTrigger',\n                },\n                id: 'editMetadataModal',\n                title: 'Edit Metadata',\n                content: <div className=\"modal-body\">\n                <p>Edit atom content</p>\n                <div className=\"form-group\" id=\"edit_metadata\">\n                <textarea \n                    className=\"form-control\" \n                    rows=\"2\" \n                    id=\"edit_atom_content\"\n                    value={this.state.modalValue}\n                    onChange={this.handleModalValueChange}\n\n                    >\n                </textarea>\n                </div>\n                </div>,\n                footer: {\n                    buttonNo: 2,\n                    button1: {\n                        className: 'btn btn-secondary',\n                        value: 'Close',\n                    },\n                    button2: {\n                        className: 'btn btn-primary',\n                        value: 'Save',\n                    },  \n                },\n            };\n\n            /* Edit Scheme Type Modal */\n\n                var editSchemeTypeModal = {\n                  trigger:{\n                    triggerText: 'Edit Scheme Type',\n                    className: 'editScheme',\n                    triggerId: 'editSchemeTrigger',\n                  },\n                  id: 'editSchemeModal',\n                  title: 'Edit Scheme',\n                  content: <div className=\"modal-body\">\n                  <p>Select a scheme</p>\n                  <select \n                    className=\"form-control\" \n                    id=\"sel2\"\n                    onChange={this.handledropDownValue}\n                    value={this.state.dropDownValue}\n                        >\n                  <option>Support</option>\n                  <option>Conflict</option>\n                  <option>Argument from Sign</option>\n                  <option>Argument from an Exceptional Case</option>\n                  <option>Argument from Analogy</option>\n                  <option>Argument from Bias</option>\n                  <option>Argument from Cause to Effect</option>\n                  <option>Argument from Correlation to Causes</option>\n                  <option>Argument from Established Rule</option>\n                  <option>Argument from Evidence to a Hypothesis</option>\n                  <option>Argument from Falsification to a Hypothesis</option>\n                  <option>Argument from Example</option>\n                  <option>Argument from Commitment</option>\n                  <option>Circumstantial Argument Against the Person</option>\n                  <option>Argument from Popular Practice</option>\n                  <option>Argument from Popularity</option>\n                  <option>Argument from Position to Know</option>\n                  <option>Argument from Expert Opinion</option>\n                  <option>Argument from Precedent</option>\n                  <option>Argument from Consequences</option>\n                  <option>Argument from Waste</option>\n                  <option>Causal Slippery Slope Argument</option>\n                  </select>\n                  </div>,\n                  footer: {\n                    buttonNo: 2,\n                    button1: {\n                      className: 'btn btn-secondary',\n                      value: 'Close',\n                    },\n                    button2: {\n                      className:'btn btn-primary',\n                      value: 'Save',\n                    },\n                  } \n                };\n\n\n\n    return (\n    \t<div>\n\n    \t<Modal\n            modalProps={newAtomModal}\n            style=\"\"\n            onClick={this.add_new_atom_node}\n        />\n      <Modal\n            modalProps={newSchemeModal}\n            style=\"\"\n            onClick={this.handleAddScheme}\n        />\n\n        <Modal\n            modalProps={editContentModal}\n            style=\"\"\n            onClick={this.handleEditContent}\n        />\n\n        <Modal\n            modalProps={editMetaDataModal}\n            style=\"\"\n            onClick={this.edit_atom_metadata}\n        />\n\n         <Modal\n            modalProps={editSchemeTypeModal}\n            style=\"\"\n            onClick={this.edit_atom_metadata}\n        />\n\n\n\n      <div id=\"cy\" onDrop={this.drop_handler()} onDragOver={this.dragover_handler()}>\n\n      </div>\n      </div>\n      );\n}\n}\n\nexport default Cytoscape;"]},"metadata":{},"sourceType":"module"}