{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport Tooltip from 'react-qtip';\ncytoscape.use(cola);\n\nclass CytoContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {//cy_data: this.props.cy_data,\n    };\n  }\n\n  renderCytoscape() {\n    this.data = {\n      \"nodes\": [{\n        \"data\": {\n          \"id\": \"a1\",\n          \"type\": \"atom\",\n          \"typeshape\": \"roundrectangle\",\n          \"content\": \"Every person is going to die\"\n        },\n        \"classes\": \"atom-label\"\n      }, {\n        \"data\": {\n          \"id\": \"a2\",\n          \"type\": \"atom\",\n          \"typeshape\": \"roundrectangle\",\n          \"content\": \"You are a person\"\n        },\n        \"classes\": \"atom-label\"\n      }, {\n        \"data\": {\n          \"id\": \"a3\",\n          \"type\": \"atom\",\n          \"typeshape\": \"roundrectangle\",\n          \"content\": \"If you are going to die then you should treasure every moment\"\n        },\n        \"classes\": \"atom-label\"\n      }, {\n        \"data\": {\n          \"id\": \"a4\",\n          \"type\": \"atom\",\n          \"typeshape\": \"roundrectangle\",\n          \"content\": \"You are going to die\"\n        },\n        \"classes\": \"atom-label\"\n      }, {\n        \"data\": {\n          \"id\": \"a5\",\n          \"type\": \"atom\",\n          \"typeshape\": \"roundrectangle\",\n          \"content\": \"You should treasure every moment\"\n        },\n        \"classes\": \"atom-label\"\n      }, {\n        \"data\": {\n          \"id\": \"s1\",\n          \"type\": \"scheme\",\n          \"typeshape\": \"diamond\",\n          \"content\": \"Support\"\n        },\n        \"classes\": \"scheme-label\"\n      }, {\n        \"data\": {\n          \"id\": \"s2\",\n          \"type\": \"scheme\",\n          \"typeshape\": \"diamond\",\n          \"content\": \"Support\"\n        },\n        \"classes\": \"scheme-label\"\n      }],\n      \"edges\": [{\n        \"data\": {\n          \"id\": \"a1s1\",\n          \"source\": \"a1\",\n          \"target\": \"s1\"\n        }\n      }, {\n        \"data\": {\n          \"id\": \"a2s1\",\n          \"source\": \"a2\",\n          \"target\": \"s1\"\n        }\n      }, {\n        \"data\": {\n          \"id\": \"a3s2\",\n          \"source\": \"a3\",\n          \"target\": \"s2\"\n        }\n      }, {\n        \"data\": {\n          \"id\": \"s2a5\",\n          \"source\": \"s2\",\n          \"target\": \"a5\"\n        }\n      }, {\n        \"data\": {\n          \"id\": \"s1a4\",\n          \"source\": \"s1\",\n          \"target\": \"a4\"\n        }\n      }, {\n        \"data\": {\n          \"id\": \"a4s2\",\n          \"source\": \"a4\",\n          \"target\": \"s2\"\n        }\n      }]\n    };\n    JSON.parse(data); //        this.cy_data = {};\n\n    this.cy = cytoscape({\n      container: document.getElementById('cy'),\n      ready: function () {\n        window.cy = this;\n      },\n      //  elements: this.props.cy_data,\n      elements: {},\n      style: [{\n        selector: \"node\",\n        style: {\n          \"content\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          \"width\": \"auto\",\n          \"height\": \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    });\n    this.layout = this.build_cola_layout();\n    this.layout.run();\n    this.cy.elements(React.createElement(Tooltip, {\n      text: \"simple text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Hello\"));\n  } //close rendercytoscape\n\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return this.cy.makeLayout(cola_params);\n  }\n\n  componentDidMount() {\n    this.renderCytoscape();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"cy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default CytoContainer;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/CytoContainer.js"],"names":["React","Component","cytoscape","cola","Tooltip","use","CytoContainer","constructor","props","state","renderCytoscape","data","JSON","parse","cy","container","document","getElementById","ready","window","elements","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","layout","build_cola_layout","run","opts","cola_params","name","animate","randomize","padding","fit","maxSimulationTime","i","undefined","forEach","opt","makeLayout","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport Tooltip from 'react-qtip';\n\n\n\ncytoscape.use( cola );\n\n\nclass CytoContainer extends Component{\n    constructor(props){\n        super(props);\n        this.state= {\n            //cy_data: this.props.cy_data,\n        };\n        \n    }\n\n    renderCytoscape(){\n        this.data =                 {\"nodes\":[{\"data\":{\"id\":\"a1\",\"type\":\"atom\",\"typeshape\":\"roundrectangle\",\"content\":\"Every person is going to die\"},\"classes\":\"atom-label\"},{\"data\":{\"id\":\"a2\",\"type\":\"atom\",\"typeshape\":\"roundrectangle\",\"content\":\"You are a person\"},\"classes\":\"atom-label\"},{\"data\":{\"id\":\"a3\",\"type\":\"atom\",\"typeshape\":\"roundrectangle\",\"content\":\"If you are going to die then you should treasure every moment\"},\"classes\":\"atom-label\"},{\"data\":{\"id\":\"a4\",\"type\":\"atom\",\"typeshape\":\"roundrectangle\",\"content\":\"You are going to die\"},\"classes\":\"atom-label\"},{\"data\":{\"id\":\"a5\",\"type\":\"atom\",\"typeshape\":\"roundrectangle\",\"content\":\"You should treasure every moment\"},\"classes\":\"atom-label\"},{\"data\":{\"id\":\"s1\",\"type\":\"scheme\",\"typeshape\":\"diamond\",\"content\":\"Support\"},\"classes\":\"scheme-label\"},{\"data\":{\"id\":\"s2\",\"type\":\"scheme\",\"typeshape\":\"diamond\",\"content\":\"Support\"},\"classes\":\"scheme-label\"}],\"edges\":[{\"data\":{\"id\":\"a1s1\",\"source\":\"a1\",\"target\":\"s1\"}},{\"data\":{\"id\":\"a2s1\",\"source\":\"a2\",\"target\":\"s1\"}},{\"data\":{\"id\":\"a3s2\",\"source\":\"a3\",\"target\":\"s2\"}},{\"data\":{\"id\":\"s2a5\",\"source\":\"s2\",\"target\":\"a5\"}},{\"data\":{\"id\":\"s1a4\",\"source\":\"s1\",\"target\":\"a4\"}},{\"data\":{\"id\":\"a4s2\",\"source\":\"a4\",\"target\":\"s2\"}}]};\n        JSON.parse(data);\n//        this.cy_data = {};\n        this.cy = cytoscape(\n        {\n            container: document.getElementById('cy'),\n            ready: function(){ window.cy = this; },\n          //  elements: this.props.cy_data,\n          elements: {\n                },\n\n                style:[\n                {   selector: \"node\", \n                    style: {\n                        \"content\": \"data(content)\",\n                        \"text-opacity\": 0.7,\n                        \"width\" : \"auto\",\n                        \"height\" : \"auto\",\n                        \"text-valign\": \"bottom\",\n                        \"text-halign\": \"right\",\n                        \"text-outline-color\": \"#eee\",\n                        \"text-outline-width\": 1\n                    }\n                },\n                {   selector: \"[typeshape]\", \n                    style: {\n                        \"shape\":\"data(typeshape)\"\n                    }   \n                },\n                {   selector: \"node[typeshape='diamond']\", \n                    style: {\n                        'background-color': '#CC9900'\n                }\n                },\n                {\n                selector: \"node[typeshape='diamond'][content='Conflict']\",\n                style: {\n                    'background-color': 'red'\n                }\n                },\n                {\n                selector: \"node[typeshape='diamond'][content='Support']\",\n                style: {\n                    'background-color': 'green'\n                }\n                },\n                {   \n                selector: \"edge\", \n                style: {\n                    \"line-color\": \"#9dbaea\",\n                    \"target-arrow-shape\": \"triangle\",\n                    \"target-arrow-color\": \"#9dbaea\",\n                    \"curve-style\": \"bezier\"\n                }\n                },\n                {   \n                selector: \":selected\", \n                style: {\n                    \"border-width\":\"1\",\n                    \"border-color\":\"black\",\n                    \"background-color\": \"#3399CC\"\n                }\n                },\n                {   \n                selector: \".atom-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n                },\n                {   \n                selector: \".scheme-label\", \n                style:{\n                    \"text-wrap\": \"wrap\",\n                    \"text-max-width\": 160\n                }\n            }\n            ],\n\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n\n        });\n\n        this.layout = this.build_cola_layout();\n        this.layout.run();\n\n        this.cy.elements(<Tooltip text=\"simple text\">Hello</Tooltip>)\n        \n    \n    }//close rendercytoscape\n    \n    build_cola_layout( opts ) {\n    var cola_params = {\n        name: \"cola\",\n        animate: true,\n        randomize: true,\n        padding: 100,\n        fit: false,\n        maxSimulationTime: 1500\n    };\n    var i = 0;\n    if (opts !== undefined) {\n        opts.forEach(function(opt) {\n           cola_params[i] = opts[i];\n           ++i;\n        });\n    }\n    return this.cy.makeLayout( cola_params );\n}\n\n    componentDidMount(){\n        this.renderCytoscape();\n    }\n\n\n    render(){\n        return(\n            <div id=\"cy\"></div>\n            );\n    }\n}\n\nexport default CytoContainer;"]},"metadata":{},"sourceType":"module"}