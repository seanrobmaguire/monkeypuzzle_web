{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\nimport $ from 'jquery';\nimport { import_json, export_cytoscape, add_atom, sd, add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source } from '../lib/Sadface'; //Import Components\n\nimport Modal from './Modal';\ncytoscape.use(edgehandles);\ncytoscape.use(contextMenus, $);\ncytoscape.use(cola);\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\" + analyst_email + \"\\\",\\\"analyst_name\\\":\\\"\" + analyst_email + \"\\\",\\\"created\\\":\\\"\" + created_date + \"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\" + edited_date + \"\\\",\\\"id\\\":\\\"\" + document_id + \"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\nclass Cytoscape extends Component {\n  constructor(props) {\n    super(props); //create Refs\n\n    this.handleAddAtom = e => {\n      let new_content = this.addAtomTextRef.current.value;\n\n      if (new_content == '') {\n        new_content = 'no content';\n        console.log(new_content, 'empty new content');\n      }\n\n      this.add_new_atom_node(new_content);\n    };\n\n    this.handleAddScheme = e => {\n      let scheme = this.newSchemeRef.current.value;\n      console.log(scheme, 'new_scheme');\n      this.add_new_scheme_node(scheme);\n    };\n\n    this.handleEditContent = e => {\n      let editContent = this.editContentRef.current.value;\n      let atom = cy.$(\"#\" + edit_atom.id());\n      this.update_local_storage();\n      atom.data(\"content\", editContent);\n      edit_atom = null;\n    };\n\n    this.addAtomTextRef = React.createRef();\n    this.newSchemeRef = React.createRef();\n    this.editContentRef = React.createRef();\n    this.state = {\n      png: '',\n      jpg: '',\n      NewAtomText: ''\n    };\n    this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n    this.initCytoscape = this.initCytoscape.bind(this);\n    this.build_cola_layout = this.build_cola_layout.bind(this);\n    this.edit_atom_content = this.edit_atom_content.bind(this);\n    this.delete_nodes = this.delete_nodes.bind(this);\n    this.update_local_storage = this.update_local_storage.bind(this);\n    this.redraw_visualisation = this.redraw_visualisation.bind(this);\n    this.undo = this.undo.bind(this);\n    this.redo = this.redo.bind(this);\n    this.merge_nodes = this.merge_nodes.bind(this);\n    this.delete_atom = this.delete_atom.bind(this); //    this.dragover_handler = this.dragover_handler.bind(this);\n\n    this.add_new_atom_node = this.add_new_atom_node.bind(this);\n  }\n\n  initialise_monkeypuzzle() {\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\")) {\n      console.log(localStorage.getItem(\"state\"), 'localstorage');\n      this.props.loadJSON(localStorage.getItem(\"state\")); // this.initCytoscape();\n      //else use default\n    } else {\n      current_sadface_doc = default_sadface_doc;\n      localStorage.setItem(\"state\", current_sadface_doc);\n      console.log(current_sadface_doc, 'current sadface'); //this.props.setCyData(export_cytoscape(import_json(current_sadface_doc)));\n\n      this.initCytoscape();\n    }\n  }\n\n  initCytoscape() {\n    console.log(\"initCyto\"); //change cy to state of APP\n\n    cy = cytoscape({\n      container: document.getElementById('cy'),\n      elements: JSON.parse(this.props.cy_data),\n      style: [{\n        selector: \"node\",\n        style: {\n          \"label\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          \"width\": \"auto\",\n          \"height\": \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: 'eh.handle',\n        style: {\n          \"handleColor\": \"orange\"\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    }); //close cy = cytoscape()\n\n    layout = this.build_cola_layout();\n    layout.run();\n    let defaults = {\n      handleColor: \"pink\"\n    };\n    cy.edgehandles({\n      toggleOffOnLeave: true,\n      handleNodes: \"node\",\n      handleSize: 10,\n      handleColor: \"#DF0085\",\n      handleHitThreshold: 8,\n      handleLineWidth: 5,\n      //handleLineType: \"flat\",\n      handleOutlineColor: \"pink\",\n      edgeType: function () {\n        return \"flat\";\n      },\n      complete: function (event, sourceNode, targetNode, addedEles) {\n        if (targetNode.length !== 0) {\n          var source_id = targetNode[0].source().id();\n          var target_id = targetNode[0].target().id(); //get the mid point between source node and target node\n\n          var source_position = targetNode[0].source().position();\n          var target_position = targetNode[0].target().position();\n          position = {};\n          position.x = (source_position.x + target_position.x) / 2;\n          position.y = (source_position.y + target_position.y) / 2;\n\n          if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\") {\n            var scheme = add_scheme(\"Support\");\n            var scheme_id = scheme.id;\n            var scheme_content = scheme.name; //remove the automatically generated edge\n\n            targetNode.remove();\n            cy.add([{\n              group: \"nodes\",\n              data: {\n                id: scheme_id.toString(),\n                content: scheme_content,\n                typeshape: \"diamond\"\n              },\n              classes: \"scheme-label\",\n              locked: false,\n              position: position\n            }]);\n            var edge1 = add_edge(source_id, scheme_id);\n            var edge2 = add_edge(scheme_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge1.id.toString(),\n                source: source_id,\n                target: scheme_id\n              }\n            }, {\n              group: \"edges\",\n              data: {\n                id: edge2.id.toString(),\n                source: scheme_id,\n                target: target_id\n              }\n            }]);\n          } else {\n            targetNode.remove();\n            var edge = add_edge(source_id, target_id);\n            cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge.id.toString(),\n                source: source_id,\n                target: target_id\n              }\n            }]);\n          }\n\n          this.update_local_storage();\n        } else {\n          targetNode.remove();\n        }\n      }.bind(this)\n    }); //edgehandles\n\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n\n    cm = cy.contextMenus({\n      menuItems: [{\n        id: \"edit-content\",\n        content: \"edit content\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n          edit_atom = target;\n          document.getElementById(\"editContentTrigger\").click();\n          this.editContentRef.value = target.data().content; //    $(\"#editContentModal\").modal(\"show\");\n          //  $(\"#edit_atom_content\").val(target.data().content);\n\n          console.log(edit_atom, \"EDIT ATOM\");\n        },\n        hasTrailingDivider: false\n      }, {\n        id: \"edit-metadata\",\n        content: \"edit metadata\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          //  $(\"#edit_metadata\").empty();\n          var target = event.target || event.cyTarget;\n          var atom = get_atom(target.id()); //  var textArea = $(\"<textarea id=\\\"\"+target.id()+\"_metadata\\\" class=\\\"form-control\\\" rows=\\\"2\\\" >\"+JSON.stringify(atom.metadata)+\"</textarea>\");\n          //   $(\"#edit_metadata\").append(textArea);\n          //   $(\"#editMetadataModal\").modal(\"show\");\n\n          edit_atom = target;\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"change-scheme\",\n        content: \"change scheme\",\n        selector: \"node[typeshape = \\\"diamond\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget; //                $(\"#editSchemeModal\").modal(\"show\");\n\n          edit_atom = target;\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"remove\",\n        content: \"remove\",\n        selector: \"node, edge\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n\n          if (selected.length !== 0) {\n            selected.forEach(function (node) {\n              this.delete_nodes(node);\n            });\n            selected = [];\n          } else {\n            if (target.data().type == \"atom\") {\n              this.delete_nodes(event);\n              target.remove();\n            } else if (target.data().typeshape == \"diamond\") {\n              this.delete_nodes(event);\n              target.remove();\n            } else {\n              this.delete_edge(target.id());\n              this.update_local_storage();\n              target.remove();\n            }\n          }\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"add-atom\",\n        content: \"add atom\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          position = event.renderedPosition;\n          document.getElementById(\"newAtomTrigger\").click();\n        }\n      }, {\n        id: \"add-scheme\",\n        content: \"add scheme\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          position = event.position || event.cyPosition;\n          document.getElementById(\"new_scheme\").click(); //   document.getElementById(\"sel1\").options.selectedIndex=0;\n          //      $(\"#newSchemeModal\").modal(\"show\");\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"redraw\",\n        content: \"redraw\",\n        coreAsWell: true,\n        onClickFunction: function () {\n          this.redraw_visualisation();\n        }.bind(this),\n        hasTrailingDivider: true\n      }, {\n        id: \"undo\",\n        content: \"undo\",\n        selector: \"node, edge\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.undo();\n        }.bind(this),\n        hasTrailingDivider: false\n      }, {\n        id: \"redo\",\n        content: \"redo\",\n        selector: \"node, edge\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.redo();\n\n          if (redo_stack == []) {\n            cm.hideMenuItem(\"redo\");\n          }\n        },\n        hasTrailingDivider: true\n      }, {\n        id: \"merge_nodes\",\n        content: \"merge nodes\",\n        selector: \"node\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.merge_nodes();\n        }\n      }]\n    });\n    cy.on(\"layoutstop\", function () {\n      running = false;\n      var png = cy.png({\n        full: true\n      });\n      this.props.handleSetPng(png);\n      var jpg = cy.jpg({\n        full: true\n      });\n      this.props.handleSetJpg(jpg);\n    }.bind(this));\n  }\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return cy.makeLayout(cola_params);\n  }\n\n  edit_atom_content() {\n    var content = document.getElementById(\"edit_atom_content\").value;\n    var atom = cy.$(\"#\" + edit_atom.id());\n    update_atom_text(edit_atom.id(), content);\n    this.update_local_storage();\n    atom.data(\"content\", content);\n    edit_atom = null;\n  }\n\n  delete_nodes(event) {\n    var target = event.target || event.cyTarget;\n    var id = target.id(); //removed = target.remove();\n\n    this.delete_atom(id);\n    var i = 0;\n    var sds = get_sd();\n    var edges = sds.edges;\n    edges.forEach(function (edge) {\n      if (edges[i] !== undefined) {\n        if (edges[i].source_id === id || edges[i].target_id === id) {\n          delete_edge(edges[i].id);\n        }\n\n        ++i;\n      }\n    });\n    this.update_local_storage();\n  }\n\n  update_local_storage() {\n    console.log(current_sadface_doc);\n    var undo_item = JSON.parse(current_sadface_doc);\n    console.log(undo_item, 'undoitem');\n    undo_stack.push(undo_item);\n    redo_stack = [];\n    cm.showMenuItem(\"undo\");\n    cm.hideMenuItem(\"redo\");\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    current_sadface_doc = JSON.stringify(get_sd());\n    update();\n  }\n\n  redraw_visualisation() {\n    layout.stop();\n    layout.options.eles = cy.elements();\n    layout.run();\n    cy.center();\n    cy.resize();\n  }\n\n  undo() {\n    if (undo_stack.length != 0) {\n      var redo_item = get_sd();\n      console.log(redo_item, 'redo item');\n      redo_stack.push(redo_item);\n      console.log(redo_stack, 'redo stack');\n      var state = undo_stack.pop();\n      console.log(state, 'state');\n      this.loadJSON(JSON.stringify(state));\n\n      if (undo_stack.length == 0) {\n        cm.hideMenuItem(\"undo\");\n      }\n\n      cm.showMenuItem(\"redo\");\n    }\n  }\n\n  redo() {\n    if (redo_stack.length != 0) {\n      var undo_item = get_sd();\n      undo_stack.push(undo_item);\n      var state = redo_stack.pop();\n      this.loadJSON(JSON.stringify(state));\n\n      if (redo_stack.length == 0) {\n        cm.hideMenuItem(\"redo\");\n      }\n\n      cm.showMenuItem(\"undo\");\n    }\n  }\n\n  merge_nodes() {\n    //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n    var target;\n    var id;\n    var atom;\n    var baseNode = selected[0].target || selected[0].cyTarget;\n    var baseId = baseNode.id();\n    var baseAtom = get_atom(baseId);\n    var edge;\n\n    if (baseAtom.type == \"atom\") {\n      var sds = get_sd();\n      var i = 0;\n      selected.forEach(function (node) {\n        var j = 0;\n\n        if (i > 0) {\n          target = selected[i].target || selected[i].cyTarget;\n          id = target.id();\n          atom = get_atom(id);\n\n          if (atom.type == \"atom\") {\n            atom.sources.forEach(function (source) {\n              add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n              ++j;\n            });\n            j = 0;\n            sds.edges.forEach(function (edge) {\n              if (sds.edges[j].source_id == id) {\n                edge = add_edge(baseId, sds.edges[j].target_id);\n                cy.add([{\n                  group: \"edges\",\n                  data: {\n                    id: edge.id.toString(),\n                    source: baseId,\n                    target: sds.edges[j].target_id\n                  }\n                }]);\n              }\n\n              if (sds.edges[j].target_id == id) {\n                edge = add_edge(sds.edges[j].source_id, baseId);\n                cy.add([{\n                  group: \"edges\",\n                  data: {\n                    id: edge.id.toString(),\n                    source: sds.edges[j].source_id,\n                    target: baseId\n                  }\n                }]);\n              }\n\n              ++j;\n            });\n            this.delete_nodes(selected[i]);\n          } else {\n            alert(\"cannot merge scheme nodes\");\n          }\n        }\n\n        ++i;\n      });\n      selected = [];\n      cm.hideMenuItem(\"merge_nodes\");\n    } else {\n      alert(\"cannot merge scheme nodes\");\n    }\n  }\n\n  delete_atom(atom_id) {\n    /*\n    Remove the atom from the sadface document identified by the\n    supplied atom ID\n    */\n    if (atom_id) {\n      var atom = get_atom(atom_id);\n\n      if (atom !== null && atom !== undefined) {\n        var size = Object.keys(sd.nodes).length;\n\n        for (var i = 0; i < size; ++i) {\n          if (sd.nodes[i].id === atom.id) {\n            delete sd.nodes[i]; //                    sd.nodes = remove_falsy(sd.nodes);\n\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.initialise_monkeypuzzle();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      cy_data: nextProps.cy_data\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    if (this.props.cy_data !== prevProps.cy_data) {\n      this.initCytoscape();\n    }\n  }\n\n  add_new_atom_node(content) {\n    var meta = {\n      \"hello\": \"world\"\n    };\n    var new_atom = add_atom(content);\n    console.log(new_atom, 'new_atom');\n    var atom_id = new_atom.id;\n\n    if (focused != null) {\n      add_source(atom_id, focused.id, content, 0, 0);\n    }\n\n    if (position == null) {\n      position = {\n        \"x\": cy.width() / 2,\n        \"y\": cy.height() / 2\n      };\n    }\n\n    cy.add([{\n      group: \"nodes\",\n      data: {\n        id: atom_id.toString(),\n        content: content,\n        type: \"atom\",\n        typeshape: \"roundrectangle\",\n        metadata: meta\n      },\n      classes: \"atom-label\",\n      locked: false,\n      renderedPosition: position\n    }]);\n    let node = cy.getElementById(atom_id.toString());\n    /*  node.qtip({\n          content: function(){return 'ID: '+this.id()},\n          position: {\n              my: \"top center\",\n              at: \"bottom center\"\n          },\n          style: {\n              classes: \"qtip-bootstrap\",\n              tip: {\n                  width: 16,\n                  height: 8\n              }\n          }\n      });*/\n\n    position = null;\n    this.update_local_storage();\n  }\n\n  add_new_scheme_node(scheme) {\n    // var scheme_idx = document.getElementById(\"sel1\").options.selectedIndex;\n    //  var scheme = document.getElementById(\"sel1\").options[scheme_idx].text;\n    var new_scheme = add_scheme(scheme);\n    var scheme_id = new_scheme.id;\n    cy.add([{\n      group: \"nodes\",\n      data: {\n        id: scheme_id.toString(),\n        content: scheme,\n        type: \"scheme\",\n        typeshape: \"diamond\"\n      },\n      classes: \"scheme-label\",\n      locked: false,\n      position: position\n    }]);\n    this.update_local_storage();\n  }\n\n  render() {\n    /* New Atom Modal */\n    const newAtomModal = {\n      trigger: {\n        triggerText: 'New Atom',\n        triggerId: 'newAtomTrigger'\n      },\n      title: 'New Atom',\n      id: 'newAtomModal',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 688\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 689\n        },\n        __self: this\n      }, \"Add some content to the new atom\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 690\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control\",\n        rows: \"2\",\n        id: \"new_atom_content\",\n        ref: this.addAtomTextRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 691\n        },\n        __self: this\n      }))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Create'\n        }\n      }\n    };\n    /* New Scheme Modal*/\n\n    var newSchemeModal = {\n      trigger: {\n        triggerText: 'New Scheme',\n        className: \"new_scheme\",\n        triggerId: \"new_scheme\"\n      },\n      id: \"newSchemeModal\",\n      title: 'New Scheme',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 721\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722\n        },\n        __self: this\n      }, \"Select a scheme\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"sel1\",\n        ref: this.newSchemeRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 723\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 728\n        },\n        __self: this\n      }, \"Support\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 729\n        },\n        __self: this\n      }, \"Conflict\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 730\n        },\n        __self: this\n      }, \"Argument from Sign\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 731\n        },\n        __self: this\n      }, \"Argument from an Exceptional Case\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 732\n        },\n        __self: this\n      }, \"Argument from Analogy\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733\n        },\n        __self: this\n      }, \"Argument from Bias\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 734\n        },\n        __self: this\n      }, \"Argument from Cause to Effect\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735\n        },\n        __self: this\n      }, \"Argument from Correlation to Causes\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 736\n        },\n        __self: this\n      }, \"Argument from Established Rule\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 737\n        },\n        __self: this\n      }, \"Argument from Evidence to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738\n        },\n        __self: this\n      }, \"Argument from Falsification to a Hypothesis\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739\n        },\n        __self: this\n      }, \"Argument from Example\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740\n        },\n        __self: this\n      }, \"Argument from Commitment\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741\n        },\n        __self: this\n      }, \"Circumstantial Argument Against the Person\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 742\n        },\n        __self: this\n      }, \"Argument from Popular Practice\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 743\n        },\n        __self: this\n      }, \"Argument from Popularity\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 744\n        },\n        __self: this\n      }, \"Argument from Position to Know\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 745\n        },\n        __self: this\n      }, \"Argument from Expert Opinion\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 746\n        },\n        __self: this\n      }, \"Argument from Precedent\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 747\n        },\n        __self: this\n      }, \"Argument from Consequences\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748\n        },\n        __self: this\n      }, \"Argument from Waste\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749\n        },\n        __self: this\n      }, \"Causal Slippery Slope Argument\"))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: \"btn btn-primary\",\n          value: \"Create\"\n        }\n      }\n    };\n    /* Edit Content Modal */\n\n    var editContentModal = {\n      trigger: {\n        triggerText: 'editContentTrigger',\n        className: \"editContentTrigger\",\n        triggerId: \"editContentTrigger\"\n      },\n      id: 'editContentModal',\n      title: 'Edit Atom Content',\n      content: React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 774\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 775\n        },\n        __self: this\n      }, \"Edit atom content\"), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 776\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control\",\n        rows: \"2\",\n        id: \"edit_atom_content_textarea\",\n        ref: this.editContentRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 777\n        },\n        __self: this\n      }))),\n      footer: {\n        buttonNo: 2,\n        button1: {\n          className: \"btn btn-secondary\",\n          value: \"Close\"\n        },\n        button2: {\n          className: 'btn btn-primary',\n          value: 'Save'\n        }\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      modalProps: newAtomModal,\n      style: \"\",\n      onClick: this.handleAddAtom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: newSchemeModal,\n      style: \"\",\n      onClick: this.handleAddScheme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      modalProps: editContentModal,\n      style: \"\",\n      onClick: this.handleEditContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"cy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Cytoscape;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/Cytoscape.js"],"names":["React","Component","cytoscape","cola","edgehandles","contextMenus","$","import_json","export_cytoscape","add_atom","sd","add_scheme","add_edge","get_atom","now","new_uuid","update_atom_text","get_sd","delete_edge","update","add_source","Modal","use","cy","cm","selected","position","layout","running","json","created_date","edited_date","analyst_email","analyst_name","document_id","default_sadface_doc","current_sadface_doc","focused","undo_stack","redo_stack","edit_atom","resource_pane_viewable_state","Cytoscape","constructor","props","handleAddAtom","e","new_content","addAtomTextRef","current","value","console","log","add_new_atom_node","handleAddScheme","scheme","newSchemeRef","add_new_scheme_node","handleEditContent","editContent","editContentRef","atom","id","update_local_storage","data","createRef","state","png","jpg","NewAtomText","initialise_monkeypuzzle","bind","initCytoscape","build_cola_layout","edit_atom_content","delete_nodes","redraw_visualisation","undo","redo","merge_nodes","delete_atom","localStorage","getItem","loadJSON","setItem","container","document","getElementById","elements","JSON","parse","cy_data","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","run","defaults","handleColor","toggleOffOnLeave","handleNodes","handleSize","handleHitThreshold","handleLineWidth","handleOutlineColor","edgeType","complete","event","sourceNode","targetNode","addedEles","length","source_id","source","target_id","target","source_position","target_position","x","y","type","scheme_id","scheme_content","name","remove","add","group","toString","content","typeshape","classes","locked","edge1","edge2","edge","menuItems","onClickFunction","cyTarget","click","hasTrailingDivider","forEach","node","coreAsWell","renderedPosition","cyPosition","show","hideMenuItem","on","full","handleSetPng","handleSetJpg","opts","cola_params","animate","randomize","padding","fit","maxSimulationTime","i","undefined","opt","makeLayout","sds","edges","undo_item","push","showMenuItem","stringify","stop","options","eles","center","resize","redo_item","pop","baseNode","baseId","baseAtom","j","sources","resource_id","text","offset","alert","atom_id","size","Object","keys","nodes","componentDidMount","componentWillReceiveProps","nextProps","setState","componentDidUpdate","prevProps","meta","new_atom","width","height","metadata","new_scheme","render","newAtomModal","trigger","triggerText","triggerId","title","footer","buttonNo","button1","className","button2","newSchemeModal","editContentModal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\n\nimport $ from 'jquery';\n\n\nimport {import_json,export_cytoscape,add_atom, sd,add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source} from '../lib/Sadface'; \n//Import Components\nimport Modal from  './Modal';\n\n\ncytoscape.use( edgehandles );\ncytoscape.use(contextMenus, $);\ncytoscape.use( cola );\n\n\n\n\nvar cy = null;\nvar cm = null;\nvar selected = [];\nvar position = null;\nvar layout = null;\nvar running = false;\nvar json;\nvar created_date = now();\nvar edited_date = now();\nvar analyst_email = \"Default Analyst Email\";\nvar analyst_name = \"Default Analsyst Name\";\nvar document_id = new_uuid();\nvar default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\"+analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+analyst_email+\"\\\",\\\"created\\\":\\\"\"+created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+edited_date+\"\\\",\\\"id\\\":\\\"\"+document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\nvar current_sadface_doc = null;\nvar focused = null;\nvar undo_stack = [];\nvar redo_stack = [];\nvar edit_atom = null;\nvar resource_pane_viewable_state = true;\n\n\n\nclass Cytoscape extends Component {\n  constructor(props){\n        super(props);\n        //create Refs\n        this.addAtomTextRef = React.createRef();\n        this.newSchemeRef = React.createRef();\n        this.editContentRef =React.createRef();\n\n        this.state={\n         png:'',\n         jpg:'',\n         NewAtomText: '',\n        }\n            this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n            this.initCytoscape = this.initCytoscape.bind(this);\n            this.build_cola_layout = this.build_cola_layout.bind(this);\n            this.edit_atom_content = this.edit_atom_content.bind(this);\n            this. delete_nodes =this.delete_nodes.bind(this);\n            this.update_local_storage = this.update_local_storage.bind(this);\n            this.redraw_visualisation = this.redraw_visualisation.bind(this);\n            this.undo = this.undo.bind(this);\n            this.redo = this.redo.bind(this);\n            this.merge_nodes = this.merge_nodes.bind(this);\n            this.delete_atom =this.delete_atom.bind(this);\n            //    this.dragover_handler = this.dragover_handler.bind(this);\n\n            this.add_new_atom_node = this.add_new_atom_node.bind(this);\n    }\n\n    initialise_monkeypuzzle() {\n\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\"))\n    {\n        console.log(localStorage.getItem(\"state\"), 'localstorage')\n        this.props.loadJSON(localStorage.getItem(\"state\"));\n       // this.initCytoscape();\n    //else use default\n    } else\n    {\n        current_sadface_doc = default_sadface_doc;\n        localStorage.setItem(\"state\", current_sadface_doc);\n        console.log(current_sadface_doc, 'current sadface');\n        //this.props.setCyData(export_cytoscape(import_json(current_sadface_doc)));\n        this.initCytoscape();\n    }\n}\n\n    initCytoscape(){\n        console.log(\"initCyto\");\n        //change cy to state of APP\n        cy = cytoscape({\n            container: document.getElementById('cy'),\n            elements: JSON.parse(this.props.cy_data),\n\n            style:[\n                {   selector: \"node\", \n                    style: {\n                        \"label\": \"data(content)\",\n                        \"text-opacity\": 0.7,\n                        \"width\" : \"auto\",\n                        \"height\" : \"auto\",\n                        \"text-valign\": \"bottom\",\n                        \"text-halign\": \"right\",\n                        \"text-outline-color\": \"#eee\",\n                        \"text-outline-width\": 1\n                    }\n                },\n                \n                {   selector: \"[typeshape]\", \n                    style: {\n                        \"shape\":\"data(typeshape)\"\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond']\", \n                    style: {\n                        'background-color': '#CC9900'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][content='Conflict']\",\n                    style: {\n                        'background-color': 'red'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][content='Support']\",\n                    style: {\n                        'background-color': 'green'\n                    }\n                },\n\n                {   selector: \"edge\", \n                    style: {\n                        \"line-color\": \"#9dbaea\",\n                        \"target-arrow-shape\": \"triangle\",\n                        \"target-arrow-color\": \"#9dbaea\",\n                        \"curve-style\": \"bezier\"\n                    }\n                },\n\n\n                {   selector: \":selected\", \n                    style: {\n                        \"border-width\":\"1\",\n                        \"border-color\":\"black\",\n                        \"background-color\": \"#3399CC\"\n                    }\n                },\n\n\n                {   selector: \".atom-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n\n                {   selector: \".scheme-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n                {\n\n                selector: 'eh.handle',\n                style: {\n                    \"handleColor\":\"orange\",\n\n                },\n            }\n            ],\n\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n\n        });//close cy = cytoscape()\n\n\n\n    layout = this.build_cola_layout();\n    layout.run();\n\n    let defaults = {\n                handleColor: \"pink\",\n\n\n    }\n\n   \n\n    cy.edgehandles({\n        toggleOffOnLeave: true,\n        handleNodes: \"node\",\n        handleSize: 10,\n        handleColor: \"#DF0085\",\n        handleHitThreshold: 8,\n        handleLineWidth: 5,\n        //handleLineType: \"flat\",\n        handleOutlineColor: \"pink\",\n        edgeType: function(){ return \"flat\"; },\n        complete: function(event, sourceNode, targetNode, addedEles){\n            if (targetNode.length !== 0) {\n                var source_id = targetNode[0].source().id();\n                var target_id = targetNode[0].target().id();\n\n                //get the mid point between source node and target node\n                var source_position = targetNode[0].source().position();\n                var target_position = targetNode[0].target().position();\n\n                position = {};\n                position.x = ((source_position.x + target_position.x)/2);\n                position.y = ((source_position.y + target_position.y)/2);\n\n                if (targetNode[0].source().data().type == \"atom\" && targetNode[0].target().data().type == \"atom\")\n                {\n                    var scheme = add_scheme(\"Support\");\n                    var scheme_id = scheme.id;\n                    var scheme_content = scheme.name;\n                    //remove the automatically generated edge\n                    targetNode.remove();\n                    cy.add([\n                        {group: \"nodes\", data: {id: scheme_id.toString(),\n                            content: scheme_content, typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n                            ]);\n                    var edge1 = add_edge(source_id, scheme_id);\n                    var edge2 = add_edge(scheme_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge1.id.toString(), source: source_id, target: scheme_id } },\n                      { group: \"edges\", data: { id: edge2.id.toString(), source: scheme_id, target: target_id } }\n                      ]);\n                } else {\n                    targetNode.remove();\n                    var edge = add_edge(source_id, target_id);\n                    cy.add([\n                      { group: \"edges\", data: { id: edge.id.toString(), source: source_id, target: target_id } }\n                      ]);\n                }\n                this.update_local_storage();\n            } else {\n                targetNode.remove();\n            }\n        }.bind(this)\n    });\n    //edgehandles\n\n    /*\n     *\n     * Set up context menus\n     *\n     * */\n     cm = cy.contextMenus({\n       menuItems: [\n       {\n        id: \"edit-content\",\n        content: \"edit content\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n          edit_atom = target;\n           document.getElementById(\"editContentTrigger\").click();\n           this.editContentRef.value = target.data().content;\n          //    $(\"#editContentModal\").modal(\"show\");\n            //  $(\"#edit_atom_content\").val(target.data().content);\n           console.log(edit_atom, \"EDIT ATOM\");\n        },\n        hasTrailingDivider: false\n    },\n    {\n        id: \"edit-metadata\",\n        content: \"edit metadata\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n              //  $(\"#edit_metadata\").empty();\n              var target = event.target || event.cyTarget;\n              var atom = get_atom(target.id());\n              //  var textArea = $(\"<textarea id=\\\"\"+target.id()+\"_metadata\\\" class=\\\"form-control\\\" rows=\\\"2\\\" >\"+JSON.stringify(atom.metadata)+\"</textarea>\");\n             //   $(\"#edit_metadata\").append(textArea);\n             //   $(\"#editMetadataModal\").modal(\"show\");\n             edit_atom = target;\n         },\n         hasTrailingDivider: true\n     },\n     {\n        id: \"change-scheme\",\n        content: \"change scheme\",\n        selector: \"node[typeshape = \\\"diamond\\\"]\",\n        onClickFunction: function (event) {\n            var target = event.target || event.cyTarget;\n//                $(\"#editSchemeModal\").modal(\"show\");\nedit_atom = target;\n},\nhasTrailingDivider: true\n},\n{\n    id: \"remove\",\n    content: \"remove\",\n    selector: \"node, edge\",\n    onClickFunction: function (event) {\n        var target = event.target || event.cyTarget;\n        if (selected.length !== 0) {\n            selected.forEach(function(node) {\n                this.delete_nodes(node);\n            });\n            selected = [];\n        } else {\n            if (target.data().type==\"atom\") {\n                this.delete_nodes(event);\n                target.remove();\n            } else if (target.data().typeshape==\"diamond\"){\n                this.delete_nodes(event);\n                target.remove();\n            } else {\n                this.delete_edge(target.id());\n                this.update_local_storage();\n                target.remove();\n            }\n        }\n    },\n    hasTrailingDivider: true\n},\n{\n    id: \"add-atom\",\n    content: \"add atom\",\n    coreAsWell: true,\n\n    onClickFunction: function (event) {\n        position = event.renderedPosition;\n        document.getElementById(\"newAtomTrigger\").click();\n    }\n},\n{\n    id: \"add-scheme\",\n    content: \"add scheme\",\n    coreAsWell: true,\n    onClickFunction: function (event) {\n\n        position = event.position || event.cyPosition;\n        document.getElementById(\"new_scheme\").click()\n\n\n     //   document.getElementById(\"sel1\").options.selectedIndex=0;\n//      $(\"#newSchemeModal\").modal(\"show\");\n},\nhasTrailingDivider: true\n},\n{\n    id: \"redraw\",\n    content: \"redraw\",\n    coreAsWell: true,\n    onClickFunction: function () { this.redraw_visualisation(); }.bind(this),\n    hasTrailingDivider: true\n},\n{\n    id: \"undo\",\n    content: \"undo\",\n    selector: \"node, edge\",\n    show: false,\n    coreAsWell: true,\n    onClickFunction: function (event) {\n      this.undo();\n  }.bind(this),\n  hasTrailingDivider: false\n},\n{\n    id: \"redo\",\n    content: \"redo\",\n    selector: \"node, edge\",\n    show: false,\n    coreAsWell: true,\n    onClickFunction: function (event) {\n      this.redo();\n      if (redo_stack == []) {\n        cm.hideMenuItem(\"redo\");\n    }\n},\nhasTrailingDivider: true\n},\n{\n  id: \"merge_nodes\",\n  content: \"merge nodes\",\n  selector: \"node\",\n  show: false,\n  coreAsWell: true,\n  onClickFunction: function (event) {\n      this.merge_nodes();\n  }\n}\n]\n});\n      cy.on(\"layoutstop\", function(){\n        running = false;\n        \n        var png = cy.png({ full: true });\n        this.props.handleSetPng(png);\n\n        var jpg = cy.jpg({ full: true });\n        this.props.handleSetJpg(jpg);\n    }.bind(this));\n\n }\n\n build_cola_layout( opts ) {\n    var cola_params = {\n        name: \"cola\",\n        animate: true,\n        randomize: true,\n        padding: 100,\n        fit: false,\n        maxSimulationTime: 1500\n    };\n    var i = 0;\n    if (opts !== undefined) {\n        opts.forEach(function(opt) {\n         cola_params[i] = opts[i];\n         ++i;\n     });\n    }\n    return cy.makeLayout( cola_params );\n}\n\nedit_atom_content() {\n    var content = document.getElementById(\"edit_atom_content\").value;\n    var atom = cy.$(\"#\"+edit_atom.id());\n    update_atom_text(edit_atom.id(), content);\n    this.update_local_storage();\n    atom.data(\"content\", content);\n    edit_atom = null;\n}\n\ndelete_nodes(event) {\n    var target = event.target || event.cyTarget;\n    var id = target.id();\n    //removed = target.remove();\n    this.delete_atom(id);\n    var i = 0;\n    var sds = get_sd();\n    var edges = sds.edges;\n    edges.forEach(function(edge) {\n        if (edges[i] !== undefined) {\n            if (edges[i].source_id === id || edges[i].target_id === id) {\n                delete_edge(edges[i].id);\n            }\n            ++i;\n        }\n    });\n    this.update_local_storage();\n}\n\nupdate_local_storage() {\n    console.log(current_sadface_doc);\n    var undo_item = JSON.parse(current_sadface_doc);\n    console.log(undo_item, 'undoitem');\n    undo_stack.push(undo_item);\n    redo_stack = [];\n    cm.showMenuItem(\"undo\");\n    cm.hideMenuItem(\"redo\");\n    localStorage.setItem(\"state\", JSON.stringify(get_sd()));\n    current_sadface_doc = JSON.stringify(get_sd());\n    update();\n}\n\nredraw_visualisation() {\n    layout.stop();\n    layout.options.eles = cy.elements();\n    layout.run();\n    cy.center();\n    cy.resize();\n}\n\nundo() {\n    if (undo_stack.length != 0) {\n        var redo_item = get_sd();\n        console.log(redo_item, 'redo item');\n        redo_stack.push(redo_item);\n        console.log(redo_stack, 'redo stack');\n        var state = undo_stack.pop();\n        console.log(state, 'state');\n        this.loadJSON(JSON.stringify(state));\n        if (undo_stack.length == 0) {\n            cm.hideMenuItem(\"undo\");\n        }\n        cm.showMenuItem(\"redo\");\n    }\n}\n\nredo() {\n    if (redo_stack.length != 0) {\n        var undo_item = get_sd();\n        undo_stack.push(undo_item);\n        var state = redo_stack.pop();\n        this.loadJSON(JSON.stringify(state));\n        if (redo_stack.length == 0) {\n            cm.hideMenuItem(\"redo\");\n        }\n        cm.showMenuItem(\"undo\");\n    }\n}\n\n\nmerge_nodes() {\n    //From all currently selected nodes, set first in selected to the base node, move all sources and edges related to each other node in selected to base node\n    var target;\n    var id;\n    var atom;\n    var baseNode = selected[0].target || selected[0].cyTarget;\n    var baseId = baseNode.id();\n    var baseAtom = get_atom(baseId);\n    var edge;\n    if (baseAtom.type == \"atom\") {\n        var sds = get_sd();\n        var i = 0;\n        selected.forEach(function(node){\n            var j = 0;\n            if (i > 0) {\n                target = selected[i].target || selected[i].cyTarget;\n                id = target.id();\n                atom = get_atom(id);\n                if (atom.type == \"atom\") {\n                    atom.sources.forEach(function(source) {\n                        add_source(baseId, atom.sources[j].resource_id, atom.sources[j].text, atom.sources[j].offset, atom.sources[j].length);\n                        ++j;\n                    });\n                    j = 0;\n                    sds.edges.forEach(function(edge) {\n                        if (sds.edges[j].source_id == id) {\n                            edge = add_edge(baseId,sds.edges[j].target_id);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: baseId, target: sds.edges[j].target_id } }\n                              ]);\n                        }\n                        if (sds.edges[j].target_id == id) {\n                            edge = add_edge(sds.edges[j].source_id, baseId);\n                            cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: sds.edges[j].source_id, target: baseId } }\n                              ]);\n                        }\n                        ++j;\n                    });\n                    this.delete_nodes(selected[i]);\n                } else {\n                    alert(\"cannot merge scheme nodes\");\n                }\n            }\n            ++i;\n        });\n        selected = [];\n        cm.hideMenuItem(\"merge_nodes\");\n    } else {\n        alert(\"cannot merge scheme nodes\");\n    }\n}\n\ndelete_atom(atom_id) {\n    /*\n    Remove the atom from the sadface document identified by the\n    supplied atom ID\n    */\n    if (atom_id) {\n        var atom = get_atom(atom_id);\n        if (atom !== null && atom !== undefined) {\n            var size = Object.keys(sd.nodes).length;\n            for (var i = 0; i < size; ++i) {\n                if (sd.nodes[i].id === atom.id) {\n                    delete sd.nodes[i];\n//                    sd.nodes = remove_falsy(sd.nodes);\n                        return;\n                }\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\ncomponentDidMount(){\n this.initialise_monkeypuzzle();\n}\ncomponentWillReceiveProps(nextProps) {\n   this.setState({ cy_data: nextProps.cy_data })\n}\n\ncomponentDidUpdate(prevProps) {\n  // Typical usage (don't forget to compare props):\n  if (this.props.cy_data !== prevProps.cy_data) {\n  \tthis.initCytoscape();\n  }\n}\n\nhandleAddAtom = (e) => {\n    let new_content = this.addAtomTextRef.current.value;\n    if(new_content == ''){\n        new_content = 'no content'\n        console.log(new_content, 'empty new content')\n    }\n    this.add_new_atom_node(new_content)\n\n}\n\nadd_new_atom_node(content) {\n    var meta = {\"hello\":\"world\"};\n    var new_atom = add_atom(content);\n    console.log(new_atom, 'new_atom');\n    var atom_id = new_atom.id;\n    if (focused != null) {\n        add_source(atom_id, focused.id, content, 0, 0);\n    }\n    if (position == null) {\n        position = {\"x\": cy.width()/2, \"y\": cy.height()/2};\n    }\n    cy.add([\n        {group: \"nodes\", data: {id: atom_id.toString(),\n            content: content, type: \"atom\", typeshape: \"roundrectangle\", metadata: meta }, \n            classes: \"atom-label\", locked: false, renderedPosition: position}\n    ]);\n    let node = cy.getElementById(atom_id.toString() );\n  /*  node.qtip({\n        content: function(){return 'ID: '+this.id()},\n        position: {\n            my: \"top center\",\n            at: \"bottom center\"\n        },\n        style: {\n            classes: \"qtip-bootstrap\",\n            tip: {\n                width: 16,\n                height: 8\n            }\n        }\n    });*/\n    position = null;\n    this.update_local_storage();\n}\n\nhandleAddScheme = (e) => {\n    let scheme = this.newSchemeRef.current.value;\n    console.log(scheme, 'new_scheme');\n    this.add_new_scheme_node(scheme)\n}\n\n add_new_scheme_node(scheme) {\n   // var scheme_idx = document.getElementById(\"sel1\").options.selectedIndex;\n  //  var scheme = document.getElementById(\"sel1\").options[scheme_idx].text;\n    var new_scheme = add_scheme(scheme);\n    var scheme_id = new_scheme.id;\n\n    cy.add([\n        {group: \"nodes\", data: {id: scheme_id.toString(),\n            content: scheme, type: \"scheme\", typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: position}\n    ]);\n    this.update_local_storage();\n}\n\nhandleEditContent = (e) => {\n    let editContent = this.editContentRef.current.value;\n    let atom = cy.$(\"#\"+edit_atom.id());\n    this.update_local_storage();\n    atom.data(\"content\", editContent);\n    edit_atom = null;\n}\n\n\n\n\nrender(){\n     /* New Atom Modal */\n        const newAtomModal = {\n          trigger: {\n            triggerText: 'New Atom',\n            triggerId: 'newAtomTrigger'\n          },\n          title: 'New Atom',\n          id: 'newAtomModal',\n          content: <div className=\"modal-body\">\n          <p>Add some content to the new atom</p>\n          <div className=\"form-group\">\n          <textarea \n            className=\"form-control\" \n            rows=\"2\" \n            id=\"new_atom_content\" \n            ref={this.addAtomTextRef}\n            >\n          </textarea></div></div>,\n          footer: {\n            buttonNo:2,\n            button1: {\n              className: \"btn btn-secondary\",\n              value: \"Close\"\n            },\n            button2: {\n              className: 'btn btn-primary',\n              value: 'Create',\n            },\n\n          }\n        };\n\n        /* New Scheme Modal*/\n        var newSchemeModal = {\n          trigger: {\n                triggerText: 'New Scheme',\n                className: \"new_scheme\",\n                triggerId: \"new_scheme\",\n          },\n          id:\"newSchemeModal\",\n          title: 'New Scheme',\n          content: <div className=\"modal-body\">\n          <p>Select a scheme</p>\n          <select \n            className=\"form-control\" \n            id=\"sel1\" \n            ref={this.newSchemeRef}\n            >\n          <option>Support</option>\n          <option>Conflict</option>\n          <option>Argument from Sign</option>\n          <option>Argument from an Exceptional Case</option>\n          <option>Argument from Analogy</option>\n          <option>Argument from Bias</option>\n          <option>Argument from Cause to Effect</option>\n          <option>Argument from Correlation to Causes</option>\n          <option>Argument from Established Rule</option>\n          <option>Argument from Evidence to a Hypothesis</option>\n          <option>Argument from Falsification to a Hypothesis</option>\n          <option>Argument from Example</option>\n          <option>Argument from Commitment</option>\n          <option>Circumstantial Argument Against the Person</option>\n          <option>Argument from Popular Practice</option>\n          <option>Argument from Popularity</option>\n          <option>Argument from Position to Know</option>\n          <option>Argument from Expert Opinion</option>\n          <option>Argument from Precedent</option>\n          <option>Argument from Consequences</option>\n          <option>Argument from Waste</option>\n          <option>Causal Slippery Slope Argument</option>\n          </select>\n          </div>,\n          footer: {\n                buttonNo: 2,\n                button1: {\n                  className: \"btn btn-secondary\",\n                  value: \"Close\"\n                },\n                button2: {\n                  className: \"btn btn-primary\",\n                  value: \"Create\"\n                }\n            }\n        };\n\n        /* Edit Content Modal */\n        var editContentModal = {\n         trigger: {\n          triggerText: 'editContentTrigger',\n          className: \"editContentTrigger\",\n          triggerId: \"editContentTrigger\",\n        },\n        id: 'editContentModal',\n        title: 'Edit Atom Content',\n        content: <div className=\"modal-body\">\n        <p>Edit atom content</p>\n        <div className=\"form-group\">\n        <textarea \n            className=\"form-control\" \n            rows=\"2\" \n            id=\"edit_atom_content_textarea\"\n            ref={this.editContentRef}\n            ></textarea>\n        </div>\n        </div>,\n        footer: {\n          buttonNo: 2,\n          button1:{\n            className: \"btn btn-secondary\",\n            value: \"Close\"\n          },\n          button2: {\n            className: 'btn btn-primary',\n            value: 'Save',\n          }\n        }\n        };\n\n\n\n    return (\n    \t<div>\n\n    \t<Modal\n            modalProps={newAtomModal}\n            style=\"\"\n            onClick={this.handleAddAtom}\n        />\n      <Modal\n            modalProps={newSchemeModal}\n            style=\"\"\n            onClick={this.handleAddScheme}\n        />\n\n        <Modal\n            modalProps={editContentModal}\n            style=\"\"\n            onClick={this.handleEditContent}\n        />\n\n      <div id=\"cy\" >\n\n      </div>\n      </div>\n      );\n}\n}\n\nexport default Cytoscape;"]},"metadata":{},"sourceType":"module"}