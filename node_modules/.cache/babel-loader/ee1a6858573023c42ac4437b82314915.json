{"ast":null,"code":"var _jsxFileName = \"/Users/gareth/Desktop/monkeypuzzle/src/Components/VisualisationPane/VisualisationPane.js\";\nimport React, { Component } from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport $ from 'jquery';\nimport contextMenus from 'cytoscape-context-menus';\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\nimport { remove_falsy, update_scheme, update_atom_metadata, import_json, export_cytoscape, add_atom, sd, add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source } from '../../lib/Sadface';\n\nclass Cytoscape extends Component {\n  constructor(props) {\n    super(props); //create Refs\n\n    this.newAtomRef = React.createRef();\n    this.newSchemeRef = React.createRef();\n    this.editContentRef = React.createRef();\n    this.state = {\n      modalValue: ' ',\n      dropDownValue: ' '\n    };\n    this.cy = null;\n    this.default_sadface_doc = \"{\\\"analyst_email\\\":\\\"\" + this.analyst_email + \"\\\",\\\"analyst_name\\\":\\\"\" + this.analyst_email + \"\\\",\\\"created\\\":\\\"\" + this.created_date + \"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\" + this.edited_date + \"\\\",\\\"id\\\":\\\"\" + this.document_id + \"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\n    this.analyst_email = \"Default Analyst Email\";\n    this.analyst_name = \"Default Analsyst Name\";\n    this.position = null;\n    this.edit_atom = null;\n    this.selected = [];\n    this.redo_stack = [];\n    this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n    this.initCytoscape = this.initCytoscape.bind(this);\n  }\n\n  initialise_monkeypuzzle() {\n    //load diagram if there is one in localStorage\n    if (localStorage.getItem(\"state\") !== \"undefined\") {\n      console.log(\"undefined nfsndksnf\");\n      this.props.loadJSON(localStorage.getItem(\"state\"));\n      this.initCytoscape(); // //else use default\n    } else {\n      this.props.setCurrentSadFaceDoc(this.default_sadface_doc); //    localStorage.setItem(\"state\", this.props.current_sadface_doc);\n\n      this.props.setCyData(export_cytoscape(import_json(this.props.current_sadface_doc)));\n      this.initCytoscape();\n    }\n  }\n\n  initCytoscape() {\n    this.cy = cytoscape({\n      container: document.getElementById('cy'),\n      elements: JSON.parse(this.props.cyData),\n      style: [{\n        selector: \"node\",\n        style: {\n          \"label\": \"data(content)\",\n          \"text-opacity\": 0.7,\n          // \"width\" : \"auto\",\n          //    \"height\" : \"auto\",\n          \"text-valign\": \"bottom\",\n          \"text-halign\": \"right\",\n          \"text-outline-color\": \"#eee\",\n          \"text-outline-width\": 1\n        }\n      }, {\n        selector: \"[typeshape]\",\n        style: {\n          \"shape\": \"data(typeshape)\"\n        }\n      }, {\n        selector: \"node[typeshape='diamond']\",\n        style: {\n          'background-color': '#CC9900'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Conflict']\",\n        style: {\n          'background-color': 'red'\n        }\n      }, {\n        selector: \"node[typeshape='diamond'][content='Support']\",\n        style: {\n          'background-color': 'green'\n        }\n      }, {\n        selector: \"edge\",\n        style: {\n          \"line-color\": \"#9dbaea\",\n          \"target-arrow-shape\": \"triangle\",\n          \"target-arrow-color\": \"#9dbaea\",\n          \"curve-style\": \"bezier\"\n        }\n      }, {\n        selector: \":selected\",\n        style: {\n          \"border-width\": \"1\",\n          \"border-color\": \"black\",\n          \"background-color\": \"#3399CC\"\n        }\n      }, {\n        selector: \".atom-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: \".scheme-label\",\n        style: {\n          \"text-wrap\": \"wrap\",\n          \"text-max-width\": 160\n        }\n      }, {\n        selector: '.eh-handle',\n        style: {\n          'background-color': 'orange',\n          'width': 10,\n          'height': 10,\n          'shape': 'ellipse',\n          'overlay-opacity': 0,\n          'border-width': 8,\n          // makes the handle easier to hit\n          'border-opacity': 0,\n          'label': ''\n        }\n      }],\n      boxSelectionEnabled: false,\n      autounselectify: false,\n      selectionType: \"single\",\n      minZoom: 0.1,\n      maxZoom: 1.5\n    }); //cytoscapefunction\n\n    this.layout = this.build_cola_layout();\n    this.layout.run();\n    this.cy.edgehandles({\n      toggleOffOnLeave: true,\n      handleNodes: \"node\",\n      handleSize: 10,\n      handleColor: \"#DF0085\",\n      handleHitThreshold: 8,\n      handleLineWidth: 5,\n      //handleLineType: \"flat\",\n      edgeType: function () {\n        return \"flat\";\n      },\n      complete: function (event, sourceNode, targetNode, addedEles) {\n        if (targetNode.length !== 0) {\n          var source_id = targetNode[0].source().id();\n          var target_id = targetNode[0].target().id(); //get the mid point between source node and target node\n\n          var source_position = targetNode[0].source().position();\n          var target_position = targetNode[0].target().position();\n          this.position = {};\n          this.position.x = (source_position.x + target_position.x) / 2;\n          this.position.y = (source_position.y + target_position.y) / 2;\n\n          if (targetNode[0].source().data().type === \"atom\" && targetNode[0].target().data().type === \"atom\") {\n            var scheme = add_scheme(\"Support\");\n            var scheme_id = scheme.id;\n            var scheme_content = scheme.name; //remove the automatically generated edge\n\n            targetNode.remove();\n            this.cy.add([{\n              group: \"nodes\",\n              data: {\n                id: scheme_id.toString(),\n                content: scheme_content,\n                typeshape: \"diamond\"\n              },\n              classes: \"scheme-label\",\n              locked: false,\n              position: this.position\n            }]);\n            var edge1 = add_edge(source_id, scheme_id);\n            var edge2 = add_edge(scheme_id, target_id);\n            this.cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge1.id.toString(),\n                source: source_id,\n                target: scheme_id\n              }\n            }, {\n              group: \"edges\",\n              data: {\n                id: edge2.id.toString(),\n                source: scheme_id,\n                target: target_id\n              }\n            }]);\n          } else {\n            targetNode.remove();\n            var edge = add_edge(source_id, target_id);\n            this.cy.add([{\n              group: \"edges\",\n              data: {\n                id: edge.id.toString(),\n                source: source_id,\n                target: target_id\n              }\n            }]);\n          }\n\n          this.updateLocalStorage();\n        } else {\n          targetNode.remove();\n        }\n      }.bind(this)\n    }); //edgehandles\n\n    /*\n    *\n    * Set up context menus\n    *\n    * */\n\n    this.cm = this.cy.contextMenus({\n      menuItems: [{\n        id: \"edit-content\",\n        content: \"edit content\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          let target = event.target || event.cyTarget;\n          document.getElementById(\"editContentTrigger\").click();\n          this.setModalValue(target.data().content);\n          this.edit_atom = target;\n        }.bind(this),\n        hasTrailingDivider: false\n      }, {\n        id: \"edit-metadata\",\n        content: \"edit metadata\",\n        selector: \"node[type = \\\"atom\\\"]\",\n        onClickFunction: function (event) {\n          let target = event.target || event.cyTarget;\n          let meta = JSON.stringify(target.data().metadata);\n          document.getElementById(\"editMetaTrigger\").click();\n          this.setModalValue(meta);\n          this.edit_atom = target;\n        }.bind(this),\n        hasTrailingDivider: true\n      }, {\n        id: \"change-scheme\",\n        content: \"change scheme\",\n        selector: \"node[typeshape = \\\"diamond\\\"]\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n          this.setDropDownValue(target.data().content);\n          document.getElementById(\"editSchemeTrigger\").click();\n          this.edit_atom = target;\n        }.bind(this),\n        hasTrailingDivider: true\n      }, {\n        id: \"remove\",\n        content: \"remove\",\n        selector: \"node, edge\",\n        onClickFunction: function (event) {\n          var target = event.target || event.cyTarget;\n\n          if (this.selected.length !== 0) {\n            this.selected.forEach(function (node) {\n              console.log(node, \"SELECTED\");\n              this.deleteNodes(node);\n            }.bind(this));\n            this.selected = [];\n          } else {\n            if (target.data().type === \"atom\") {\n              this.deleteNodes(event);\n              target.remove();\n            } else if (target.data().typeshape === \"diamond\") {\n              this.deleteNodes(event);\n              target.remove();\n            } else {\n              delete_edge(target.id());\n              this.updateLocalStorage();\n              target.remove();\n            }\n          }\n        }.bind(this),\n        hasTrailingDivider: true\n      }, {\n        id: \"add-atom\",\n        content: \"add atom\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.position = event.renderedPosition;\n          this.setModalValue(\"\");\n          document.getElementById(\"newAtomTrigger\").click();\n        }.bind(this)\n      }, {\n        id: \"add-scheme\",\n        content: \"add scheme\",\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.position = event.position || event.cyPosition;\n          this.setDropDownValue(\"Support\");\n          document.getElementById(\"new_scheme\").click();\n        }.bind(this),\n        hasTrailingDivider: true\n      }, {\n        id: \"redraw\",\n        content: \"redraw\",\n        coreAsWell: true,\n        onClickFunction: event => this.redrawVisualisation(),\n        hasTrailingDivider: true\n      }, {\n        id: \"undo\",\n        content: \"undo\",\n        selector: \"node, edge\",\n        show: true,\n        coreAsWell: true,\n        onClickFunction: event => this.undo(),\n        hasTrailingDivider: false\n      }, {\n        id: \"redo\",\n        content: \"redo\",\n        selector: \"node, edge\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: function (event) {\n          this.redo();\n\n          if (this.redo_stack === []) {\n            this.cm.hideMenuItem(\"redo\");\n          }\n        }.bind(this),\n        hasTrailingDivider: true\n      }, {\n        id: \"merge_nodes\",\n        content: \"merge nodes\",\n        selector: \"node\",\n        tooltipText: \"hello\",\n        show: false,\n        coreAsWell: true,\n        onClickFunction: event => this.merge_nodes()\n      }] //menuitems\n\n    }); //close context menues\n  } //initmonkeyPuzzle\n\n\n  build_cola_layout(opts) {\n    var cola_params = {\n      name: \"cola\",\n      animate: true,\n      randomize: true,\n      padding: 100,\n      fit: false,\n      maxSimulationTime: 1500\n    };\n    var i = 0;\n\n    if (opts !== undefined) {\n      opts.forEach(function (opt) {\n        cola_params[i] = opts[i];\n        ++i;\n      });\n    }\n\n    return this.cy.makeLayout(cola_params);\n  }\n\n  componentDidMount() {\n    this.initialise_monkeypuzzle();\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.cyData !== prevState.cyData) {\n      return {\n        cyData: nextProps.cyData\n      };\n      console.log(this.props.cyData, \"props cydata\");\n      this.initialise_monkeypuzzle();\n    } else return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.cyData !== this.props.cyData) {\n      //Perform some operation here\n      this.initialise_monkeypuzzle();\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"cy\",\n      onDrop: this.dropHandler,\n      onDragOver: this.dragoverHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Cytoscape;","map":{"version":3,"sources":["/Users/gareth/Desktop/monkeypuzzle/src/Components/VisualisationPane/VisualisationPane.js"],"names":["React","Component","cytoscape","cola","edgehandles","$","contextMenus","remove_falsy","update_scheme","update_atom_metadata","import_json","export_cytoscape","add_atom","sd","add_scheme","add_edge","get_atom","now","new_uuid","update_atom_text","get_sd","delete_edge","update","add_source","Cytoscape","constructor","props","newAtomRef","createRef","newSchemeRef","editContentRef","state","modalValue","dropDownValue","cy","default_sadface_doc","analyst_email","created_date","edited_date","document_id","analyst_name","position","edit_atom","selected","redo_stack","initialise_monkeypuzzle","bind","initCytoscape","localStorage","getItem","console","log","loadJSON","setCurrentSadFaceDoc","setCyData","current_sadface_doc","container","document","getElementById","elements","JSON","parse","cyData","style","selector","boxSelectionEnabled","autounselectify","selectionType","minZoom","maxZoom","layout","build_cola_layout","run","toggleOffOnLeave","handleNodes","handleSize","handleColor","handleHitThreshold","handleLineWidth","edgeType","complete","event","sourceNode","targetNode","addedEles","length","source_id","source","id","target_id","target","source_position","target_position","x","y","data","type","scheme","scheme_id","scheme_content","name","remove","add","group","toString","content","typeshape","classes","locked","edge1","edge2","edge","updateLocalStorage","cm","menuItems","onClickFunction","cyTarget","click","setModalValue","hasTrailingDivider","meta","stringify","metadata","setDropDownValue","forEach","node","deleteNodes","coreAsWell","renderedPosition","cyPosition","redrawVisualisation","show","undo","redo","hideMenuItem","tooltipText","merge_nodes","opts","cola_params","animate","randomize","padding","fit","maxSimulationTime","i","undefined","opt","makeLayout","componentDidMount","getDerivedStateFromProps","nextProps","prevState","componentDidUpdate","prevProps","render","dropHandler","dragoverHandler"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AAEA,OAAO,qDAAP;AAIA,SAAQC,YAAR,EAAqBC,aAArB,EAAoCC,oBAApC,EAA0DC,WAA1D,EAAsEC,gBAAtE,EAAuFC,QAAvF,EAAiGC,EAAjG,EAAoGC,UAApG,EAAgHC,QAAhH,EAA0HC,QAA1H,EAAoIC,GAApI,EAAyIC,QAAzI,EAAmJC,gBAAnJ,EAAqKC,MAArK,EAA6KC,WAA7K,EAA0LC,MAA1L,EAAkMC,UAAlM,QAAmN,mBAAnN;;AAGA,MAAMC,SAAN,SAAwBvB,SAAxB,CAAkC;AAChCwB,EAAAA,WAAW,CAACC,KAAD,EAAO;AACZ,UAAMA,KAAN,EADY,CAEZ;;AACA,SAAKC,UAAL,GAAkB3B,KAAK,CAAC4B,SAAN,EAAlB;AACA,SAAKC,YAAL,GAAoB7B,KAAK,CAAC4B,SAAN,EAApB;AACA,SAAKE,cAAL,GAAsB9B,KAAK,CAAC4B,SAAN,EAAtB;AAEA,SAAKG,KAAL,GAAW;AACTC,MAAAA,UAAU,EAAE,GADH;AAETC,MAAAA,aAAa,EAAE;AAFN,KAAX;AAKA,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,mBAAL,GAA0B,0BAAwB,KAAKC,aAA7B,GAA2C,wBAA3C,GAAoE,KAAKA,aAAzE,GAAuF,mBAAvF,GAA2G,KAAKC,YAAhH,GAA6H,+BAA7H,GAA6J,KAAKC,WAAlK,GAA8K,cAA9K,GAA6L,KAAKC,WAAlM,GAA8M,oDAAxO;AACA,SAAKH,aAAL,GAAqB,uBAArB;AACA,SAAKI,YAAL,GAAoB,uBAApB;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,SAAL,GAAe,IAAf;AACA,SAAKC,QAAL,GAAc,EAAd;AACA,SAAKC,UAAL,GAAgB,EAAhB;AAEA,SAAKC,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAA/B;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AAIH;;AAEDD,EAAAA,uBAAuB,GAAE;AACvB;AACA,QAAIG,YAAY,CAACC,OAAb,CAAqB,OAArB,MAAkC,WAAtC,EAAkD;AAChDC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACC,WAAKzB,KAAL,CAAW0B,QAAX,CAAoBJ,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AACA,WAAKF,aAAL,GAH+C,CAMhD;AACE,KAPJ,MAOS;AACJ,WAAKrB,KAAL,CAAW2B,oBAAX,CAAgC,KAAKlB,mBAArC,EADI,CAEP;;AACG,WAAKT,KAAL,CAAW4B,SAAX,CAAqB3C,gBAAgB,CAACD,WAAW,CAAC,KAAKgB,KAAL,CAAW6B,mBAAZ,CAAZ,CAArC;AACC,WAAKR,aAAL;AACH;AAEJ;;AAEDA,EAAAA,aAAa,GAAE;AACb,SAAKb,EAAL,GAAUhC,SAAS,CAAC;AACdsD,MAAAA,SAAS,EAAEC,QAAQ,CAACC,cAAT,CAAwB,IAAxB,CADG;AAEdC,MAAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAKnC,KAAL,CAAWoC,MAAtB,CAFI;AAIdC,MAAAA,KAAK,EAAC,CACF;AAAIC,QAAAA,QAAQ,EAAE,MAAd;AACID,QAAAA,KAAK,EAAE;AACH,mBAAS,eADN;AAEH,0BAAgB,GAFb;AAGJ;AACH;AACI,yBAAe,QALZ;AAMH,yBAAe,OANZ;AAOH,gCAAsB,MAPnB;AAQH,gCAAsB;AARnB;AADX,OADE,EAcF;AAAIC,QAAAA,QAAQ,EAAE,aAAd;AACID,QAAAA,KAAK,EAAE;AACH,mBAAQ;AADL;AADX,OAdE,EAoBF;AAAIC,QAAAA,QAAQ,EAAE,2BAAd;AACID,QAAAA,KAAK,EAAE;AACH,8BAAoB;AADjB;AADX,OApBE,EA0BF;AAAIC,QAAAA,QAAQ,EAAE,+CAAd;AACID,QAAAA,KAAK,EAAE;AACH,8BAAoB;AADjB;AADX,OA1BE,EAgCF;AAAIC,QAAAA,QAAQ,EAAE,8CAAd;AACID,QAAAA,KAAK,EAAE;AACH,8BAAoB;AADjB;AADX,OAhCE,EAsCF;AAAIC,QAAAA,QAAQ,EAAE,MAAd;AACID,QAAAA,KAAK,EAAE;AACH,wBAAc,SADX;AAEH,gCAAsB,UAFnB;AAGH,gCAAsB,SAHnB;AAIH,yBAAe;AAJZ;AADX,OAtCE,EAgDF;AAAIC,QAAAA,QAAQ,EAAE,WAAd;AACID,QAAAA,KAAK,EAAE;AACH,0BAAe,GADZ;AAEH,0BAAe,OAFZ;AAGH,8BAAoB;AAHjB;AADX,OAhDE,EAyDF;AAAIC,QAAAA,QAAQ,EAAE,aAAd;AACID,QAAAA,KAAK,EAAC;AACF,uBAAa,MADX;AAEF,4BAAkB;AAFhB;AADV,OAzDE,EAgEF;AAAIC,QAAAA,QAAQ,EAAE,eAAd;AACID,QAAAA,KAAK,EAAC;AACF,uBAAa,MADX;AAEF,4BAAkB;AAFhB;AADV,OAhEE,EAsEF;AAAIC,QAAAA,QAAQ,EAAE,YAAd;AACID,QAAAA,KAAK,EAAE;AACH,8BAAoB,QADjB;AAEH,mBAAS,EAFN;AAGH,oBAAU,EAHP;AAIH,mBAAS,SAJN;AAKH,6BAAmB,CALhB;AAMH,0BAAgB,CANb;AAMgB;AACnB,4BAAkB,CAPf;AAQH,mBAAS;AARN;AADX,OAtEE,CAJQ;AAyFdE,MAAAA,mBAAmB,EAAE,KAzFP;AA0FdC,MAAAA,eAAe,EAAE,KA1FH;AA2FdC,MAAAA,aAAa,EAAE,QA3FD;AA4FdC,MAAAA,OAAO,EAAE,GA5FK;AA6FdC,MAAAA,OAAO,EAAE;AA7FK,KAAD,CAAnB,CADa,CA+FV;;AAGH,SAAKC,MAAL,GAAc,KAAKC,iBAAL,EAAd;AACA,SAAKD,MAAL,CAAYE,GAAZ;AAEA,SAAKtC,EAAL,CAAQ9B,WAAR,CAAoB;AACVqE,MAAAA,gBAAgB,EAAE,IADR;AAEVC,MAAAA,WAAW,EAAE,MAFH;AAGVC,MAAAA,UAAU,EAAE,EAHF;AAIVC,MAAAA,WAAW,EAAE,SAJH;AAKVC,MAAAA,kBAAkB,EAAE,CALV;AAMVC,MAAAA,eAAe,EAAE,CANP;AAOV;AACAC,MAAAA,QAAQ,EAAE,YAAU;AAAE,eAAO,MAAP;AAAgB,OAR5B;AASVC,MAAAA,QAAQ,EAAE,UAASC,KAAT,EAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAkD;AACxD,YAAID,UAAU,CAACE,MAAX,KAAsB,CAA1B,EAA6B;AACzB,cAAIC,SAAS,GAAGH,UAAU,CAAC,CAAD,CAAV,CAAcI,MAAd,GAAuBC,EAAvB,EAAhB;AACA,cAAIC,SAAS,GAAGN,UAAU,CAAC,CAAD,CAAV,CAAcO,MAAd,GAAuBF,EAAvB,EAAhB,CAFyB,CAIzB;;AACA,cAAIG,eAAe,GAAGR,UAAU,CAAC,CAAD,CAAV,CAAcI,MAAd,GAAuB9C,QAAvB,EAAtB;AACA,cAAImD,eAAe,GAAGT,UAAU,CAAC,CAAD,CAAV,CAAcO,MAAd,GAAuBjD,QAAvB,EAAtB;AAEA,eAAKA,QAAL,GAAgB,EAAhB;AACA,eAAKA,QAAL,CAAcoD,CAAd,GAAmB,CAACF,eAAe,CAACE,CAAhB,GAAoBD,eAAe,CAACC,CAArC,IAAwC,CAA3D;AACA,eAAKpD,QAAL,CAAcqD,CAAd,GAAmB,CAACH,eAAe,CAACG,CAAhB,GAAoBF,eAAe,CAACE,CAArC,IAAwC,CAA3D;;AAEA,cAAIX,UAAU,CAAC,CAAD,CAAV,CAAcI,MAAd,GAAuBQ,IAAvB,GAA8BC,IAA9B,KAAuC,MAAvC,IAAiDb,UAAU,CAAC,CAAD,CAAV,CAAcO,MAAd,GAAuBK,IAAvB,GAA8BC,IAA9B,KAAuC,MAA5F,EACA;AACI,gBAAIC,MAAM,GAAGnF,UAAU,CAAC,SAAD,CAAvB;AACA,gBAAIoF,SAAS,GAAGD,MAAM,CAACT,EAAvB;AACA,gBAAIW,cAAc,GAAGF,MAAM,CAACG,IAA5B,CAHJ,CAII;;AACAjB,YAAAA,UAAU,CAACkB,MAAX;AACA,iBAAKnE,EAAL,CAAQoE,GAAR,CAAY,CACR;AAACC,cAAAA,KAAK,EAAE,OAAR;AAAiBR,cAAAA,IAAI,EAAE;AAACP,gBAAAA,EAAE,EAAEU,SAAS,CAACM,QAAV,EAAL;AACnBC,gBAAAA,OAAO,EAAEN,cADU;AACMO,gBAAAA,SAAS,EAAE;AADjB,eAAvB;AACqDC,cAAAA,OAAO,EAAE,cAD9D;AAC8EC,cAAAA,MAAM,EAAE,KADtF;AAC6FnE,cAAAA,QAAQ,EAAE,KAAKA;AAD5G,aADQ,CAAZ;AAIA,gBAAIoE,KAAK,GAAG9F,QAAQ,CAACuE,SAAD,EAAYY,SAAZ,CAApB;AACA,gBAAIY,KAAK,GAAG/F,QAAQ,CAACmF,SAAD,EAAYT,SAAZ,CAApB;AACA,iBAAKvD,EAAL,CAAQoE,GAAR,CAAY,CACV;AAAEC,cAAAA,KAAK,EAAE,OAAT;AAAkBR,cAAAA,IAAI,EAAE;AAAEP,gBAAAA,EAAE,EAAEqB,KAAK,CAACrB,EAAN,CAASgB,QAAT,EAAN;AAA2BjB,gBAAAA,MAAM,EAAED,SAAnC;AAA8CI,gBAAAA,MAAM,EAAEQ;AAAtD;AAAxB,aADU,EAEV;AAAEK,cAAAA,KAAK,EAAE,OAAT;AAAkBR,cAAAA,IAAI,EAAE;AAAEP,gBAAAA,EAAE,EAAEsB,KAAK,CAACtB,EAAN,CAASgB,QAAT,EAAN;AAA2BjB,gBAAAA,MAAM,EAAEW,SAAnC;AAA8CR,gBAAAA,MAAM,EAAED;AAAtD;AAAxB,aAFU,CAAZ;AAIH,WAjBD,MAiBO;AACHN,YAAAA,UAAU,CAACkB,MAAX;AACA,gBAAIU,IAAI,GAAGhG,QAAQ,CAACuE,SAAD,EAAYG,SAAZ,CAAnB;AACA,iBAAKvD,EAAL,CAAQoE,GAAR,CAAY,CACV;AAAEC,cAAAA,KAAK,EAAE,OAAT;AAAkBR,cAAAA,IAAI,EAAE;AAAEP,gBAAAA,EAAE,EAAEuB,IAAI,CAACvB,EAAL,CAAQgB,QAAR,EAAN;AAA0BjB,gBAAAA,MAAM,EAAED,SAAlC;AAA6CI,gBAAAA,MAAM,EAAED;AAArD;AAAxB,aADU,CAAZ;AAGH;;AACD,eAAKuB,kBAAL;AACH,SArCD,MAqCO;AACH7B,UAAAA,UAAU,CAACkB,MAAX;AACH;AACJ,OAzCS,CAyCRvD,IAzCQ,CAyCH,IAzCG;AATA,KAApB,EArGa,CAwJJ;;AAET;;;;;;AAKF,SAAKmE,EAAL,GAAU,KAAK/E,EAAL,CAAQ5B,YAAR,CAAqB;AACpB4G,MAAAA,SAAS,EAAE,CACN;AACI1B,QAAAA,EAAE,EAAE,cADR;AAEIiB,QAAAA,OAAO,EAAE,cAFb;AAGIzC,QAAAA,QAAQ,EAAE,uBAHd;AAIImD,QAAAA,eAAe,EAAE,UAAUlC,KAAV,EAAiB;AAC9B,cAAIS,MAAM,GAAGT,KAAK,CAACS,MAAN,IAAgBT,KAAK,CAACmC,QAAnC;AACA3D,UAAAA,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,EAA8C2D,KAA9C;AACC,eAAKC,aAAL,CAAmB5B,MAAM,CAACK,IAAP,GAAcU,OAAjC;AACD,eAAK/D,SAAL,GAAiBgD,MAAjB;AACH,SALgB,CAKf5C,IALe,CAKV,IALU,CAJrB;AAUIyE,QAAAA,kBAAkB,EAAE;AAVxB,OADM,EAcN;AACI/B,QAAAA,EAAE,EAAE,eADR;AAEIiB,QAAAA,OAAO,EAAE,eAFb;AAGIzC,QAAAA,QAAQ,EAAE,uBAHd;AAIImD,QAAAA,eAAe,EAAE,UAAUlC,KAAV,EAAiB;AAC5B,cAAIS,MAAM,GAAGT,KAAK,CAACS,MAAN,IAAgBT,KAAK,CAACmC,QAAnC;AACA,cAAII,IAAI,GAAG5D,IAAI,CAAC6D,SAAL,CAAe/B,MAAM,CAACK,IAAP,GAAc2B,QAA7B,CAAX;AACAjE,UAAAA,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,EAA2C2D,KAA3C;AACA,eAAKC,aAAL,CAAmBE,IAAnB;AACD,eAAK9E,SAAL,GAAiBgD,MAAjB;AACH,SANe,CAMd5C,IANc,CAMT,IANS,CAJrB;AAWKyE,QAAAA,kBAAkB,EAAE;AAXzB,OAdM,EA2BN;AACI/B,QAAAA,EAAE,EAAE,eADR;AAEIiB,QAAAA,OAAO,EAAE,eAFb;AAGIzC,QAAAA,QAAQ,EAAE,+BAHd;AAIImD,QAAAA,eAAe,EAAE,UAAUlC,KAAV,EAAiB;AAC9B,cAAIS,MAAM,GAAGT,KAAK,CAACS,MAAN,IAAgBT,KAAK,CAACmC,QAAnC;AACA,eAAKO,gBAAL,CAAsBjC,MAAM,CAACK,IAAP,GAAcU,OAApC;AACAhD,UAAAA,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,EAA6C2D,KAA7C;AACA,eAAK3E,SAAL,GAAiBgD,MAAjB;AACH,SALgB,CAKf5C,IALe,CAKV,IALU,CAJrB;AAUIyE,QAAAA,kBAAkB,EAAE;AAVxB,OA3BM,EAuCN;AACI/B,QAAAA,EAAE,EAAE,QADR;AAEIiB,QAAAA,OAAO,EAAE,QAFb;AAGIzC,QAAAA,QAAQ,EAAE,YAHd;AAIImD,QAAAA,eAAe,EAAE,UAAUlC,KAAV,EAAiB;AAC9B,cAAIS,MAAM,GAAGT,KAAK,CAACS,MAAN,IAAgBT,KAAK,CAACmC,QAAnC;;AACA,cAAI,KAAKzE,QAAL,CAAc0C,MAAd,KAAyB,CAA7B,EAAgC;AAC5B,iBAAK1C,QAAL,CAAciF,OAAd,CAAsB,UAASC,IAAT,EAAe;AACjC3E,cAAAA,OAAO,CAACC,GAAR,CAAY0E,IAAZ,EAAkB,UAAlB;AACA,mBAAKC,WAAL,CAAiBD,IAAjB;AACH,aAHqB,CAGpB/E,IAHoB,CAGf,IAHe,CAAtB;AAIA,iBAAKH,QAAL,GAAgB,EAAhB;AACH,WAND,MAMO;AACH,gBAAI+C,MAAM,CAACK,IAAP,GAAcC,IAAd,KAAuB,MAA3B,EAAmC;AAC/B,mBAAK8B,WAAL,CAAiB7C,KAAjB;AACAS,cAAAA,MAAM,CAACW,MAAP;AACH,aAHD,MAGO,IAAIX,MAAM,CAACK,IAAP,GAAcW,SAAd,KAA4B,SAAhC,EAA0C;AAC7C,mBAAKoB,WAAL,CAAiB7C,KAAjB;AACAS,cAAAA,MAAM,CAACW,MAAP;AACH,aAHM,MAGA;AACHhF,cAAAA,WAAW,CAACqE,MAAM,CAACF,EAAP,EAAD,CAAX;AACA,mBAAKwB,kBAAL;AACAtB,cAAAA,MAAM,CAACW,MAAP;AACH;AACJ;AACJ,SArBgB,CAqBfvD,IArBe,CAqBV,IArBU,CAJrB;AA0BIyE,QAAAA,kBAAkB,EAAE;AA1BxB,OAvCM,EAmEN;AACI/B,QAAAA,EAAE,EAAE,UADR;AAEIiB,QAAAA,OAAO,EAAE,UAFb;AAGIsB,QAAAA,UAAU,EAAE,IAHhB;AAKIZ,QAAAA,eAAe,EAAE,UAAUlC,KAAV,EAAiB;AAC9B,eAAKxC,QAAL,GAAgBwC,KAAK,CAAC+C,gBAAtB;AACH,eAAKV,aAAL,CAAmB,EAAnB;AACG7D,UAAAA,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0C2D,KAA1C;AACH,SAJgB,CAIfvE,IAJe,CAIV,IAJU;AALrB,OAnEM,EA8EN;AACI0C,QAAAA,EAAE,EAAE,YADR;AAEIiB,QAAAA,OAAO,EAAE,YAFb;AAGIsB,QAAAA,UAAU,EAAE,IAHhB;AAIIZ,QAAAA,eAAe,EAAE,UAAUlC,KAAV,EAAiB;AAE9B,eAAKxC,QAAL,GAAgBwC,KAAK,CAACxC,QAAN,IAAkBwC,KAAK,CAACgD,UAAxC;AACA,eAAKN,gBAAL,CAAsB,SAAtB;AACIlE,UAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsC2D,KAAtC;AACP,SALgB,CAKfvE,IALe,CAKV,IALU,CAJrB;AAUIyE,QAAAA,kBAAkB,EAAE;AAVxB,OA9EM,EA0FN;AACI/B,QAAAA,EAAE,EAAE,QADR;AAEIiB,QAAAA,OAAO,EAAE,QAFb;AAGIsB,QAAAA,UAAU,EAAE,IAHhB;AAIIZ,QAAAA,eAAe,EAAIlC,KAAD,IAAW,KAAKiD,mBAAL,EAJjC;AAKIX,QAAAA,kBAAkB,EAAE;AALxB,OA1FM,EAiGN;AACI/B,QAAAA,EAAE,EAAE,MADR;AAEIiB,QAAAA,OAAO,EAAE,MAFb;AAGIzC,QAAAA,QAAQ,EAAE,YAHd;AAIImE,QAAAA,IAAI,EAAE,IAJV;AAKIJ,QAAAA,UAAU,EAAE,IALhB;AAMIZ,QAAAA,eAAe,EAAIlC,KAAD,IAAW,KAAKmD,IAAL,EANjC;AAOIb,QAAAA,kBAAkB,EAAE;AAPxB,OAjGM,EA0GN;AACI/B,QAAAA,EAAE,EAAE,MADR;AAEIiB,QAAAA,OAAO,EAAE,MAFb;AAGIzC,QAAAA,QAAQ,EAAE,YAHd;AAIImE,QAAAA,IAAI,EAAE,KAJV;AAKIJ,QAAAA,UAAU,EAAE,IALhB;AAMIZ,QAAAA,eAAe,EAAE,UAAUlC,KAAV,EAAiB;AAChC,eAAKoD,IAAL;;AACA,cAAI,KAAKzF,UAAL,KAAoB,EAAxB,EAA4B;AAC1B,iBAAKqE,EAAL,CAAQqB,YAAR,CAAqB,MAArB;AACH;AACA,SALgB,CAKfxF,IALe,CAKV,IALU,CANrB;AAYIyE,QAAAA,kBAAkB,EAAE;AAZxB,OA1GM,EAwHN;AACE/B,QAAAA,EAAE,EAAE,aADN;AAEEiB,QAAAA,OAAO,EAAE,aAFX;AAGEzC,QAAAA,QAAQ,EAAE,MAHZ;AAIEuE,QAAAA,WAAW,EAAE,OAJf;AAKEJ,QAAAA,IAAI,EAAE,KALR;AAMEJ,QAAAA,UAAU,EAAE,IANd;AAOEZ,QAAAA,eAAe,EAAIlC,KAAD,IAAW,KAAKuD,WAAL;AAP/B,OAxHM,CADS,CAkIjB;;AAlIiB,KAArB,CAAV,CA/Je,CAkSJ;AAGV,GApV6B,CAoV7B;;;AAEDjE,EAAAA,iBAAiB,CAAEkE,IAAF,EAAS;AACtB,QAAIC,WAAW,GAAG;AACdtC,MAAAA,IAAI,EAAE,MADQ;AAEduC,MAAAA,OAAO,EAAE,IAFK;AAGdC,MAAAA,SAAS,EAAE,IAHG;AAIdC,MAAAA,OAAO,EAAE,GAJK;AAKdC,MAAAA,GAAG,EAAE,KALS;AAMdC,MAAAA,iBAAiB,EAAE;AANL,KAAlB;AAQA,QAAIC,CAAC,GAAG,CAAR;;AACA,QAAIP,IAAI,KAAKQ,SAAb,EAAwB;AACpBR,MAAAA,IAAI,CAACb,OAAL,CAAa,UAASsB,GAAT,EAAc;AAC1BR,QAAAA,WAAW,CAACM,CAAD,CAAX,GAAiBP,IAAI,CAACO,CAAD,CAArB;AACA,UAAEA,CAAF;AACH,OAHE;AAIH;;AACD,WAAO,KAAK9G,EAAL,CAAQiH,UAAR,CAAoBT,WAApB,CAAP;AACH;;AAEDU,EAAAA,iBAAiB,GAAE;AAChB,SAAKvG,uBAAL;AACC;;AAEJ,SAAOwG,wBAAP,CAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AAChD,QAAGD,SAAS,CAACxF,MAAV,KAAqByF,SAAS,CAACzF,MAAlC,EAAyC;AACrC,aAAM;AAACA,QAAAA,MAAM,EAAEwF,SAAS,CAACxF;AAAnB,OAAN;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKzB,KAAL,CAAWoC,MAAvB,EAA+B,cAA/B;AACA,WAAKjB,uBAAL;AACH,KAJD,MAKI,OAAO,IAAP;AACP;;AACD2G,EAAAA,kBAAkB,CAACC,SAAD,EAAYF,SAAZ,EAAuB;AAC7C,QAAGE,SAAS,CAAC3F,MAAV,KAAmB,KAAKpC,KAAL,CAAWoC,MAAjC,EAAwC;AACtC;AACA,WAAKjB,uBAAL;AACD;AACF;;AACG6G,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAK,MAAA,EAAE,EAAC,IAAR;AAAa,MAAA,MAAM,EAAE,KAAKC,WAA1B;AAAuC,MAAA,UAAU,EAAE,KAAKC,eAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADF;AAOH;;AAnY+B;;AAsYlC,eAAepI,SAAf","sourcesContent":["import React, {Component} from 'react';\nimport cytoscape from 'cytoscape';\nimport cola from 'cytoscape-cola';\nimport edgehandles from 'cytoscape-edgehandles';\nimport $ from 'jquery';\nimport contextMenus from 'cytoscape-context-menus';\n\nimport 'cytoscape-context-menus/cytoscape-context-menus.css';\n\n\n\nimport {remove_falsy,update_scheme, update_atom_metadata, import_json,export_cytoscape,add_atom, sd,add_scheme, add_edge, get_atom, now, new_uuid, update_atom_text, get_sd, delete_edge, update, add_source} from '../../lib/Sadface'; \n\n\nclass Cytoscape extends Component {\n  constructor(props){\n        super(props);\n        //create Refs\n        this.newAtomRef = React.createRef()\n        this.newSchemeRef = React.createRef();\n        this.editContentRef = React.createRef();\n\n        this.state={\n          modalValue: ' ',\n          dropDownValue: ' ',\n\n        };\n        this.cy = null;\n        this.default_sadface_doc= \"{\\\"analyst_email\\\":\\\"\"+this.analyst_email+\"\\\",\\\"analyst_name\\\":\\\"\"+this.analyst_email+\"\\\",\\\"created\\\":\\\"\"+this.created_date+\"\\\",\\\"edges\\\":[],\\\"edited\\\":\\\"\"+this.edited_date+\"\\\",\\\"id\\\":\\\"\"+this.document_id+\"\\\",\\\"metadata\\\":{},\\\"nodes\\\":[],\\\"resources\\\": []}\";\n        this.analyst_email = \"Default Analyst Email\";\n        this.analyst_name = \"Default Analsyst Name\";\n        this.position = null;\n        this.edit_atom=null;\n        this.selected=[];\n        this.redo_stack=[];\n\n        this.initialise_monkeypuzzle = this.initialise_monkeypuzzle.bind(this);\n        this.initCytoscape = this.initCytoscape.bind(this);\n\n\n\n    }\n\n    initialise_monkeypuzzle(){\n      //load diagram if there is one in localStorage\n      if (localStorage.getItem(\"state\") !== \"undefined\"){\n        console.log(\"undefined nfsndksnf\");\n         this.props.loadJSON(localStorage.getItem(\"state\"));\n         this.initCytoscape();\n      \n        \n        // //else use default\n         } else{\n           this.props.setCurrentSadFaceDoc(this.default_sadface_doc);\n        //    localStorage.setItem(\"state\", this.props.current_sadface_doc);\n           this.props.setCyData(export_cytoscape(import_json(this.props.current_sadface_doc)));\n            this.initCytoscape();\n        }\n\n    }\n\n    initCytoscape(){\n      this.cy = cytoscape({\n            container: document.getElementById('cy'),\n            elements: JSON.parse(this.props.cyData),\n\n            style:[\n                {   selector: \"node\", \n                    style: {\n                        \"label\": \"data(content)\",\n                        \"text-opacity\": 0.7,\n                       // \"width\" : \"auto\",\n                    //    \"height\" : \"auto\",\n                        \"text-valign\": \"bottom\",\n                        \"text-halign\": \"right\",\n                        \"text-outline-color\": \"#eee\",\n                        \"text-outline-width\": 1\n                    }\n                },\n                \n                {   selector: \"[typeshape]\", \n                    style: {\n                        \"shape\":\"data(typeshape)\"\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond']\", \n                    style: {\n                        'background-color': '#CC9900'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][content='Conflict']\",\n                    style: {\n                        'background-color': 'red'\n                    }\n                },\n\n                {   selector: \"node[typeshape='diamond'][content='Support']\",\n                    style: {\n                        'background-color': 'green'\n                    }\n                },\n\n                {   selector: \"edge\", \n                    style: {\n                        \"line-color\": \"#9dbaea\",\n                        \"target-arrow-shape\": \"triangle\",\n                        \"target-arrow-color\": \"#9dbaea\",\n                        \"curve-style\": \"bezier\"\n                    }\n                },\n\n\n                {   selector: \":selected\", \n                    style: {\n                        \"border-width\":\"1\",\n                        \"border-color\":\"black\",\n                        \"background-color\": \"#3399CC\"\n                    }\n                },\n\n\n                {   selector: \".atom-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n\n                {   selector: \".scheme-label\", \n                    style:{\n                        \"text-wrap\": \"wrap\",\n                        \"text-max-width\": 160\n                    }\n                },\n                {   selector: '.eh-handle',\n                    style: {\n                        'background-color': 'orange',\n                        'width': 10,\n                        'height': 10,\n                        'shape': 'ellipse',\n                        'overlay-opacity': 0,\n                        'border-width': 8, // makes the handle easier to hit\n                        'border-opacity': 0,\n                        'label': '',\n                    }\n                }\n                \n            ],\n\n            boxSelectionEnabled: false,\n            autounselectify: false,\n            selectionType: \"single\",\n            minZoom: 0.1,\n            maxZoom: 1.5\n      });//cytoscapefunction\n        \n   \n      this.layout = this.build_cola_layout();\n      this.layout.run();\n\n      this.cy.edgehandles({\n                toggleOffOnLeave: true,\n                handleNodes: \"node\",\n                handleSize: 10,\n                handleColor: \"#DF0085\",\n                handleHitThreshold: 8,\n                handleLineWidth: 5,\n                //handleLineType: \"flat\",\n                edgeType: function(){ return \"flat\"; },\n                complete: function(event, sourceNode, targetNode, addedEles){\n                    if (targetNode.length !== 0) {\n                        var source_id = targetNode[0].source().id();\n                        var target_id = targetNode[0].target().id();\n\n                        //get the mid point between source node and target node\n                        var source_position = targetNode[0].source().position();\n                        var target_position = targetNode[0].target().position();\n\n                        this.position = {};\n                        this.position.x = ((source_position.x + target_position.x)/2);\n                        this.position.y = ((source_position.y + target_position.y)/2);\n\n                        if (targetNode[0].source().data().type === \"atom\" && targetNode[0].target().data().type === \"atom\")\n                        {\n                            var scheme = add_scheme(\"Support\");\n                            var scheme_id = scheme.id;\n                            var scheme_content = scheme.name;\n                            //remove the automatically generated edge\n                            targetNode.remove();\n                            this.cy.add([\n                                {group: \"nodes\", data: {id: scheme_id.toString(),\n                                    content: scheme_content, typeshape: \"diamond\" }, classes: \"scheme-label\", locked: false, position: this.position}\n                                    ]);\n                            var edge1 = add_edge(source_id, scheme_id);\n                            var edge2 = add_edge(scheme_id, target_id);\n                            this.cy.add([\n                              { group: \"edges\", data: { id: edge1.id.toString(), source: source_id, target: scheme_id } },\n                              { group: \"edges\", data: { id: edge2.id.toString(), source: scheme_id, target: target_id } }\n                              ]);\n                        } else {\n                            targetNode.remove();\n                            var edge = add_edge(source_id, target_id);\n                            this.cy.add([\n                              { group: \"edges\", data: { id: edge.id.toString(), source: source_id, target: target_id } }\n                              ]);\n                        }\n                        this.updateLocalStorage();\n                    } else {\n                        targetNode.remove();\n                    }\n                }.bind(this)\n            });//edgehandles\n\n      /*\n     *\n     * Set up context menus\n     *\n     * */\n    this.cm = this.cy.contextMenus({\n               menuItems: [\n                    {\n                        id: \"edit-content\",\n                        content: \"edit content\",\n                        selector: \"node[type = \\\"atom\\\"]\",\n                        onClickFunction: function (event) {\n                            let target = event.target || event.cyTarget;\n                            document.getElementById(\"editContentTrigger\").click();\n                             this.setModalValue(target.data().content);\n                            this.edit_atom = target;\n                        }.bind(this),\n                        hasTrailingDivider: false\n                    },\n\n                    {\n                        id: \"edit-metadata\",\n                        content: \"edit metadata\",\n                        selector: \"node[type = \\\"atom\\\"]\",\n                        onClickFunction: function (event) {\n                              let target = event.target || event.cyTarget;\n                              let meta = JSON.stringify(target.data().metadata);\n                              document.getElementById(\"editMetaTrigger\").click();\n                              this.setModalValue(meta);\n                             this.edit_atom = target;\n                         }.bind(this),\n                         hasTrailingDivider: true\n                    },\n                    {\n                        id: \"change-scheme\",\n                        content: \"change scheme\",\n                        selector: \"node[typeshape = \\\"diamond\\\"]\",\n                        onClickFunction: function (event) {\n                            var target = event.target || event.cyTarget;\n                            this.setDropDownValue(target.data().content);\n                            document.getElementById(\"editSchemeTrigger\").click();\n                            this.edit_atom = target;\n                        }.bind(this),\n                        hasTrailingDivider: true\n                    },\n                    {\n                        id: \"remove\",\n                        content: \"remove\",\n                        selector: \"node, edge\",\n                        onClickFunction: function (event) {\n                            var target = event.target || event.cyTarget;\n                            if (this.selected.length !== 0) {\n                                this.selected.forEach(function(node) {\n                                    console.log(node, \"SELECTED\");\n                                    this.deleteNodes(node);\n                                }.bind(this));\n                                this.selected = [];\n                            } else {\n                                if (target.data().type === \"atom\") {\n                                    this.deleteNodes(event);\n                                    target.remove();\n                                } else if (target.data().typeshape === \"diamond\"){\n                                    this.deleteNodes(event);\n                                    target.remove();\n                                } else {\n                                    delete_edge(target.id());\n                                    this.updateLocalStorage();\n                                    target.remove();\n                                }\n                            }\n                        }.bind(this),\n                        hasTrailingDivider: true\n                    },\n                    {\n                        id: \"add-atom\",\n                        content: \"add atom\",\n                        coreAsWell: true,\n\n                        onClickFunction: function (event) {\n                            this.position = event.renderedPosition;\n                         this.setModalValue(\"\");\n                            document.getElementById(\"newAtomTrigger\").click();\n                        }.bind(this)\n                    },\n                    {\n                        id: \"add-scheme\",\n                        content: \"add scheme\",\n                        coreAsWell: true,\n                        onClickFunction: function (event) {\n\n                            this.position = event.position || event.cyPosition;\n                            this.setDropDownValue(\"Support\");\n                                document.getElementById(\"new_scheme\").click();\n                        }.bind(this),\n                        hasTrailingDivider: true\n                    },\n                    {\n                        id: \"redraw\",\n                        content: \"redraw\",\n                        coreAsWell: true,\n                        onClickFunction:  (event) => this.redrawVisualisation(),\n                        hasTrailingDivider: true\n                    },\n                    {\n                        id: \"undo\",\n                        content: \"undo\",\n                        selector: \"node, edge\",\n                        show: true,\n                        coreAsWell: true,\n                        onClickFunction:  (event) => this.undo(),\n                        hasTrailingDivider: false\n                    },\n                    {\n                        id: \"redo\",\n                        content: \"redo\",\n                        selector: \"node, edge\",\n                        show: false,\n                        coreAsWell: true,\n                        onClickFunction: function (event) {\n                          this.redo();\n                          if (this.redo_stack === []) {\n                            this.cm.hideMenuItem(\"redo\");\n                        }\n                        }.bind(this),\n                        hasTrailingDivider: true\n                    },\n                    {\n                      id: \"merge_nodes\",\n                      content: \"merge nodes\",\n                      selector: \"node\",\n                      tooltipText: \"hello\",\n                      show: false,\n                      coreAsWell: true,\n                      onClickFunction:  (event) => this.merge_nodes()\n                    }\n                ],//menuitems\n            });//close context menues\n            \n\n    }//initmonkeyPuzzle\n\n    build_cola_layout( opts ) {\n        var cola_params = {\n            name: \"cola\",\n            animate: true,\n            randomize: true,\n            padding: 100,\n            fit: false,\n            maxSimulationTime: 1500\n        };\n        var i = 0;\n        if (opts !== undefined) {\n            opts.forEach(function(opt) {\n             cola_params[i] = opts[i];\n             ++i;\n         });\n        }\n        return this.cy.makeLayout( cola_params );\n    }\n\n    componentDidMount(){\n       this.initialise_monkeypuzzle();\n       }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n          if(nextProps.cyData !== prevState.cyData){\n              return{cyData: nextProps.cyData};\n              console.log(this.props.cyData, \"props cydata\");\n              this.initialise_monkeypuzzle();\n          }\n         else return null;\n      }\n      componentDidUpdate(prevProps, prevState) {\n  if(prevProps.cyData!==this.props.cyData){\n    //Perform some operation here\n    this.initialise_monkeypuzzle();\n  }\n}\n    render(){\n      return(\n        <div>\n         <div id=\"cy\" onDrop={this.dropHandler} onDragOver={this.dragoverHandler}>\n\n      </div>\n        </div>);\n\n  }\n}\n\nexport default Cytoscape;"]},"metadata":{},"sourceType":"module"}